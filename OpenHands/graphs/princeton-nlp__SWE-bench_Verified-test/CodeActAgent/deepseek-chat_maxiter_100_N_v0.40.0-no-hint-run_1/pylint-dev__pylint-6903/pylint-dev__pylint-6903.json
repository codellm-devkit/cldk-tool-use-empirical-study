{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "pylint-dev__pylint-6903",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "cd",
      "args": [
        "/workspace/pylint-dev__pylint__2.15"
      ],
      "phase": "general",
      "step_indices": [
        0,
        3,
        4
      ],
      "id": "0:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "run.py"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "1:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "view_range": [
          30,
          65
        ]
      },
      "phase": "localization",
      "step_indices": [
        1,
        13
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "old_str": "        # For AWS, gives correct value * 1024.\n        avail_cpu = int(cpu_shares / 1024)",
        "new_str": "        # For AWS, gives correct value * 1024.\n        avail_cpu = max(1, int(cpu_shares / 1024))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "grep",
      "args": [
        "tests/"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:grep"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_query_cpu.py",
        "file_text": "\nimport unittest\nfrom unittest.mock import patch, mock_open\nfrom pylint.lint.run import _query_cpu\n\nclass TestQueryCPU(unittest.TestCase):\n    @patch('pathlib.Path.is_file')\n    def test_low_cpu_shares(self, mock_is_file):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        mock_is_file.return_value = True\n        test_data = {\n            '/sys/fs/cgroup/cpu/cpu.cfs_quota_us': '-1',\n            '/sys/fs/cgroup/cpu/cpu.shares': '2'\n        }\n        \n        def mock_open_func(path, *args, **kwargs):\n            return mock_open(read_data=test_data[path])(path, *args, **kwargs)\n            \n        with patch('builtins.open', mock_open_func):\n            result = _query_cpu()\n            self.assertEqual(result, 1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
      },
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "args": [
        "/workspace"
      ],
      "phase": "general",
      "step_indices": [
        6,
        14,
        16,
        18,
        20,
        22,
        25
      ],
      "id": "6:cd"
    },
    {
      "label": "python3",
      "args": [
        "test_query_cpu.py"
      ],
      "phase": "general",
      "step_indices": [
        6,
        14,
        16,
        18,
        20,
        22,
        25
      ],
      "id": "7:python3"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "old_str": "\n    # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n    avail_cpu = int(cpu_quota / cpu_period)\nelif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n    with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n        cpu_shares = int(file.read().rstrip())\n    # For AWS, gives correct value * 1024.\n    avail_cpu = int(cpu_shares / 1024)\nreturn avail_cpu\n",
        "new_str": "\n    # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n    avail_cpu = max(1, int(cpu_quota / cpu_period))\nelif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n    with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n        cpu_shares = int(file.read().rstrip())\n    # For AWS, gives correct value * 1024.\n    avail_cpu = max(1, int(cpu_shares / 1024))\nreturn max(1, avail_cpu) if avail_cpu is not None else None\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "old_str": "\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = int(cpu_shares / 1024)\n    return avail_cpu\n",
        "new_str": "\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = max(1, int(cpu_quota / cpu_period))\n    elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = max(1, int(cpu_shares / 1024))\n    return max(1, avail_cpu) if avail_cpu is not None else None\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "old_str": "        avail_cpu = int(cpu_quota / cpu_period)",
        "new_str": "        avail_cpu = max(1, int(cpu_quota / cpu_period))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "old_str": "        avail_cpu = int(cpu_shares / 1024)",
        "new_str": "        avail_cpu = max(1, int(cpu_shares / 1024))",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "old_str": "        avail_cpu = int(cpu_shares / 1024)  # For AWS, gives correct value * 1024.",
        "new_str": "        avail_cpu = max(1, int(cpu_shares / 1024))  # For AWS, gives correct value * 1024.",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "view_range": [
          55,
          65
        ]
      },
      "phase": "localization",
      "step_indices": [
        12
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_query_cpu.py",
        "old_str": "\nimport unittest\nfrom unittest.mock import patch, mock_open\nfrom pylint.lint.run import _query_cpu\n\nclass TestQueryCPU(unittest.TestCase):\n    @patch('pathlib.Path.is_file')\n    def test_low_cpu_shares(self, mock_is_file):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        mock_is_file.return_value = True\n        test_data = {\n            '/sys/fs/cgroup/cpu/cpu.cfs_quota_us': '-1',\n            '/sys/fs/cgroup/cpu/cpu.shares': '2'\n        }\n        \n        def mock_open_func(path, *args, **kwargs):\n            return mock_open(read_data=test_data[path])(path, *args, **kwargs)\n            \n        with patch('builtins.open', mock_open_func):\n            result = _query_cpu()\n            self.assertEqual(result, 1)\n",
        "new_str": "\nimport unittest\nfrom unittest.mock import patch, mock_open\nfrom pathlib import Path\nfrom pylint.lint.run import _query_cpu\n\nclass TestQueryCPU(unittest.TestCase):\n    @patch('pylint.lint.run.Path.is_file')\n    def test_low_cpu_shares(self, mock_is_file):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        def is_file_side_effect(path):\n            return str(path) in [\n                '/sys/fs/cgroup/cpu/cpu.cfs_quota_us',\n                '/sys/fs/cgroup/cpu/cpu.shares'\n            ]\n        mock_is_file.side_effect = is_file_side_effect\n        \n        test_data = {\n            '/sys/fs/cgroup/cpu/cpu.cfs_quota_us': '-1\\n',\n            '/sys/fs/cgroup/cpu/cpu.shares': '2\\n'\n        }\n        \n        with patch('builtins.open', mock_open()) as mock_file:\n            mock_file.side_effect = lambda path, *args, **kwargs: mock_open(\n                read_data=test_data[str(path)]\n            )(path, *args, **kwargs)\n            \n            result = _query_cpu()\n            self.assertEqual(result, 1)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_query_cpu.py",
        "old_str": "\n    @patch('pylint.lint.run.Path.is_file')\n    def test_low_cpu_shares(self, mock_is_file):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        def is_file_side_effect(path):\n            return str(path) in [\n                '/sys/fs/cgroup/cpu/cpu.cfs_quota_us',\n                '/sys/fs/cgroup/cpu/cpu.shares'\n            ]\n        mock_is_file.side_effect = is_file_side_effect\n",
        "new_str": "\n    @patch('pylint.lint.run.Path')\n    def test_low_cpu_shares(self, mock_path):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        # Setup mock Path behavior\n        mock_path.return_value.is_file.side_effect = lambda: True\n        mock_path.return_value.__str__.side_effect = lambda: '/sys/fs/cgroup/cpu/cpu.shares'\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "old_str": "    return avail_cpu",
        "new_str": "    return max(1, avail_cpu) if avail_cpu is not None else None",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/lint/run.py",
        "old_str": "\ndef _query_cpu() -> int | None:\n    \"\"\"Try to determine number of CPUs allotted in a docker container.\n\n    This is based on discussion and copied from suggestions in\n    https://bugs.python.org/issue36054.\n    \"\"\"\n    cpu_quota, avail_cpu = None, None\n\n    if Path(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = max(1, int(cpu_quota / cpu_period))\n    elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = max(1, int(cpu_shares / 1024))\n    return max(1, avail_cpu) if avail_cpu is not None else None\n",
        "new_str": "\ndef _query_cpu() -> int:\n    \"\"\"Determine number of CPUs allotted in container environments.\n    \n    Returns:\n        int: Always returns at least 1 CPU to prevent multiprocessing errors.\n    \"\"\"\n    # Try cgroup v1 cpu quota first\n    try:\n        if Path(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n            with open(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as f:\n                quota = int(f.read())\n            if quota > 0 and Path(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file():\n                with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as f:\n                    period = int(f.read())\n                return max(1, quota // period)\n    except (ValueError, IOError):\n        pass\n\n    # Fall back to cpu shares\n    try:\n        if Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n            with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as f:\n                shares = int(f.read())\n            return max(1, shares // 1024)\n    except (ValueError, IOError):\n        pass\n\n    # Final fallback to at least 1 CPU\n    return 1\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_query_cpu.py",
        "old_str": "\n\n    @patch('pylint.lint.run.Path')\n    def test_low_cpu_shares(self, mock_path):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        # Setup mock Path behavior\n        mock_path.return_value.is_file.side_effect = lambda: True\n        mock_path.return_value.__str__.side_effect = lambda: '/sys/fs/cgroup/cpu/cpu.shares'\n        \n        test_data = {\n            '/sys/fs/cgroup/cpu/cpu.cfs_quota_us': '-1\\n',\n            '/sys/fs/cgroup/cpu/cpu.shares': '2\\n'\n        }\n        \n        with patch('builtins.open', mock_open()) as mock_file:\n            mock_file.side_effect = lambda path, *args, **kwargs: mock_open(\n                read_data=test_data[str(path)]\n            )(path, *args, **kwargs)\n            \n            result = _query_cpu()\n            self.assertEqual(result, 1)\n\n",
        "new_str": "\n\n    @patch('pylint.lint.run.Path')\n    @patch('builtins.open')\n    def test_low_cpu_shares(self, mock_open, mock_path):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        # Configure Path mock\n        mock_path.return_value.is_file.return_value = True\n        \n        # Configure file content mock\n        mock_file = mock_open()\n        mock_file.return_value.read.return_value = '2\\n'\n        mock_open.return_value = mock_file\n        \n        result = _query_cpu()\n        self.assertEqual(result, 1)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_query_cpu.py",
        "old_str": "    @patch('pylint.lint.run.Path')\n    def test_low_cpu_shares(self, mock_path):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        # Setup mock Path behavior\n        mock_path.return_value.is_file.side_effect = lambda: True\n        mock_path.return_value.__str__.side_effect = lambda: '/sys/fs/cgroup/cpu/cpu.shares'\n        \n        test_data = {\n            '/sys/fs/cgroup/cpu/cpu.cfs_quota_us': '-1\\n',\n            '/sys/fs/cgroup/cpu/cpu.shares': '2\\n'\n        }\n        \n        with patch('builtins.open', mock_open()) as mock_file:\n            mock_file.side_effect = lambda path, *args, **kwargs: mock_open(\n                read_data=test_data[str(path)]\n            )(path, *args, **kwargs)\n            \n            result = _query_cpu()\n            self.assertEqual(result, 1)",
        "new_str": "    @patch('pylint.lint.run.Path')\n    @patch('builtins.open')\n    def test_low_cpu_shares(self, mock_open, mock_path):\n        \"\"\"Test that low cpu_shares returns at least 1\"\"\"\n        # Configure Path mock\n        mock_path.return_value.is_file.return_value = True\n        \n        # Configure file content mock\n        mock_file = mock_open()\n        mock_file.return_value.read.return_value = '2\\n'\n        mock_open.return_value = mock_file\n        \n        result = _query_cpu()\n        self.assertEqual(result, 1)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "19:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:find",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "0:cd",
      "target": "4:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "0:cd",
      "target": "5:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:find",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "6:cd",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:grep",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\ncreate",
      "target": "6:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python3",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python3",
      "key": 1
    },
    {
      "label": "16",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python3",
      "key": 2
    },
    {
      "label": "18",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python3",
      "key": 3
    },
    {
      "label": "20",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python3",
      "key": 4
    },
    {
      "label": "22",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python3",
      "key": 5
    },
    {
      "label": "25",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python3",
      "key": 6
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:python3",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "7:python3",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "7:python3",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "7:python3",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "7:python3",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "7:python3",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "6:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "6:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "6:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "6:cd",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "6:cd",
      "key": 0
    }
  ]
}