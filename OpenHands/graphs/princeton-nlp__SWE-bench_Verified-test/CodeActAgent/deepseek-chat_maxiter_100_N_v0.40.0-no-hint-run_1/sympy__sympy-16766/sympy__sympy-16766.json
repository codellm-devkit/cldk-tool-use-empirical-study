{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "sympy__sympy-16766",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "easy",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "cd",
      "args": [
        "/workspace/sympy__sympy__1.5"
      ],
      "phase": "general",
      "step_indices": [
        0,
        1,
        3,
        5
      ],
      "id": "0:cd"
    },
    {
      "label": "grep",
      "args": [
        "setup.py"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "1:grep"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.5/sympy/printing/pycode.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "sympy/printing/pycode.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:grep"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.5/sympy/printing/pycode.py",
        "old_str": "class PythonCodePrinter(AbstractPythonCodePrinter):\n\n    def _print_sign(self, e):\n        return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n            f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n\n    def _print_Not(self, expr):\n        PREC = precedence(expr)\n        return self._operators['not'] + self.parenthesize(expr.args[0], PREC)",
        "new_str": "class PythonCodePrinter(AbstractPythonCodePrinter):\n\n    def _print_Indexed(self, expr):\n        base, *index = expr.args\n        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n\n    def _print_sign(self, e):\n        return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n            f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n\n    def _print_Not(self, expr):\n        PREC = precedence(expr)\n        return self._operators['not'] + self.parenthesize(expr.args[0], PREC)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "args": [],
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "6:python"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:grep",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "0:cd",
      "target": "2:grep",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "0:cd",
      "target": "4:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "0:cd",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:grep",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:grep",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:grep",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    }
  ]
}