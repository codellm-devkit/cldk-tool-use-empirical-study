{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-13568",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "cd",
      "args": [
        "/workspace/django__django__3.2"
      ],
      "phase": "general",
      "step_indices": [
        0,
        1,
        2,
        5,
        6
      ],
      "id": "0:cd"
    },
    {
      "label": "python",
      "args": [
        "test",
        "auth"
      ],
      "phase": "verification",
      "step_indices": [
        0
      ],
      "id": "1:python"
    },
    {
      "label": "./tests/runtests.py",
      "args": [
        "auth"
      ],
      "phase": "general",
      "step_indices": [
        1,
        5
      ],
      "id": "2:./tests/runtests.py"
    },
    {
      "label": "grep",
      "args": [
        "django/contrib/auth/"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "3:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__3.2/django/contrib/auth/checks.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.2/django/contrib/auth/checks.py",
        "old_str": "    # Check that the username field is unique\n    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n        if (settings.AUTHENTICATION_BACKENDS ==\n                ['django.contrib.auth.backends.ModelBackend']):\n            errors.append(\n                checks.Error(\n                    \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    obj=cls,\n                    id='auth.E003',\n                )\n            )\n        else:\n            errors.append(\n                checks.Warning(\n                    \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n                    obj=cls,\n                    id='auth.W004',\n                )\n            )",
        "new_str": "    # Check that the username field is unique\n    field = cls._meta.get_field(cls.USERNAME_FIELD)\n    has_unique_constraint = any(\n        isinstance(constraint, models.UniqueConstraint) and\n        cls.USERNAME_FIELD in constraint.fields\n        for constraint in cls._meta.constraints\n    )\n    if not field.unique and not has_unique_constraint:\n        if (settings.AUTHENTICATION_BACKENDS ==\n                ['django.contrib.auth.backends.ModelBackend']):\n            errors.append(\n                checks.Error(\n                    \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    obj=cls,\n                    id='auth.E003',\n                )\n            )\n        else:\n            errors.append(\n                checks.Warning(\n                    \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n                    obj=cls,\n                    id='auth.W004',\n                )\n            )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "./tests/runtests.py",
      "args": [
        "django.contrib.auth.checks"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "6:./tests/runtests.py"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "0:cd",
      "target": "2:./tests/runtests.py",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "0:cd",
      "target": "2:./tests/runtests.py",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "0:cd",
      "target": "3:grep",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "0:cd",
      "target": "6:./tests/runtests.py",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:python",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:./tests/runtests.py",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "2:./tests/runtests.py",
      "target": "0:cd",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:grep",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    }
  ]
}