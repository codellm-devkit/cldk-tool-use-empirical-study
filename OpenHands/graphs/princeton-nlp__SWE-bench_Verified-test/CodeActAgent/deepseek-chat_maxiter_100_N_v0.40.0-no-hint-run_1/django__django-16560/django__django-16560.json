{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-16560",
    "difficulty": "1-4 hours",
    "golden_patch_difficulty": "hard",
    "golden_files_change": 2,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        4
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/django__django__5.0"
      ],
      "phase": "general",
      "step_indices": [
        1,
        3
      ],
      "id": "1:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "*constraint*test*.py",
        "*constraint*.py"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "django/db/models/constraints.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:grep"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "class BaseConstraint:\n    default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n    violation_error_message = None\n\n    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n    # def __init__(self, *, name, violation_error_message=None):\n    def __init__(self, *args, name=None, violation_error_message=None):\n        # RemovedInDjango60Warning.\n        if name is None and not args:\n            raise TypeError(\n                f\"{self.__class__.__name__}.__init__() missing 1 required keyword-only \"\n                f\"argument: 'name'\"\n            )\n        self.name = name\n        if violation_error_message is not None:\n            self.violation_error_message = violation_error_message\n        else:\n            self.violation_error_message = self.default_violation_error_message\n        # RemovedInDjango60Warning.\n        if args:\n            warnings.warn(\n                f\"Passing positional arguments to {self.__class__.__name__} is \"\n                f\"deprecated.\",\n                RemovedInDjango60Warning,\n                stacklevel=2,\n            )\n            for arg, attr in zip(args, [\"name\", \"violation_error_message\"]):\n                if arg:\n                    setattr(self, attr, arg)",
        "new_str": "class BaseConstraint:\n    default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n    violation_error_message = None\n    violation_error_code = None\n\n    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):\n    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n        # RemovedInDjango60Warning.\n        if name is None and not args:\n            raise TypeError(\n                f\"{self.__class__.__name__}.__init__() missing 1 required keyword-only \"\n                f\"argument: 'name'\"\n            )\n        self.name = name\n        if violation_error_message is not None:\n            self.violation_error_message = violation_error_message\n        else:\n            self.violation_error_message = self.default_violation_error_message\n        self.violation_error_code = violation_error_code\n        # RemovedInDjango60Warning.\n        if args:\n            warnings.warn(\n                f\"Passing positional arguments to {self.__class__.__name__} is \"\n                f\"deprecated.\",\n                RemovedInDjango60Warning,\n                stacklevel=2,\n            )\n            for arg, attr in zip(args, [\"name\", \"violation_error_message\", \"violation_error_code\"]):\n                if arg:\n                    setattr(self, attr, arg)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "\n    def get_violation_error_message(self):\n        return self.violation_error_message % {\"name\": self.name}\n\n    def deconstruct(self):\n        path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n        path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n        kwargs = {\"name\": self.name}\n        if (\n            self.violation_error_message is not None\n            and self.violation_error_message != self.default_violation_error_message\n        ):\n            kwargs[\"violation_error_message\"] = self.violation_error_message\n        return (path, (), kwargs)\n",
        "new_str": "\n    def get_violation_error_message(self):\n        message = self.violation_error_message % {\"name\": self.name}\n        if self.violation_error_code is not None:\n            return ValidationError(message, code=self.violation_error_code)\n        return message\n\n    def deconstruct(self):\n        path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n        path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n        kwargs = {\"name\": self.name}\n        if (\n            self.violation_error_message is not None\n            and self.violation_error_message != self.default_violation_error_message\n        ):\n            kwargs[\"violation_error_message\"] = self.violation_error_message\n        if self.violation_error_code is not None:\n            kwargs[\"violation_error_code\"] = self.violation_error_code\n        return (path, (), kwargs)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n        try:\n            if not Q(self.check).check(against, using=using):\n                raise ValidationError(self.get_violation_error_message())\n        except FieldError:\n            pass\n",
        "new_str": "\n    def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n        against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n        try:\n            if not Q(self.check).check(against, using=using):\n                error = self.get_violation_error_message()\n                raise error if isinstance(error, ValidationError) else ValidationError(error)\n        except FieldError:\n            pass\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "\n                if queryset.exists():\n                    if self.expressions:\n                        raise ValidationError(self.get_violation_error_message())\n                    raise ValidationError(\n                        {\n                            field_name: ValidationError(\n                                self.get_violation_error_message(),\n                                code=\"unique\",\n                            )\n                            for field_name in self.fields\n                        }\n                    )\n",
        "new_str": "\n                if queryset.exists():\n                    if self.expressions:\n                        error = self.get_violation_error_message()\n                        raise error if isinstance(error, ValidationError) else ValidationError(error)\n                    error = self.get_violation_error_message()\n                    code = self.violation_error_code if hasattr(self, 'violation_error_code') else \"unique\"\n                    raise ValidationError(\n                        {\n                            field_name: ValidationError(\n                                error if isinstance(error, str) else error.message,\n                                code=code,\n                            )\n                            for field_name in self.fields\n                        }\n                    )\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "\n                if queryset.exists():\n                    if self.expressions:\n                        raise ValidationError(self.get_violation_error_message())\n                    raise ValidationError(\n                        {\n                            field_name: ValidationError(\n                                self.get_violation_error_message(),\n                                code=\"unique\",\n                            )\n                            for field_name in self.fields\n                        }\n                    )\n",
        "new_str": "\n                if queryset.exists():\n                    if self.expressions:\n                        error = self.get_violation_error_message()\n                        raise error if isinstance(error, ValidationError) else ValidationError(error)\n                    error = self.get_violation_error_message()\n                    code = self.violation_error_code if self.violation_error_code is not None else \"unique\"\n                    raise ValidationError(\n                        {\n                            field_name: ValidationError(\n                                error if isinstance(error, str) else error.message,\n                                code=code,\n                            )\n                            for field_name in self.fields\n                        }\n                    )\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "view_range": [
          380,
          410
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "\n                if queryset.exists():\n                    if self.expressions:\n                        raise ValidationError(self.get_violation_error_message())\n                    # When fields are defined, use the unique_error_message() for\n                    # backward compatibility.\n                    for model, constraints in instance.get_constraints():\n                        for constraint in constraints:\n                            if constraint is self:\n                                raise ValidationError(\n                                    instance.unique_error_message(model, self.fields)\n",
        "new_str": "\n                if queryset.exists():\n                    if self.expressions:\n                        error = self.get_violation_error_message()\n                        raise error if isinstance(error, ValidationError) else ValidationError(error)\n                    # When fields are defined, use the unique_error_message() for\n                    # backward compatibility.\n                    for model, constraints in instance.get_constraints():\n                        for constraint in constraints:\n                            if constraint is self:\n                                error = self.get_violation_error_message()\n                                code = self.violation_error_code if self.violation_error_code is not None else \"unique\"\n                                raise ValidationError(\n                                    instance.unique_error_message(model, self.fields),\n                                    code=code\n                                )\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "\n                    if self.expressions:\n                        raise ValidationError(self.get_violation_error_message())\n",
        "new_str": "\n                    if self.expressions:\n                        error = self.get_violation_error_message()\n                        raise error if isinstance(error, ValidationError) else ValidationError(error)\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "view_range": [
          390,
          400
        ]
      },
      "phase": "localization",
      "step_indices": [
        13
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "        if not self.condition:\n            if queryset.exists():\n                if self.expressions:\n                    raise ValidationError(self.get_violation_error_message())\n                # When fields are defined, use the unique_error_message() for\n                # backward compatibility.\n                for model, constraints in instance.get_constraints():\n                    for constraint in constraints:",
        "new_str": "        if not self.condition:\n            if queryset.exists():\n                if self.expressions:\n                    error = self.get_violation_error_message()\n                    raise error if isinstance(error, ValidationError) else ValidationError(error)\n                # When fields are defined, use the unique_error_message() for\n                # backward compatibility.\n                for model, constraints in instance.get_constraints():\n                    for constraint in constraints:",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__5.0/django/db/models/constraints.py",
        "old_str": "\n                            raise ValidationError(\n                                instance.unique_error_message(model, self.fields)\n                            )\n",
        "new_str": "\n                            error = self.get_violation_error_message()\n                            code = self.violation_error_code if self.violation_error_code is not None else \"unique\"\n                            raise ValidationError(\n                                instance.unique_error_message(model, self.fields),\n                                code=code\n                            )\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "15:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "0:empty action",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "4:grep",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:find",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:grep",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "10:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    }
  ]
}