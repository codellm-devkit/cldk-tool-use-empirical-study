{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pydata__xarray-3151",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        7
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/pydata__xarray__0.12"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "1:cd"
    },
    {
      "label": "ls",
      "args": [],
      "phase": "general",
      "step_indices": [
        1,
        2
      ],
      "id": "2:ls"
    },
    {
      "label": "grep",
      "args": [
        "xarray/tests/test_combine.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "3:grep"
    },
    {
      "label": "grep",
      "args": [
        "xarray/"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "4:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pydata__xarray__0.12/xarray/core/combine.py"
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pydata__xarray__0.12/xarray/core/combine.py",
        "view_range": [
          50,
          85
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pydata__xarray__0.12/xarray/core/combine.py",
        "old_str": "            # If dimension coordinate values are same on every dataset then\n            # should be leaving this dimension alone (it's just a \"bystander\")\n            if not all(index.equals(indexes[0]) for index in indexes[1:]):\n\n                # Infer order datasets should be arranged in along this dim\n                concat_dims.append(dim)\n\n                if all(index.is_monotonic_increasing for index in indexes):\n                    ascending = True\n                elif all(index.is_monotonic_decreasing for index in indexes):\n                    ascending = False\n                else:\n                    raise ValueError(\"Coordinate variable {} is neither \"\n                                     \"monotonically increasing nor \"\n                                     \"monotonically decreasing on all datasets\"\n                                     .format(dim))",
        "new_str": "            # If dimension coordinate values are same on every dataset then\n            # should be leaving this dimension alone (it's just a \"bystander\")\n            if not all(index.equals(indexes[0]) for index in indexes[1:]):\n                # Infer order datasets should be arranged in along this dim\n                concat_dims.append(dim)\n\n                if all(index.is_monotonic_increasing for index in indexes):\n                    ascending = True\n                elif all(index.is_monotonic_decreasing for index in indexes):\n                    ascending = False\n                else:\n                    raise ValueError(\"Coordinate variable {} is neither \"\n                                     \"monotonically increasing nor \"\n                                     \"monotonically decreasing on all datasets\"\n                                     .format(dim))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "complex_command",
      "args": [
        "cat << 'EOF' > test_combine.py\nimport xarray as xr\nimport numpy as np\n\nyCoord = ['a', 'c', 'b']  # non-monotonic coordinates\nds1 = xr.Dataset(\n    data_vars=dict(data=(['x', 'y'], np.random.rand(3, 3)),\n    coords=dict(x=[1, 2, 3], y=yCoord)\nds2 = xr.Dataset(\n    data_vars=dict(data=(['x', 'y'], np.random.rand(4, 3)),\n    coords=dict(x=[4, 5, 6, 7], y=yCoord)\nds3 = xr.combine_by_coords((ds1, ds2))\nprint(\"Successfully combined datasets with identical non-monotonic coordinates\")\nEOF\npython test_combine.py"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "8:complex_command"
    },
    {
      "label": "complex_command",
      "args": [
        "cat << 'EOF' > test_combine.py\nimport xarray as xr\nimport numpy as np\n\nyCoord = ['a', 'c', 'b']  # non-monotonic coordinates\nds1 = xr.Dataset(\n    data_vars=dict(\n        data=(['x', 'y'], np.random.rand(3, 3))\n    ),\n    coords=dict(\n        x=[1, 2, 3],\n        y=yCoord\n    )\n)\nds2 = xr.Dataset(\n    data_vars=dict(\n        data=(['x', 'y'], np.random.rand(4, 3))\n    ),\n    coords=dict(\n        x=[4, 5, 6, 7],\n        y=yCoord\n    )\n)\nds3 = xr.combine_by_coords((ds1, ds2))\nprint(\"Successfully combined datasets with identical non-monotonic coordinates\")\nEOF\npython test_combine.py"
      ],
      "phase": "general",
      "step_indices": [
        10
      ],
      "id": "9:complex_command"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "0:empty action",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:ls",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:ls",
      "target": "2:ls",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:ls",
      "target": "3:grep",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:grep",
      "target": "4:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:grep",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:complex_command",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:complex_command",
      "target": "9:complex_command",
      "key": 0
    }
  ]
}