{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pylint-dev__pylint-6528",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 2,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "cd",
      "args": [
        "/workspace/pylint-dev__pylint__2.14"
      ],
      "phase": "general",
      "step_indices": [
        0,
        18
      ],
      "id": "0:cd"
    },
    {
      "label": "ls",
      "args": [],
      "phase": "general",
      "step_indices": [
        0,
        2,
        2,
        2,
        4
      ],
      "id": "1:ls"
    },
    {
      "label": "cat",
      "args": [
        "tox.ini"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:cat"
    },
    {
      "label": "head",
      "args": [
        "tests/__init__.py"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "3:head"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/tests/test_functional_directories.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "tests/functional",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "5:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/tests/functional/e/.#emacs_file_lock.py"
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py"
      },
      "phase": "localization",
      "step_indices": [
        6,
        8
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py",
        "view_range": [
          120,
          135
        ]
      },
      "phase": "localization",
      "step_indices": [
        7,
        12
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py",
        "old_str": "    if has_init or is_namespace or is_directory:\n            for subfilepath in modutils.get_module_files(\n                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n            ):\n                if filepath == subfilepath:\n                    continue\n                if _is_in_ignore_list_re(\n                    os.path.basename(subfilepath), ignore_list_re\n                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                    continue",
        "new_str": "    def _should_ignore(path: str, name: str) -> bool:\n        \"\"\"Check if a file should be ignored based on all ignore patterns.\"\"\"\n        return (name in ignore_list or \n                _is_in_ignore_list_re(name, ignore_list_re) or \n                _is_in_ignore_list_re(path, ignore_list_paths_re))\n\n    if has_init or is_namespace or is_directory:\n        # First filter by ignore patterns during file discovery\n        filtered_files = []\n        for subfilepath in modutils.get_module_files(\n            os.path.dirname(filepath), [], list_all=is_namespace\n        ):\n            if filepath == subfilepath:\n                continue\n            name = os.path.basename(subfilepath)\n            if not _should_ignore(subfilepath, name):\n                filtered_files.append(subfilepath)\n\n        # Then process the filtered files\n        for subfilepath in filtered_files:",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py",
        "old_str": "\n    if has_init or is_namespace or is_directory:\n            for subfilepath in modutils.get_module_files(\n                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n            ):\n                if filepath == subfilepath:\n                    continue\n                if _is_in_ignore_list_re(\n                    os.path.basename(subfilepath), ignore_list_re\n                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                    continue\n",
        "new_str": "\n    def _should_ignore(path: str, name: str) -> bool:\n        \"\"\"Check if a file should be ignored based on all ignore patterns.\"\"\"\n        return (name in ignore_list or \n                _is_in_ignore_list_re(name, ignore_list_re) or \n                _is_in_ignore_list_re(path, ignore_list_paths_re))\n\n    if has_init or is_namespace or is_directory:\n        # First filter by ignore patterns during file discovery\n        filtered_files = []\n        for subfilepath in modutils.get_module_files(\n            os.path.dirname(filepath), [], list_all=is_namespace\n        ):\n            if filepath == subfilepath:\n                continue\n            name = os.path.basename(subfilepath)\n            if not _should_ignore(subfilepath, name):\n                filtered_files.append(subfilepath)\n\n        # Then process the filtered files\n        for subfilepath in filtered_files:\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py",
        "old_str": "        if has_init or is_namespace or is_directory:\n            for subfilepath in modutils.get_module_files(\n                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n            ):\n                if filepath == subfilepath:\n                    continue\n                if _is_in_ignore_list_re(\n                    os.path.basename(subfilepath), ignore_list_re\n                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                    continue",
        "new_str": "        def _should_ignore(path: str, name: str) -> bool:\n            \"\"\"Check if a file should be ignored based on all ignore patterns.\"\"\"\n            return (name in ignore_list or \n                    _is_in_ignore_list_re(name, ignore_list_re) or \n                    _is_in_ignore_list_re(path, ignore_list_paths_re))\n\n        if has_init or is_namespace or is_directory:\n            # First filter by ignore patterns during file discovery\n            filtered_files = []\n            for subfilepath in modutils.get_module_files(\n                os.path.dirname(filepath), [], list_all=is_namespace\n            ):\n                if filepath == subfilepath:\n                    continue\n                name = os.path.basename(subfilepath)\n                if not _should_ignore(subfilepath, name):\n                    filtered_files.append(subfilepath)\n\n            # Then process the filtered files\n            for subfilepath in filtered_files:",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py",
        "old_str": "\n        def _should_ignore(path: str, name: str) -> bool:\n        \"\"\"Check if a file should be ignored based on all ignore patterns.\"\"\"\n        return (name in ignore_list or \n                _is_in_ignore_list_re(name, ignore_list_re) or \n                _is_in_ignore_list_re(path, ignore_list_paths_re))\n\n    if has_init or is_namespace or is_directory:\n        # First filter by ignore patterns during file discovery\n        filtered_files = []\n        for subfilepath in modutils.get_module_files(\n            os.path.dirname(filepath), [], list_all=is_namespace\n",
        "new_str": "\n        if has_init or is_namespace or is_directory:\n            for subfilepath in modutils.get_module_files(\n                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n            ):\n                if filepath == subfilepath:\n                    continue\n                if _is_in_ignore_list_re(\n                    os.path.basename(subfilepath), ignore_list_re\n                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                    continue\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py",
        "view_range": [
          120,
          140
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py",
        "old_str": "\n        if has_init or is_namespace or is_directory:\n            for subfilepath in modutils.get_module_files(\n                os.path.dirname(filepath), ignore_list, list_all=is_namespace\n            ):\n                if filepath == subfilepath:\n                    continue\n                if _is_in_ignore_list_re(\n                    os.path.basename(subfilepath), ignore_list_re\n                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                    continue\n        ):\n            if filepath == subfilepath:\n                continue\n            name = os.path.basename(subfilepath)\n            if not _should_ignore(subfilepath, name):\n                filtered_files.append(subfilepath)\n",
        "new_str": "\n        def _should_ignore(path: str, name: str) -> bool:\n            \"\"\"Check if a file should be ignored based on all ignore patterns.\"\"\"\n            return (name in ignore_list or \n                    _is_in_ignore_list_re(name, ignore_list_re) or \n                    _is_in_ignore_list_re(path, ignore_list_paths_re))\n\n        if has_init or is_namespace or is_directory:\n            # First filter by ignore patterns during file discovery\n            filtered_files = []\n            for subfilepath in modutils.get_module_files(\n                os.path.dirname(filepath), [], list_all=is_namespace\n            ):\n                if filepath == subfilepath:\n                    continue\n                name = os.path.basename(subfilepath)\n                if not _should_ignore(subfilepath, name):\n                    filtered_files.append(subfilepath)\n\n            # Then process the filtered files\n            for subfilepath in filtered_files:\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.14/pylint/lint/expand_modules.py",
        "old_str": "\n\n            # Then process the filtered files\n            for subfilepath in filtered_files:\n\n        # Then process the filtered files\n        for subfilepath in filtered_files:\n\n                modpath = _modpath_from_file(\n",
        "new_str": "\n\n            # Process the filtered files\n            for subfilepath in filtered_files:\n                modpath = _modpath_from_file(\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "complex_command",
      "args": [
        "cd /workspace/pylint-dev__pylint__2.14 &amp;&amp;\nmkdir -p test_ignore/.hidden_dir &amp;&amp;\necho \"# test file\" > test_ignore/.hidden_dir/hidden.py &amp;&amp;\necho \"# test file\" > test_ignore/visible.py &amp;&amp;\npython3 -m pylint --recursive=y --ignore=.hidden_dir test_ignore 2>&1 | grep \"hidden.py\" || echo \"Test passed - hidden file properly ignored\""
      ],
      "phase": "general",
      "step_indices": [
        17
      ],
      "id": "16:complex_command"
    },
    {
      "label": "mkdir",
      "args": [],
      "phase": "general",
      "step_indices": [
        18
      ],
      "id": "17:mkdir"
    },
    {
      "label": "echo",
      "args": [
        "# test file",
        ">",
        "test_ignore/.hidden_dir/hidden.py"
      ],
      "phase": "general",
      "step_indices": [
        18
      ],
      "id": "18:echo"
    },
    {
      "label": "echo",
      "args": [
        "# test file",
        ">",
        "test_ignore/visible.py"
      ],
      "phase": "general",
      "step_indices": [
        18
      ],
      "id": "19:echo"
    },
    {
      "label": "python3",
      "args": [
        "test_ignore",
        "2>&1",
        "|",
        "grep",
        "hidden.py"
      ],
      "phase": "general",
      "step_indices": [
        19,
        20
      ],
      "id": "20:python3"
    },
    {
      "label": "echo",
      "args": [
        "Test passed - hidden file properly ignored by path pattern"
      ],
      "phase": "general",
      "step_indices": [
        19
      ],
      "id": "21:echo"
    },
    {
      "label": "echo",
      "args": [
        "Test passed - hidden file properly ignored by regex pattern"
      ],
      "phase": "general",
      "step_indices": [
        20
      ],
      "id": "22:echo"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:ls",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "0:cd",
      "target": "17:mkdir",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:ls",
      "target": "2:cat",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:ls",
      "target": "1:ls",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:ls",
      "target": "1:ls",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:ls",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:ls",
      "target": "5:grep",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "2:cat",
      "target": "3:head",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:head",
      "target": "1:ls",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "1:ls",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:grep",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "7:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "13:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:complex_command",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "16:complex_command",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "17:mkdir",
      "target": "18:echo",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "18:echo",
      "target": "19:echo",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "19:echo",
      "target": "20:python3",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "20:python3",
      "target": "21:echo",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "20:python3",
      "target": "22:echo",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "21:echo",
      "target": "20:python3",
      "key": 0
    }
  ]
}