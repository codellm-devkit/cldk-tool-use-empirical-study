{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pylint-dev__pylint-4661",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 2,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        6,
        7
      ],
      "id": "0:empty action"
    },
    {
      "label": "find",
      "args": [
        "/workspace/pylint-dev__pylint__2.10",
        "1",
        "f",
        "readme*",
        "contributing*",
        "test*",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "1:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.10/README.rst"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/pylint-dev__pylint__2.10"
      ],
      "phase": "general",
      "step_indices": [
        3,
        4,
        12
      ],
      "id": "3:cd"
    },
    {
      "label": "python",
      "args": [
        "tests/"
      ],
      "phase": "verification",
      "step_indices": [
        3,
        12
      ],
      "id": "4:python"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "5:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py"
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py",
        "old_str": "\nUSER_HOME = os.path.expanduser(\"~\")\nif \"PYLINTHOME\" in os.environ:\n    PYLINT_HOME = os.environ[\"PYLINTHOME\"]\n    if USER_HOME == \"~\":\n        USER_HOME = os.path.dirname(PYLINT_HOME)\nelif USER_HOME == \"~\":\n    PYLINT_HOME = \".pylint.d\"\nelse:\n    PYLINT_HOME = os.path.join(USER_HOME, \".pylint.d\")\n",
        "new_str": "\nfrom pathlib import Path\n\nUSER_HOME = os.path.expanduser(\"~\")\nif \"PYLINTHOME\" in os.environ:\n    PYLINT_HOME = os.environ[\"PYLINTHOME\"]\n    if USER_HOME == \"~\":\n        USER_HOME = os.path.dirname(PYLINT_HOME)\nelse:\n    # XDG Base Directory Specification compliance\n    xdg_data_home = os.environ.get(\"XDG_DATA_HOME\") or str(Path(USER_HOME) / \".local\" / \"share\"\n    pylint_xdg_path = Path(xdg_data_home) / \"pylint\"\n    legacy_path = Path(USER_HOME) / \".pylint.d\"\n    \n    # Try XDG path first, fall back to legacy if needed\n    if USER_HOME == \"~\":\n        PYLINT_HOME = \".pylint.d\"\n    elif pylint_xdg_path.exists() or not legacy_path.exists():\n        PYLINT_HOME = str(pylint_xdg_path)\n    else:\n        PYLINT_HOME = str(legacy_path)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py",
        "old_str": "\n    # XDG Base Directory Specification compliance\n    xdg_data_home = os.environ.get(\"XDG_DATA_HOME\") or str(Path(USER_HOME) / \".local\" / \"share\"\n    pylint_xdg_path = Path(xdg_data_home) / \"pylint\"\n    legacy_path = Path(USER_HOME) / \".pylint.d\"\n    \n    # Try XDG path first, fall back to legacy if needed\n    if USER_HOME == \"~\":\n        PYLINT_HOME = \".pylint.d\"\n    elif pylint_xdg_path.exists() or not legacy_path.exists():\n        PYLINT_HOME = str(pylint_xdg_path)\n    else:\n        PYLINT_HOME = str(legacy_path)\n",
        "new_str": "\n    # XDG Base Directory Specification compliance\n    xdg_data_home = os.environ.get(\"XDG_DATA_HOME\") or str(Path(USER_HOME) / \".local\" / \"share\")\n    pylint_xdg_path = Path(xdg_data_home) / \"pylint\"\n    legacy_path = Path(USER_HOME) / \".pylint.d\"\n    \n    # Try XDG path first, fall back to legacy if needed\n    if USER_HOME == \"~\":\n        PYLINT_HOME = \".pylint.d\"\n    elif pylint_xdg_path.exists() or not legacy_path.exists():\n        PYLINT_HOME = str(pylint_xdg_path)\n    else:\n        PYLINT_HOME = str(legacy_path)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py",
        "old_str": "\n\nENV_HELP = (\n    \"\"\"\nThe following environment variables are used:\n    * PYLINTHOME\n    Path to the directory where persistent data for the run will be stored. If\nnot found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working\ndirectory).\n    * PYLINTRC\n    Path to the configuration file. See the documentation for the method used\nto search for configuration file.\n\"\"\"\n    % globals()  # type: ignore\n)\n\n",
        "new_str": "\n\nENV_HELP = (\n    \"\"\"\nThe following environment variables are used:\n    * PYLINTHOME\n    Path to the directory where persistent data for the run will be stored.\n    * XDG_DATA_HOME\n    Base directory for data files (default: ~/.local/share).\n    If neither is set, it checks these locations in order:\n    1. $XDG_DATA_HOME/pylint (typically ~/.local/share/pylint)\n    2. ~/.pylint.d (legacy location)\n    3. .pylint.d (current working directory)\n    * PYLINTRC\n    Path to the configuration file. See the documentation for the method used\nto search for configuration file.\n\"\"\"\n    % globals()  # type: ignore\n)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.10/pylint/config/__init__.py",
        "old_str": "\nENV_HELP = (\n    \"\"\"\nThe following environment variables are used:\n    * PYLINTHOME\n    Path to the directory where persistent data for the run will be stored. If\nnot found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working\ndirectory).\n    * PYLINTRC\n    Path to the configuration file. See the documentation for the method used\nto search for configuration file.\n\"\"\"\n    % globals()  # type: ignore\n)\n",
        "new_str": "\nENV_HELP = (\n    \"\"\"\nThe following environment variables are used:\n    * PYLINTHOME\n    Path to the directory where persistent data for the run will be stored.\n    * XDG_DATA_HOME\n    Base directory for data files (default: ~/.local/share).\n    If neither is set, it checks these locations in order:\n    1. $XDG_DATA_HOME/pylint (typically ~/.local/share/pylint)\n    2. ~/.pylint.d (legacy location)\n    3. .pylint.d (current working directory)\n    * PYLINTRC\n    Path to the configuration file. See the documentation for the method used\nto search for configuration file.\n\"\"\"\n    % globals()  # type: ignore\n)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "10:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:find",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "0:empty action",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "0:empty action",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:find",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:cd",
      "target": "5:grep",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:python",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:grep",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "3:cd",
      "key": 0
    }
  ]
}