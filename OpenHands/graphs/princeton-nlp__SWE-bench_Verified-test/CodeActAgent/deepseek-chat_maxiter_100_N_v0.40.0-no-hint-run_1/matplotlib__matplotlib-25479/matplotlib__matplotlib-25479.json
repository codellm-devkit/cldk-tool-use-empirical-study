{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "matplotlib__matplotlib-25479",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 2,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        15,
        19
      ],
      "id": "0:empty action"
    },
    {
      "label": "find",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7",
        "1",
        "f",
        "readme*",
        "install*",
        "contrib*"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "1:find"
    },
    {
      "label": "cat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/README.md"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "2:cat"
    },
    {
      "label": "echo",
      "args": [],
      "phase": "general",
      "step_indices": [
        2,
        5,
        5,
        10,
        10
      ],
      "id": "3:echo"
    },
    {
      "label": "cat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/INSTALL.rst"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "4:cat"
    },
    {
      "label": "cat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/doc/users/installing/index.rst"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "5:cat"
    },
    {
      "label": "cat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/requirements/dev/dev-requirements.txt"
      ],
      "phase": "general",
      "step_indices": [
        4,
        7
      ],
      "id": "6:cat"
    },
    {
      "label": "cat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/testing/all.txt"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "7:cat"
    },
    {
      "label": "\ncat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/testing/extra.txt"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "8:\ncat"
    },
    {
      "label": "\ncat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/testing/flake8.txt"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "9:\ncat"
    },
    {
      "label": "find",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7",
        "f",
        "requirements*.txt",
        "test*.txt",
        "dev*.txt"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "10:find"
    },
    {
      "label": "find",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7",
        "d",
        "testing"
      ],
      "phase": "general",
      "step_indices": [
        8
      ],
      "id": "11:find"
    },
    {
      "label": "ls",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/requirements/testing/"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "12:ls"
    },
    {
      "label": "cat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/requirements/testing/all.txt"
      ],
      "phase": "general",
      "step_indices": [
        10
      ],
      "id": "13:cat"
    },
    {
      "label": "\ncat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/requirements/testing/extra.txt"
      ],
      "phase": "general",
      "step_indices": [
        10
      ],
      "id": "14:\ncat"
    },
    {
      "label": "\ncat",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/requirements/testing/flake8.txt"
      ],
      "phase": "general",
      "step_indices": [
        10
      ],
      "id": "15:\ncat"
    },
    {
      "label": "grep",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py"
      ],
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "16:grep"
    },
    {
      "label": "\ngrep",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py"
      ],
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "17:\ngrep"
    },
    {
      "label": "\ngrep",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/pyplot.py"
      ],
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "18:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "view_range": [
          1,
          100
        ]
      },
      "phase": "localization",
      "step_indices": [
        12
      ],
      "id": "19:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "view_range": [
          100,
          200
        ]
      },
      "phase": "localization",
      "step_indices": [
        13
      ],
      "id": "20:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "view_range": [
          200,
          300
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "21:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "old_str": "    def get_cmap(self, cmap):\n        \"\"\"\n        Return a color map specified through *cmap*.\n\n        Parameters\n        ----------\n        cmap : str or `~matplotlib.colors.Colormap` or None\n\n            - if a `.Colormap`, return it\n            - if a string, look it up in ``mpl.colormaps``\n            - if None, return the Colormap defined in :rc:`image.cmap`\n\n        Returns\n        -------\n        Colormap\n        \"\"\"\n        # get the default color map\n        if cmap is None:\n            return self[mpl.rcParams[\"image.cmap\"]]\n\n        # if the user passed in a Colormap, simply return it\n        if isinstance(cmap, colors.Colormap):\n            return cmap\n        if isinstance(cmap, str):\n            _api.check_in_list(sorted(_colormaps), cmap=cmap)\n            # otherwise, it must be a string so look it up\n            return self[cmap]\n        raise TypeError(\n            'get_cmap expects None or an instance of a str or Colormap . ' +\n            f'you passed {cmap!r} of type {type(cmap)}'\n        )",
        "new_str": "    def get_cmap(self, cmap):\n        \"\"\"\n        Return a color map specified through *cmap*.\n\n        Parameters\n        ----------\n        cmap : str or `~matplotlib.colors.Colormap` or None\n\n            - if a `.Colormap`, return it\n            - if a string, look it up in ``mpl.colormaps``\n            - if None, return the Colormap defined in :rc:`image.cmap`\n\n        Returns\n        -------\n        Colormap\n        \"\"\"\n        # get the default color map\n        if cmap is None:\n            return self[mpl.rcParams[\"image.cmap\"]]\n\n        # if the user passed in a Colormap, simply return it\n        if isinstance(cmap, colors.Colormap):\n            return cmap\n        if isinstance(cmap, str):\n            try:\n                # First try exact match with registered name\n                return self[cmap]\n            except KeyError:\n                # If not found, check if it matches any colormap's internal name\n                for name, registered_cmap in self._cmaps.items():\n                    if registered_cmap.name == cmap:\n                        return registered_cmap.copy()\n                # If still not found, raise the original error\n                _api.check_in_list(sorted(_colormaps), cmap=cmap)\n                return self[cmap]\n        raise TypeError(\n            'get_cmap expects None or an instance of a str or Colormap . ' +\n            f'you passed {cmap!r} of type {type(cmap)}'\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_colormap_fix.py",
        "file_text": "\nfrom matplotlib import cm\nfrom matplotlib.colors import LinearSegmentedColormap\nimport matplotlib.pyplot as plt\n\n# Test case from original issue\nmy_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],\n                [2.3e-03, 1.3e-03, 1.8e-02],\n                [3.3e-03, 2.3e-03, 2.4e-02]]\n\n# Create colormap with name A, register with name B\nmy_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)\ncm.register_cmap(name='my_cmap_name', cmap=my_cmap)\n\n# Try to use the registered name\nplt.set_cmap('my_cmap_name')\ntry:\n    plt.imshow([[1, 1], [2, 2]])\n    plt.colorbar()\n    plt.savefig('test_output.png')\n    print(\"SUCCESS: Colormap worked with registered name\")\nexcept Exception as e:\n    print(\"FAILURE:\", str(e))\n"
      },
      "phase": "verification",
      "step_indices": [
        17
      ],
      "id": "23:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "args": [
        "/workspace/test_colormap_fix.py"
      ],
      "phase": "verification",
      "step_indices": [
        18,
        21,
        26
      ],
      "id": "24:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "old_str": "\n    def register(self, cmap, *, name=None, force=False):\n        \"\"\"\n        Register a new colormap.\n\n        The colormap name can then be used as a string argument to any ``cmap``\n        parameter in Matplotlib. It is also available in ``pyplot.get_cmap``.\n\n        The colormap registry stores a copy of the given colormap, so that\n        future changes to the original colormap instance do not affect the\n        registered colormap. Think of this as the registry taking a snapshot\n        of the colormap at registration.\n\n        Parameters\n        ----------\n        cmap : matplotlib.colors.Colormap\n            The colormap to register.\n\n        name : str, optional\n            The name for the colormap. If not given, ``cmap.name`` is used.\n\n        force : bool, default: False\n            If False, a ValueError is raised if trying to overwrite an already\n            registered name. True supports overwriting registered colormaps\n            other than the builtin colormaps.\n        \"\"\"\n        _api.check_isinstance(colors.Colormap, cmap=cmap)\n\n        name = name or cmap.name\n        if name in self:\n            if not force:\n                # don't allow registering an already existing cmap\n                # unless explicitly asked to\n                raise ValueError(\n                    f'A colormap named \"{name}\" is already registered.')\n            elif (name in self._builtin_cmaps\n                    and not self._allow_override_builtin):\n                # We don't allow overriding a builtin unless privately\n                # coming from register_cmap()\n                raise ValueError(\"Re-registering the builtin cmap \"\n                                 f\"{name!r} is not allowed.\")\n\n            # Warn that we are updating an already existing colormap\n            _api.warn_external(f\"Overwriting the cmap {name!r} \"\n                               \"that was already in the registry.\")\n\n        self._cmaps[name] = cmap.copy()\n",
        "new_str": "\n    def register(self, cmap, *, name=None, force=False):\n        \"\"\"\n        Register a new colormap.\n\n        The colormap name can then be used as a string argument to any ``cmap``\n        parameter in Matplotlib. It is also available in ``pyplot.get_cmap``.\n\n        The colormap registry stores a copy of the given colormap, so that\n        future changes to the original colormap instance do not affect the\n        registered colormap. Think of this as the registry taking a snapshot\n        of the colormap at registration.\n\n        Parameters\n        ----------\n        cmap : matplotlib.colors.Colormap\n            The colormap to register.\n\n        name : str, optional\n            The name for the colormap. If not given, ``cmap.name`` is used.\n\n        force : bool, default: False\n            If False, a ValueError is raised if trying to overwrite an already\n            registered name. True supports overwriting registered colormaps\n            other than the builtin colormaps.\n        \"\"\"\n        _api.check_isinstance(colors.Colormap, cmap=cmap)\n\n        name = name or cmap.name\n        if name in self:\n            if not force:\n                # don't allow registering an already existing cmap\n                # unless explicitly asked to\n                raise ValueError(\n                    f'A colormap named \"{name}\" is already registered.')\n            elif (name in self._builtin_cmaps\n                    and not self._allow_override_builtin):\n                # We don't allow overriding a builtin unless privately\n                # coming from register_cmap()\n                raise ValueError(\"Re-registering the builtin cmap \"\n                                 f\"{name!r} is not allowed.\")\n\n            # Warn that we are updating an already existing colormap\n            _api.warn_external(f\"Overwriting the cmap {name!r} \"\n                               \"that was already in the registry.\")\n\n        # Create a copy and update its name if registering with a different name\n        cmap_copy = cmap.copy()\n        if name != cmap.name:\n            cmap_copy.name = name\n        self._cmaps[name] = cmap_copy\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "grep",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/"
      ],
      "phase": "general",
      "step_indices": [
        22,
        23
      ],
      "id": "26:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "view_range": [
          180,
          220
        ]
      },
      "phase": "localization",
      "step_indices": [
        24
      ],
      "id": "27:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/cm.py",
        "old_str": "\n                # If still not found, raise the original error\n                _api.check_in_list(sorted(_colormaps), cmap=cmap)\n                return self[cmap]\n",
        "new_str": "\n                # If still not found, check if it's a registered name\n                if cmap in self._cmaps:\n                    return self[cmap]\n                # Finally raise the original error\n                _api.check_in_list(sorted(_colormaps), cmap=cmap)\n                return self[cmap]\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        25
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "grep",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        27
      ],
      "id": "29:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "view_range": [
          4600,
          4700
        ]
      },
      "phase": "localization",
      "step_indices": [
        28
      ],
      "id": "30:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "view_range": [
          4640,
          4700
        ]
      },
      "phase": "localization",
      "step_indices": [
        29
      ],
      "id": "31:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "view_range": [
          4600,
          4650
        ]
      },
      "phase": "localization",
      "step_indices": [
        30
      ],
      "id": "32:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py"
      ],
      "phase": "general",
      "step_indices": [
        31
      ],
      "id": "33:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "view_range": [
          5470,
          5520
        ]
      },
      "phase": "localization",
      "step_indices": [
        32
      ],
      "id": "34:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "view_range": [
          5520,
          5570
        ]
      },
      "phase": "localization",
      "step_indices": [
        33
      ],
      "id": "35:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "view_range": [
          5570,
          5620
        ]
      },
      "phase": "localization",
      "step_indices": [
        34
      ],
      "id": "36:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "view_range": [
          5700,
          5750
        ]
      },
      "phase": "localization",
      "step_indices": [
        35
      ],
      "id": "37:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.7/lib/matplotlib/axes/_axes.py",
        "view_range": [
          5800,
          5850
        ]
      },
      "phase": "localization",
      "step_indices": [
        36
      ],
      "id": "38:str_replace_editor\nview"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:find",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "0:empty action",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "0:empty action",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:find",
      "target": "2:cat",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:cat",
      "target": "3:echo",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:echo",
      "target": "4:cat",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "3:echo",
      "target": "8:\ncat",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "3:echo",
      "target": "9:\ncat",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "3:echo",
      "target": "14:\ncat",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "3:echo",
      "target": "15:\ncat",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "4:cat",
      "target": "5:cat",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "5:cat",
      "target": "6:cat",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "6:cat",
      "target": "7:cat",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:cat",
      "target": "11:find",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "7:cat",
      "target": "3:echo",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "8:\ncat",
      "target": "3:echo",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "9:\ncat",
      "target": "10:find",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "10:find",
      "target": "6:cat",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "11:find",
      "target": "12:ls",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "12:ls",
      "target": "13:cat",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "13:cat",
      "target": "3:echo",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "14:\ncat",
      "target": "3:echo",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "15:\ncat",
      "target": "16:grep",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "16:grep",
      "target": "17:\ngrep",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "17:\ngrep",
      "target": "18:\ngrep",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "18:\ngrep",
      "target": "19:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "19:str_replace_editor\nview",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "20:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "23:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "23:str_replace_editor\ncreate",
      "target": "24:python",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "24:python",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "24:python",
      "target": "26:grep",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "24:python",
      "target": "29:grep",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "24:python",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "26:grep",
      "target": "26:grep",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "26:grep",
      "target": "27:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "27:str_replace_editor\nview",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "24:python",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "29:grep",
      "target": "30:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "30:str_replace_editor\nview",
      "target": "31:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "30:str_replace_editor\nview",
      "target": "31:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "30:str_replace_editor\nview",
      "target": "32:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "31:str_replace_editor\nview",
      "target": "32:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "32:str_replace_editor\nview",
      "target": "33:grep",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "33:grep",
      "target": "34:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "34:str_replace_editor\nview",
      "target": "35:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "35:str_replace_editor\nview",
      "target": "36:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "36:str_replace_editor\nview",
      "target": "37:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "37:str_replace_editor\nview",
      "target": "38:str_replace_editor\nview",
      "key": 0
    }
  ]
}