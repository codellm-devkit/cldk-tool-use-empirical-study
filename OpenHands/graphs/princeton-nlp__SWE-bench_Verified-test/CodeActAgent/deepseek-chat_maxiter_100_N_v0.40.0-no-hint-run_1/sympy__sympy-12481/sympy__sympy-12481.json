{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sympy__sympy-12481",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        17
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/sympy__sympy__1.0"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        11,
        16,
        18,
        20,
        22,
        25,
        29,
        35,
        42
      ],
      "id": "1:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:find"
    },
    {
      "label": "python",
      "args": [
        "sympy/combinatorics/tests/test_permutations.py"
      ],
      "phase": "verification",
      "step_indices": [
        1,
        2
      ],
      "id": "3:python"
    },
    {
      "label": "pip",
      "args": [
        "install",
        "pytest"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "4:pip"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        3,
        3,
        3
      ],
      "id": "5:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py"
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "sympy/combinatorics/permutations.py"
      ],
      "phase": "general",
      "step_indices": [
        7,
        7,
        7,
        8,
        11,
        11
      ],
      "id": "7:grep"
    },
    {
      "label": "grep",
      "args": [
        "sympy/combinatorics/permutations.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        8
      ],
      "id": "8:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "view_range": [
          790,
          820
        ]
      },
      "phase": "localization",
      "step_indices": [
        9
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "view_range": [
          800,
          850
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "view_range": [
          800,
          900
        ]
      },
      "phase": "localization",
      "step_indices": [
        12
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "view_range": [
          880,
          920
        ]
      },
      "phase": "localization",
      "step_indices": [
        13
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "view_range": [
          910,
          950
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "        temp = flatten(args)\n        if has_dups(temp):\n            if is_cycle:\n                raise ValueError('there were repeated elements; to resolve '\n                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n            else:\n                raise ValueError('there were repeated elements.')\n        temp = set(temp)",
        "new_str": "        temp = flatten(args)\n        if has_dups(temp):\n            if not is_cycle:\n                raise ValueError('there were repeated elements.')\n        temp = set(temp)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "args": [],
      "phase": "verification",
      "step_indices": [
        16,
        18,
        20,
        22,
        25,
        29,
        35,
        42
      ],
      "id": "15:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n            c = Cycle()\n            for ci in args:\n                c = c(*ci)\n            aform = c.list()\n",
        "new_str": "\n            c = Cycle(*args[0])\n            for ci in args[1:]:\n                c = c(*ci)\n            aform = c.list()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n            c = Cycle(*args[0])\n            for ci in args[1:]:\n                c = c(*ci)\n            aform = c.list()\n",
        "new_str": "\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)\n            aform = c.list()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)\n            aform = c.list()\n\n",
        "new_str": "\n\n            from functools import reduce\n            cycles = [Cycle(*ci) for ci in args]\n            c = reduce(lambda a, b: b(a), cycles, Cycle())\n            aform = c.list()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)\n            aform = c.list()\n",
        "new_str": "\n            from functools import reduce\n            cycles = [Cycle(*ci) for ci in args]\n            c = reduce(lambda a, b: b(a), reversed(cycles), Cycle())\n            aform = c.list()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n            from functools import reduce\n            cycles = [Cycle(*ci) for ci in args]\n            c = reduce(lambda a, b: b(a), reversed(cycles), Cycle())\n            aform = c.list()\n\n",
        "new_str": "\n\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci) * c  # Note: * operator does proper right-to-left composition\n            aform = c.list()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "view_range": [
          910,
          920
        ]
      },
      "phase": "localization",
      "step_indices": [
        27,
        32,
        37,
        40
      ],
      "id": "21:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n            # it -- use the array form instead\n            from functools import reduce\n            cycles = [Cycle(*ci) for ci in args]\n            c = reduce(lambda a, b: b(a), reversed(cycles), Cycle())\n            aform = c.list()\n",
        "new_str": "\n            # it -- use the array form instead\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci) * c  # * operator does proper right-to-left composition\n            aform = c.list()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        28
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci) * c  # * operator does proper right-to-left composition\n            aform = c.list()\n\n",
        "new_str": "\n\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)  # Using __call__ for proper composition\n            aform = c.list()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        30
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n            # it -- use the array form instead\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci) * c  # * operator does proper right-to-left composition\n            aform = c.list()\n\n",
        "new_str": "\n\n            # it -- use the array form instead\n            # Process cycles right-to-left using function composition\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)  # Using function composition\n            aform = c.list()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        31
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n            # it -- use the array form instead\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci) * c  # * operator does proper right-to-left composition\n            aform = c.list()\n\n",
        "new_str": "\n\n            # it -- use the array form instead\n            # Process cycles right-to-left using function application\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)  # Using function application for composition\n            aform = c.list()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        33
      ],
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n                c = Cycle(*ci) * c  # * operator does proper right-to-left composition\n",
        "new_str": "\n                c = Cycle(*ci)(c)  # Using function application for composition\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        34
      ],
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n            # it -- use the array form instead\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)  # Using function application for composition\n            aform = c.list()\n\n",
        "new_str": "\n\n            # it -- use the array form instead\n            # Process cycles in reverse order (right-to-left composition)\n            # First create all cycles, then compose them in reverse order\n            cycles = [Cycle(*ci) for ci in args]\n            c = cycles[-1]\n            for ci in reversed(cycles[:-1]):\n                c = ci(c)\n            aform = c.list()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        36
      ],
      "id": "27:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n                c = Cycle(*ci)(c)  # Using function application for composition\n\n",
        "new_str": "\n\n                c = Cycle(*ci) * c  # Using multiplication for proper right-to-left composition\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        38
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n            # it -- use the array form instead\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)  # Using function application for composition\n            aform = c.list()\n\n",
        "new_str": "\n\n            # it -- use the array form instead\n            # Process cycles in order (composes right-to-left mathematically)\n            c = Cycle()\n            for ci in args:\n                c = Cycle(*ci)(c)  # Function application composes right-to-left\n            aform = c.list()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        39
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n            # it -- use the array form instead\n            # Process cycles left-to-right but compose right-to-left\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)  # Using function application for composition\n            aform = c.list()\n",
        "new_str": "\n            # it -- use the array form instead\n            # Process cycles in order (mathematically right-to-left composition)\n            c = Cycle()\n            for ci in args:\n                c = Cycle(*ci)(c)  # Function application composes right-to-left\n            aform = c.list()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        41
      ],
      "id": "30:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.0/sympy/combinatorics/permutations.py",
        "old_str": "\n\n\n            # it -- use the array form instead\n            # Process cycles in order (mathematically right-to-left composition)\n            c = Cycle()\n            for ci in args:\n                c = Cycle(*ci)(c)  # Function application composes right-to-left\n            aform = c.list()\n\n\n",
        "new_str": "\n\n\n            # it -- use the array form instead\n            # Process cycles in reverse order for correct right-to-left composition\n            c = Cycle()\n            for ci in reversed(args):\n                c = Cycle(*ci)(c)  # Function application composes right-to-left\n            aform = c.list()\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        43
      ],
      "id": "31:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "3:python",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "5:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "1:cd",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "1:cd",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "1:cd",
      "target": "7:grep",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "1:cd",
      "target": "7:grep",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "1:cd",
      "target": "7:grep",
      "key": 2
    },
    {
      "label": "16",
      "type": "exec",
      "source": "1:cd",
      "target": "15:python",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "1:cd",
      "target": "15:python",
      "key": 1
    },
    {
      "label": "20",
      "type": "exec",
      "source": "1:cd",
      "target": "15:python",
      "key": 2
    },
    {
      "label": "22",
      "type": "exec",
      "source": "1:cd",
      "target": "15:python",
      "key": 3
    },
    {
      "label": "25",
      "type": "exec",
      "source": "1:cd",
      "target": "15:python",
      "key": 4
    },
    {
      "label": "29",
      "type": "exec",
      "source": "1:cd",
      "target": "15:python",
      "key": 5
    },
    {
      "label": "35",
      "type": "exec",
      "source": "1:cd",
      "target": "15:python",
      "key": 6
    },
    {
      "label": "42",
      "type": "exec",
      "source": "1:cd",
      "target": "15:python",
      "key": 7
    },
    {
      "label": "1",
      "type": "exec",
      "source": "2:find",
      "target": "3:python",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:python",
      "target": "4:pip",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:python",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "4:pip",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "5:grep",
      "target": "5:grep",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "5:grep",
      "target": "5:grep",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "5:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:grep",
      "target": "7:grep",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:grep",
      "target": "7:grep",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "7:grep",
      "target": "7:grep",
      "key": 2
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:grep",
      "target": "8:grep",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "7:grep",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:grep",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "11:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "12:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "13:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "15:python",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "15:python",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "15:python",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "15:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "15:python",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "15:python",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "15:python",
      "target": "27:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "43",
      "type": "exec",
      "source": "15:python",
      "target": "31:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "27:str_replace_editor\nstr_replace",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    }
  ]
}