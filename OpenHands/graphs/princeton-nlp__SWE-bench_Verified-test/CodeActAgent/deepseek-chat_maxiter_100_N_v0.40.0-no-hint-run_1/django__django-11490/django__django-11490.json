{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-11490",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "find",
      "args": [
        "/workspace/django__django__3.0",
        "test_*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__3.0/tests/expressions/test_queryset_values.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "find",
      "args": [
        "/workspace/django__django__3.0",
        "compiler.py"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "2:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__3.0/django/db/models/sql/compiler.py",
        "view_range": [
          428,
          433
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/django__django__3.0/reproduce_issue.py",
        "file_text": "\nfrom django.db import models\n\nclass ReservedName(models.Model):\n    name = models.CharField(max_length=30)\n    order = models.IntegerField()\n\ndef test_composed_values_list():\n    ReservedName.objects.create(name='a', order=2)\n    qs1 = ReservedName.objects.all()\n    print(\"First evaluation (name, order):\", qs1.union(qs1).values_list('name', 'order').get())\n    print(\"Second evaluation (order only):\", qs1.union(qs1).values_list('order').get())\n\nif __name__ == '__main__':\n    test_composed_values_list()\n"
      },
      "phase": "verification",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/django__django__3.0"
      ],
      "phase": "general",
      "step_indices": [
        5,
        7,
        9,
        11,
        13,
        14,
        15,
        16
      ],
      "id": "5:cd"
    },
    {
      "label": "python",
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "step_indices": [
        5,
        7,
        9,
        11,
        13,
        16
      ],
      "id": "6:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.0/reproduce_issue.py",
        "old_str": "\nfrom django.db import models\n\nclass ReservedName(models.Model):\n    name = models.CharField(max_length=30)\n    order = models.IntegerField()\n\ndef test_composed_values_list():\n    ReservedName.objects.create(name='a', order=2)\n    qs1 = ReservedName.objects.all()\n    print(\"First evaluation (name, order):\", qs1.union(qs1).values_list('name', 'order').get())\n    print(\"Second evaluation (order only):\", qs1.union(qs1).values_list('order').get())\n\nif __name__ == '__main__':\n    test_composed_values_list()\n",
        "new_str": "\nimport os\nimport django\nfrom django.conf import settings\n\nif not settings.configured:\n    settings.configure(\n        INSTALLED_APPS=['django.contrib.contenttypes'],\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        }\n    )\n    django.setup()\n\nfrom django.db import models\n\nclass ReservedName(models.Model):\n    name = models.CharField(max_length=30)\n    order = models.IntegerField()\n\ndef test_composed_values_list():\n    models.Model.metadata.create_all()\n    ReservedName.objects.create(name='a', order=2)\n    qs1 = ReservedName.objects.all()\n    print(\"First evaluation (name, order):\", qs1.union(qs1).values_list('name', 'order').get())\n    print(\"Second evaluation (order only):\", qs1.union(qs1).values_list('order').get())\n\nif __name__ == '__main__':\n    test_composed_values_list()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.0/reproduce_issue.py",
        "old_str": "\nclass ReservedName(models.Model):\n    name = models.CharField(max_length=30)\n    order = models.IntegerField()\n",
        "new_str": "\nclass ReservedName(models.Model):\n    name = models.CharField(max_length=30)\n    order = models.IntegerField()\n\n    class Meta:\n        app_label = 'tests'\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.0/reproduce_issue.py",
        "old_str": "\n\ndef test_composed_values_list():\n    models.Model.metadata.create_all()\n    ReservedName.objects.create(name='a', order=2)\n    qs1 = ReservedName.objects.all()\n    print(\"First evaluation (name, order):\", qs1.union(qs1).values_list('name', 'order').get())\n    print(\"Second evaluation (order only):\", qs1.union(qs1).values_list('order').get())\n\n",
        "new_str": "\n\ndef test_composed_values_list():\n    from django.db import connection\n    with connection.schema_editor() as editor:\n        editor.create_model(ReservedName)\n    try:\n        ReservedName.objects.create(name='a', order=2)\n        qs1 = ReservedName.objects.all()\n        print(\"First evaluation (name, order):\", qs1.union(qs1).values_list('name', 'order').get())\n        print(\"Second evaluation (order only):\", qs1.union(qs1).values_list('order').get())\n    finally:\n        with connection.schema_editor() as editor:\n            editor.delete_model(ReservedName)\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.0/django/db/models/sql/compiler.py",
        "old_str": "\n                if not compiler.query.values_select and self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
        "new_str": "\n                if (not compiler.query.values_select or \n                    compiler.query.values_select != self.query.values_select) and self.query.values_select:\n                    compiler.query.set_values((\n                        *self.query.extra_select,\n                        *self.query.values_select,\n                        *self.query.annotation_select,\n                    ))\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "args": [
        "tests/queries/test_query.py",
        "tests/expressions/test_queryset_values.py"
      ],
      "phase": "verification",
      "step_indices": [
        14
      ],
      "id": "11:python"
    },
    {
      "label": "python",
      "args": [
        "test",
        "tests.queries",
        "tests.expressions"
      ],
      "phase": "verification",
      "step_indices": [
        15
      ],
      "id": "12:python"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:find",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:find",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 1
    },
    {
      "label": "9",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 2
    },
    {
      "label": "11",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 3
    },
    {
      "label": "13",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 4
    },
    {
      "label": "16",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 5
    },
    {
      "label": "14",
      "type": "exec",
      "source": "5:cd",
      "target": "11:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "5:cd",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:python",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "6:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "6:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "6:python",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "11:python",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "12:python",
      "target": "5:cd",
      "key": 0
    }
  ]
}