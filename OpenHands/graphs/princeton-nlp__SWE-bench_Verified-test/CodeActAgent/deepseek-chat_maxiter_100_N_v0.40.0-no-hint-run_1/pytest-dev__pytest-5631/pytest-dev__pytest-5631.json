{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pytest-dev__pytest-5631",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/pytest-dev__pytest__5.0"
      ],
      "phase": "general",
      "step_indices": [
        1,
        3,
        4,
        16,
        17,
        19,
        23,
        28,
        30,
        32,
        33,
        35
      ],
      "id": "1:cd"
    },
    {
      "label": "ls",
      "args": [],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:ls"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/tox.ini"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "python",
      "args": [
        "testing/"
      ],
      "phase": "verification",
      "step_indices": [
        3
      ],
      "id": "4:python"
    },
    {
      "label": "pip",
      "args": [
        "install",
        "hypothesis",
        "numpy"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "5:pip"
    },
    {
      "label": "python",
      "args": [
        "testing/python/"
      ],
      "phase": "verification",
      "step_indices": [
        4,
        16
      ],
      "id": "6:python"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "view_range": [
          90,
          100
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "8:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "view_range": [
          60,
          100
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "view_range": [
          1,
          20
        ]
      },
      "phase": "localization",
      "step_indices": [
        8,
        13
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n    return len(\n        [p for p in patchings if not p.attribute_name and p.new in sentinels]\n    )\n",
        "new_str": "\n    count = 0\n    for p in patchings:\n        if not p.attribute_name:\n            if hasattr(p.new, '__array__'):\n                # Handle numpy arrays specially\n                count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n            else:\n                count += int(p.new in sentinels)\n    return count\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n        return len(\n            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n        )\n",
        "new_str": "\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                if hasattr(p.new, '__array__'):\n                    # Handle numpy arrays specially\n                    count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                else:\n                    count += int(p.new in sentinels)\n        return count\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n\"\"\"\npython version compatibility code\n\"\"\"\nimport functools\nimport inspect\nimport io\nimport re\nimport sys\n",
        "new_str": "\n\"\"\"\npython version compatibility code\n\"\"\"\nimport functools\nimport inspect\nimport io\nimport re\nimport sys\nimport numpy as np\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n\"\"\"\npython version compatibility code\n\"\"\"\nimport functools\nimport inspect\nimport io\nimport re\nimport sys\nfrom contextlib import contextmanager\nfrom inspect import Parameter\nfrom inspect import signature\n\n",
        "new_str": "\n\"\"\"\npython version compatibility code\n\"\"\"\nimport functools\nimport inspect\nimport io\nimport re\nimport sys\nimport numpy as np\nfrom contextlib import contextmanager\nfrom inspect import Parameter\nfrom inspect import signature\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "import attr\nimport py\n\nimport _pytest",
        "new_str": "import attr\nimport numpy as np\nimport py\n\nimport _pytest",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "view_range": [
          13,
          78
        ]
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "python",
      "args": [],
      "phase": "verification",
      "step_indices": [
        17,
        19,
        23,
        28,
        30,
        32,
        33,
        35
      ],
      "id": "17:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                if hasattr(p.new, '__array__'):\n                    # Handle numpy arrays specially\n                    count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                else:\n                    count += int(p.new in sentinels)\n        return count\n",
        "new_str": "\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        # First handle numpy arrays\n        if any(hasattr(p.new, '__array__') for p in patchings if not p.attribute_name):\n            return len([\n                p for p in patchings \n                if not p.attribute_name and (\n                    any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                    if hasattr(p.new, '__array__') \n                    else p.new in sentinels\n                )\n            ])\n        # Original behavior for non-array cases\n        return len([p for p in patchings if not p.attribute_name and p.new in sentinels])\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        # First handle numpy arrays\n        if any(hasattr(p.new, '__array__') for p in patchings if not p.attribute_name):\n            return len([\n                p for p in patchings \n                if not p.attribute_name and (\n                    any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                    if hasattr(p.new, '__array__') \n                    else p.new in sentinels\n                )\n            ])\n        # Original behavior for non-array cases\n        return len([p for p in patchings if not p.attribute_name and p.new in sentinels])\n\n",
        "new_str": "\n\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        array_patches = [p for p in patchings if not p.attribute_name and hasattr(p.new, '__array__')]\n        regular_patches = [p for p in patchings if not p.attribute_name and not hasattr(p.new, '__array__')]\n        \n        array_count = 0\n        for p in array_patches:\n            array_count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n        \n        regular_count = len([p for p in regular_patches if p.new in sentinels])\n        \n        return array_count + regular_count\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "view_range": [
          65,
          83
        ]
      },
      "phase": "localization",
      "step_indices": [
        21,
        25
      ],
      "id": "20:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        # First handle numpy arrays\n        if any(hasattr(p.new, '__array__') for p in patchings if not p.attribute_name):\n            return len([\n                p for p in patchings \n                if not p.attribute_name and (\n                    any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                    if hasattr(p.new, '__array__') \n                    else p.new in sentinels\n                )\n            ])\n        # Original behavior for non-array cases\n        return len([p for p in patchings if not p.attribute_name and p.new in sentinels])\n",
        "new_str": "\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                if hasattr(p.new, '__array__'):\n                    # Handle numpy arrays by comparing with each sentinel\n                    count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                else:\n                    # Original behavior for non-arrays\n                    count += int(p.new in sentinels)\n        return count\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        22
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                if hasattr(p.new, '__array__'):\n                    # Handle numpy arrays by comparing with each sentinel\n                    count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                else:\n                    # Original behavior for non-arrays\n                    count += int(p.new in sentinels)\n        return count\n\n",
        "new_str": "\n\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                try:\n                    count += int(p.new in sentinels)\n                except ValueError:\n                    # Handle numpy arrays that raise ValueError with 'in' operator\n                    if hasattr(p.new, '__array__'):\n                        count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                    else:\n                        raise\n        return count\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                if hasattr(p.new, '__array__'):\n                    # Handle numpy arrays by comparing with each sentinel\n                    count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                else:\n                    # Original behavior for non-arrays\n                    count += int(p.new in sentinels)\n        return count\n\n",
        "new_str": "\n\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                try:\n                    # First try standard comparison\n                    count += int(p.new in sentinels)\n                except ValueError:\n                    # Fall back to numpy-specific comparison if ValueError occurs\n                    if hasattr(p.new, '__array__'):\n                        count += any(np.array_equal(p.new, s) for s in sentinels)\n                    else:\n                        raise  # Re-raise if it's not a numpy array\n        return count\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                if hasattr(p.new, '__array__'):\n                    # Handle numpy arrays by comparing with each sentinel\n                    count += any(np.array_equal(p.new, s) for s in sentinels if hasattr(s, '__array__'))\n                else:\n                    # Original behavior for non-arrays\n                    count += int(p.new in sentinels)\n        return count\n",
        "new_str": "\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                try:\n                    # First try standard comparison\n                    count += int(p.new in sentinels)\n                except ValueError:\n                    # Fall back to numpy-specific comparison if ValueError occurs\n                    if hasattr(p.new, '__array__'):\n                        count += any(np.array_equal(p.new, s) for s in sentinels)\n                    else:\n                        raise  # Re-raise if it's not a numpy array\n        return count\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        27
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "old_str": "\n\ndef num_mock_patch_args(function):\n    \"\"\" return number of arguments used up by mock arguments (if any) \"\"\"\n    patchings = getattr(function, \"patchings\", None)\n    if not patchings:\n        return 0\n    mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]\n    if any(mock_modules):\n        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n        count = 0\n        for p in patchings:\n            if not p.attribute_name:\n                try:\n                    # First try standard comparison\n                    count += int(p.new in sentinels)\n                except ValueError:\n                    # Fall back to numpy-specific comparison if ValueError occurs\n                    if hasattr(p.new, '__array__'):\n                        count += any(np.array_equal(p.new, s) for s in sentinels)\n                    else:\n                        raise  # Re-raise if it's not a numpy array\n        return count\n    return len(patchings)\n\n",
        "new_str": "\n\ndef num_mock_patch_args(function):\n    \"\"\" return number of arguments used up by mock arguments (if any) \"\"\"\n    patchings = getattr(function, \"patchings\", None)\n    if not patchings:\n        return 0\n    mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]\n    if not any(mock_modules):\n        return len(patchings)\n        \n    sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n    count = 0\n    for p in patchings:\n        if not p.attribute_name:\n            if hasattr(p.new, '__array__'):\n                # Handle numpy arrays with explicit comparison\n                count += any(np.array_equal(p.new, s) for s in sentinels)\n            else:\n                # Standard comparison for non-arrays\n                count += int(p.new in sentinels)\n    return count\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__5.0/src/_pytest/compat.py",
        "view_range": [
          60,
          85
        ]
      },
      "phase": "localization",
      "step_indices": [
        31
      ],
      "id": "26:str_replace_editor\nview"
    },
    {
      "label": "pip",
      "args": [
        "uninstall"
      ],
      "phase": "general",
      "step_indices": [
        34
      ],
      "id": "27:pip"
    },
    {
      "label": "\ncd",
      "args": [
        "/workspace/pytest-dev__pytest__5.0"
      ],
      "phase": "general",
      "step_indices": [
        34
      ],
      "id": "28:\ncd"
    },
    {
      "label": "\npip",
      "args": [
        "install"
      ],
      "phase": "general",
      "step_indices": [
        34
      ],
      "id": "29:\npip"
    },
    {
      "label": "print(_pytest.__file__)",
      "args": [],
      "phase": "general",
      "step_indices": [
        34
      ],
      "id": "30:print(_pytest.__file__)"
    },
    {
      "label": "from",
      "args": [
        "_pytest.compat",
        "import",
        "num_mock_patch_args"
      ],
      "phase": "general",
      "step_indices": [
        34
      ],
      "id": "31:from"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:ls",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "4:python",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "1:cd",
      "target": "6:python",
      "key": 1
    },
    {
      "label": "17",
      "type": "exec",
      "source": "1:cd",
      "target": "17:python",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "1:cd",
      "target": "17:python",
      "key": 1
    },
    {
      "label": "23",
      "type": "exec",
      "source": "1:cd",
      "target": "17:python",
      "key": 2
    },
    {
      "label": "28",
      "type": "exec",
      "source": "1:cd",
      "target": "17:python",
      "key": 3
    },
    {
      "label": "30",
      "type": "exec",
      "source": "1:cd",
      "target": "17:python",
      "key": 4
    },
    {
      "label": "32",
      "type": "exec",
      "source": "1:cd",
      "target": "17:python",
      "key": 5
    },
    {
      "label": "33",
      "type": "exec",
      "source": "1:cd",
      "target": "17:python",
      "key": 6
    },
    {
      "label": "35",
      "type": "exec",
      "source": "1:cd",
      "target": "17:python",
      "key": 7
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:ls",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:python",
      "target": "5:pip",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "5:pip",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "6:python",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "6:python",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:grep",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "8:grep",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "9:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "9:str_replace_editor\nview",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "9:str_replace_editor\nview",
      "target": "26:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "17:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "17:python",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "17:python",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "17:python",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "17:python",
      "target": "26:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "17:python",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "17:python",
      "target": "27:pip",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "20:str_replace_editor\nview",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "20:str_replace_editor\nview",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "26:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "type": "hier",
      "source": "26:str_replace_editor\nview",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "27:pip",
      "target": "28:\ncd",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "28:\ncd",
      "target": "29:\npip",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "29:\npip",
      "target": "30:print(_pytest.__file__)",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "30:print(_pytest.__file__)",
      "target": "31:from",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "31:from",
      "target": "1:cd",
      "key": 0
    }
  ]
}