{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sympy__sympy-15976",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "hard",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/sympy__sympy__1.4"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        3,
        4,
        10,
        12,
        20
      ],
      "id": "1:cd"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:grep"
    },
    {
      "label": "grep",
      "args": [
        "./README*"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "3:grep"
    },
    {
      "label": "ls",
      "args": [
        "bin/test"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:ls"
    },
    {
      "label": "grep",
      "args": [
        "sympy/printing/"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "5:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py"
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py"
      ],
      "phase": "general",
      "step_indices": [
        6,
        17
      ],
      "id": "7:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "view_range": [
          477,
          600
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "view_range": [
          330,
          400
        ]
      },
      "phase": "localization",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/mathml_test.py",
        "file_text": "\nfrom sympy import symbols\nfrom sympy.printing.mathml import mathml\n\nx1, x2 = symbols('x1 x2')\nexpr = x1 + x2\n\n# Print using presentation printer (which shows the bug)\nprint(\"Presentation MathML:\")\nprint(mathml(expr, printer='presentation'))\n\n# Print using content printer for comparison\nprint(\"\\nContent MathML:\")\nprint(mathml(expr, printer='content'))\n"
      },
      "phase": "verification",
      "step_indices": [
        9
      ],
      "id": "10:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "args": [
        "mathml_test.py"
      ],
      "phase": "verification",
      "step_indices": [
        10,
        12,
        20
      ],
      "id": "11:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "old_str": "\n        name, supers, subs = split_super_sub(sym.name)\n        name = translate(name)\n        supers = [translate(sup) for sup in supers]\n        subs = [translate(sub) for sub in subs]\n\n        mname = self.dom.createElement('mml:mi')\n        mname.appendChild(self.dom.createTextNode(name))\n        if len(supers) == 0:\n            if len(subs) == 0:\n                ci.appendChild(self.dom.createTextNode(name))\n            else:\n                msub = self.dom.createElement('mml:msub')\n                msub.appendChild(mname)\n                msub.appendChild(join(subs))\n                ci.appendChild(msub)\n        else:\n            if len(subs) == 0:\n                msup = self.dom.createElement('mml:msup')\n                msup.appendChild(mname)\n                msup.appendChild(join(supers))\n                ci.appendChild(msup)\n            else:\n                msubsup = self.dom.createElement('mml:msubsup')\n                msubsup.appendChild(mname)\n                msubsup.appendChild(join(subs))\n                msubsup.appendChild(join(supers))\n                ci.appendChild(msubsup)\n",
        "new_str": "\n        # Handle symbols ending with numbers as single identifiers\n        if sym.name[-1].isdigit():\n            ci.appendChild(self.dom.createTextNode(sym.name))\n        else:\n            name, supers, subs = split_super_sub(sym.name)\n            name = translate(name)\n            supers = [translate(sup) for sup in supers]\n            subs = [translate(sub) for sub in subs]\n\n            mname = self.dom.createElement('mml:mi')\n            mname.appendChild(self.dom.createTextNode(name))\n            if len(supers) == 0:\n                if len(subs) == 0:\n                    ci.appendChild(self.dom.createTextNode(name))\n                else:\n                    msub = self.dom.createElement('mml:msub')\n                    msub.appendChild(mname)\n                    msub.appendChild(join(subs))\n                    ci.appendChild(msub)\n            else:\n                if len(subs) == 0:\n                    msup = self.dom.createElement('mml:msup')\n                    msup.appendChild(mname)\n                    msup.appendChild(join(supers))\n                    ci.appendChild(msup)\n                else:\n                    msubsup = self.dom.createElement('mml:msubsup')\n                    msubsup.appendChild(mname)\n                    msubsup.appendChild(join(subs))\n                    msubsup.appendChild(join(supers))\n                    ci.appendChild(msubsup)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "old_str": "\n\n    def _print_Symbol(self, sym):\n        ci = self.dom.createElement(self.mathml_tag(sym))\n\n        def join(items):\n            if len(items) > 1:\n                mrow = self.dom.createElement('mrow')\n                for i, item in enumerate(items):\n                    if i > 0:\n                        mo = self.dom.createElement('mo')\n                        mo.appendChild(self.dom.createTextNode(\" \"))\n                        mrow.appendChild(mo)\n                    mi = self.dom.createElement('mi')\n                    mi.appendChild(self.dom.createTextNode(item))\n                    mrow.appendChild(mi)\n                return mrow\n            else:\n                mi = self.dom.createElement('mi')\n                mi.appendChild(self.dom.createTextNode(items[0]))\n                return mi\n\n        # translate name, supers and subs to unicode characters\n        def translate(s):\n            if s in greek_unicode:\n                return greek_unicode.get(s)\n            else:\n                return s\n\n        name, supers, subs = split_super_sub(sym.name)\n        name = translate(name)\n        supers = [translate(sup) for sup in supers]\n        subs = [translate(sub) for sub in subs]\n\n        mname = self.dom.createElement('mi')\n        mname.appendChild(self.dom.createTextNode(name))\n        if len(supers) == 0:\n            if len(subs) == 0:\n                ci.appendChild(self.dom.createTextNode(name))\n            else:\n                msub = self.dom.createElement('msub')\n                msub.appendChild(mname)\n                msub.appendChild(join(subs))\n                ci.appendChild(msub)\n        else:\n            if len(subs) == 0:\n                msup = self.dom.createElement('msup')\n                msup.appendChild(mname)\n                msup.appendChild(join(supers))\n                ci.appendChild(msup)\n            else:\n                msubsup = self.dom.createElement('msubsup')\n                msubsup.appendChild(mname)\n                msubsup.appendChild(join(subs))\n                msubsup.appendChild(join(supers))\n                ci.appendChild(msubsup)\n        return ci\n\n",
        "new_str": "\n\n    def _print_Symbol(self, sym):\n        ci = self.dom.createElement(self.mathml_tag(sym))\n\n        def join(items):\n            if len(items) > 1:\n                mrow = self.dom.createElement('mrow')\n                for i, item in enumerate(items):\n                    if i > 0:\n                        mo = self.dom.createElement('mo')\n                        mo.appendChild(self.dom.createTextNode(\" \"))\n                        mrow.appendChild(mo)\n                    mi = self.dom.createElement('mi')\n                    mi.appendChild(self.dom.createTextNode(item))\n                    mrow.appendChild(mi)\n                return mrow\n            else:\n                mi = self.dom.createElement('mi')\n                mi.appendChild(self.dom.createTextNode(items[0]))\n                return mi\n\n        # Handle symbols ending with numbers as single identifiers\n        if sym.name[-1].isdigit():\n            ci.appendChild(self.dom.createTextNode(sym.name))\n        else:\n            # translate name, supers and subs to unicode characters\n            def translate(s):\n                if s in greek_unicode:\n                    return greek_unicode.get(s)\n                else:\n                    return s\n\n            name, supers, subs = split_super_sub(sym.name)\n            name = translate(name)\n            supers = [translate(sup) for sup in supers]\n            subs = [translate(sub) for sub in subs]\n\n            mname = self.dom.createElement('mi')\n            mname.appendChild(self.dom.createTextNode(name))\n            if len(supers) == 0:\n                if len(subs) == 0:\n                    ci.appendChild(self.dom.createTextNode(name))\n                else:\n                    msub = self.dom.createElement('msub')\n                    msub.appendChild(mname)\n                    msub.appendChild(join(subs))\n                    ci.appendChild(msub)\n            else:\n                if len(subs) == 0:\n                    msup = self.dom.createElement('msup')\n                    msup.appendChild(mname)\n                    msup.appendChild(join(supers))\n                    ci.appendChild(msup)\n                else:\n                    msubsup = self.dom.createElement('msubsup')\n                    msubsup.appendChild(mname)\n                    msubsup.appendChild(join(subs))\n                    msubsup.appendChild(join(supers))\n                    ci.appendChild(msubsup)\n        return ci\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "old_str": "\n        name, supers, subs = split_super_sub(sym.name)\n        name = translate(name)\n        supers = [translate(sup) for sup in supers]\n        subs = [translate(sub) for sub in subs]\n\n        mname = self.dom.createElement('mi')\n        mname.appendChild(self.dom.createTextNode(name))\n        if len(supers) == 0:\n            if len(subs) == 0:\n                ci.appendChild(self.dom.createTextNode(name))\n            else:\n                msub = self.dom.createElement('msub')\n                msub.appendChild(mname)\n                msub.appendChild(join(subs))\n                ci.appendChild(msub)\n        else:\n            if len(subs) == 0:\n                msup = self.dom.createElement('msup')\n                msup.appendChild(mname)\n                msup.appendChild(join(supers))\n                ci.appendChild(msup)\n            else:\n                msubsup = self.dom.createElement('msubsup')\n                msubsup.appendChild(mname)\n                msubsup.appendChild(join(subs))\n                msubsup.appendChild(join(supers))\n                ci.appendChild(msubsup)\n",
        "new_str": "\n        # Handle symbols ending with numbers as single identifiers\n        if sym.name[-1].isdigit():\n            ci.appendChild(self.dom.createTextNode(sym.name))\n        else:\n            name, supers, subs = split_super_sub(sym.name)\n            name = translate(name)\n            supers = [translate(sup) for sup in supers]\n            subs = [translate(sub) for sub in subs]\n\n            mname = self.dom.createElement('mi')\n            mname.appendChild(self.dom.createTextNode(name))\n            if len(supers) == 0:\n                if len(subs) == 0:\n                    ci.appendChild(self.dom.createTextNode(name))\n                else:\n                    msub = self.dom.createElement('msub')\n                    msub.appendChild(mname)\n                    msub.appendChild(join(subs))\n                    ci.appendChild(msub)\n            else:\n                if len(subs) == 0:\n                    msup = self.dom.createElement('msup')\n                    msup.appendChild(mname)\n                    msup.appendChild(join(supers))\n                    ci.appendChild(msup)\n                else:\n                    msubsup = self.dom.createElement('msubsup')\n                    msubsup.appendChild(mname)\n                    msubsup.appendChild(join(subs))\n                    msubsup.appendChild(join(supers))\n                    ci.appendChild(msubsup)\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "view_range": [
          520,
          550
        ]
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "view_range": [
          570,
          600
        ]
      },
      "phase": "localization",
      "step_indices": [
        16
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "view_range": [
          749,
          780
        ]
      },
      "phase": "localization",
      "step_indices": [
        18
      ],
      "id": "17:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.4/sympy/printing/mathml.py",
        "old_str": "\n\n        name, supers, subs = split_super_sub(sym.name)\n        name = translate(name)\n        supers = [translate(sup) for sup in supers]\n        subs = [translate(sub) for sub in subs]\n\n",
        "new_str": "\n\n        # Handle symbols ending with numbers as single identifiers\n        if sym.name[-1].isdigit():\n            x.appendChild(self.dom.createTextNode(sym.name))\n            return x\n            \n        name, supers, subs = split_super_sub(sym.name)\n        name = translate(name)\n        supers = [translate(sup) for sup in supers]\n        subs = [translate(sub) for sub in subs]\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "18:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:grep",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "3:grep",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "4:ls",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "5:grep",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "1:cd",
      "target": "11:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "1:cd",
      "target": "11:python",
      "key": 1
    },
    {
      "label": "20",
      "type": "exec",
      "source": "1:cd",
      "target": "11:python",
      "key": 2
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:ls",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:grep",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:grep",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:grep",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "7:grep",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "10:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:str_replace_editor\ncreate",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "11:python",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "7:grep",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "17:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    }
  ]
}