{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pylint-dev__pylint-7277",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "ls",
      "args": [
        "/workspace/pylint-dev__pylint__2.15"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:ls"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/pylint-dev__pylint__2.15"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "1:cd"
    },
    {
      "label": "python",
      "args": [
        "tests/"
      ],
      "phase": "verification",
      "step_indices": [
        1
      ],
      "id": "2:python"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "view_range": [
          90,
          110
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "old_str": "    sys.path.pop(0)\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)",
        "new_str": "    first_path = sys.path[0]\n    if first_path in (\"\", \".\") or os.path.samefile(first_path, os.getcwd()):\n        sys.path.pop(0)\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "complex_command",
      "args": [
        "cat << 'EOF' > /workspace/test_pylint_path.py\nimport sys\nimport runpy\nimport os\n\n# Test case 1: Custom path should remain\nsys.path.insert(0, \"/custom/path\")\nrunpy.run_module('pylint', run_name=\"__main__\", alter_sys=True)\nassert sys.path[0] == \"/custom/path\", \"Custom path was incorrectly removed\"\n\n# Test case 2: Empty path should be removed\nsys.path.insert(0, \"\")\nrunpy.run_module('pylint', run_name=\"__main__\", alter_sys=True)\nassert sys.path[0] != \"\", \"Empty path was not removed\"\n\nprint(\"All tests passed!\")\nEOF"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "6:complex_command"
    },
    {
      "label": "set_env",
      "args": [
        "PYTHONPATH=/workspace/pylint-dev__pylint__2.15"
      ],
      "phase": "general",
      "step_indices": [
        6,
        8,
        10,
        12,
        14,
        16,
        19,
        21,
        23,
        26
      ],
      "id": "7:set_env"
    },
    {
      "label": "python",
      "args": [
        "/workspace/test_pylint_path.py"
      ],
      "phase": "verification",
      "step_indices": [
        6,
        8,
        10,
        12,
        14,
        16,
        19,
        21,
        23,
        26
      ],
      "id": "8:python"
    },
    {
      "label": "complex_command",
      "args": [
        "cat << 'EOF' > /workspace/test_pylint_path.py\nimport sys\nimport runpy\nimport os\nimport tempfile\n\n# Create a real temporary directory\nwith tempfile.TemporaryDirectory() as temp_dir:\n    # Test case 1: Custom path should remain\n    sys.path.insert(0, temp_dir)\n    runpy.run_module('pylint', run_name=\"__main__\", alter_sys=True)\n    assert sys.path[0] == temp_dir, \"Custom path was incorrectly removed\"\n\n    # Test case 2: Empty path should be removed\n    sys.path.insert(0, \"\")\n    runpy.run_module('pylint', run_name=\"__main__\", alter_sys=True)\n    assert sys.path[0] != \"\", \"Empty path was not removed\"\n\nprint(\"All tests passed!\")\nEOF"
      ],
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "9:complex_command"
    },
    {
      "label": "complex_command",
      "args": [
        "cat << 'EOF' > /workspace/test_pylint_path.py\nimport sys\nimport os\nimport tempfile\nfrom pylint import modify_sys_path\n\ndef test_path_modification():\n    \"\"\"Test that modify_sys_path() only removes certain path entries.\"\"\"\n    test_cases = [\n        (\"\", True, \"Should remove empty string\"),\n        (\".\", True, \"Should remove current directory\"),\n        (os.getcwd(), True, \"Should remove CWD\"),\n        (\"/custom/path\", False, \"Should preserve custom path\"),\n        (\"/another/path\", False, \"Should preserve another path\")\n    ]\n\n    for path, should_remove, description in test_cases:\n        # Setup\n        sys.path.insert(0, path)\n        original_length = len(sys.path)\n\n        # Test\n        modify_sys_path()\n\n        # Verify\n        if should_remove:\n            assert len(sys.path) == original_length - 1, f\"{description}: Path not removed\"\n            assert path not in sys.path, f\"{description}: Path still present\"\n        else:\n            assert len(sys.path) == original_length, f\"{description}: Path was incorrectly removed\"\n            assert path in sys.path, f\"{description}: Path missing\"\n\n        print(f\"\u2713 Passed: {description}\")\n\n    print(\"All path modification tests passed!\")\n\nif __name__ == \"__main__\":\n    test_path_modification()\nEOF"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "10:complex_command"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "old_str": "\n    first_path = sys.path[0]\n    if first_path in (\"\", \".\") or os.path.samefile(first_path, os.getcwd()):\n        sys.path.pop(0)\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    cwd = os.getcwd()\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
        "new_str": "\n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    # Normalize paths for comparison\n    normalized_first = os.path.normpath(os.path.abspath(first_path)) if first_path else \"\"\n    normalized_cwd = os.path.normpath(os.path.abspath(cwd))\n    \n    if first_path in (\"\", \".\") or (normalized_first and normalized_first == normalized_cwd):\n        sys.path.pop(0)\n        \n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "old_str": "\n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    # Normalize paths for comparison\n    normalized_first = os.path.normpath(os.path.abspath(first_path)) if first_path else \"\"\n    normalized_cwd = os.path.normpath(os.path.abspath(cwd))\n    \n    if first_path in (\"\", \".\") or (normalized_first and normalized_first == normalized_cwd):\n        sys.path.pop(0)\n        \n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
        "new_str": "\n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Check for empty string or dot first\n    if first_path in (\"\", \".\"):\n        sys.path.pop(0)\n    # Then check if it matches CWD (using string comparison first for efficiency)\n    elif first_path == cwd or os.path.samefile(first_path, cwd):\n        sys.path.pop(0)\n        \n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "complex_command",
      "args": [
        "cat << 'EOF' > /workspace/test_pylint_path.py\nimport sys\nimport os\nfrom pylint import modify_sys_path\n\ndef debug_path_info(test_path, cwd):\n    print(f\"\\nTesting path: {test_path}\")\n    print(f\"Current working directory: {cwd}\")\n    print(f\"Absolute path of test: {os.path.abspath(test_path) if test_path else ''}\")\n    print(f\"Normalized paths equal: {os.path.normpath(os.path.abspath(test_path)) == os.path.normpath(cwd) if test_path else False}\")\n    print(f\"Samefile result: {os.path.samefile(test_path, cwd) if test_path else False}\")\n\ndef test_path_modification():\n    \"\"\"Test that modify_sys_path() only removes certain path entries.\"\"\"\n    cwd = os.getcwd()\n    test_cases = [\n        (\"\", True, \"Should remove empty string\"),\n        (\".\", True, \"Should remove current directory\"),\n        (cwd, True, \"Should remove CWD\"),\n        (\"/custom/path\", False, \"Should preserve custom path\"),\n        (\"/another/path\", False, \"Should preserve another path\")\n    ]\n\n    for path, should_remove, description in test_cases:\n        # Setup\n        sys.path.insert(0, path)\n        original_length = len(sys.path)\n        debug_path_info(path, cwd)\n\n        # Test\n        modify_sys_path()\n\n        # Verify\n        if should_remove:\n            assert len(sys.path) == original_length - 1, f\"{description}: Path not removed\"\n            assert path not in sys.path, f\"{description}: Path still present\"\n        else:\n            assert len(sys.path) == original_length, f\"{description}: Path was incorrectly removed\"\n            assert path in sys.path, f\"{description}: Path missing\"\n\n        print(f\"\u2713 Passed: {description}\")\n\n    print(\"All path modification tests passed!\")\n\nif __name__ == \"__main__\":\n    test_path_modification()\nEOF"
      ],
      "phase": "general",
      "step_indices": [
        15
      ],
      "id": "13:complex_command"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "old_str": "\n\n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Check for empty string or dot first\n    if first_path in (\"\", \".\"):\n        sys.path.pop(0)\n    # Then check if it matches CWD (using string comparison first for efficiency)\n    elif first_path == cwd or os.path.samefile(first_path, cwd):\n        sys.path.pop(0)\n        \n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n\n",
        "new_str": "\n\n    if not sys.path:\n        return\n        \n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Check for empty string or dot first\n    if first_path in (\"\", \".\"):\n        sys.path.pop(0)\n        return\n        \n    # Then check if it matches CWD\n    try:\n        if first_path == cwd or os.path.samefile(first_path, cwd):\n            sys.path.pop(0)\n            return\n    except OSError:\n        pass\n        \n    # Handle PYTHONPATH cases\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "old_str": "    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Check for empty string or dot first\n    if first_path in (\"\", \".\"):\n        sys.path.pop(0)\n    # Then check if it matches CWD (using string comparison first for efficiency)\n    elif first_path == cwd or os.path.samefile(first_path, cwd):\n        sys.path.pop(0)\n        \n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)",
        "new_str": "    if not sys.path:\n        return\n        \n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Check for empty string or dot first\n    if first_path in (\"\", \".\"):\n        sys.path.pop(0)\n        return\n        \n    # Then check if it matches CWD\n    try:\n        if first_path == cwd or os.path.samefile(first_path, cwd):\n            sys.path.pop(0)\n            return\n    except OSError:\n        pass\n        \n    # Handle PYTHONPATH cases\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "old_str": "\n    if not sys.path:\n        return\n        \n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Check for empty string or dot first\n    if first_path in (\"\", \".\"):\n        sys.path.pop(0)\n        return\n        \n    # Then check if it matches CWD\n    try:\n        if first_path == cwd or os.path.samefile(first_path, cwd):\n            sys.path.pop(0)\n            return\n    except OSError:\n        pass\n        \n    # Handle PYTHONPATH cases\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
        "new_str": "\n    if not sys.path:\n        return\n        \n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Remove if empty, dot, or matches CWD (using multiple comparison methods)\n    should_remove = (\n        first_path in (\"\", \".\") or\n        first_path == cwd or\n        (os.path.exists(first_path) and os.path.samefile(first_path, cwd))\n    )\n    \n    if should_remove:\n        sys.path.pop(0)\n        return\n        \n    # Handle PYTHONPATH cases\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "complex_command",
      "args": [
        "cat << 'EOF' > /workspace/test_pylint_path.py\nimport sys\nimport os\nfrom pylint import modify_sys_path\n\ndef debug_sys_path(title):\n    print(f\"\\n{title}:\")\n    for i, path in enumerate(sys.path):\n        print(f\"{i}: {path}\")\n\ndef test_path_modification():\n    \"\"\"Test that modify_sys_path() only removes certain path entries.\"\"\"\n    cwd = os.getcwd()\n    test_cases = [\n        (\"\", True, \"Should remove empty string\"),\n        (\".\", True, \"Should remove current directory\"),\n        (cwd, True, \"Should remove CWD\"),\n        (\"/custom/path\", False, \"Should preserve custom path\"),\n    ]\n\n    for path, should_remove, description in test_cases:\n        # Setup\n        sys.path.insert(0, path)\n        debug_sys_path(f\"Before modify_sys_path() [{description}]\")\n\n        # Test\n        modify_sys_path()\n        debug_sys_path(f\"After modify_sys_path() [{description}]\")\n\n        # Verify\n        if should_remove:\n            assert path not in sys.path, f\"{description}: Path still present\"\n        else:\n            assert path in sys.path, f\"{description}: Path missing\"\n\n        print(f\"\u2713 Passed: {description}\")\n\n    print(\"All path modification tests passed!\")\n\nif __name__ == \"__main__\":\n    test_path_modification()\nEOF"
      ],
      "phase": "general",
      "step_indices": [
        22
      ],
      "id": "17:complex_command"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "old_str": "\n\n    if not sys.path:\n        return\n        \n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Remove if empty, dot, or matches CWD (using multiple comparison methods)\n    should_remove = (\n        first_path in (\"\", \".\") or\n        first_path == cwd or\n        (os.path.exists(first_path) and os.path.samefile(first_path, cwd))\n    )\n    \n    if should_remove:\n        sys.path.pop(0)\n        return\n        \n    # Handle PYTHONPATH cases\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n\n",
        "new_str": "\n\n    if not sys.path:\n        return\n        \n    cwd = os.getcwd()\n    paths_to_remove = set()\n    \n    # Identify paths to remove\n    for path in sys.path[:3]:  # Only check first few entries\n        if path in (\"\", \".\"):\n            paths_to_remove.add(path)\n            continue\n        try:\n            if path == cwd or (os.path.exists(path) and os.path.samefile(path, cwd)):\n                paths_to_remove.add(path)\n        except OSError:\n            continue\n            \n    # Remove identified paths\n    sys.path = [p for p in sys.path if p not in paths_to_remove]\n    \n    # Handle PYTHONPATH cases\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        if len(sys.path) > 0:\n            sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        if len(sys.path) > 1:\n            sys.path.pop(1)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pylint-dev__pylint__2.15/pylint/__init__.py",
        "old_str": "\n    if not sys.path:\n        return\n        \n    first_path = sys.path[0]\n    cwd = os.getcwd()\n    \n    # Remove if empty, dot, or matches CWD (using multiple comparison methods)\n    should_remove = (\n        first_path in (\"\", \".\") or\n        first_path == cwd or\n        (os.path.exists(first_path) and os.path.samefile(first_path, cwd))\n    )\n    \n    if should_remove:\n        sys.path.pop(0)\n        return\n        \n    # Handle PYTHONPATH cases\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        sys.path.pop(1)\n",
        "new_str": "\n    if not sys.path:\n        return\n        \n    cwd = os.getcwd()\n    paths_to_remove = set()\n    \n    # Identify paths to remove\n    for path in sys.path[:3]:  # Only check first few entries\n        if path in (\"\", \".\"):\n            paths_to_remove.add(path)\n            continue\n        try:\n            if path == cwd or (os.path.exists(path) and os.path.samefile(path, cwd)):\n                paths_to_remove.add(path)\n        except OSError:\n            continue\n            \n    # Remove identified paths\n    sys.path = [p for p in sys.path if p not in paths_to_remove]\n    \n    # Handle PYTHONPATH cases\n    env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n    if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n        if len(sys.path) > 0:\n            sys.path.pop(0)\n    elif env_pythonpath.endswith(\":\") and env_pythonpath not in (f\"{cwd}:\", \".:\"):\n        if len(sys.path) > 1:\n            sys.path.pop(1)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        25
      ],
      "id": "19:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:ls",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:python",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:complex_command",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:complex_command",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 1
    },
    {
      "label": "10",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 2
    },
    {
      "label": "12",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 3
    },
    {
      "label": "14",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 4
    },
    {
      "label": "16",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 5
    },
    {
      "label": "19",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 6
    },
    {
      "label": "21",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 7
    },
    {
      "label": "23",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 8
    },
    {
      "label": "26",
      "type": "exec",
      "source": "7:set_env",
      "target": "8:python",
      "key": 9
    },
    {
      "label": "7",
      "type": "exec",
      "source": "8:python",
      "target": "9:complex_command",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:python",
      "target": "10:complex_command",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "8:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "8:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "8:python",
      "target": "13:complex_command",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "8:python",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "8:python",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "8:python",
      "target": "17:complex_command",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "8:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "9:complex_command",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:complex_command",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "13:complex_command",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "17:complex_command",
      "target": "7:set_env",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "7:set_env",
      "key": 0
    }
  ]
}