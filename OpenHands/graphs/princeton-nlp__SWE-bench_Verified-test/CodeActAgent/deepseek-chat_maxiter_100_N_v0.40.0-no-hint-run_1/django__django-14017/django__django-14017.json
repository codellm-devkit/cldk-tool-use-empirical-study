{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-14017",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/django__django__4.0"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        3,
        4,
        8,
        10,
        12,
        25,
        45
      ],
      "id": "1:cd"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:grep"
    },
    {
      "label": "find",
      "args": [
        ".",
        "runtests.py",
        "manage.py"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "3:find"
    },
    {
      "label": "python",
      "args": [
        "tests/runtests.py"
      ],
      "phase": "verification",
      "step_indices": [
        3
      ],
      "id": "4:python"
    },
    {
      "label": "grep",
      "args": [],
      "phase": "general",
      "step_indices": [
        4,
        4,
        10
      ],
      "id": "5:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/query_utils.py",
        "view_range": [
          70,
          100
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/query_utils.py",
        "view_range": [
          50,
          70
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/expressions.py",
        "view_range": [
          1000,
          1020
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "django/db/models/expressions.py"
      ],
      "phase": "general",
      "step_indices": [
        8
      ],
      "id": "9:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/expressions.py",
        "view_range": [
          1150,
          1170
        ]
      },
      "phase": "localization",
      "step_indices": [
        9
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/expressions.py",
        "view_range": [
          500,
          520
        ]
      },
      "phase": "localization",
      "step_indices": [
        11
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "def __rand__",
        "django/db/models/expressions.py"
      ],
      "phase": "general",
      "step_indices": [
        12
      ],
      "id": "12:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/expressions.py",
        "view_range": [
          1150,
          1180
        ]
      },
      "phase": "localization",
      "step_indices": [
        13
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/expressions.py",
        "old_str": "    def __invert__(self):\n        clone = self.copy()\n        clone.negated = not self.negated\n        return clone\n\n    def as_sql(self, compiler, connection, template=None, **extra_context):",
        "new_str": "    def __invert__(self):\n        clone = self.copy()\n        clone.negated = not self.negated\n        return clone\n\n    def __rand__(self, other):\n        from django.db.models import Q\n        if isinstance(other, Q):\n            return other &amp; self\n        raise TypeError(\n            f\"Unsupported operand types for &amp;: 'Q' and '{other.__class__.__name__}'\"\n        )\n\n    def __ror__(self, other):\n        from django.db.models import Q\n        if isinstance(other, Q):\n            return other | self\n        raise TypeError(\n            f\"Unsupported operand types for |: 'Q' and '{other.__class__.__name__}'\"\n        )\n\n    def as_sql(self, compiler, connection, template=None, **extra_context):",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "file_text": "\nfrom django.db.models import Q, Exists\nfrom django.test import TestCase\n\nclass ExistsQTest(TestCase):\n    def test_exists_and_q(self):\n        # Should not raise TypeError\n        result = Q() &amp; Exists(None)\n        self.assertIsNotNone(result)\n        \n    def test_q_and_exists(self):\n        # Should not raise TypeError\n        result = Exists(None) &amp; Q()\n        self.assertIsNotNone(result)\n\nif __name__ == '__main__':\n    import django\n    django.setup()\n    TestCase.main()\n"
      },
      "phase": "verification",
      "step_indices": [
        15
      ],
      "id": "15:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "args": [
        "/workspace"
      ],
      "phase": "general",
      "step_indices": [
        16,
        18,
        20,
        22,
        24,
        31,
        33,
        37,
        41,
        44,
        46
      ],
      "id": "16:cd"
    },
    {
      "label": "python",
      "args": [
        "test_exists_q.py"
      ],
      "phase": "verification",
      "step_indices": [
        16,
        18,
        20,
        22,
        24,
        31,
        33,
        37,
        41,
        44,
        46
      ],
      "id": "17:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "\nif __name__ == '__main__':\n    import django\n    django.setup()\n    TestCase.main()\n",
        "new_str": "\nif __name__ == '__main__':\n    import os\n    import django\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    TestCase.main()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "\nif __name__ == '__main__':\n    import os\n    import django\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    TestCase.main()\n",
        "new_str": "\nif __name__ == '__main__':\n    import os\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "\nfrom django.db.models import Q, Exists\nfrom django.test import TestCase\n\nclass ExistsQTest(TestCase):\n    def test_exists_and_q(self):\n        # Should not raise TypeError\n        result = Q() &amp; Exists(None)\n        self.assertIsNotNone(result)\n        \n    def test_q_and_exists(self):\n        # Should not raise TypeError\n        result = Exists(None) &amp; Q()\n        self.assertIsNotNone(result)\n\nif __name__ == '__main__':\n    import os\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n",
        "new_str": "\nfrom django.db.models import Q, Exists\nfrom django.test import TestCase, override_settings\n\n@override_settings(DATABASES={\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': ':memory:'\n    }\n})\nclass ExistsQTest(TestCase):\n    def test_exists_and_q(self):\n        # Should not raise TypeError\n        result = Q() & Exists(None)\n        self.assertIsNotNone(result)\n        \n    def test_q_and_exists(self):\n        # Should not raise TypeError\n        result = Exists(None) & Q()\n        self.assertIsNotNone(result)\n\nif __name__ == '__main__':\n    import os\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/query_utils.py",
        "old_str": "\n    def _combine(self, other, conn):\n        if not isinstance(other, Q):\n            raise TypeError(other)\n\n        # If the other Q() is empty, ignore it and just use `self`.\n        if not other:\n            _, args, kwargs = self.deconstruct()\n            return type(self)(*args, **kwargs)\n        # Or if this Q is empty, ignore it and just use `other`.\n        elif not self:\n            _, args, kwargs = other.deconstruct()\n            return type(other)(*args, **kwargs)\n\n        obj = type(self)()\n        obj.connector = conn\n        obj.add(self, conn)\n        obj.add(other, conn)\n        return obj\n",
        "new_str": "\n    def _combine(self, other, conn):\n        from django.db.models.expressions import Exists\n        if not isinstance(other, (Q, Exists)):\n            raise TypeError(other)\n\n        # If the other Q() is empty, ignore it and just use `self`.\n        if isinstance(other, Q) and not other:\n            _, args, kwargs = self.deconstruct()\n            return type(self)(*args, **kwargs)\n        # Or if this Q is empty, ignore it and just use `other`.\n        elif not self:\n            _, args, kwargs = other.deconstruct()\n            return type(other)(*args, **kwargs)\n\n        obj = type(self)()\n        obj.connector = conn\n        obj.add(self, conn)\n        obj.add(other, conn)\n        return obj\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "ls",
      "args": [],
      "phase": "general",
      "step_indices": [
        25
      ],
      "id": "22:ls"
    },
    {
      "label": "head",
      "args": [
        "django/db/models/query_utils.py",
        "|",
        "tail"
      ],
      "phase": "general",
      "step_indices": [
        25
      ],
      "id": "23:head"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/query_utils.py",
        "old_str": "\n    def _combine(self, other, conn):\n        if not isinstance(other, Q):\n            raise TypeError(other)\n\n        # If the other Q() is empty, ignore it and just use `self`.\n        if not other:\n            _, args, kwargs = self.deconstruct()\n            return type(self)(*args, **kwargs)\n        # Or if this Q is empty, ignore it and just use `other`.\n        elif not self:\n            _, args, kwargs = other.deconstruct()\n            return type(other)(*args, **kwargs)\n\n        obj = type(self)()\n        obj.connector = conn\n        obj.add(self, conn)\n        obj.add(other, conn)\n        return obj\n",
        "new_str": "\n    def _combine(self, other, conn):\n        from django.db.models.expressions import Exists\n        if not isinstance(other, (Q, Exists)):\n            raise TypeError(other)\n\n        # If the other Q() is empty, ignore it and just use `self`.\n        if isinstance(other, Q) and not other:\n            _, args, kwargs = self.deconstruct()\n            return type(self)(*args, **kwargs)\n        # Or if this Q is empty, ignore it and just use `other`.\n        elif not self:\n            _, args, kwargs = other.deconstruct()\n            return type(other)(*args, **kwargs)\n\n        obj = type(self)()\n        obj.connector = conn\n        obj.add(self, conn)\n        obj.add(other, conn)\n        return obj\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.0/django/db/models/query_utils.py",
        "view_range": [
          40,
          60
        ]
      },
      "phase": "localization",
      "step_indices": [
        27
      ],
      "id": "25:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "\n\n    def test_exists_and_q(self):\n        # Should not raise TypeError\n        result = Q() & Exists(None)\n        self.assertIsNotNone(result)\n\n",
        "new_str": "\n\n    def test_exists_and_q(self):\n        # Debug output\n        from django.db.models.query_utils import Q\n        print(f\"Q._combine code: {Q._combine.__code__.co_code}\")\n        \n        # Should not raise TypeError\n        result = Q() & Exists(None)\n        self.assertIsNotNone(result)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        28
      ],
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "view_range": [
          11,
          15
        ]
      },
      "phase": "localization",
      "step_indices": [
        29
      ],
      "id": "27:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "    def test_exists_and_q(self):\n        # Should not raise TypeError\n        result = Q() & Exists(None)\n        self.assertIsNotNone(result)",
        "new_str": "    def test_exists_and_q(self):\n        # Debug output\n        from django.db.models.query_utils import Q\n        print(f\"Q._combine code: {Q._combine.__code__.co_code}\")\n        \n        # Should not raise TypeError\n        result = Q() & Exists(None)\n        self.assertIsNotNone(result)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        30
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "\n    def test_exists_and_q(self):\n        # Debug output\n        from django.db.models.query_utils import Q\n        print(f\"Q._combine code: {Q._combine.__code__.co_code}\")\n        \n        # Should not raise TypeError\n        result = Q() & Exists(None)\n        self.assertIsNotNone(result)\n",
        "new_str": "\n    def test_exists_and_q(self):\n        # Debug Django installation path\n        import django\n        print(f\"Django path: {django.__file__}\")\n        from django.db.models.query_utils import Q\n        print(f\"Q._combine code: {Q._combine.__code__.co_code}\")\n        \n        # Should not raise TypeError\n        result = Q() & Exists(None)\n        self.assertIsNotNone(result)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        32
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "\n\nif __name__ == '__main__':\n    import os\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n\n",
        "new_str": "\n\nif __name__ == '__main__':\n    import os\n    import sys\n    # Prepend our modified Django to the path\n    sys.path.insert(0, '/workspace/django__django__4.0')\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        34
      ],
      "id": "30:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "view_range": [
          26,
          31
        ]
      },
      "phase": "localization",
      "step_indices": [
        35
      ],
      "id": "31:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "\nif __name__ == '__main__':\n    import os\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n",
        "new_str": "\nif __name__ == '__main__':\n    import os\n    import sys\n    sys.path.insert(0, '/workspace/django__django__4.0')\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        36
      ],
      "id": "32:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "\n\nif __name__ == '__main__':\n    import os\n    import sys\n    sys.path.insert(0, '/workspace/django__django__4.0')\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n\n",
        "new_str": "\n\nif __name__ == '__main__':\n    import os\n    import sys\n    # Remove any existing Django installations from path\n    sys.path = [p for p in sys.path if 'django' not in p.lower()]\n    # Force our modified Django to be first\n    sys.path.insert(0, '/workspace/django__django__4.0')\n    print(\"Python path:\", sys.path)\n    import django\n    print(\"Django path:\", django.__file__)\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        38
      ],
      "id": "33:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "view_range": [
          28,
          36
        ]
      },
      "phase": "localization",
      "step_indices": [
        39
      ],
      "id": "34:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_exists_q.py",
        "old_str": "if __name__ == '__main__':\n    import os\n    import sys\n    sys.path.insert(0, '/workspace/django__django__4.0')\n    import django\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()",
        "new_str": "if __name__ == '__main__':\n    import os\n    import sys\n    # Remove any existing Django installations from path\n    sys.path = [p for p in sys.path if 'django' not in p.lower()]\n    # Force our modified Django to be first\n    sys.path.insert(0, '/workspace/django__django__4.0')\n    print(\"Python path:\", sys.path)\n    import django\n    print(\"Django path:\", django.__file__)\n    import unittest\n    os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n    django.setup()\n    unittest.main()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        40
      ],
      "id": "35:str_replace_editor\nstr_replace"
    },
    {
      "label": "pip",
      "args": [
        "show",
        "django"
      ],
      "phase": "general",
      "step_indices": [
        42
      ],
      "id": "36:pip"
    },
    {
      "label": "pip",
      "args": [
        "uninstall"
      ],
      "phase": "general",
      "step_indices": [
        43
      ],
      "id": "37:pip"
    },
    {
      "label": "pip",
      "args": [
        "install"
      ],
      "phase": "general",
      "step_indices": [
        45
      ],
      "id": "38:pip"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:grep",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "3:find",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "4:python",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "5:grep",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "1:cd",
      "target": "5:grep",
      "key": 1
    },
    {
      "label": "8",
      "type": "exec",
      "source": "1:cd",
      "target": "9:grep",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "1:cd",
      "target": "12:grep",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "1:cd",
      "target": "22:ls",
      "key": 0
    },
    {
      "label": "45",
      "type": "exec",
      "source": "1:cd",
      "target": "38:pip",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:find",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:python",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "5:grep",
      "target": "5:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:grep",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "5:grep",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:grep",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:grep",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "13:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "15:str_replace_editor\ncreate",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 1
    },
    {
      "label": "20",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 2
    },
    {
      "label": "22",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 3
    },
    {
      "label": "24",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 4
    },
    {
      "label": "31",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 5
    },
    {
      "label": "33",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 6
    },
    {
      "label": "37",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 7
    },
    {
      "label": "41",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 8
    },
    {
      "label": "44",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 9
    },
    {
      "label": "46",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 10
    },
    {
      "label": "17",
      "type": "exec",
      "source": "17:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "17:python",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "17:python",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "17:python",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "17:python",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "45",
      "type": "exec",
      "source": "17:python",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "32",
      "type": "exec",
      "source": "17:python",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "17:python",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "17:python",
      "target": "33:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "17:python",
      "target": "36:pip",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "22:ls",
      "target": "23:head",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "23:head",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "25:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "25:str_replace_editor\nview",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "27:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "27:str_replace_editor\nview",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "31:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "31:str_replace_editor\nview",
      "target": "32:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "32:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "33:str_replace_editor\nstr_replace",
      "target": "34:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "34:str_replace_editor\nview",
      "target": "35:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "35:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "43",
      "type": "exec",
      "source": "36:pip",
      "target": "37:pip",
      "key": 0
    },
    {
      "label": "44",
      "type": "exec",
      "source": "37:pip",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "46",
      "type": "exec",
      "source": "38:pip",
      "target": "16:cd",
      "key": 0
    }
  ]
}