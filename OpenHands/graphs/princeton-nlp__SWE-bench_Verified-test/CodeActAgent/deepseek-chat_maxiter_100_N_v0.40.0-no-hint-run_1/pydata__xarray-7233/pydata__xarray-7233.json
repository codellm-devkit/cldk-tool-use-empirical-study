{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "pydata__xarray-7233",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/pydata__xarray__2022.09"
      ],
      "phase": "general",
      "step_indices": [
        1,
        3,
        10,
        12,
        13
      ],
      "id": "1:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "test_*.py",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pydata__xarray__2022.09/xarray/tests/test_coarsen.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "xarray/"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pydata__xarray__2022.09/xarray/core/rolling.py",
        "view_range": [
          500,
          600
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pydata__xarray__2022.09/xarray/core/rolling.py",
        "view_range": [
          700,
          800
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pydata__xarray__2022.09/xarray/core/rolling.py",
        "view_range": [
          796,
          900
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pydata__xarray__2022.09/xarray/core/rolling.py",
        "view_range": [
          880,
          1000
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pydata__xarray__2022.09/xarray/core/rolling.py",
        "old_str": "        should_be_coords = set(window_dim) & set(self.obj.coords)\n        result = reshaped.set_coords(should_be_coords)",
        "new_str": "        # Preserve all original coordinates, not just window dimensions\n        result = reshaped.set_coords(self.obj.coords)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/pydata__xarray__2022.09/xarray/tests/test_coarsen_construct_coords.py",
        "file_text": "\nimport numpy as np\nimport xarray as xr\n\ndef test_coarsen_construct_preserves_coords():\n    \"\"\"Test that coarsen.construct preserves non-dimensional coordinates\"\"\"\n    da = xr.DataArray(np.arange(24), dims=[\"time\"])\n    da = da.assign_coords(day=365 * da)\n    ds = da.to_dataset(name=\"T\")\n    \n    # Original behavior - 'day' gets demoted to variable\n    result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n    assert \"day\" in result.coords  # Should now pass\n    assert isinstance(result.coords[\"day\"], xr.DataArray)\n    \n    # Test with multiple non-dim coords\n    da = da.assign_coords(month=da % 12)\n    ds = da.to_dataset(name=\"T\")\n    result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n    assert all(c in result.coords for c in [\"day\", \"month\"])\n"
      },
      "phase": "verification",
      "step_indices": [
        9
      ],
      "id": "10:str_replace_editor\ncreate"
    },
    {
      "label": "pytest",
      "args": [
        "xarray/tests/test_coarsen_construct_coords.py"
      ],
      "phase": "general",
      "step_indices": [
        10,
        12
      ],
      "id": "11:pytest"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pydata__xarray__2022.09/xarray/tests/test_coarsen_construct_coords.py",
        "old_str": "\n    # Test with multiple non-dim coords\n    da = da.assign_coords(month=da % 12)\n    ds = da.to_dataset(name=\"T\")\n    result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n    assert all(c in result.coords for c in [\"day\", \"month\"])\n",
        "new_str": "\n    # Test with multiple non-dim coords (using different names to avoid conflict)\n    da = da.assign_coords(season=da % 4)\n    ds = da.to_dataset(name=\"T\")\n    result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n    assert all(c in result.coords for c in [\"day\", \"season\"])\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "pytest",
      "args": [
        "xarray/tests/test_coarsen.py"
      ],
      "phase": "general",
      "step_indices": [
        13
      ],
      "id": "13:pytest"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "4:grep",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "1:cd",
      "target": "11:pytest",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "1:cd",
      "target": "11:pytest",
      "key": 1
    },
    {
      "label": "13",
      "type": "exec",
      "source": "1:cd",
      "target": "13:pytest",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:find",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:grep",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:str_replace_editor\ncreate",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:pytest",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "11:pytest",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    }
  ]
}