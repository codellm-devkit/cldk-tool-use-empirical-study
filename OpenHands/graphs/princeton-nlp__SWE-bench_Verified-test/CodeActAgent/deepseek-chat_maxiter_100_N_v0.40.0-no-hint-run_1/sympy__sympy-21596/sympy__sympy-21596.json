{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unsubmitted",
    "instance_name": "sympy__sympy-21596",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        21,
        22
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/sympy__sympy__1.9"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        3,
        4,
        7,
        9,
        11,
        12,
        13,
        14,
        16,
        19,
        25,
        26,
        27,
        28,
        31,
        34,
        36,
        39,
        40
      ],
      "id": "1:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "test*.py",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:find"
    },
    {
      "label": "find",
      "args": [
        ".",
        "test*.py",
        "|",
        "grep",
        "set|image"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "3:find"
    },
    {
      "label": "head",
      "args": [
        "sympy/sets/tests/test_fancysets.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:head"
    },
    {
      "label": "echo",
      "args": [],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "5:echo"
    },
    {
      "label": "head",
      "args": [
        "sympy/sets/tests/test_contains.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "6:head"
    },
    {
      "label": "grep",
      "args": [
        "sympy/sets/",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "7:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/sets.py",
        "view_range": [
          500,
          550
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/sets.py",
        "view_range": [
          1000,
          1050
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "sympy/sets/sets.py"
      ],
      "phase": "general",
      "step_indices": [
        7,
        9,
        11,
        40
      ],
      "id": "10:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/sets.py",
        "view_range": [
          100,
          150
        ]
      },
      "phase": "localization",
      "step_indices": [
        8
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/sets.py",
        "view_range": [
          1300,
          1350
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "sympy/sets/sets.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        12
      ],
      "id": "13:grep"
    },
    {
      "label": "grep",
      "args": [
        "sympy/sets/sets.py",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        13
      ],
      "id": "14:grep"
    },
    {
      "label": "grep",
      "args": [
        "sympy/sets/fancysets.py"
      ],
      "phase": "general",
      "step_indices": [
        14,
        16
      ],
      "id": "15:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "view_range": [
          1,
          50
        ]
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "view_range": [
          280,
          330
        ]
      },
      "phase": "localization",
      "step_indices": [
        17
      ],
      "id": "17:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "view_range": [
          350,
          400
        ]
      },
      "phase": "localization",
      "step_indices": [
        18
      ],
      "id": "18:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "sympy/sets/fancysets.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        19
      ],
      "id": "19:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "view_range": [
          280,
          500
        ]
      },
      "phase": "localization",
      "step_indices": [
        20
      ],
      "id": "20:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n    def _contains(self, other):\n        from sympy.solvers.solveset import _solveset_multi\n\n        def get_symsetmap(signature, base_sets):\n            '''Attempt to get a map of symbols to base_sets'''\n            queue = list(zip(signature, base_sets))\n            symsetmap = {}\n            for sig, base_set in queue:\n                if sig.is_symbol:\n                    symsetmap[sig] = base_set\n                elif base_set.is_ProductSet:\n                    sets = base_set.sets\n                    if len(sig) != len(sets):\n                        raise ValueError(\"Incompatible signature\")\n                    # Recurse\n                    queue.extend(zip(sig, sets))\n                else:\n                    # If we get here then we have something like sig = (x, y) and\n                    # base_set = {(1, 2), (3, 4)}. For now we give up.\n                    return None\n\n            return symsetmap\n",
        "new_str": "\n    def _contains(self, other):\n        from sympy.solvers.solveset import _solveset_multi\n        from sympy.sets.sets import Reals\n\n        def get_symsetmap(signature, base_sets):\n            '''Attempt to get a map of symbols to base_sets'''\n            queue = list(zip(signature, base_sets))\n            symsetmap = {}\n            for sig, base_set in queue:\n                if sig.is_symbol:\n                    symsetmap[sig] = base_set\n                elif base_set.is_ProductSet:\n                    sets = base_set.sets\n                    if len(sig) != len(sets):\n                        raise ValueError(\"Incompatible signature\")\n                    # Recurse\n                    queue.extend(zip(sig, sets))\n                else:\n                    # If we get here then we have something like sig = (x, y) and\n                    # base_set = {(1, 2), (3, 4)}. For now we give up.\n                    return None\n\n            return symsetmap\n\n        # Special case for intersection with Reals\n        if other in Reals and any(sym in Reals for sym in self.lamda.expr.free_symbols):\n            # Check if imaginary part equals zero\n            imag_part = self.lamda.expr.as_real_imag()[1]\n            if imag_part != 0:\n                solutions = _solveset_multi([Eq(imag_part, 0)], self.lamda.variables, self.base_sets)\n                if solutions is None or solutions.is_empty:\n                    return False\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n        # Special case for intersection with Reals\n        if other in Reals and any(sym in Reals for sym in self.lamda.expr.free_symbols):\n            # Check if imaginary part equals zero\n            imag_part = self.lamda.expr.as_real_imag()[1]\n            if imag_part != 0:\n                solutions = _solveset_multi([Eq(imag_part, 0)], self.lamda.variables, self.base_sets)\n                if solutions is None or solutions.is_empty:\n                    return False\n",
        "new_str": "\n        # Special case for intersection with Reals\n        if other in Reals and any(sym in Reals for sym in self.lamda.expr.free_symbols):\n            # Check both real and imaginary parts\n            real_part, imag_part = self.lamda.expr.as_real_imag()\n            if imag_part != 0:\n                # First ensure imaginary part can be zero\n                imag_solutions = _solveset_multi([Eq(imag_part, 0)], self.lamda.variables, self.base_sets)\n                if imag_solutions is None or imag_solutions.is_empty:\n                    return False\n                # Then check if real part matches the candidate value\n                real_solutions = _solveset_multi([Eq(real_part, other)], self.lamda.variables, self.base_sets)\n                return fuzzy_not(real_solutions.is_empty) if real_solutions is not None else None\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "python3",
      "args": [],
      "phase": "general",
      "step_indices": [
        25,
        26,
        27,
        28,
        31,
        34,
        36,
        39
      ],
      "id": "23:python3"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n\n    def _contains(self, other):\n        from sympy.solvers.solveset import _solveset_multi\n        from sympy.sets.sets import Reals\n\n        def get_symsetmap(signature, base_sets):\n",
        "new_str": "\n\n    def _contains(self, other):\n        from sympy.solvers.solveset import _solveset_multi\n        from sympy.core.singleton import S\n\n        def get_symsetmap(signature, base_sets):\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n\n        # Special case for intersection with Reals\n        if other in Reals and any(sym in Reals for sym in self.lamda.expr.free_symbols):\n",
        "new_str": "\n\n        # Special case for intersection with Reals\n        if other in S.Reals and any(sym in S.Reals for sym in self.lamda.expr.free_symbols):\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        30
      ],
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n\n\n        # Special case for intersection with Reals\n        if other in S.Reals and any(sym in S.Reals for sym in self.lamda.expr.free_symbols):\n            # Check both real and imaginary parts\n            real_part, imag_part = self.lamda.expr.as_real_imag()\n            if imag_part != 0:\n                # First ensure imaginary part can be zero\n                imag_solutions = _solveset_multi([Eq(imag_part, 0)], self.lamda.variables, self.base_sets)\n                if imag_solutions is None or imag_solutions.is_empty:\n                    return False\n                # Then check if real part matches the candidate value\n                real_solutions = _solveset_multi([Eq(real_part, other)], self.lamda.variables, self.base_sets)\n                return fuzzy_not(real_solutions.is_empty) if real_solutions is not None else None\n\n",
        "new_str": "\n\n\n        # Special case for intersection with Reals\n        try:\n            if other in S.Reals and any(S.Reals.contains(sym) is S.true for sym in self.lamda.expr.free_symbols):\n                # Check both real and imaginary parts\n                real_part, imag_part = self.lamda.expr.as_real_imag()\n                if imag_part != 0:\n                    # First ensure imaginary part can be zero\n                    imag_solutions = _solveset_multi([Eq(imag_part, 0)], self.lamda.variables, self.base_sets)\n                    if imag_solutions is None or imag_solutions.is_empty:\n                        return False\n                    # Then check if real part matches the candidate value\n                    real_solutions = _solveset_multi([Eq(real_part, other)], self.lamda.variables, self.base_sets)\n                    return fuzzy_not(real_solutions.is_empty) if real_solutions is not None else None\n        except TypeError:\n            pass\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        32
      ],
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n        # Special case for intersection with Reals\n        if other in S.Reals and any(sym in S.Reals for sym in self.lamda.expr.free_symbols):\n            # Check both real and imaginary parts\n            real_part, imag_part = self.lamda.expr.as_real_imag()\n            if imag_part != 0:\n                # First ensure imaginary part can be zero\n                imag_solutions = _solveset_multi([Eq(imag_part, 0)], self.lamda.variables, self.base_sets)\n                if imag_solutions is None or imag_solutions.is_empty:\n                    return False\n                # Then check if real part matches the candidate value\n                real_solutions = _solveset_multi([Eq(real_part, other)], self.lamda.variables, self.base_sets)\n                return fuzzy_not(real_solutions.is_empty) if real_solutions is not None else None\n",
        "new_str": "\n        # Special case for intersection with Reals\n        try:\n            if other in S.Reals and any(S.Reals.contains(sym) is S.true for sym in self.lamda.expr.free_symbols):\n                # Check both real and imaginary parts\n                real_part, imag_part = self.lamda.expr.as_real_imag()\n                if imag_part != 0:\n                    # First ensure imaginary part can be zero\n                    imag_solutions = _solveset_multi([Eq(imag_part, 0)], self.lamda.variables, self.base_sets)\n                    if imag_solutions is None or imag_solutions.is_empty:\n                        return False\n                    # Then check if real part matches the candidate value\n                    real_solutions = _solveset_multi([Eq(real_part, other)], self.lamda.variables, self.base_sets)\n                    return fuzzy_not(real_solutions.is_empty) if real_solutions is not None else None\n        except TypeError:\n            pass\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        33
      ],
      "id": "27:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n\n        # Special case for intersection with Reals\n        try:\n            if other in S.Reals and any(S.Reals.contains(sym) is S.true for sym in self.lamda.expr.free_symbols):\n                # Check both real and imaginary parts\n                real_part, imag_part = self.lamda.expr.as_real_imag()\n                if imag_part != 0:\n                    # First ensure imaginary part can be zero\n                    imag_solutions = _solveset_multi([Eq(imag_part, 0)], self.lamda.variables, self.base_sets)\n                    if imag_solutions is None or imag_solutions.is_empty:\n                        return False\n                    # Then check if real part matches the candidate value\n                    real_solutions = _solveset_multi([Eq(real_part, other)], self.lamda.variables, self.base_sets)\n                    return fuzzy_not(real_solutions.is_empty) if real_solutions is not None else None\n        except TypeError:\n            pass\n\n",
        "new_str": "\n\n        # Special case for intersection with Reals\n        try:\n            if other in S.Reals and any(S.Reals.contains(sym) is S.true for sym in self.lamda.expr.free_symbols):\n                # Check both real and imaginary parts\n                real_part, imag_part = self.lamda.expr.as_real_imag()\n                if imag_part != 0:\n                    # Need to solve both conditions simultaneously\n                    solutions = _solveset_multi(\n                        [Eq(real_part, other), Eq(imag_part, 0)],\n                        self.lamda.variables,\n                        self.base_sets\n                    )\n                    return fuzzy_not(solutions.is_empty) if solutions is not None else None\n                else:\n                    # If no imaginary part, just check real part\n                    solutions = _solveset_multi(\n                        [Eq(real_part, other)],\n                        self.lamda.variables,\n                        self.base_sets\n                    )\n                    return fuzzy_not(solutions.is_empty) if solutions is not None else None\n        except TypeError:\n            pass\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        35
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n\n\n        # Special case for intersection with Reals\n        try:\n            if other in S.Reals and any(S.Reals.contains(sym) is S.true for sym in self.lamda.expr.free_symbols):\n                # Check both real and imaginary parts\n                real_part, imag_part = self.lamda.expr.as_real_imag()\n                if imag_part != 0:\n                    # Need to solve both conditions simultaneously\n                    solutions = _solveset_multi(\n                        [Eq(real_part, other), Eq(imag_part, 0)],\n                        self.lamda.variables,\n                        self.base_sets\n                    )\n                    return fuzzy_not(solutions.is_empty) if solutions is not None else None\n                else:\n                    # If no imaginary part, just check real part\n                    solutions = _solveset_multi(\n                        [Eq(real_part, other)],\n                        self.lamda.variables,\n                        self.base_sets\n                    )\n                    return fuzzy_not(solutions.is_empty) if solutions is not None else None\n        except TypeError:\n            pass\n\n\n",
        "new_str": "\n\n\n        # Special case for intersection with Reals\n        try:\n            if other in S.Reals:\n                # For real numbers, we must have Im(expr) = 0 and Re(expr) = other\n                expr = self.lamda.expr\n                # Create equations: Re(expr) = other and Im(expr) = 0\n                real_eq = Eq(expr.as_real_imag()[0], other)\n                imag_eq = Eq(expr.as_real_imag()[1], 0)\n                # Solve both equations simultaneously\n                solutions = _solveset_multi(\n                    [real_eq, imag_eq],\n                    self.lamda.variables,\n                    self.base_sets\n                )\n                return fuzzy_not(solutions.is_empty) if solutions is not None else None\n        except TypeError:\n            pass\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        37
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/fancysets.py",
        "old_str": "\n        # Special case for intersection with Reals\n        try:\n            if other in S.Reals and any(S.Reals.contains(sym) is S.true for sym in self.lamda.expr.free_symbols):\n                # Check both real and imaginary parts\n                real_part, imag_part = self.lamda.expr.as_real_imag()\n                if imag_part != 0:\n                    # Need to solve both conditions simultaneously\n                    solutions = _solveset_multi(\n                        [Eq(real_part, other), Eq(imag_part, 0)],\n                        self.lamda.variables,\n                        self.base_sets\n                    )\n                    return fuzzy_not(solutions.is_empty) if solutions is not None else None\n                else:\n                    # If no imaginary part, just check real part\n                    solutions = _solveset_multi(\n                        [Eq(real_part, other)],\n                        self.lamda.variables,\n                        self.base_sets\n                    )\n                    return fuzzy_not(solutions.is_empty) if solutions is not None else None\n        except TypeError:\n            pass\n",
        "new_str": "\n        # Special case for intersection with Reals\n        try:\n            if other in S.Reals:\n                # For real numbers, we must have Im(expr) = 0 and Re(expr) = other\n                expr = self.lamda.expr\n                # Create equations: Re(expr) = other and Im(expr) = 0\n                real_eq = Eq(expr.as_real_imag()[0], other)\n                imag_eq = Eq(expr.as_real_imag()[1], 0)\n                # Solve both equations simultaneously\n                solutions = _solveset_multi(\n                    [real_eq, imag_eq],\n                    self.lamda.variables,\n                    self.base_sets\n                )\n                return fuzzy_not(solutions.is_empty) if solutions is not None else None\n        except TypeError:\n            pass\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        38
      ],
      "id": "30:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/sets.py",
        "view_range": [
          1317,
          1367
        ]
      },
      "phase": "localization",
      "step_indices": [
        41
      ],
      "id": "31:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sympy__sympy__1.9/sympy/sets/sets.py",
        "old_str": "\n\n    def _contains(self, other):\n        return And(*[set.contains(other) for set in self.args])\n\n",
        "new_str": "\n\n    def _contains(self, other):\n        from sympy.core.singleton import S\n        from sympy.sets.fancysets import ImageSet\n        \n        # Special case for ImageSet \u2229 Reals\n        if (len(self.args) == 2 and S.Reals in self.args and \n            any(isinstance(s, ImageSet) for s in self.args)):\n            imageset = next(s for s in self.args if isinstance(s, ImageSet))\n            # Check if other is in both Reals AND the ImageSet\n            return S.Reals.contains(other) and imageset._contains(other)\n        \n        return And(*[set.contains(other) for set in self.args])\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        42
      ],
      "id": "32:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "0:empty action",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "0:empty action",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "3:find",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "4:head",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "7:grep",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "1:cd",
      "target": "10:grep",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "1:cd",
      "target": "10:grep",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "1:cd",
      "target": "10:grep",
      "key": 2
    },
    {
      "label": "40",
      "type": "exec",
      "source": "1:cd",
      "target": "10:grep",
      "key": 3
    },
    {
      "label": "12",
      "type": "exec",
      "source": "1:cd",
      "target": "13:grep",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "1:cd",
      "target": "14:grep",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "1:cd",
      "target": "15:grep",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "1:cd",
      "target": "15:grep",
      "key": 1
    },
    {
      "label": "19",
      "type": "exec",
      "source": "1:cd",
      "target": "19:grep",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "1:cd",
      "target": "23:python3",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "1:cd",
      "target": "23:python3",
      "key": 1
    },
    {
      "label": "27",
      "type": "exec",
      "source": "1:cd",
      "target": "23:python3",
      "key": 2
    },
    {
      "label": "28",
      "type": "exec",
      "source": "1:cd",
      "target": "23:python3",
      "key": 3
    },
    {
      "label": "31",
      "type": "exec",
      "source": "1:cd",
      "target": "23:python3",
      "key": 4
    },
    {
      "label": "34",
      "type": "exec",
      "source": "1:cd",
      "target": "23:python3",
      "key": 5
    },
    {
      "label": "36",
      "type": "exec",
      "source": "1:cd",
      "target": "23:python3",
      "key": 6
    },
    {
      "label": "39",
      "type": "exec",
      "source": "1:cd",
      "target": "23:python3",
      "key": 7
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:find",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:find",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "4:head",
      "target": "5:echo",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "5:echo",
      "target": "6:head",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "6:head",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "7:grep",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "10:grep",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:grep",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "10:grep",
      "target": "31:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "13:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "14:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "15:grep",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "15:grep",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "17:str_replace_editor\nview",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "18:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "19:grep",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "20:str_replace_editor\nview",
      "target": "0:empty action",
      "key": 0
    },
    {
      "type": "hier",
      "source": "20:str_replace_editor\nview",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "20:str_replace_editor\nview",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "23:python3",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "23:python3",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "28",
      "type": "exec",
      "source": "23:python3",
      "target": "1:cd",
      "key": 2
    },
    {
      "label": "40",
      "type": "exec",
      "source": "23:python3",
      "target": "1:cd",
      "key": 3
    },
    {
      "label": "29",
      "type": "exec",
      "source": "23:python3",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "23:python3",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "23:python3",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "23:python3",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "27:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "27:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "31:str_replace_editor\nview",
      "target": "32:str_replace_editor\nstr_replace",
      "key": 0
    }
  ]
}