{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-15732",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "hard",
    "files_change": 3
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/django__django__4.2"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28
      ],
      "id": "1:cd"
    },
    {
      "label": "\nfind",
      "args": [
        ".",
        "f",
        "*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:\nfind"
    },
    {
      "label": "\ngrep",
      "args": [
        ".",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "3:\ngrep"
    },
    {
      "label": "\ngrep",
      "args": [
        "alter_unique_together",
        "django/db/backends/base/schema.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:\ngrep"
    },
    {
      "label": "\ngrep",
      "args": [
        "_delete_composed_index",
        "django/db/backends/base/schema.py"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "5:\ngrep"
    },
    {
      "label": "\ngrep",
      "args": [
        "alter_unique_together",
        "django/db/backends/postgresql/schema.py"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "6:\ngrep"
    },
    {
      "label": "\ngrep",
      "args": [
        "_constraint_names",
        "django/db/backends/base/schema.py"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "7:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.2/django/db/backends/base/schema.py",
        "view_range": [
          500,
          550
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__4.2/django/db/backends/base/schema.py",
        "old_str": "        if len(constraint_names) != 1:\n            raise ValueError(\n                \"Found wrong number (%s) of constraints for %s(%s)\"\n                % (\n                    len(constraint_names),\n                    model._meta.db_table,\n                    \", \".join(columns),\n                )\n            )\n        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))",
        "new_str": "        # When dropping unique_together constraints, we might have multiple constraints\n        # (e.g. primary key + unique_together). Filter to only non-primary unique constraints\n        if constraint_kwargs.get('unique'):\n            constraint_names = [\n                name for name in constraint_names\n                if not any(\n                    c.name == name and c.primary_key\n                    for c in model._meta.constraints\n                )\n            ]\n        \n        if not constraint_names:\n            return  # No matching constraints to delete\n        \n        for constraint_name in constraint_names:\n            self.execute(self._delete_constraint_sql(sql, model, constraint_name))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "\nfind",
      "args": [
        "tests",
        "*.py",
        "|",
        "xargs",
        "grep",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "10:\nfind"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.2/tests/schema/tests.py",
        "view_range": [
          1,
          50
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.2/tests/schema/tests.py",
        "view_range": [
          500,
          550
        ]
      },
      "phase": "localization",
      "step_indices": [
        11
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.2/tests/schema/tests.py",
        "view_range": [
          100,
          150
        ]
      },
      "phase": "localization",
      "step_indices": [
        12
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__4.2/tests/schema/tests.py",
        "old_str": "\n    models = [\n        Author,\n        AuthorCharFieldWithIndex,\n        AuthorTextFieldWithIndex,\n        AuthorWithDefaultHeight,\n        AuthorWithEvenLongerName,\n        Book,\n        BookWeak,\n        BookWithLongName,\n        BookWithO2O,\n        BookWithSlug,\n        IntegerPK,\n        Node,\n        Note,\n        Tag,\n        TagIndexed,\n        TagM2MTest,\n        TagUniqueRename,\n        Thing,\n        UniqueTest,\n    ]\n",
        "new_str": "\n    models = [\n        Author,\n        AuthorCharFieldWithIndex,\n        AuthorTextFieldWithIndex,\n        AuthorWithDefaultHeight,\n        AuthorWithEvenLongerName,\n        Book,\n        BookWeak,\n        BookWithLongName,\n        BookWithO2O,\n        BookWithSlug,\n        IntegerPK,\n        Node,\n        Note,\n        Tag,\n        TagIndexed,\n        TagM2MTest,\n        TagUniqueRename,\n        Thing,\n        UniqueTest,\n        UniqueTogetherWithPK,\n    ]\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.2/tests/schema/tests.py",
        "view_range": [
          -100,
          -1
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.2/tests/schema/tests.py",
        "view_range": [
          4689,
          4739
        ]
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__4.2/tests/schema/tests.py",
        "old_str": "\n        finally:\n            if connection.vendor == \"postgresql\":\n                with connection.cursor() as cursor:\n                    cursor.execute(\"DROP COLLATION IF EXISTS case_insensitive\")\n",
        "new_str": "\n        finally:\n            if connection.vendor == \"postgresql\":\n                with connection.cursor() as cursor:\n                    cursor.execute(\"DROP COLLATION IF EXISTS case_insensitive\")\n\n    @isolate_apps(\"schema\")\n    def test_drop_unique_together_with_pk(self):\n        \"\"\"\n        Dropping unique_together constraint should work when primary key exists on same field.\n        \"\"\"\n        class UniqueTogetherWithPK(Model):\n            id = AutoField(primary_key=True)\n            name = CharField(max_length=255)\n\n            class Meta:\n                app_label = \"schema\"\n                unique_together = [('id',)]\n\n        with connection.schema_editor() as editor:\n            editor.create_model(UniqueTogetherWithPK)\n        \n        # Verify constraints exist\n        constraints = connection.introspection.get_constraints(\n            connection.cursor(), \n            UniqueTogetherWithPK._meta.db_table\n        )\n        self.assertTrue(any(c['unique'] and c['columns'] == ['id'] for c in constraints.values()))\n        \n        # Remove unique_together\n        UniqueTogetherWithPK._meta.unique_together = []\n        with connection.schema_editor() as editor:\n            editor.alter_unique_together(\n                UniqueTogetherWithPK,\n                [('id',)],\n                []\n            )\n        \n        # Verify only PK constraint remains\n        constraints = connection.introspection.get_constraints(\n            connection.cursor(), \n            UniqueTogetherWithPK._meta.db_table\n        )\n        self.assertEqual(\n            sum(1 for c in constraints.values() if c['unique'] and c['columns'] == ['id']),\n            1  # Just the PK constraint\n        )\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "\npython",
      "args": [
        "tests/schema/tests.py::SchemaTests::test_drop_unique_together_with_pk"
      ],
      "phase": "general",
      "step_indices": [
        17
      ],
      "id": "18:\npython"
    },
    {
      "label": "\npython",
      "args": [
        "test",
        "schema.tests.SchemaTests.test_drop_unique_together_with_pk"
      ],
      "phase": "general",
      "step_indices": [
        18,
        19
      ],
      "id": "19:\npython"
    },
    {
      "label": "\necho",
      "args": [
        "\nimport os\nos.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\nfrom django.conf import global_settings\nglobal_settings.TEST_RUNNER = 'django.test.runner.DiscoverRunner'\n",
        ">",
        "test_settings.py"
      ],
      "phase": "general",
      "step_indices": [
        19,
        20
      ],
      "id": "20:\necho"
    },
    {
      "label": "\nPYTHONPATH=/workspace/django__django__4.2",
      "args": [
        "python",
        "test",
        "tests.schema.tests.SchemaTests.test_drop_unique_together_with_pk"
      ],
      "phase": "general",
      "step_indices": [
        20,
        21,
        22
      ],
      "id": "21:\nPYTHONPATH=/workspace/django__django__4.2"
    },
    {
      "label": "\necho",
      "args": [
        "\nimport os\nos.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'\nfrom django.conf import settings\nsettings.configure(\n    INSTALLED_APPS=['tests.schema'],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:'\n        }\n    },\n    SECRET_KEY='test'\n)\n",
        ">",
        "test_settings.py"
      ],
      "phase": "general",
      "step_indices": [
        21
      ],
      "id": "22:\necho"
    },
    {
      "label": "\necho",
      "args": [
        "\nfrom django.conf import settings\nsettings.configure(\n    INSTALLED_APPS=['django.contrib.contenttypes', 'tests.schema'],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:'\n        }\n    },\n    SECRET_KEY='test',\n    DEFAULT_AUTO_FIELD='django.db.models.AutoField',\n)\n",
        ">",
        "test_settings.py"
      ],
      "phase": "general",
      "step_indices": [
        22
      ],
      "id": "23:\necho"
    },
    {
      "label": "\npython",
      "args": [
        "test",
        "tests.schema"
      ],
      "phase": "general",
      "step_indices": [
        23
      ],
      "id": "24:\npython"
    },
    {
      "label": "\necho",
      "args": [
        "\nimport unittest\nfrom django.db import connection\nfrom tests.schema.tests import SchemaTests\n\nclass TestUniqueTogetherFix(SchemaTests):\n    def test_drop_unique_together_with_pk(self):\n        super().setUp()\n        try:\n            super().test_drop_unique_together_with_pk()\n        finally:\n            super().tearDown()\n\nif __name__ == '__main__':\n    unittest.main()\n",
        ">",
        "test_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        24
      ],
      "id": "25:\necho"
    },
    {
      "label": "\nPYTHONPATH=/workspace/django__django__4.2",
      "args": [
        "python",
        "test_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        24
      ],
      "id": "26:\nPYTHONPATH=/workspace/django__django__4.2"
    },
    {
      "label": "\necho",
      "args": [
        "\nimport django\nfrom django.conf import settings\nsettings.configure(\n    INSTALLED_APPS=['django.contrib.contenttypes'],\n    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n    SECRET_KEY='test'\n)\ndjango.setup()\n\nfrom django.db import models, connection\n\nclass TestModel(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        unique_together = [('id',)]\n\n# Create table\nwith connection.schema_editor() as editor:\n    editor.create_model(TestModel)\n\n# Verify constraints\ncursor = connection.cursor()\nconstraints = connection.introspection.get_constraints(cursor, 'schema_testmodel')\nprint('Initial constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])\n\n# Remove unique_together\nTestModel._meta.unique_together = []\nwith connection.schema_editor() as editor:\n    editor.alter_unique_together(TestModel, [('id',)], [])\n\n# Verify remaining constraints\nconstraints = connection.introspection.get_constraints(cursor, 'schema_testmodel')\nprint('Remaining constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])\n",
        ">",
        "verify_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        25
      ],
      "id": "27:\necho"
    },
    {
      "label": "\npython",
      "args": [
        "verify_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        25,
        26
      ],
      "id": "28:\npython"
    },
    {
      "label": "\necho",
      "args": [
        "\nimport django\nfrom django.conf import settings\nsettings.configure(\n    INSTALLED_APPS=['django.contrib.contenttypes', 'verify_fix'],\n    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n    SECRET_KEY='test'\n)\ndjango.setup()\n\nfrom django.db import models, connection\n\nclass TestModel(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        app_label = 'verify_fix'\n        unique_together = [('id',)]\n\n# Create table\nwith connection.schema_editor() as editor:\n    editor.create_model(TestModel)\n\n# Verify constraints\ncursor = connection.cursor()\nconstraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')\nprint('Initial constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])\n\n# Remove unique_together\nTestModel._meta.unique_together = []\nwith connection.schema_editor() as editor:\n    editor.alter_unique_together(TestModel, [('id',)], [])\n\n# Verify remaining constraints\nconstraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')\nprint('Remaining constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])\n",
        ">",
        "verify_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        26
      ],
      "id": "29:\necho"
    },
    {
      "label": "\necho",
      "args": [
        "\nimport os\nos.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\nfrom django.conf import settings\nsettings.configure(\n    INSTALLED_APPS=['django.contrib.contenttypes'],\n    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n    SECRET_KEY='test'\n)\n\nfrom django.db import models, connection\n\nclass TestModel(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        app_label = 'verify_fix'\n        unique_together = [('id',)]\n\n# Create table\nwith connection.schema_editor() as editor:\n    editor.create_model(TestModel)\n\n# Verify constraints\ncursor = connection.cursor()\nconstraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')\nprint('Initial constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])\n\n# Remove unique_together\nTestModel._meta.unique_together = []\nwith connection.schema_editor() as editor:\n    editor.alter_unique_together(TestModel, [('id',)], [])\n\n# Verify remaining constraints\nconstraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')\nprint('Remaining constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])\n",
        ">",
        "verify_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        27
      ],
      "id": "30:\necho"
    },
    {
      "label": "\nPYTHONPATH=/workspace/django__django__4.2",
      "args": [
        "python",
        "verify_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        27,
        28
      ],
      "id": "31:\nPYTHONPATH=/workspace/django__django__4.2"
    },
    {
      "label": "\necho",
      "args": [
        "\nimport os\nos.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\nfrom django.conf import settings\nsettings.configure(\n    INSTALLED_APPS=['django.contrib.contenttypes'],\n    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n    SECRET_KEY='test'\n)\nimport django\ndjango.setup()\n\nfrom django.db import models, connection\n\nclass TestModel(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        app_label = 'verify_fix'\n        unique_together = [('id',)]\n\n# Create table\nwith connection.schema_editor() as editor:\n    editor.create_model(TestModel)\n\n# Verify constraints\ncursor = connection.cursor()\nconstraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')\nprint('Initial constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])\n\n# Remove unique_together\nTestModel._meta.unique_together = []\nwith connection.schema_editor() as editor:\n    editor.alter_unique_together(TestModel, [('id',)], [])\n\n# Verify remaining constraints\nconstraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')\nprint('Remaining constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])\n",
        ">",
        "verify_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        28
      ],
      "id": "32:\necho"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:\nfind",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "3:\ngrep",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "4:\ngrep",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "5:\ngrep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "1:cd",
      "target": "6:\ngrep",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "1:cd",
      "target": "7:\ngrep",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "1:cd",
      "target": "10:\nfind",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "1:cd",
      "target": "18:\npython",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "1:cd",
      "target": "19:\npython",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "1:cd",
      "target": "20:\necho",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "1:cd",
      "target": "20:\necho",
      "key": 1
    },
    {
      "label": "21",
      "type": "exec",
      "source": "1:cd",
      "target": "22:\necho",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "1:cd",
      "target": "23:\necho",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "1:cd",
      "target": "24:\npython",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "1:cd",
      "target": "25:\necho",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "1:cd",
      "target": "27:\necho",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "1:cd",
      "target": "29:\necho",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "1:cd",
      "target": "30:\necho",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "1:cd",
      "target": "32:\necho",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:\nfind",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:\ngrep",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:\nfind",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "18:\npython",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "19:\npython",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "19:\npython",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "19",
      "type": "exec",
      "source": "20:\necho",
      "target": "19:\npython",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "20:\necho",
      "target": "21:\nPYTHONPATH=/workspace/django__django__4.2",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "21:\nPYTHONPATH=/workspace/django__django__4.2",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "21:\nPYTHONPATH=/workspace/django__django__4.2",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "23",
      "type": "exec",
      "source": "21:\nPYTHONPATH=/workspace/django__django__4.2",
      "target": "1:cd",
      "key": 2
    },
    {
      "label": "21",
      "type": "exec",
      "source": "22:\necho",
      "target": "21:\nPYTHONPATH=/workspace/django__django__4.2",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "23:\necho",
      "target": "21:\nPYTHONPATH=/workspace/django__django__4.2",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "24:\npython",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "25:\necho",
      "target": "26:\nPYTHONPATH=/workspace/django__django__4.2",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "26:\nPYTHONPATH=/workspace/django__django__4.2",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "27:\necho",
      "target": "28:\npython",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "28:\npython",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "28:\npython",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "26",
      "type": "exec",
      "source": "29:\necho",
      "target": "28:\npython",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "30:\necho",
      "target": "31:\nPYTHONPATH=/workspace/django__django__4.2",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "31:\nPYTHONPATH=/workspace/django__django__4.2",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "32:\necho",
      "target": "31:\nPYTHONPATH=/workspace/django__django__4.2",
      "key": 0
    }
  ]
}