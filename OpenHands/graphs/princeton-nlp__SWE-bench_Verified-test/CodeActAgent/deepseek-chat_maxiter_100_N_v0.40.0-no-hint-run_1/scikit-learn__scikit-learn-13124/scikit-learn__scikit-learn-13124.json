{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "scikit-learn__scikit-learn-13124",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/scikit-learn__scikit-learn__0.21"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        7,
        12,
        13
      ],
      "id": "1:cd"
    },
    {
      "label": "\nfind",
      "args": [
        ".",
        "*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:\nfind"
    },
    {
      "label": "\nfind",
      "args": [
        ".",
        "test_*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "3:\nfind"
    },
    {
      "label": "\nfind",
      "args": [
        ".",
        "*.py",
        "grep",
        "{}",
        "+"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "4:\nfind"
    },
    {
      "label": "\nfind",
      "args": [
        ".",
        "test_*.py",
        "grep",
        "{}",
        "+"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "5:\nfind"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "view_range": [
          1,
          50
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "view_range": [
          50,
          100
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "view_range": [
          500,
          550
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "view_range": [
          700,
          750
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "sklearn/model_selection/_split.py"
      ],
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "10:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "view_range": [
          550,
          600
        ]
      },
      "phase": "localization",
      "step_indices": [
        8
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "view_range": [
          600,
          650
        ]
      },
      "phase": "localization",
      "step_indices": [
        9
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "view_range": [
          650,
          700
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/tests/test_split.py",
        "view_range": [
          1,
          50
        ]
      },
      "phase": "localization",
      "step_indices": [
        11
      ],
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "sklearn/model_selection/tests/test_split.py"
      ],
      "phase": "general",
      "step_indices": [
        12,
        13
      ],
      "id": "15:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/tests/test_split.py",
        "view_range": [
          340,
          360
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "view_range": [
          622,
          672
        ]
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "17:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "old_str": "\n        # pre-assign each sample to a test fold index using individual KFold\n        # splitting strategies for each class so as to respect the balance of\n        # classes\n        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n        # will break when the data is not 100% stratifiable for all classes.\n        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n        per_cls_cvs = [\n            KFold(self.n_splits, shuffle=self.shuffle,\n                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n            for count in y_counts]\n",
        "new_str": "\n        # pre-assign each sample to a test fold index using individual KFold\n        # splitting strategies for each class so as to respect the balance of\n        # classes\n        # First shuffle indices within each class if shuffle=True\n        shuffled_indices = np.zeros(n_samples, dtype=np.int)\n        for cls in unique_y:\n            cls_idx = np.where(y == cls)[0]\n            if self.shuffle:\n                rng.shuffle(cls_idx)\n            shuffled_indices[y == cls] = cls_idx\n\n        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n        # will break when the data is not 100% stratifiable for all classes.\n        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n        per_cls_cvs = [\n            KFold(self.n_splits, shuffle=False,\n                  random_state=None).split(np.zeros(max(count, self.n_splits)))\n            for count in y_counts]\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "old_str": "\n        test_folds = np.zeros(n_samples, dtype=np.int)\n        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n            for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n                cls_test_folds = test_folds[y == cls]\n",
        "new_str": "\n        test_folds = np.zeros(n_samples, dtype=np.int)\n        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n            for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n                # Use the shuffled indices for this class\n                cls_mask = (y == cls)\n                cls_test_folds = test_folds[cls_mask]\n                cls_shuffled_idx = shuffled_indices[cls_mask]\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/scikit-learn__scikit-learn__0.21/sklearn/model_selection/_split.py",
        "old_str": "\n                # the test split can be too big because we used\n                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%\n                # stratifiable for all the classes\n                # (we use a warning instead of raising an exception)\n                # If this is the case, let's trim it:\n                test_split = test_split[test_split < len(cls_test_folds)]\n                cls_test_folds[test_split] = test_fold_indices\n                test_folds[y == cls] = cls_test_folds\n",
        "new_str": "\n                # the test split can be too big because we used\n                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%\n                # stratifiable for all the classes\n                # (we use a warning instead of raising an exception)\n                # If this is the case, let's trim it:\n                test_split = test_split[test_split < len(cls_test_folds)]\n                # Assign to the original (shuffled) positions\n                cls_test_folds[cls_shuffled_idx[test_split]] = test_fold_indices\n                test_folds[cls_mask] = cls_test_folds\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_stratifiedkfold.py",
        "file_text": "\nimport numpy as np\nfrom sklearn.model_selection import StratifiedKFold\n\n# Reproduction of issue example\nsamples_per_class = 10\nX = np.linspace(0, samples_per_class*2-1, samples_per_class * 2)\ny = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)))\n\nprint(\"Original order:\")\nprint(X, '\\n', y, '\\n')\n\nprint(\"shuffle = False\")\nk_fold = StratifiedKFold(n_splits=10, shuffle=False)\nfor fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):\n    print(f\"Fold {fold_n}:\")\n    print(\"Train:\", train_idx, \"\\nTest:\", test_idx, '\\n')\n\nprint(\"shuffle = True\")\nk_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\nfor fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):\n    print(f\"Fold {fold_n}:\")\n    print(\"Train:\", train_idx, \"\\nTest:\", test_idx, '\\n')\n"
      },
      "phase": "verification",
      "step_indices": [
        19
      ],
      "id": "21:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "args": [
        "/workspace"
      ],
      "phase": "general",
      "step_indices": [
        20
      ],
      "id": "22:cd"
    },
    {
      "label": "python",
      "args": [
        "test_stratifiedkfold.py"
      ],
      "phase": "verification",
      "step_indices": [
        20
      ],
      "id": "23:python"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:\nfind",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "4:\nfind",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "1:cd",
      "target": "10:\ngrep",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "1:cd",
      "target": "15:\ngrep",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "1:cd",
      "target": "15:\ngrep",
      "key": 1
    },
    {
      "label": "1",
      "type": "exec",
      "source": "2:\nfind",
      "target": "3:\nfind",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:\nfind",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "4:\nfind",
      "target": "5:\nfind",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "5:\nfind",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "10:\ngrep",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "15:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "15:\ngrep",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "17:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "21:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "21:str_replace_editor\ncreate",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "22:cd",
      "target": "23:python",
      "key": 0
    }
  ]
}