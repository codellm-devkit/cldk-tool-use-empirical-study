{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sphinx-doc__sphinx-9602",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "cd",
      "args": [
        "/workspace/sphinx-doc__sphinx__4.2"
      ],
      "phase": "general",
      "step_indices": [
        0,
        1,
        2,
        6
      ],
      "id": "0:cd"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "1:grep"
    },
    {
      "label": "cat",
      "args": [
        "Makefile",
        "|",
        "grep",
        "test:"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:cat"
    },
    {
      "label": "\ngrep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        2,
        2,
        2
      ],
      "id": "3:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.2/sphinx/util/typing.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.2/sphinx/transforms/post_transforms/__init__.py"
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.2/sphinx/domains/python.py"
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "sphinx/domains/python.py"
      ],
      "phase": "general",
      "step_indices": [
        6,
        6
      ],
      "id": "7:\ngrep"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.2/sphinx/domains/python.py",
        "old_str": "def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n    \"\"\"Parse type annotation.\"\"\"\n    def unparse(node: ast.AST) -> List[Node]:\n        if isinstance(node, ast.Attribute):\n            return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n        elif isinstance(node, ast.BinOp):\n            result: List[Node] = unparse(node.left)\n            result.extend(unparse(node.op))\n            result.extend(unparse(node.right))\n            return result\n        elif isinstance(node, ast.BitOr):\n            return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n        elif isinstance(node, ast.Constant):  # type: ignore\n            if node.value is Ellipsis:\n                return [addnodes.desc_sig_punctuation('', \"...\")]\n            else:\n                return [nodes.Text(node.value)]\n        elif isinstance(node, ast.Expr):\n            return unparse(node.value)\n        elif isinstance(node, ast.Index):\n            return unparse(node.value)\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]\n            if node.elts:\n                # check if there are elements in node.elts to only pop the\n                # last element of result if the for-loop was run at least\n                # once\n                for elem in node.elts:\n                    result.extend(unparse(elem))\n                    result.append(addnodes.desc_sig_punctuation('', ', '))\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n        elif isinstance(node, ast.Module):\n            return sum((unparse(e) for e in node.body), [])\n        elif isinstance(node, ast.Name):\n            return [nodes.Text(node.id)]\n        elif isinstance(node, ast.Subscript):\n            result = unparse(node.value)\n            result.append(addnodes.desc_sig_punctuation('', '['))\n            result.extend(unparse(node.slice))\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n        elif isinstance(node, ast.Tuple):\n            if node.elts:\n                result = []\n                for elem in node.elts:\n                    result.extend(unparse(elem))\n                    result.append(addnodes.desc_sig_punctuation('', ', '))\n                result.pop()\n            else:\n                result = [addnodes.desc_sig_punctuation('', '('),\n                          addnodes.desc_sig_punctuation('', ')')]\n\n            return result\n        else:\n            if sys.version_info < (3, 8):\n                if isinstance(node, ast.Ellipsis):\n                    return [addnodes.desc_sig_punctuation('', \"...\")]\n                elif isinstance(node, ast.NameConstant):\n                    return [nodes.Text(node.value)]\n\n            raise SyntaxError  # unsupported syntax\n\n    if env is None:\n        warnings.warn(\"The env parameter for _parse_annotation becomes required now.\",\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        tree = ast_parse(annotation)\n        result = unparse(tree)\n        for i, node in enumerate(result):\n            if isinstance(node, nodes.Text) and node.strip():\n                result[i] = type_to_xref(str(node), env)\n        return result\n    except SyntaxError:\n        return [type_to_xref(annotation, env)]",
        "new_str": "def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n    \"\"\"Parse type annotation.\"\"\"\n    def unparse(node: ast.AST) -> List[Node]:\n        if isinstance(node, ast.Attribute):\n            return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n        elif isinstance(node, ast.BinOp):\n            result: List[Node] = unparse(node.left)\n            result.extend(unparse(node.op))\n            result.extend(unparse(node.right))\n            return result\n        elif isinstance(node, ast.BitOr):\n            return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n        elif isinstance(node, ast.Constant):  # type: ignore\n            if node.value is Ellipsis:\n                return [addnodes.desc_sig_punctuation('', \"...\")]\n            else:\n                return [nodes.Text(node.value)]\n        elif isinstance(node, ast.Expr):\n            return unparse(node.value)\n        elif isinstance(node, ast.Index):\n            return unparse(node.value)\n        elif isinstance(node, ast.List):\n            result = [addnodes.desc_sig_punctuation('', '[')]\n            if node.elts:\n                # check if there are elements in node.elts to only pop the\n                # last element of result if the for-loop was run at least\n                # once\n                for elem in node.elts:\n                    result.extend(unparse(elem))\n                    result.append(addnodes.desc_sig_punctuation('', ', '))\n                result.pop()\n            result.append(addnodes.desc_sig_punctuation('', ']'))\n            return result\n        elif isinstance(node, ast.Module):\n            return sum((unparse(e) for e in node.body), [])\n        elif isinstance(node, ast.Name):\n            return [nodes.Text(node.id)]\n        elif isinstance(node, ast.Subscript):\n            # Check for Literal type annotation\n            if (isinstance(node.value, ast.Name) and node.value.id == 'Literal':\n                # Keep Literal values as text nodes, don't convert to xrefs\n                result = [nodes.Text('Literal[')]\n                args = []\n                if isinstance(node.slice, ast.Index):\n                    slice_val = node.slice.value\n                    if isinstance(slice_val, ast.Tuple):\n                        for i, elem in enumerate(slice_val.elts):\n                            args.extend(unparse(elem))\n                            if i < len(slice_val.elts) - 1:\n                                args.append(nodes.Text(', '))\n                    else:\n                        args.extend(unparse(slice_val))\n                result.extend(args)\n                result.append(nodes.Text(']'))\n                return result\n            else:\n                result = unparse(node.value)\n                result.append(addnodes.desc_sig_punctuation('', '['))\n                result.extend(unparse(node.slice))\n                result.append(addnodes.desc_sig_punctuation('', ']'))\n                return result\n        elif isinstance(node, ast.Tuple):\n            if node.elts:\n                result = []\n                for elem in node.elts:\n                    result.extend(unparse(elem))\n                    result.append(addnodes.desc_sig_punctuation('', ', '))\n                result.pop()\n            else:\n                result = [addnodes.desc_sig_punctuation('', '('),\n                          addnodes.desc_sig_punctuation('', ')')]\n\n            return result\n        else:\n            if sys.version_info < (3, 8):\n                if isinstance(node, ast.Ellipsis):\n                    return [addnodes.desc_sig_punctuation('', \"...\")]\n                elif isinstance(node, ast.NameConstant):\n                    return [nodes.Text(node.value)]\n\n            raise SyntaxError  # unsupported syntax\n\n    if env is None:\n        warnings.warn(\"The env parameter for _parse_annotation becomes required now.\",\n                      RemovedInSphinx50Warning, stacklevel=2)\n\n    try:\n        tree = ast_parse(annotation)\n        result = unparse(tree)\n        for i, node in enumerate(result):\n            if isinstance(node, nodes.Text) and node.strip():\n                # Skip creating xrefs for Literal values\n                if not (len(result) > i+2 and \n                       isinstance(result[i+1], nodes.Text) and \n                       result[i+1] == 'Literal['):\n                    result[i] = type_to_xref(str(node), env)\n        return result\n    except SyntaxError:\n        return [type_to_xref(annotation, env)]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.2/sphinx/domains/python.py",
        "old_str": "\n            # Check for Literal type annotation\n            if (isinstance(node.value, ast.Name) and node.value.id == 'Literal':\n                # Keep Literal values as text nodes, don't convert to xrefs\n                result = [nodes.Text('Literal[')]\n                args = []\n                if isinstance(node.slice, ast.Index):\n                    slice_val = node.slice.value\n                    if isinstance(slice_val, ast.Tuple):\n                        for i, elem in enumerate(slice_val.elts):\n                            args.extend(unparse(elem))\n                            if i < len(slice_val.elts) - 1:\n                                args.append(nodes.Text(', '))\n                    else:\n                        args.extend(unparse(slice_val))\n                result.extend(args)\n                result.append(nodes.Text(']'))\n                return result\n            else:\n                result = unparse(node.value)\n                result.append(addnodes.desc_sig_punctuation('', '['))\n                result.extend(unparse(node.slice))\n                result.append(addnodes.desc_sig_punctuation('', ']'))\n                return result\n",
        "new_str": "\n            # Check for Literal type annotation\n            if (isinstance(node.value, ast.Name) and node.value.id == 'Literal':\n                # Keep Literal values as text nodes, don't convert to xrefs\n                result = [nodes.Text('Literal[')]\n                args = []\n                if isinstance(node.slice, ast.Index):\n                    slice_val = node.slice.value\n                    if isinstance(slice_val, ast.Tuple):\n                        for i, elem in enumerate(slice_val.elts):\n                            args.extend(unparse(elem))\n                            if i < len(slice_val.elts) - 1:\n                                args.append(nodes.Text(', '))\n                    else:\n                        args.extend(unparse(slice_val))\n                result.extend(args)\n                result.append(nodes.Text(']'))\n                return result\n            else:\n                result = unparse(node.value)\n                result.append(addnodes.desc_sig_punctuation('', '['))\n                result.extend(unparse(node.slice))\n                result.append(addnodes.desc_sig_punctuation('', ']'))\n                return result\n",
        "edit_status": "failure: unknown"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.2/sphinx/domains/python.py",
        "old_str": "\n            # Check for Literal type annotation\n            if (isinstance(node.value, ast.Name) and node.value.id == 'Literal':\n                # Keep Literal values as text nodes, don't convert to xrefs\n                result = [nodes.Text('Literal[')]\n                args = []\n                if isinstance(node.slice, ast.Index):\n                    slice_val = node.slice.value\n                    if isinstance(slice_val, ast.Tuple):\n                        for i, elem in enumerate(slice_val.elts):\n                            args.extend(unparse(elem))\n                            if i < len(slice_val.elts) - 1:\n                                args.append(nodes.Text(', '))\n                    else:\n                        args.extend(unparse(slice_val))\n                result.extend(args)\n                result.append(nodes.Text(']'))\n                return result\n            else:\n                result = unparse(node.value)\n                result.append(addnodes.desc_sig_punctuation('', '['))\n                result.extend(unparse(node.slice))\n                result.append(addnodes.desc_sig_punctuation('', ']'))\n                return result\n",
        "new_str": "\n            # Check for Literal type annotation\n            if isinstance(node.value, ast.Name) and node.value.id == 'Literal':\n                # Keep Literal values as text nodes, don't convert to xrefs\n                result = [nodes.Text('Literal[')]\n                args = []\n                if isinstance(node.slice, ast.Index):\n                    slice_val = node.slice.value\n                    if isinstance(slice_val, ast.Tuple):\n                        for i, elem in enumerate(slice_val.elts):\n                            args.extend(unparse(elem))\n                            if i < len(slice_val.elts) - 1:\n                                args.append(nodes.Text(', '))\n                    else:\n                        args.extend(unparse(slice_val))\n                result.extend(args)\n                result.append(nodes.Text(']'))\n                return result\n            else:\n                result = unparse(node.value)\n                result.append(addnodes.desc_sig_punctuation('', '['))\n                result.extend(unparse(node.slice))\n                result.append(addnodes.desc_sig_punctuation('', ']'))\n                return result\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "10:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:grep",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "0:cd",
      "target": "2:cat",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "0:cd",
      "target": "3:\ngrep",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "0:cd",
      "target": "7:\ngrep",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:grep",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:cat",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "3:\ngrep",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "3:\ngrep",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "7:\ngrep",
      "target": "7:\ngrep",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:\ngrep",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    }
  ]
}