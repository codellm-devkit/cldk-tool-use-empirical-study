{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pytest-dev__pytest-8399",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 2,
    "patch_difficulty": "medium",
    "files_change": 3
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/pytest-dev__pytest__6.3"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        7,
        8,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        30,
        32,
        35,
        36,
        40,
        45,
        47,
        49,
        51,
        53,
        57,
        60,
        64,
        67,
        72,
        81,
        94
      ],
      "id": "1:cd"
    },
    {
      "label": "\npytest",
      "args": [
        "testing/test_unittest.py"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:\npytest"
    },
    {
      "label": "\ngrep",
      "args": [
        "src/_pytest/"
      ],
      "phase": "general",
      "step_indices": [
        2,
        8,
        9,
        11,
        13
      ],
      "id": "3:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "view_range": [
          140,
          160
        ]
      },
      "phase": "localization",
      "step_indices": [
        3,
        74,
        89,
        96
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "view_range": [
          120,
          170
        ]
      },
      "phase": "localization",
      "step_indices": [
        4,
        26
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "name=f\"unittest_{setup_name}_fixture_{obj.__qualname__}\",",
        "new_str": "name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/testing/test_fixture_visibility.py",
        "file_text": "\nimport unittest\n\nclass TestFixtureVisibility(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        pass\n\n    def test_example(self):\n        pass\n"
      },
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "7:str_replace_editor\ncreate"
    },
    {
      "label": "\npytest",
      "args": [
        "|",
        "grep",
        "unittest_setUpClass_fixture"
      ],
      "phase": "general",
      "step_indices": [
        7,
        36,
        40,
        45,
        47,
        49,
        53,
        57,
        60,
        64,
        67,
        72,
        81,
        94
      ],
      "id": "8:\npytest"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/fixtures.py",
        "view_range": [
          500,
          520
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "view_range": [
          500,
          520
        ]
      },
      "phase": "localization",
      "step_indices": [
        12
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/fixtures.py",
        "view_range": [
          1,
          50
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [],
      "phase": "general",
      "step_indices": [
        15
      ],
      "id": "12:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/fixtures.py",
        "view_range": [
          870,
          890
        ]
      },
      "phase": "localization",
      "step_indices": [
        16
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "src/_pytest/fixtures.py"
      ],
      "phase": "general",
      "step_indices": [
        17,
        21,
        27
      ],
      "id": "14:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "view_range": [
          1000,
          1020
        ]
      },
      "phase": "localization",
      "step_indices": [
        18
      ],
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "src/_pytest/python.py"
      ],
      "phase": "general",
      "step_indices": [
        19,
        51
      ],
      "id": "16:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "view_range": [
          1470,
          1490
        ]
      },
      "phase": "localization",
      "step_indices": [
        20
      ],
      "id": "17:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/fixtures.py",
        "view_range": [
          1640,
          1660
        ]
      },
      "phase": "localization",
      "step_indices": [
        22
      ],
      "id": "18:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "src/_pytest/unittest.py"
      ],
      "phase": "general",
      "step_indices": [
        23
      ],
      "id": "19:\ngrep"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/testing/inspect_fixtures.py",
        "file_text": "\nimport pytest\nfrom _pytest.fixtures import FixtureManager\n\ndef test_inspect_fixtures(request):\n    fm = request.session._fixturemanager\n    for name, fixturedefs in fm._arg2fixturedefs.items():\n        if name.startswith('_unittest_'):\n            print(f\"Found unittest fixture: {name}\")\n            return\n    pytest.fail(\"No unittest fixtures found\")\n"
      },
      "phase": "verification",
      "step_indices": [
        24
      ],
      "id": "20:str_replace_editor\ncreate"
    },
    {
      "label": "\npytest",
      "args": [
        "testing/inspect_fixtures.py"
      ],
      "phase": "general",
      "step_indices": [
        25,
        30
      ],
      "id": "21:\npytest"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/fixtures.py",
        "view_range": [
          1000,
          1020
        ]
      },
      "phase": "localization",
      "step_indices": [
        28
      ],
      "id": "22:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/testing/inspect_fixtures.py",
        "old_str": "if name.startswith('_unittest_'):",
        "new_str": "if 'unittest' in name.lower():",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/testing/unittest_example.py",
        "file_text": "\n\nimport unittest\n\nclass ExampleTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        pass\n\n    def test_example(self):\n        pass\n\n"
      },
      "phase": "verification",
      "step_indices": [
        31
      ],
      "id": "24:str_replace_editor\ncreate"
    },
    {
      "label": "\nPYTEST_DEBUG=1",
      "args": [
        "pytest",
        "testing/unittest_example.py"
      ],
      "phase": "general",
      "step_indices": [
        32
      ],
      "id": "25:\nPYTEST_DEBUG=1"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "view_range": [
          140,
          150
        ]
      },
      "phase": "localization",
      "step_indices": [
        33
      ],
      "id": "26:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name to speed up lookup.\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )",
        "new_str": "@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name with underscore prefix to mark as private\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n        # Explicitly mark as private fixture\n        _pytestfixturefunction=True,\n    )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        34
      ],
      "id": "27:str_replace_editor\nstr_replace"
    },
    {
      "label": "\npytest",
      "args": [
        "testing/unittest_example.py"
      ],
      "phase": "general",
      "step_indices": [
        35
      ],
      "id": "28:\npytest"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name with underscore prefix to mark as private\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n        # Explicitly mark as private fixture\n        _pytestfixturefunction=True,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n",
        "new_str": "\n@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name with underscore prefix to mark as private\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture - do not use directly\"\"\"\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        37
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "view_range": [
          140,
          155
        ]
      },
      "phase": "localization",
      "step_indices": [
        38,
        42,
        55
      ],
      "id": "30:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name with underscore prefix to mark as private\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n        # Explicitly mark as private fixture\n        _pytestfixturefunction=True,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        if _is_skipped(self):",
        "new_str": "@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name with underscore prefix to mark as private\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture - do not use directly\"\"\"\n        if _is_skipped(self):",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        39
      ],
      "id": "31:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name with underscore prefix to mark as private\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture - do not use directly\"\"\"\n",
        "new_str": "\n@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n        _pytestfixturefunction=True,  # Explicit internal marker\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Mark as internal fixture\n        fixturefunction = request.fixturename\n        if hasattr(fixturefunction, '_pytestfixturefunction'):\n            fixturefunction._pytestfixturefunction.hidden = True\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        41
      ],
      "id": "32:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name with underscore prefix to mark as private\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture - do not use directly\"\"\"\n        if _is_skipped(self):\n",
        "new_str": "\n@pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n        _pytestfixturefunction=True,  # Explicit internal marker\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Mark as internal fixture\n        if hasattr(request._fixturedef, '_pytestfixturefunction'):\n            request._fixturedef._pytestfixturefunction.hidden = True\n        if _is_skipped(self):\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        43
      ],
      "id": "33:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        # Use a unique name with underscore prefix to mark as private\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture - do not use directly\"\"\"\n        if _is_skipped(self):",
        "new_str": "    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n        _pytestfixturefunction=True,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Mark as internal fixture\n        if hasattr(request._fixturedef, '_pytestfixturefunction'):\n            request._fixturedef._pytestfixturefunction.hidden = True\n        if _is_skipped(self):",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        44
      ],
      "id": "34:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n        _pytestfixturefunction=True,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Mark as internal fixture\n        if hasattr(request._fixturedef, '_pytestfixturefunction'):\n            request._fixturedef._pytestfixturefunction.hidden = True\n        if _is_skipped(self):\n",
        "new_str": "\n    # Create hidden fixture marker\n    fixture_marker = pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    fixture_marker._pytestfixturefunction.hidden = True\n\n    @fixture_marker\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        if _is_skipped(self):\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        46
      ],
      "id": "35:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n    # Create hidden fixture marker\n    fixture_marker = pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    fixture_marker._pytestfixturefunction.hidden = True\n\n    @fixture_marker\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n",
        "new_str": "\n    # Force the fixture to be private by adding double underscore prefix\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        # Internal fixture - should not appear in normal fixture listing\n        request.fixturename = f\"_{request.fixturename}\"  # Ensure private naming\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        48
      ],
      "id": "36:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/fixtures.py",
        "view_range": [
          800,
          820
        ]
      },
      "phase": "localization",
      "step_indices": [
        50
      ],
      "id": "37:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "old_str": "\n    for argname, fixturedefs in fm._arg2fixturedefs.items():\n        assert fixturedefs is not None\n        if not fixturedefs:\n            continue\n        for fixturedef in fixturedefs:\n            loc = getlocation(fixturedef.func, str(curdir))\n            if (fixturedef.argname, loc) in seen:\n                continue\n",
        "new_str": "\n    for argname, fixturedefs in fm._arg2fixturedefs.items():\n        assert fixturedefs is not None\n        if not fixturedefs:\n            continue\n        for fixturedef in fixturedefs:\n            # Skip hidden fixtures unless in verbose mode\n            if (hasattr(fixturedef, '_pytestfixturefunction') and \n                getattr(fixturedef._pytestfixturefunction, 'hidden', False) and\n                not verbose):\n                continue\n            loc = getlocation(fixturedef.func, str(curdir))\n            if (fixturedef.argname, loc) in seen:\n                continue\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        52
      ],
      "id": "38:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n    # Force the fixture to be private by adding double underscore prefix\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        # Internal fixture - should not appear in normal fixture listing\n        request.fixturename = f\"_{request.fixturename}\"  # Ensure private naming\n\n",
        "new_str": "\n\n    # Create properly hidden unittest fixture\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        # Mark fixture as hidden in pytest's internal registry\n        if hasattr(request, '_fixturedef'):\n            request._fixturedef._pytestfixturefunction = True\n            request._fixturedef._pytestfixturefunction.hidden = True\n        if _is_skipped(self):\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        54
      ],
      "id": "39:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n    # Force the fixture to be private by adding double underscore prefix\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        # Internal fixture - should not appear in normal fixture listing\n        request.fixturename = f\"_{request.fixturename}\"  # Ensure private naming\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        if _is_skipped(self):\n",
        "new_str": "\n    # Create properly hidden unittest fixture\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Mark fixture as hidden in pytest's internal registry\n        if hasattr(request, '_fixturedef'):\n            request._fixturedef._pytestfixturefunction = type('', (), {'hidden': True})()\n        if _is_skipped(self):\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        56
      ],
      "id": "40:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n    # Create properly hidden unittest fixture\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Mark fixture as hidden in pytest's internal registry\n        if hasattr(request, '_fixturedef'):\n            request._fixturedef._pytestfixturefunction = type('', (), {'hidden': True})()\n        if _is_skipped(self):\n\n",
        "new_str": "\n\n    # Register unittest fixture with proper hidden marking\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    \n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden in pytest's registry\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = True\n            setattr(fd._pytestfixturefunction, 'hidden', True)\n            fd.argname = f\"_{fd.argname}\"  # Ensure private naming\n        if _is_skipped(self):\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        58
      ],
      "id": "41:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n    # Create properly hidden unittest fixture\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\",\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Mark fixture as hidden in pytest's internal registry\n        if hasattr(request, '_fixturedef'):\n            request._fixturedef._pytestfixturefunction = type('', (), {'hidden': True})()\n        if _is_skipped(self):\n",
        "new_str": "\n    # Register unittest fixture with proper hidden marking\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    \n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden in pytest's registry\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = True\n            setattr(fd._pytestfixturefunction, 'hidden', True)\n            fd.argname = f\"_{fd.argname}\"  # Ensure private naming\n        if _is_skipped(self):\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        59
      ],
      "id": "42:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "old_str": "\n\n    for argname, fixturedefs in fm._arg2fixturedefs.items():\n        assert fixturedefs is not None\n        if not fixturedefs:\n            continue\n        for fixturedef in fixturedefs:\n            # Skip hidden fixtures unless in verbose mode\n            if (hasattr(fixturedef, '_pytestfixturefunction') and \n                getattr(fixturedef._pytestfixturefunction, 'hidden', False) and\n                not verbose:\n                continue\n            loc = getlocation(fixturedef.func, str(curdir))\n            if (fixturedef.argname, loc) in seen:\n                continue\n\n",
        "new_str": "\n\n    for argname, fixturedefs in fm._arg2fixturedefs.items():\n        assert fixturedefs is not None\n        if not fixturedefs:\n            continue\n        for fixturedef in fixturedefs:\n            # Skip unittest and hidden fixtures unless in verbose mode\n            is_unittest_fixture = argname.startswith('_unittest_') or argname.startswith('__unittest_')\n            is_hidden = (hasattr(fixturedef, '_pytestfixturefunction') and \n                        getattr(fixturedef._pytestfixturefunction, 'hidden', False)\n            if (is_unittest_fixture or is_hidden) and not verbose:\n                continue\n            loc = getlocation(fixturedef.func, str(curdir))\n            if (fixturedef.argname, loc) in seen:\n                continue\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        61
      ],
      "id": "43:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "view_range": [
          1480,
          1500
        ]
      },
      "phase": "localization",
      "step_indices": [
        62,
        69
      ],
      "id": "44:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "old_str": "\n            # Skip hidden fixtures unless in verbose mode\n            if (hasattr(fixturedef, '_pytestfixturefunction') and \n                getattr(fixturedef._pytestfixturefunction, 'hidden', False) and\n                not verbose):\n                continue\n",
        "new_str": "\n            # Skip unittest and hidden fixtures unless in verbose mode\n            is_unittest_fixture = argname.startswith(('_unittest_', '__unittest_'))\n            is_hidden = (hasattr(fixturedef, '_pytestfixturefunction') and\n                        getattr(fixturedef._pytestfixturefunction, 'hidden', False))\n            if (is_unittest_fixture or is_hidden) and not verbose:\n                continue\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        63
      ],
      "id": "45:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n    # Register unittest fixture with proper hidden marking\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    \n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden in pytest's registry\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = True\n            setattr(fd._pytestfixturefunction, 'hidden', True)\n            fd.argname = f\"_{fd.argname}\"  # Ensure private naming\n        if _is_skipped(self):\n\n",
        "new_str": "\n\n    # Create truly hidden unittest fixture\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    \n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden at registration time\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = type('FixtureFunctionMarker', (), {\n                'hidden': True,\n                'name': f\"_{fixture_name}\",\n                'scope': scope\n            })\n            fd.argname = f\"_{fd.argname}\"\n        if _is_skipped(self):\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        65
      ],
      "id": "46:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n    # Register unittest fixture with proper hidden marking\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    \n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden in pytest's registry\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = True\n            setattr(fd._pytestfixturefunction, 'hidden', True)\n            fd.argname = f\"_{fd.argname}\"  # Ensure private naming\n        if _is_skipped(self):\n",
        "new_str": "\n    # Create truly hidden unittest fixture\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    \n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden at registration time\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = type('FixtureFunctionMarker', (), {\n                'hidden': True,\n                'name': f\"_{fixture_name}\",\n                'scope': scope\n            })\n            fd.argname = f\"_{fd.argname}\"\n        if _is_skipped(self):\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        66
      ],
      "id": "47:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "old_str": "\n\n            # Skip unittest and hidden fixtures unless in verbose mode\n            is_unittest_fixture = argname.startswith(('_unittest_', '__unittest_'))\n            is_hidden = (hasattr(fixturedef, '_pytestfixturefunction') and\n                        getattr(fixturedef._pytestfixturefunction, 'hidden', False))\n            if (is_unittest_fixture or is_hidden) and not verbose:\n                continue\n\n",
        "new_str": "\n\n            # Skip all unittest fixtures unless in verbose mode\n            is_unittest_fixture = ('unittest_' in argname or \n                                 '_unittest_' in argname or \n                                 '__unittest_' in argname)\n            if is_unittest_fixture and not verbose:\n                continue\n            # Skip other hidden fixtures unless in verbose mode\n            is_hidden = (hasattr(fixturedef, '_pytestfixturefunction') and\n                        getattr(fixturedef._pytestfixturefunction, 'hidden', False)\n            if is_hidden and not verbose:\n                continue\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        68
      ],
      "id": "48:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "old_str": "\n\n            # Skip unittest and hidden fixtures unless in verbose mode\n            is_unittest_fixture = argname.startswith(('_unittest_', '__unittest_'))\n            is_hidden = (hasattr(fixturedef, '_pytestfixturefunction') and\n                        getattr(fixturedef._pytestfixturefunction, 'hidden', False))\n            if (is_unittest_fixture or is_hidden) and not verbose:\n                continue\n\n",
        "new_str": "\n\n            # Skip all unittest fixtures unless in verbose mode\n            is_unittest_fixture = ('unittest_' in argname or \n                                 '_unittest_' in argname or \n                                 '__unittest_' in argname)\n            if is_unittest_fixture and not verbose:\n                continue\n            # Skip other hidden fixtures unless in verbose mode\n            is_hidden = (hasattr(fixturedef, '_pytestfixturefunction') and\n                        getattr(fixturedef._pytestfixturefunction, 'hidden', False))\n            if is_hidden and not verbose:\n                continue\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        70
      ],
      "id": "49:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/python.py",
        "old_str": "\n            # Skip unittest and hidden fixtures unless in verbose mode\n            is_unittest_fixture = argname.startswith(('_unittest_', '__unittest_'))\n            is_hidden = (hasattr(fixturedef, '_pytestfixturefunction') and\n                        getattr(fixturedef._pytestfixturefunction, 'hidden', False))\n            if (is_unittest_fixture or is_hidden) and not verbose:\n                continue\n",
        "new_str": "\n            # Skip all unittest fixtures unless in verbose mode\n            is_unittest_fixture = ('unittest_' in argname or \n                                 '_unittest_' in argname or \n                                 '__unittest_' in argname)\n            if is_unittest_fixture and not verbose:\n                continue\n            # Skip other hidden fixtures unless in verbose mode\n            is_hidden = (hasattr(fixturedef, '_pytestfixturefunction') and\n                        getattr(fixturedef._pytestfixturefunction, 'hidden', False))\n            if is_hidden and not verbose:\n                continue\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        71
      ],
      "id": "50:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n    # Create truly hidden unittest fixture\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    \n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden at registration time\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = type('FixtureFunctionMarker', (), {\n                'hidden': True,\n                'name': f\"_{fixture_name}\",\n                'scope': scope\n            })\n            fd.argname = f\"_{fd.argname}\"\n        if _is_skipped(self):\n\n",
        "new_str": "\n\n    # Register fixture with proper hidden attributes\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    \n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n        _pytestfixturefunction=type('', (), {\n            'hidden': True,\n            'name': f\"_{fixture_name}\",\n            'scope': scope\n        })\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        if _is_skipped(self):\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        73,
        75
      ],
      "id": "51:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n",
        "new_str": "\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n        _pytestfixturefunction=type('', (), {'hidden': True}),\n    )\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        76
      ],
      "id": "52:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden at registration time\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = type('FixtureFunctionMarker', (), {\n                'hidden': True,\n                'name': f\"_{fixture_name}\",\n                'scope': scope\n            })\n            fd.argname = f\"_{fd.argname}\"\n        if _is_skipped(self):\n\n",
        "new_str": "\n\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        if _is_skipped(self):\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        77,
        79
      ],
      "id": "53:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "view_range": [
          150,
          165
        ]
      },
      "phase": "localization",
      "step_indices": [
        78
      ],
      "id": "54:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        # Force fixture to be hidden at registration time\n        if hasattr(request, '_fixturedef'):\n            fd = request._fixturedef\n            fd._pytestfixturefunction = type('FixtureFunctionMarker', (), {\n                'hidden': True,\n                'name': f\"_{fixture_name}\",\n                'scope': scope\n            })\n            fd.argname = f\"_{fd.argname}\"\n        if _is_skipped(self):\n",
        "new_str": "\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        if _is_skipped(self):\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        80
      ],
      "id": "55:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n        _pytestfixturefunction=type('', (), {'hidden': True}),\n    )\n\n",
        "new_str": "\n\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_{fixture_name.lstrip('_')}\",  # Ensure leading underscore\n        _pytestfixturefunction=type('', (), {\n            'hidden': True,\n            'scope': scope,\n            'name': f\"_{fixture_name.lstrip('_')}\"\n        }),\n    )\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        82
      ],
      "id": "56:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "view_range": [
          145,
          155
        ]
      },
      "phase": "localization",
      "step_indices": [
        83,
        86
      ],
      "id": "57:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n        _pytestfixturefunction=type('', (), {'hidden': True}),\n    )\n\n",
        "new_str": "\n\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_{fixture_name.lstrip('_')}\",\n        _pytestfixturefunction=type('', (), {\n            'hidden': True,\n            'scope': scope,\n            'name': f\"_{fixture_name.lstrip('_')}\"\n        }),\n    )\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        84
      ],
      "id": "58:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n        name=fixture_name,\n\n",
        "new_str": "\n\n        name=f\"_{fixture_name.lstrip('_')}\",\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        85,
        87,
        88,
        91
      ],
      "id": "59:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n    name=fixture_name,\n",
        "new_str": "\n    name=f\"_{fixture_name.lstrip('_')}\",\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        90
      ],
      "id": "60:str_replace_editor\nstr_replace"
    },
    {
      "label": "cp",
      "args": [
        "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "/workspace/unittest_backup.py"
      ],
      "phase": "general",
      "step_indices": [
        92
      ],
      "id": "61:cp"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n        name=fixture_name,\n",
        "new_str": "\n        name=f\"_{fixture_name.lstrip('_')}\",\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        93
      ],
      "id": "62:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/pytest-dev__pytest__6.3/src/_pytest/unittest.py",
        "old_str": "\n\n\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=f\"_{fixture_name.lstrip('_')}\",\n        _pytestfixturefunction=type('', (), {'hidden': True}),\n    )\n\n\n",
        "new_str": "\n\n\n    # Force fixture to be hidden at registration\n    fixture_name = f\"__unittest_{setup_name}_fixture_{obj.__qualname__}\"\n    @pytest.fixture(\n        scope=scope,\n        autouse=True,\n        name=fixture_name,\n    )\n    def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n        \"\"\"Internal unittest fixture (hidden by default)\"\"\"\n        if hasattr(request, '_fixturedef'):\n            request._fixturedef._pytestfixturefunction = type('', (), {\n                'hidden': True,\n                'scope': scope,\n                'name': f\"_{fixture_name.lstrip('_')}\"\n            })\n        if _is_skipped(self):\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        95
      ],
      "id": "63:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:\npytest",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "3:\ngrep",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "1:cd",
      "target": "3:\ngrep",
      "key": 1
    },
    {
      "label": "9",
      "type": "exec",
      "source": "1:cd",
      "target": "3:\ngrep",
      "key": 2
    },
    {
      "label": "11",
      "type": "exec",
      "source": "1:cd",
      "target": "3:\ngrep",
      "key": 3
    },
    {
      "label": "13",
      "type": "exec",
      "source": "1:cd",
      "target": "3:\ngrep",
      "key": 4
    },
    {
      "label": "7",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 1
    },
    {
      "label": "40",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 2
    },
    {
      "label": "45",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 3
    },
    {
      "label": "47",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 4
    },
    {
      "label": "49",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 5
    },
    {
      "label": "53",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 6
    },
    {
      "label": "57",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 7
    },
    {
      "label": "60",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 8
    },
    {
      "label": "64",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 9
    },
    {
      "label": "67",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 10
    },
    {
      "label": "72",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 11
    },
    {
      "label": "81",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 12
    },
    {
      "label": "94",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\npytest",
      "key": 13
    },
    {
      "label": "15",
      "type": "exec",
      "source": "1:cd",
      "target": "12:\ngrep",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "1:cd",
      "target": "14:\ngrep",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "1:cd",
      "target": "14:\ngrep",
      "key": 1
    },
    {
      "label": "27",
      "type": "exec",
      "source": "1:cd",
      "target": "14:\ngrep",
      "key": 2
    },
    {
      "label": "19",
      "type": "exec",
      "source": "1:cd",
      "target": "16:\ngrep",
      "key": 0
    },
    {
      "label": "51",
      "type": "exec",
      "source": "1:cd",
      "target": "16:\ngrep",
      "key": 1
    },
    {
      "label": "23",
      "type": "exec",
      "source": "1:cd",
      "target": "19:\ngrep",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "1:cd",
      "target": "21:\npytest",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "1:cd",
      "target": "21:\npytest",
      "key": 1
    },
    {
      "label": "32",
      "type": "exec",
      "source": "1:cd",
      "target": "25:\nPYTEST_DEBUG=1",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "1:cd",
      "target": "28:\npytest",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:\npytest",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "75",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "51:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "90",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "26:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "30:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "57:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "26:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "30:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "54:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "57:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\ncreate",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:\npytest",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "8:\npytest",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "8:\npytest",
      "target": "32:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "46",
      "type": "exec",
      "source": "8:\npytest",
      "target": "35:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "48",
      "type": "exec",
      "source": "8:\npytest",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "50",
      "type": "exec",
      "source": "8:\npytest",
      "target": "37:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "54",
      "type": "exec",
      "source": "8:\npytest",
      "target": "39:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "58",
      "type": "exec",
      "source": "8:\npytest",
      "target": "41:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "61",
      "type": "exec",
      "source": "8:\npytest",
      "target": "43:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "65",
      "type": "exec",
      "source": "8:\npytest",
      "target": "46:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "68",
      "type": "exec",
      "source": "8:\npytest",
      "target": "48:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "73",
      "type": "exec",
      "source": "8:\npytest",
      "target": "51:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "82",
      "type": "exec",
      "source": "8:\npytest",
      "target": "56:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "95",
      "type": "exec",
      "source": "8:\npytest",
      "target": "63:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "12:\ngrep",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "14:\ngrep",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "14:\ngrep",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "14:\ngrep",
      "target": "22:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "16:\ngrep",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "52",
      "type": "exec",
      "source": "16:\ngrep",
      "target": "38:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "17:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "18:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "19:\ngrep",
      "target": "20:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "20:str_replace_editor\ncreate",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "21:\npytest",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "21:\npytest",
      "target": "24:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "22:str_replace_editor\nview",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "24:str_replace_editor\ncreate",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "25:\nPYTEST_DEBUG=1",
      "target": "26:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "26:str_replace_editor\nview",
      "target": "27:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "27:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "28:\npytest",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "30:str_replace_editor\nview",
      "target": "31:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "43",
      "type": "exec",
      "source": "30:str_replace_editor\nview",
      "target": "33:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "56",
      "type": "exec",
      "source": "30:str_replace_editor\nview",
      "target": "40:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "30:str_replace_editor\nview",
      "target": "26:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "30:str_replace_editor\nview",
      "target": "57:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "31:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "32:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "44",
      "type": "exec",
      "source": "33:str_replace_editor\nstr_replace",
      "target": "34:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "45",
      "type": "exec",
      "source": "34:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "47",
      "type": "exec",
      "source": "35:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "49",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "51",
      "type": "exec",
      "source": "37:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "53",
      "type": "exec",
      "source": "38:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "55",
      "type": "exec",
      "source": "39:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "57",
      "type": "exec",
      "source": "40:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "59",
      "type": "exec",
      "source": "41:str_replace_editor\nstr_replace",
      "target": "42:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "60",
      "type": "exec",
      "source": "42:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "62",
      "type": "exec",
      "source": "43:str_replace_editor\nstr_replace",
      "target": "44:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "63",
      "type": "exec",
      "source": "44:str_replace_editor\nview",
      "target": "45:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "70",
      "type": "exec",
      "source": "44:str_replace_editor\nview",
      "target": "49:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "64",
      "type": "exec",
      "source": "45:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "66",
      "type": "exec",
      "source": "46:str_replace_editor\nstr_replace",
      "target": "47:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "67",
      "type": "exec",
      "source": "47:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "69",
      "type": "exec",
      "source": "48:str_replace_editor\nstr_replace",
      "target": "44:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "71",
      "type": "exec",
      "source": "49:str_replace_editor\nstr_replace",
      "target": "50:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "72",
      "type": "exec",
      "source": "50:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "74",
      "type": "exec",
      "source": "51:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "76",
      "type": "exec",
      "source": "51:str_replace_editor\nstr_replace",
      "target": "52:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "77",
      "type": "exec",
      "source": "52:str_replace_editor\nstr_replace",
      "target": "53:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "78",
      "type": "exec",
      "source": "53:str_replace_editor\nstr_replace",
      "target": "54:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "80",
      "type": "exec",
      "source": "53:str_replace_editor\nstr_replace",
      "target": "55:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "79",
      "type": "exec",
      "source": "54:str_replace_editor\nview",
      "target": "53:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "81",
      "type": "exec",
      "source": "55:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "83",
      "type": "exec",
      "source": "56:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "84",
      "type": "exec",
      "source": "57:str_replace_editor\nview",
      "target": "58:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "87",
      "type": "exec",
      "source": "57:str_replace_editor\nview",
      "target": "59:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "85",
      "type": "exec",
      "source": "58:str_replace_editor\nstr_replace",
      "target": "59:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "86",
      "type": "exec",
      "source": "59:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "88",
      "type": "exec",
      "source": "59:str_replace_editor\nstr_replace",
      "target": "59:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "89",
      "type": "exec",
      "source": "59:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "92",
      "type": "exec",
      "source": "59:str_replace_editor\nstr_replace",
      "target": "61:cp",
      "key": 0
    },
    {
      "label": "91",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "59:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "93",
      "type": "exec",
      "source": "61:cp",
      "target": "62:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "94",
      "type": "exec",
      "source": "62:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "96",
      "type": "exec",
      "source": "63:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\nview",
      "key": 0
    }
  ]
}