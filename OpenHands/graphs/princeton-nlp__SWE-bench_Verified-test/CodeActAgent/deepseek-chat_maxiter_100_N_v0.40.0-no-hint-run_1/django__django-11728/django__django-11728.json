{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-11728",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        5
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/django__django__3.0"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        3,
        7,
        8
      ],
      "id": "1:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "test*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:find"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        2,
        2,
        3
      ],
      "id": "3:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__3.0/django/contrib/admindocs/utils.py"
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.0/django/contrib/admindocs/utils.py",
        "old_str": "            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val",
        "new_str": "            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n\n            # If brackets are balanced or we've reached end of string, the current\n            # named capture group pattern has been fully processed\n            if unmatched_open_brackets == 0 or idx == len(pattern[end:]) - 1:\n                group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))\n                break",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "args": [],
      "phase": "verification",
      "step_indices": [
        7,
        8
      ],
      "id": "6:python"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "0:empty action",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "3:grep",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "3:grep",
      "key": 1
    },
    {
      "label": "7",
      "type": "exec",
      "source": "1:cd",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "1:cd",
      "target": "6:python",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:find",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:grep",
      "target": "3:grep",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:grep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:grep",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:python",
      "target": "1:cd",
      "key": 0
    }
  ]
}