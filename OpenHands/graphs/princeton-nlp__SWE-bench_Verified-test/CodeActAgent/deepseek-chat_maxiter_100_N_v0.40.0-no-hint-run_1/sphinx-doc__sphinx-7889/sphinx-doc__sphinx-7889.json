{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sphinx-doc__sphinx-7889",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        3,
        10
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/sphinx-doc__sphinx__3.2"
      ],
      "phase": "general",
      "step_indices": [
        1,
        4,
        6,
        8,
        9,
        13
      ],
      "id": "1:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "mock.py",
        "f"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__3.2/sphinx/ext/autodoc/mock.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "4:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__3.2/sphinx/ext/autodoc/mock.py",
        "view_range": [
          16,
          18
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "find",
      "args": [
        "tests",
        "*mock*",
        "f"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "6:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__3.2/tests/test_ext_autodoc_mock.py"
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "from",
      "args": [
        "typing",
        "import",
        "TypeVar"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "8:from"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__3.2/sphinx/ext/autodoc/mock.py",
        "old_str": "def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                   attributes: Any = None) -> Any:\n    attrs = {'__module__': module, '__display_name__': module + '.' + name}\n    attrs.update(attributes or {})\n\n    return type(name, (superclass,), attrs)",
        "new_str": "def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                   attributes: Any = None) -> Any:\n    # Handle cases where name might be a TypeVar or other typing object\n    display_name = module + '.' + (getattr(name, '__name__', None) or str(name))\n    attrs = {'__module__': module, '__display_name__': display_name}\n    attrs.update(attributes or {})\n\n    return type(name, (superclass,), attrs)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__3.2/tests/test_ext_autodoc_mock.py",
        "old_str": "\ndef test_mock_decorator():\n    mock = _MockObject()\n\n    @mock.function_deco\n    def func():\n        \"\"\"docstring\"\"\"\n\n    class Foo:\n        @mock.method_deco\n        def meth(self):\n            \"\"\"docstring\"\"\"\n\n    @mock.class_deco\n    class Bar:\n        \"\"\"docstring\"\"\"\n\n    assert func.__doc__ == \"docstring\"\n    assert Foo.meth.__doc__ == \"docstring\"\n    assert Bar.__doc__ == \"docstring\"\n",
        "new_str": "\ndef test_mock_decorator():\n    mock = _MockObject()\n\n    @mock.function_deco\n    def func():\n        \"\"\"docstring\"\"\"\n\n    class Foo:\n        @mock.method_deco\n        def meth(self):\n            \"\"\"docstring\"\"\"\n\n    @mock.class_deco\n    class Bar:\n        \"\"\"docstring\"\"\"\n\n    assert func.__doc__ == \"docstring\"\n    assert Foo.meth.__doc__ == \"docstring\"\n    assert Bar.__doc__ == \"docstring\"\n\n\ndef test_mock_generic_types():\n    \"\"\"Test that mock handles generic type variables correctly.\"\"\"\n    from typing import TypeVar\n    mock = _MockObject()\n    \n    T = TypeVar('T')\n    generic_mock = mock.T\n    \n    assert isinstance(generic_mock, _MockObject)\n    assert repr(generic_mock).startswith('_MockObject.T')\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "args": [
        "tests/test_ext_autodoc_mock.py"
      ],
      "phase": "verification",
      "step_indices": [
        13
      ],
      "id": "11:python"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "0:empty action",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "4:grep",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "1:cd",
      "target": "6:find",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "1:cd",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "1:cd",
      "target": "8:from",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "1:cd",
      "target": "11:python",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:find",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "0:empty action",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:grep",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:find",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:from",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    }
  ]
}