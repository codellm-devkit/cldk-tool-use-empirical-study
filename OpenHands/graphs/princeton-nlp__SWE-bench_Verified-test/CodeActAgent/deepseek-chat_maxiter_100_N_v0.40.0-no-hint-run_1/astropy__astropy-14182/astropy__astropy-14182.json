{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "astropy__astropy-14182",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 4
  },
  "nodes": [
    {
      "label": "cd",
      "args": [
        "/workspace/astropy__astropy__5.1"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "1:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/fixedwidth.py",
        "view_range": [
          1,
          50
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/fixedwidth.py",
        "view_range": [
          51,
          150
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "    def __init__(self):\n        super().__init__(delimiter_pad=None, bookend=False)",
        "new_str": "    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "6:empty action"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "file_text": "\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\ntbl.write(sys.stdout, format=\"ascii.rst\")\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n"
      },
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "7:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "args": [
        "/workspace"
      ],
      "phase": "general",
      "step_indices": [
        7,
        9,
        12,
        14,
        16,
        20,
        24,
        28,
        31,
        34,
        38,
        48,
        55,
        77
      ],
      "id": "8:cd"
    },
    {
      "label": "python",
      "args": [
        "test_rst_header_rows.py"
      ],
      "phase": "verification",
      "step_indices": [
        7,
        9,
        12,
        14,
        16,
        20,
        24,
        28,
        31,
        34,
        38,
        48,
        55,
        77
      ],
      "id": "9:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n",
        "new_str": "\n    def __init__(self, header_rows=None, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows, **kwargs)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/core.py",
        "view_range": [
          1800,
          1820
        ]
      },
      "phase": "localization",
      "step_indices": [
        10,
        32
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\nclass RST(FixedWidth):\n    \"\"\"reStructuredText simple format table.\n\n    See: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#simple-tables\n\n    Example::\n\n        ==== ===== ======\n        Col1  Col2  Col3\n        ==== ===== ======\n          1    2.3  Hello\n          2    4.5  Worlds\n        ==== ===== ======\n\n    Currently there is no support for reading tables which utilize continuation lines,\n    or for ones which define column spans through the use of an additional\n    line of dashes in the header.\n\n    \"\"\"\n\n    _format_name = \"rst\"\n    _description = \"reStructuredText simple table\"\n    data_class = SimpleRSTData\n    header_class = SimpleRSTHeader\n\n    def __init__(self, header_rows=None, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows, **kwargs)\n",
        "new_str": "\nclass RST(FixedWidth):\n    \"\"\"reStructuredText simple format table.\n\n    See: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#simple-tables\n\n    Example::\n\n        ==== ===== ======\n        Col1  Col2  Col3\n        ==== ===== ======\n          1    2.3  Hello\n          2    4.5  Worlds\n        ==== ===== ======\n\n    Currently there is no support for reading tables which utilize continuation lines,\n    or for ones which define column spans through the use of an additional\n    line of dashes in the header.\n\n    \"\"\"\n\n    _format_name = \"rst\"\n    _description = \"reStructuredText simple table\"\n    data_class = SimpleRSTData\n    header_class = SimpleRSTHeader\n\n    def __init__(self, header_rows=None, **kwargs):\n        self.header_rows = header_rows\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows, **kwargs)\n\n    @classmethod\n    def _get_writer_kwargs(cls, header_rows=None, **kwargs):\n        kwargs = super()._get_writer_kwargs(**kwargs)\n        if header_rows is not None:\n            kwargs['header_rows'] = header_rows\n        return kwargs\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "new_str": "\n    def write(self, lines):\n        # Handle header_rows if provided\n        if hasattr(self, 'header_rows') and self.header_rows:\n            self.header.header_rows = self.header_rows\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n    def __init__(self, header_rows=None, **kwargs):\n        self.header_rows = header_rows\n        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows, **kwargs)\n\n    @classmethod\n    def _get_writer_kwargs(cls, header_rows=None, **kwargs):\n        kwargs = super()._get_writer_kwargs(**kwargs)\n        if header_rows is not None:\n            kwargs['header_rows'] = header_rows\n        return kwargs\n\n    def write(self, lines):\n        # Handle header_rows if provided\n        if hasattr(self, 'header_rows') and self.header_rows:\n            self.header.header_rows = self.header_rows\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "new_str": "\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines, **kwargs):\n        # Handle header_rows if provided in kwargs\n        if 'header_rows' in kwargs:\n            self.header.header_rows = kwargs['header_rows']\n        lines = super().write(lines, **kwargs)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\nclass SimpleRSTHeader(FixedWidthHeader):\n    position_line = 0\n    start_line = 1\n    splitter_class = DefaultSplitter\n    position_char = \"=\"\n\n    def get_fixedwidth_params(self, line):\n        vals, starts, ends = super().get_fixedwidth_params(line)\n        # The right hand column can be unbounded\n        ends[-1] = None\n        return vals, starts, ends\n\n",
        "new_str": "\n\nclass SimpleRSTHeader(FixedWidthHeader):\n    position_line = 0\n    start_line = 1\n    splitter_class = DefaultSplitter\n    position_char = \"=\"\n    header_rows = [\"name\"]  # Default to single header row like basic RST\n\n    def get_fixedwidth_params(self, line):\n        vals, starts, ends = super().get_fixedwidth_params(line)\n        # The right hand column can be unbounded\n        ends[-1] = None\n        return vals, starts, ends\n\n    def update_header_rows(self, header_rows):\n        \"\"\"Update header rows configuration\"\"\"\n        self.header_rows = header_rows\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n\nclass RST(FixedWidth):\n    \"\"\"reStructuredText simple format table.\n\n    See: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#simple-tables\n\n    Example::\n\n        ==== ===== ======\n        Col1  Col2  Col3\n        ==== ===== ======\n          1    2.3  Hello\n          2    4.5  Worlds\n        ==== ===== ======\n\n    Currently there is no support for reading tables which utilize continuation lines,\n    or for ones which define column spans through the use of an additional\n    line of dashes in the header.\n\n    \"\"\"\n\n    _format_name = \"rst\"\n    _description = \"reStructuredText simple table\"\n    data_class = SimpleRSTData\n    header_class = SimpleRSTHeader\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines, **kwargs):\n        # Handle header_rows if provided in kwargs\n        if 'header_rows' in kwargs:\n            self.header.header_rows = kwargs['header_rows']\n        lines = super().write(lines, **kwargs)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n\n",
        "new_str": "\n\n\nclass RST(FixedWidth):\n    \"\"\"reStructuredText simple format table.\n\n    See: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#simple-tables\n\n    Example::\n\n        ==== ===== ======\n        Col1  Col2  Col3\n        ==== ===== ======\n          1    2.3  Hello\n          2    4.5  Worlds\n        ==== ===== ======\n\n    Currently there is no support for reading tables which utilize continuation lines,\n    or for ones which define column spans through the use of an additional\n    line of dashes in the header.\n\n    \"\"\"\n\n    _format_name = \"rst\"\n    _description = \"reStructuredText simple table\"\n    data_class = SimpleRSTData\n    header_class = SimpleRSTHeader\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines, **kwargs):\n        # Update header configuration if header_rows provided\n        if 'header_rows' in kwargs:\n            self.header.update_header_rows(kwargs['header_rows'])\n        lines = super().write(lines, **kwargs)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "    def write(self, lines, **kwargs):\n        # Handle header_rows if provided in kwargs\n        if 'header_rows' in kwargs:\n            self.header.header_rows = kwargs['header_rows']\n        lines = super().write(lines, **kwargs)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines",
        "new_str": "    def write(self, lines, **kwargs):\n        # Update header configuration if header_rows provided\n        if 'header_rows' in kwargs:\n            self.header.update_header_rows(kwargs['header_rows'])\n        lines = super().write(lines, **kwargs)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n    def write(self, lines, **kwargs):\n        # Update header configuration if header_rows provided\n        if 'header_rows' in kwargs:\n            self.header.update_header_rows(kwargs['header_rows'])\n        lines = super().write(lines, **kwargs)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "new_str": "\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/connect.py",
        "view_range": [
          1,
          50
        ]
      },
      "phase": "localization",
      "step_indices": [
        22
      ],
      "id": "19:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/connect.py",
        "old_str": "\ndef io_write(format, table, filename, **kwargs):\n    from .ui import write\n\n    if format != \"ascii\":\n        format = re.sub(r\"^ascii\\.\", \"\", format)\n        kwargs[\"format\"] = format\n    return write(table, filename, **kwargs)\n",
        "new_str": "\ndef io_write(format, table, filename, **kwargs):\n    from .ui import write\n    from .rst import RST\n\n    if format != \"ascii\":\n        format = re.sub(r\"^ascii\\.\", \"\", format)\n        kwargs[\"format\"] = format\n    \n    # Special handling for RST header_rows\n    if format == \"rst\" and \"header_rows\" in kwargs:\n        writer = RST()\n        writer.header.header_rows = kwargs.pop(\"header_rows\")\n        kwargs[\"Writer\"] = writer\n        \n    return write(table, filename, **kwargs)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\nclass SimpleRSTHeader(FixedWidthHeader):\n    position_line = 0\n    start_line = 1\n    splitter_class = DefaultSplitter\n    position_char = \"=\"\n    header_rows = [\"name\"]  # Default to single header row like basic RST\n\n    def get_fixedwidth_params(self, line):\n        vals, starts, ends = super().get_fixedwidth_params(line)\n        # The right hand column can be unbounded\n        ends[-1] = None\n        return vals, starts, ends\n\n    def update_header_rows(self, header_rows):\n        \"\"\"Update header rows configuration\"\"\"\n        self.header_rows = header_rows\n\n",
        "new_str": "\n\nclass SimpleRSTHeader(FixedWidthHeader):\n    position_line = 0\n    start_line = 1\n    splitter_class = DefaultSplitter\n    position_char = \"=\"\n    \n    def __init__(self, header_rows=None, **kwargs):\n        super().__init__(**kwargs)\n        self.header_rows = header_rows or [\"name\"]  # Default to single header row\n\n    def get_fixedwidth_params(self, line):\n        vals, starts, ends = super().get_fixedwidth_params(line)\n        # The right hand column can be unbounded\n        ends[-1] = None\n        return vals, starts, ends\n\n    def update_header_rows(self, header_rows):\n        \"\"\"Update header rows configuration\"\"\"\n        self.header_rows = header_rows\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        25
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n\n",
        "new_str": "\n\n    def __init__(self, header_rows=None, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if header_rows is not None:\n            self.header.header_rows = header_rows\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "new_str": "\n    def __init__(self, header_rows=None, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if header_rows is not None:\n            self.header.header_rows = header_rows\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        27
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n    def __init__(self, header_rows=None, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if header_rows is not None:\n            self.header.header_rows = header_rows\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n\n",
        "new_str": "\n\n    def __init__(self, **kwargs):\n        header_rows = kwargs.pop('header_rows', None)\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if header_rows is not None:\n            self.header.header_rows = header_rows\n\n    @classmethod\n    def _get_writer_kwargs(cls, header_rows=None, **kwargs):\n        kwargs = super()._get_writer_kwargs(**kwargs)\n        if header_rows is not None:\n            kwargs['header_rows'] = header_rows\n        return kwargs\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n    def __init__(self, header_rows=None, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if header_rows is not None:\n            self.header.header_rows = header_rows\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "new_str": "\n    def __init__(self, **kwargs):\n        header_rows = kwargs.pop('header_rows', None)\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if header_rows is not None:\n            self.header.header_rows = header_rows\n\n    @classmethod\n    def _get_writer_kwargs(cls, header_rows=None, **kwargs):\n        kwargs = super()._get_writer_kwargs(**kwargs)\n        if header_rows is not None:\n            kwargs['header_rows'] = header_rows\n        return kwargs\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        30
      ],
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/core.py",
        "old_str": "\n    writer_kwargs = {k: v for k, v in kwargs.items() if k not in extra_writer_pars}\n    writer = Writer(**writer_kwargs)\n",
        "new_str": "\n    # Special handling for RST header_rows\n    if Writer._format_name == 'rst' and 'header_rows' in kwargs:\n        extra_writer_pars = extra_writer_pars - {'header_rows'}\n    writer_kwargs = {k: v for k, v in kwargs.items() if k not in extra_writer_pars}\n    writer = Writer(**writer_kwargs)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        33
      ],
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\nclass SimpleRSTHeader(FixedWidthHeader):\n    position_line = 0\n    start_line = 1\n    splitter_class = DefaultSplitter\n    position_char = \"=\"\n    \n    def __init__(self, header_rows=None, **kwargs):\n        super().__init__(**kwargs)\n        self.header_rows = header_rows or [\"name\"]  # Default to single header row\n\n    def get_fixedwidth_params(self, line):\n        vals, starts, ends = super().get_fixedwidth_params(line)\n        # The right hand column can be unbounded\n        ends[-1] = None\n        return vals, starts, ends\n\n    def update_header_rows(self, header_rows):\n        \"\"\"Update header rows configuration\"\"\"\n        self.header_rows = header_rows\n",
        "new_str": "\nclass SimpleRSTHeader(FixedWidthHeader):\n    position_line = 0\n    start_line = 1\n    splitter_class = DefaultSplitter\n    position_char = \"=\"\n    \n    def __init__(self, **kwargs):\n        self.header_rows = kwargs.pop('header_rows', [\"name\"])  # Default to single header row\n        super().__init__(**kwargs)\n\n    def get_fixedwidth_params(self, line):\n        vals, starts, ends = super().get_fixedwidth_params(line)\n        # The right hand column can be unbounded\n        ends[-1] = None\n        return vals, starts, ends\n\n    def process_lines(self, lines):\n        if len(self.header_rows) > 1:\n            # Handle multiple header rows\n            header_lines = [lines[0]] + [self._format_header_line(lines[0])]\n            return header_lines + lines[1:]\n        return super().process_lines(lines)\n\n    def _format_header_line(self, line):\n        \"\"\"Format additional header lines (e.g. units)\"\"\"\n        return \" \".join([f\"{'='*len(col)}\" for col in line.split()])\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        35
      ],
      "id": "27:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n    def __init__(self, **kwargs):\n        header_rows = kwargs.pop('header_rows', None)\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if header_rows is not None:\n            self.header.header_rows = header_rows\n\n    @classmethod\n    def _get_writer_kwargs(cls, header_rows=None, **kwargs):\n        kwargs = super()._get_writer_kwargs(**kwargs)\n        if header_rows is not None:\n            kwargs['header_rows'] = header_rows\n        return kwargs\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n\n",
        "new_str": "\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        if len(self.header.header_rows) == 1:\n            lines = [lines[1]] + lines + [lines[1]]\n        else:\n            # For multiple header rows, adjust which line gets duplicated\n            lines = [lines[2]] + lines + [lines[2]]\n        return lines\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        36
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n    def __init__(self, **kwargs):\n        header_rows = kwargs.pop('header_rows', None)\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if header_rows is not None:\n            self.header.header_rows = header_rows\n\n    @classmethod\n    def _get_writer_kwargs(cls, header_rows=None, **kwargs):\n        kwargs = super()._get_writer_kwargs(**kwargs)\n        if header_rows is not None:\n            kwargs['header_rows'] = header_rows\n        return kwargs\n\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n",
        "new_str": "\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        if len(self.header.header_rows) == 1:\n            lines = [lines[1]] + lines + [lines[1]]\n        else:\n            # For multiple header rows, adjust which line gets duplicated\n            lines = [lines[2]] + lines + [lines[2]]\n        return lines\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        37
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/fixedwidth.py",
        "view_range": [
          65,
          85
        ]
      },
      "phase": "localization",
      "step_indices": [
        39
      ],
      "id": "30:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/fixedwidth.py",
        "old_str": "\n\nclass FixedWidthHeader(basic.BasicHeader):\n    \"\"\"\n    Fixed width table header reader.\n    \"\"\"\n\n    splitter_class = FixedWidthHeaderSplitter\n    \"\"\" Splitter class for splitting data lines into columns \"\"\"\n    position_line = None  # secondary header line position\n    \"\"\" row index of line that specifies position (default = 1) \"\"\"\n    set_of_position_line_characters = set(r'`~!#$%^&*-_+=\\|\":' + \"'\")\n\n",
        "new_str": "\n\nclass FixedWidthHeader(basic.BasicHeader):\n    \"\"\"\n    Fixed width table header reader.\n    \"\"\"\n\n    splitter_class = FixedWidthHeaderSplitter\n    \"\"\" Splitter class for splitting data lines into columns \"\"\"\n    position_line = None  # secondary header line position\n    \"\"\" row index of line that specifies position (default = 1) \"\"\"\n    set_of_position_line_characters = set(r'`~!#$%^&*-_+=\\|\":' + \"'\")\n    header_rows = [\"name\"]  # Default header rows configuration\n\n    def __init__(self, **kwargs):\n        self.header_rows = kwargs.pop('header_rows', [\"name\"])\n        super().__init__(**kwargs)\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        40
      ],
      "id": "31:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\nclass SimpleRSTHeader(FixedWidthHeader):\n    position_line = 0\n    start_line = 1\n    splitter_class = DefaultSplitter\n    position_char = \"=\"\n    \n    def __init__(self, **kwargs):\n        self.header_rows = kwargs.pop('header_rows', [\"name\"])  # Default to single header row\n        super().__init__(**kwargs)\n\n    def get_fixedwidth_params(self, line):\n        vals, starts, ends = super().get_fixedwidth_params(line)\n        # The right hand column can be unbounded\n        ends[-1] = None\n        return vals, starts, ends\n\n    def process_lines(self, lines):\n        if len(self.header_rows) > 1:\n            # Handle multiple header rows\n            header_lines = [lines[0]] + [self._format_header_line(lines[0])]\n            return header_lines + lines[1:]\n        return super().process_lines(lines)\n\n    def _format_header_line(self, line):\n        \"\"\"Format additional header lines (e.g. units)\"\"\"\n        return \" \".join([f\"{'='*len(col)}\" for col in line.split()])\n\n",
        "new_str": "\n\nclass SimpleRSTHeader(FixedWidthHeader):\n    position_line = 0\n    start_line = 1\n    splitter_class = DefaultSplitter\n    position_char = \"=\"\n    \n    def get_fixedwidth_params(self, line):\n        vals, starts, ends = super().get_fixedwidth_params(line)\n        # The right hand column can be unbounded\n        ends[-1] = None\n        return vals, starts, ends\n\n    def process_lines(self, lines):\n        if len(self.header_rows) > 1:\n            # Handle multiple header rows\n            header_lines = [lines[0]] + [self._format_header_line(lines[0])]\n            return header_lines + lines[1:]\n        return super().process_lines(lines)\n\n    def _format_header_line(self, line):\n        \"\"\"Format additional header lines (e.g. units)\"\"\"\n        return \" \".join([f\"{'='*len(col)}\" for col in line.split()])\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        41
      ],
      "id": "32:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        if len(self.header.header_rows) == 1:\n            lines = [lines[1]] + lines + [lines[1]]\n        else:\n            # For multiple header rows, adjust which line gets duplicated\n            lines = [lines[2]] + lines + [lines[2]]\n        return lines\n\n\n",
        "new_str": "\n\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        42
      ],
      "id": "33:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        if len(self.header.header_rows) == 1:\n            lines = [lines[1]] + lines + [lines[1]]\n        else:\n            # For multiple header rows, adjust which line gets duplicated\n            lines = [lines[2]] + lines + [lines[2]]\n        return lines\n\n",
        "new_str": "\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        43,
        46
      ],
      "id": "34:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "view_range": [
          70,
          90
        ]
      },
      "phase": "localization",
      "step_indices": [
        44
      ],
      "id": "35:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "view_range": [
          70,
          83
        ]
      },
      "phase": "localization",
      "step_indices": [
        45
      ],
      "id": "36:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        if len(self.header.header_rows) == 1:\n            lines = [lines[1]] + lines + [lines[1]]\n        else:\n            # For multiple header rows, adjust which line gets duplicated\n            lines = [lines[2]] + lines + [lines[2]]\n        return lines\n",
        "new_str": "\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        47
      ],
      "id": "37:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n\n",
        "new_str": "\n\n    def __init__(self, **kwargs):\n        # Accept but ignore header_rows in init - it will be handled by the header\n        kwargs.pop('header_rows', None)\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    @classmethod\n    def _get_writer_kwargs(cls, header_rows=None, **kwargs):\n        kwargs = super()._get_writer_kwargs(**kwargs)\n        if header_rows is not None:\n            kwargs['header_rows'] = header_rows\n        return kwargs\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        49,
        50
      ],
      "id": "38:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "view_range": [
          65,
          85
        ]
      },
      "phase": "localization",
      "step_indices": [
        51,
        67
      ],
      "id": "39:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "view_range": [
          65,
          80
        ]
      },
      "phase": "localization",
      "step_indices": [
        52
      ],
      "id": "40:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n\n",
        "new_str": "\n\n    def __init__(self, **kwargs):\n        self._header_rows = kwargs.pop('header_rows', None)\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if self._header_rows is not None:\n            self.header.header_rows = self._header_rows\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        53
      ],
      "id": "41:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n",
        "new_str": "\n    def __init__(self, **kwargs):\n        self._header_rows = kwargs.pop('header_rows', None)\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if self._header_rows is not None:\n            self.header.header_rows = self._header_rows\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        54
      ],
      "id": "42:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/connect.py",
        "view_range": [
          20,
          30
        ]
      },
      "phase": "localization",
      "step_indices": [
        56,
        60,
        63
      ],
      "id": "43:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/connect.py",
        "old_str": "\n\ndef io_write(format, table, filename, **kwargs):\n    from .ui import write\n    from .rst import RST\n\n    if format != \"ascii\":\n        format = re.sub(r\"^ascii\\.\", \"\", format)\n        kwargs[\"format\"] = format\n    \n    # Special handling for RST header_rows\n\n",
        "new_str": "\n\ndef io_write(format, table, filename, **kwargs):\n    from .ui import write\n    from .rst import RST\n\n    if format != \"ascii\":\n        format = re.sub(r\"^ascii\\.\", \"\", format)\n        kwargs[\"format\"] = format\n    \n    # Special handling for RST header_rows\n    if format == \"rst\" and \"header_rows\" in kwargs:\n        writer = RST()\n        writer.header.header_rows = kwargs.pop(\"header_rows\")\n        kwargs[\"Writer\"] = writer\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        57,
        61,
        62,
        65
      ],
      "id": "44:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/connect.py",
        "old_str": "\ndef io_write(format, table, filename, **kwargs):\n    from .ui import write\n\n    if format != \"ascii\":\n        format = re.sub(r\"^ascii\\.\", \"\", format)\n        kwargs[\"format\"] = format\n    return write(table, filename, **kwargs)\n",
        "new_str": "\ndef io_write(format, table, filename, **kwargs):\n    from .ui import write\n    from .rst import RST\n\n    if format != \"ascii\":\n        format = re.sub(r\"^ascii\\.\", \"\", format)\n        kwargs[\"format\"] = format\n    \n    # Special handling for RST header_rows\n    if format == \"rst\" and \"header_rows\" in kwargs:\n        writer = RST()\n        writer.header.header_rows = kwargs.pop(\"header_rows\")\n        kwargs[\"Writer\"] = writer\n    \n    return write(table, filename, **kwargs)\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        58,
        59
      ],
      "id": "45:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/connect.py",
        "old_str": "\n\n\ndef io_write(format, table, filename, **kwargs):\n    from .ui import write\n    from .rst import RST\n\n    if format != \"ascii\":\n        format = re.sub(r\"^ascii\\.\", \"\", format)\n        kwargs[\"format\"] = format\n    \n    # Special handling for RST header_rows\n\n\n",
        "new_str": "\n\n\ndef io_write(format, table, filename, **kwargs):\n    from .ui import write\n    from .rst import RST\n\n    if format != \"ascii\":\n        format = re.sub(r\"^ascii\\.\", \"\", format)\n        kwargs[\"format\"] = format\n    \n    # Special handling for RST header_rows\n    if format == \"rst\" and \"header_rows\" in kwargs:\n        writer = RST()\n        writer.header.header_rows = kwargs.pop(\"header_rows\")\n        kwargs[\"Writer\"] = writer\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        64
      ],
      "id": "46:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "old_str": "\n\n    def __init__(self, **kwargs):\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n\n",
        "new_str": "\n\n    def __init__(self, **kwargs):\n        self._header_rows = kwargs.pop('header_rows', None)\n        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n        if self._header_rows is not None:\n            self.header.header_rows = self._header_rows\n\n    @classmethod\n    def _get_writer_kwargs(cls, header_rows=None, **kwargs):\n        kwargs = super()._get_writer_kwargs(**kwargs)\n        if header_rows is not None:\n            kwargs['header_rows'] = header_rows\n        return kwargs\n\n    def write(self, lines):\n        lines = super().write(lines)\n        # For RST format, we want to duplicate the separator line\n        # at both top and bottom of the table\n        separator_idx = len(self.header.header_rows)  # Index of separator line\n        lines = [lines[separator_idx]] + lines + [lines[separator_idx]]\n        return lines\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        66
      ],
      "id": "47:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.1/astropy/io/ascii/rst.py",
        "view_range": [
          65,
          83
        ]
      },
      "phase": "localization",
      "step_indices": [
        68
      ],
      "id": "48:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "old_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\ntbl.write(sys.stdout, format=\"ascii.rst\")\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n\n",
        "new_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(format=\"ascii.rst\")\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(format=\"ascii.rst\", header_rows=[\"name\"])\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\nwriter.write(tbl, sys.stdout)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        69
      ],
      "id": "49:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "old_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\ntbl.write(sys.stdout, format=\"ascii.rst\")\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n\n",
        "new_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(format=\"rst\")\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        70,
        73,
        74
      ],
      "id": "50:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "view_range": [
          1,
          20
        ]
      },
      "phase": "localization",
      "step_indices": [
        71
      ],
      "id": "51:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "view_range": [
          1,
          17
        ]
      },
      "phase": "localization",
      "step_indices": [
        72,
        75
      ],
      "id": "52:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "old_str": "\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\ntbl.write(sys.stdout, format=\"ascii.rst\")\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n",
        "new_str": "\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(format=\"rst\")\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        76
      ],
      "id": "53:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "old_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(format=\"rst\")\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n\n",
        "new_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(Writer='rst')\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(Writer='rst')\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(Writer='rst')\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        78,
        79,
        82,
        83,
        99
      ],
      "id": "54:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "view_range": [
          1,
          24
        ]
      },
      "phase": "localization",
      "step_indices": [
        80
      ],
      "id": "55:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "view_range": [
          1,
          23
        ]
      },
      "phase": "localization",
      "step_indices": [
        81,
        86,
        98
      ],
      "id": "56:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "old_str": "\n\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(format=\"rst\")\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n\n\n",
        "new_str": "\n\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\ntbl.write(sys.stdout, format=\"ascii.rst\")\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        84,
        89,
        90,
        91,
        92,
        95
      ],
      "id": "57:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "old_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(format=\"rst\")\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n\n",
        "new_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\ntbl.write(sys.stdout, format=\"ascii.rst\")\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        85,
        93,
        94
      ],
      "id": "58:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "old_str": "\n\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(format=\"rst\")\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n\n\n",
        "new_str": "\n\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(Writer='rst')\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(Writer='rst')\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(Writer='rst')\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        87,
        88
      ],
      "id": "59:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "edit_status": "failure: unknown"
      },
      "phase": "patch",
      "step_indices": [
        96
      ],
      "id": "60:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_rst_header_rows.py",
        "old_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\nfrom astropy.io.ascii import get_writer\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\nwriter = get_writer(format=\"rst\")\nwriter.write(tbl, sys.stdout)\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\"]\nwriter.write(tbl, sys.stdout)\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\nwriter = get_writer(format=\"rst\")\nwriter.header.header_rows = [\"name\", \"unit\"]\nwriter.write(tbl, sys.stdout)\n",
        "new_str": "\n\nfrom astropy.table import QTable\nimport astropy.units as u\nimport sys\n\n# Basic RST table (existing functionality)\ntbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\nprint(\"\\nBasic RST table:\")\ntbl.write(sys.stdout, format=\"ascii.rst\")\n\n# RST table with name header (new functionality)\nprint(\"\\nRST table with name header:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n\n# RST table with name and unit headers (new functionality)\nprint(\"\\nRST table with name and unit headers:\")\ntbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        97
      ],
      "id": "61:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:find",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:find",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "35:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "39:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "30:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:empty action",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:empty action",
      "target": "7:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\ncreate",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 1
    },
    {
      "label": "12",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 2
    },
    {
      "label": "14",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 3
    },
    {
      "label": "16",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 4
    },
    {
      "label": "20",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 5
    },
    {
      "label": "24",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 6
    },
    {
      "label": "28",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 7
    },
    {
      "label": "31",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 8
    },
    {
      "label": "34",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 9
    },
    {
      "label": "38",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 10
    },
    {
      "label": "48",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 11
    },
    {
      "label": "55",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 12
    },
    {
      "label": "77",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 13
    },
    {
      "label": "8",
      "type": "exec",
      "source": "9:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:python",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "9:python",
      "target": "11:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "13",
      "type": "exec",
      "source": "9:python",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "9:python",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "9:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "9:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "9:python",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "9:python",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "9:python",
      "target": "27:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "9:python",
      "target": "30:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "49",
      "type": "exec",
      "source": "9:python",
      "target": "38:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "56",
      "type": "exec",
      "source": "9:python",
      "target": "43:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "78",
      "type": "exec",
      "source": "9:python",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "19:str_replace_editor\nview",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "19:str_replace_editor\nview",
      "target": "43:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "27:str_replace_editor\nstr_replace",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "30:str_replace_editor\nview",
      "target": "31:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "31:str_replace_editor\nstr_replace",
      "target": "32:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "32:str_replace_editor\nstr_replace",
      "target": "33:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "43",
      "type": "exec",
      "source": "33:str_replace_editor\nstr_replace",
      "target": "34:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "44",
      "type": "exec",
      "source": "34:str_replace_editor\nstr_replace",
      "target": "35:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "47",
      "type": "exec",
      "source": "34:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "45",
      "type": "exec",
      "source": "35:str_replace_editor\nview",
      "target": "36:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "35:str_replace_editor\nview",
      "target": "36:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "46",
      "type": "exec",
      "source": "36:str_replace_editor\nview",
      "target": "34:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "48",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "50",
      "type": "exec",
      "source": "38:str_replace_editor\nstr_replace",
      "target": "38:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "51",
      "type": "exec",
      "source": "38:str_replace_editor\nstr_replace",
      "target": "39:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "52",
      "type": "exec",
      "source": "39:str_replace_editor\nview",
      "target": "40:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "39:str_replace_editor\nview",
      "target": "40:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "68",
      "type": "exec",
      "source": "39:str_replace_editor\nview",
      "target": "48:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "39:str_replace_editor\nview",
      "target": "48:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "39:str_replace_editor\nview",
      "target": "36:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "53",
      "type": "exec",
      "source": "40:str_replace_editor\nview",
      "target": "41:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "54",
      "type": "exec",
      "source": "41:str_replace_editor\nstr_replace",
      "target": "42:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "55",
      "type": "exec",
      "source": "42:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "57",
      "type": "exec",
      "source": "43:str_replace_editor\nview",
      "target": "44:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "61",
      "type": "exec",
      "source": "43:str_replace_editor\nview",
      "target": "44:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "64",
      "type": "exec",
      "source": "43:str_replace_editor\nview",
      "target": "46:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "58",
      "type": "exec",
      "source": "44:str_replace_editor\nstr_replace",
      "target": "45:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "62",
      "type": "exec",
      "source": "44:str_replace_editor\nstr_replace",
      "target": "44:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "63",
      "type": "exec",
      "source": "44:str_replace_editor\nstr_replace",
      "target": "43:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "66",
      "type": "exec",
      "source": "44:str_replace_editor\nstr_replace",
      "target": "47:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "59",
      "type": "exec",
      "source": "45:str_replace_editor\nstr_replace",
      "target": "45:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "60",
      "type": "exec",
      "source": "45:str_replace_editor\nstr_replace",
      "target": "43:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "65",
      "type": "exec",
      "source": "46:str_replace_editor\nstr_replace",
      "target": "44:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "67",
      "type": "exec",
      "source": "47:str_replace_editor\nstr_replace",
      "target": "39:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "69",
      "type": "exec",
      "source": "48:str_replace_editor\nview",
      "target": "49:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "48:str_replace_editor\nview",
      "target": "36:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "48:str_replace_editor\nview",
      "target": "40:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "70",
      "type": "exec",
      "source": "49:str_replace_editor\nstr_replace",
      "target": "50:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "71",
      "type": "exec",
      "source": "50:str_replace_editor\nstr_replace",
      "target": "51:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "74",
      "type": "exec",
      "source": "50:str_replace_editor\nstr_replace",
      "target": "50:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "75",
      "type": "exec",
      "source": "50:str_replace_editor\nstr_replace",
      "target": "52:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "72",
      "type": "exec",
      "source": "51:str_replace_editor\nview",
      "target": "52:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "51:str_replace_editor\nview",
      "target": "52:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "73",
      "type": "exec",
      "source": "52:str_replace_editor\nview",
      "target": "50:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "76",
      "type": "exec",
      "source": "52:str_replace_editor\nview",
      "target": "53:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "77",
      "type": "exec",
      "source": "53:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "79",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "83",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "80",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "55:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "84",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "81",
      "type": "exec",
      "source": "55:str_replace_editor\nview",
      "target": "56:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "55:str_replace_editor\nview",
      "target": "56:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "55:str_replace_editor\nview",
      "target": "51:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "55:str_replace_editor\nview",
      "target": "52:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "82",
      "type": "exec",
      "source": "56:str_replace_editor\nview",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "99",
      "type": "exec",
      "source": "56:str_replace_editor\nview",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "87",
      "type": "exec",
      "source": "56:str_replace_editor\nview",
      "target": "59:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "56:str_replace_editor\nview",
      "target": "51:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "56:str_replace_editor\nview",
      "target": "52:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "85",
      "type": "exec",
      "source": "57:str_replace_editor\nstr_replace",
      "target": "58:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "93",
      "type": "exec",
      "source": "57:str_replace_editor\nstr_replace",
      "target": "58:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "90",
      "type": "exec",
      "source": "57:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "91",
      "type": "exec",
      "source": "57:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "92",
      "type": "exec",
      "source": "57:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "96",
      "type": "exec",
      "source": "57:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "86",
      "type": "exec",
      "source": "58:str_replace_editor\nstr_replace",
      "target": "56:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "94",
      "type": "exec",
      "source": "58:str_replace_editor\nstr_replace",
      "target": "58:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "95",
      "type": "exec",
      "source": "58:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "88",
      "type": "exec",
      "source": "59:str_replace_editor\nstr_replace",
      "target": "59:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "89",
      "type": "exec",
      "source": "59:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "97",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "61:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "98",
      "type": "exec",
      "source": "61:str_replace_editor\nstr_replace",
      "target": "56:str_replace_editor\nview",
      "key": 0
    }
  ]
}