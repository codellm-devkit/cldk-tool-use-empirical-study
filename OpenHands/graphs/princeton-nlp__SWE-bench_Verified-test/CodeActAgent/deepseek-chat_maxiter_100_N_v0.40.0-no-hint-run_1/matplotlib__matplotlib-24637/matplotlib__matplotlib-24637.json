{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "matplotlib__matplotlib-24637",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        39
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/matplotlib__matplotlib__3.6"
      ],
      "phase": "general",
      "step_indices": [
        1,
        4,
        5,
        7,
        9,
        11,
        12,
        14,
        16,
        18,
        30
      ],
      "id": "1:cd"
    },
    {
      "label": "\nfind",
      "args": [
        ".",
        "f",
        "*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:\nfind"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/examples/text_labels_and_annotations/demo_annotation_box.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/backends/backend_svg.py",
        "view_range": [
          1000,
          1100
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "lib/matplotlib/backends/backend_svg.py"
      ],
      "phase": "general",
      "step_indices": [
        4,
        5
      ],
      "id": "5:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/backends/backend_svg.py",
        "view_range": [
          960,
          980
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "\nfind",
      "args": [
        ".",
        "*.py",
        "|",
        "xargs",
        "grep",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "7:\nfind"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/offsetbox.py",
        "view_range": [
          1000,
          1100
        ]
      },
      "phase": "localization",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "lib/matplotlib/offsetbox.py"
      ],
      "phase": "general",
      "step_indices": [
        9,
        12,
        18
      ],
      "id": "9:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/offsetbox.py",
        "view_range": [
          1210,
          1310
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "lib/matplotlib/offsetbox.py",
        "|",
        "grep",
        "AnnotationBbox"
      ],
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "11:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/offsetbox.py",
        "view_range": [
          1130,
          1230
        ]
      },
      "phase": "localization",
      "step_indices": [
        13
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "lib/matplotlib/image.py"
      ],
      "phase": "general",
      "step_indices": [
        14,
        16
      ],
      "id": "13:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/image.py",
        "view_range": [
          1420,
          1520
        ]
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/image.py",
        "view_range": [
          230,
          330
        ]
      },
      "phase": "localization",
      "step_indices": [
        17
      ],
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/offsetbox.py",
        "view_range": [
          1449,
          1463
        ]
      },
      "phase": "localization",
      "step_indices": [
        19
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/offsetbox.py",
        "old_str": "    def draw(self, renderer):\n        # docstring inherited\n        if renderer is not None:\n            self._renderer = renderer\n        if not self.get_visible() or not self._check_xy(renderer):\n            return\n        self.update_positions(renderer)\n        if self.arrow_patch is not None:\n            if self.arrow_patch.figure is None and self.figure is not None:\n                self.arrow_patch.figure = self.figure\n            self.arrow_patch.draw(renderer)\n        self.patch.draw(renderer)\n        self.offsetbox.draw(renderer)\n        self.stale = False",
        "new_str": "    def draw(self, renderer):\n        # docstring inherited\n        if renderer is not None:\n            self._renderer = renderer\n        if not self.get_visible() or not self._check_xy(renderer):\n            return\n        self.update_positions(renderer)\n        gid = self.get_gid()\n        if self.arrow_patch is not None:\n            if self.arrow_patch.figure is None and self.figure is not None:\n                self.arrow_patch.figure = self.figure\n            if gid:\n                self.arrow_patch.set_gid(f\"{gid}_arrow\")\n            self.arrow_patch.draw(renderer)\n        if gid:\n            self.patch.set_gid(f\"{gid}_patch\")\n        self.patch.draw(renderer)\n        if gid and hasattr(self.offsetbox, 'set_gid'):\n            self.offsetbox.set_gid(f\"{gid}_box\")\n        self.offsetbox.draw(renderer)\n        self.stale = False",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_annotation_gid.py",
        "file_text": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n\nfig, ax = plt.subplots()\narr_img = plt.imread(\"undraw_flowers_vx06.png\")\n\nxy = [0.3, 0.55]\nimagebox = OffsetImage(arr_img, zoom=0.1)\nimagebox.image.axes = ax\n\nab = AnnotationBbox(imagebox, xy,\n                    xybox=(120., -80.),\n                    xycoords='data',\n                    boxcoords=\"offset points\",\n                    pad=0.5,\n                    arrowprops=dict(\n                        arrowstyle=\"->\",\n                        connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n                    )\nab.set_gid('My_label')\nax.add_artist(ab)\n\nprint(f\"GID = {ab.get_gid()}\")\nfig.savefig(\"example.svg\", format=\"svg\")\n"
      },
      "phase": "verification",
      "step_indices": [
        21
      ],
      "id": "18:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "args": [
        "/workspace"
      ],
      "phase": "general",
      "step_indices": [
        22,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        35,
        38
      ],
      "id": "19:cd"
    },
    {
      "label": "python",
      "args": [
        "test_annotation_gid.py"
      ],
      "phase": "verification",
      "step_indices": [
        22,
        25,
        32,
        35,
        38
      ],
      "id": "20:python"
    },
    {
      "label": "grep",
      "args": [
        "My_label",
        "example.svg"
      ],
      "phase": "general",
      "step_indices": [
        22,
        25,
        27,
        28
      ],
      "id": "21:grep"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_annotation_gid.py",
        "old_str": "\narr_img = plt.imread(\"undraw_flowers_vx06.png\")\n",
        "new_str": "\narr_img = np.arange(100).reshape((10, 10))  # Simple test array\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_annotation_gid.py",
        "old_str": "\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n",
        "new_str": "\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "find",
      "args": [
        ".",
        "example.svg",
        "f"
      ],
      "phase": "general",
      "step_indices": [
        26
      ],
      "id": "24:find"
    },
    {
      "label": "cat",
      "args": [
        "example.svg",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        29
      ],
      "id": "25:cat"
    },
    {
      "label": "\ngrep",
      "args": [
        "lib/matplotlib/backends/backend_svg.py",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        30
      ],
      "id": "26:\ngrep"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/offsetbox.py",
        "old_str": "\n    def draw(self, renderer):\n        # docstring inherited\n        if renderer is not None:\n            self._renderer = renderer\n        if not self.get_visible() or not self._check_xy(renderer):\n            return\n        self.update_positions(renderer)\n        gid = self.get_gid()\n        if self.arrow_patch is not None:\n            if self.arrow_patch.figure is None and self.figure is not None:\n                self.arrow_patch.figure = self.figure\n            if gid:\n                self.arrow_patch.set_gid(f\"{gid}_arrow\")\n            self.arrow_patch.draw(renderer)\n        if gid:\n            self.patch.set_gid(f\"{gid}_patch\")\n        self.patch.draw(renderer)\n        if gid and hasattr(self.offsetbox, 'set_gid'):\n            self.offsetbox.set_gid(f\"{gid}_box\")\n        self.offsetbox.draw(renderer)\n        self.stale = False\n",
        "new_str": "\n    def draw(self, renderer):\n        # docstring inherited\n        if renderer is not None:\n            self._renderer = renderer\n        if not self.get_visible() or not self._check_xy(renderer):\n            return\n        self.update_positions(renderer)\n        gid = self.get_gid()\n        if gid:\n            renderer.open_group('annotation', gid=gid)\n        try:\n            if self.arrow_patch is not None:\n                if self.arrow_patch.figure is None and self.figure is not None:\n                    self.arrow_patch.figure = self.figure\n                if gid:\n                    renderer.open_group('arrow', gid=f\"{gid}_arrow\")\n                    self.arrow_patch.draw(renderer)\n                    renderer.close_group('arrow')\n                else:\n                    self.arrow_patch.draw(renderer)\n            if gid:\n                renderer.open_group('patch', gid=f\"{gid}_patch\")\n                self.patch.draw(renderer)\n                renderer.close_group('patch')\n            else:\n                self.patch.draw(renderer)\n            if gid and hasattr(self.offsetbox, 'set_gid'):\n                renderer.open_group('offsetbox', gid=f\"{gid}_box\")\n                self.offsetbox.draw(renderer)\n                renderer.close_group('offsetbox')\n            else:\n                self.offsetbox.draw(renderer)\n        finally:\n            if gid:\n                renderer.close_group('annotation')\n        self.stale = False\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        31
      ],
      "id": "27:str_replace_editor\nstr_replace"
    },
    {
      "label": "\ngrep",
      "args": [
        "My_label",
        "example.svg"
      ],
      "phase": "general",
      "step_indices": [
        32
      ],
      "id": "28:\ngrep"
    },
    {
      "label": "head",
      "args": [
        "example.svg"
      ],
      "phase": "general",
      "step_indices": [
        33
      ],
      "id": "29:head"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/matplotlib__matplotlib__3.6/lib/matplotlib/offsetbox.py",
        "old_str": "\n\n    def draw(self, renderer):\n        # docstring inherited\n        if renderer is not None:\n            self._renderer = renderer\n        if not self.get_visible() or not self._check_xy(renderer):\n            return\n        self.update_positions(renderer)\n        gid = self.get_gid()\n        if gid:\n            renderer.open_group('annotation', gid=gid)\n        try:\n            if self.arrow_patch is not None:\n                if self.arrow_patch.figure is None and self.figure is not None:\n                    self.arrow_patch.figure = self.figure\n                if gid:\n                    renderer.open_group('arrow', gid=f\"{gid}_arrow\")\n                    self.arrow_patch.draw(renderer)\n                    renderer.close_group('arrow')\n                else:\n                    self.arrow_patch.draw(renderer)\n            if gid:\n                renderer.open_group('patch', gid=f\"{gid}_patch\")\n                self.patch.draw(renderer)\n                renderer.close_group('patch')\n            else:\n                self.patch.draw(renderer)\n            if gid and hasattr(self.offsetbox, 'set_gid'):\n                renderer.open_group('offsetbox', gid=f\"{gid}_box\")\n                self.offsetbox.draw(renderer)\n                renderer.close_group('offsetbox')\n            else:\n                self.offsetbox.draw(renderer)\n        finally:\n            if gid:\n                renderer.close_group('annotation')\n        self.stale = False\n\n",
        "new_str": "\n\n    def draw(self, renderer):\n        # docstring inherited\n        if renderer is not None:\n            self._renderer = renderer\n        if not self.get_visible() or not self._check_xy(renderer):\n            return\n        self.update_positions(renderer)\n        gid = self.get_gid()\n        if gid:\n            renderer.open_group('annotation', gid=gid)\n            # Ensure components know they're part of a group\n            if self.arrow_patch is not None:\n                self.arrow_patch.set_gid(f\"{gid}_arrow\")\n            self.patch.set_gid(f\"{gid}_patch\")\n            if hasattr(self.offsetbox, 'set_gid'):\n                self.offsetbox.set_gid(f\"{gid}_box\")\n        try:\n            if self.arrow_patch is not None:\n                if self.arrow_patch.figure is None and self.figure is not None:\n                    self.arrow_patch.figure = self.figure\n                self.arrow_patch.draw(renderer)\n            self.patch.draw(renderer)\n            self.offsetbox.draw(renderer)\n        finally:\n            if gid:\n                renderer.close_group('annotation')\n        self.stale = False\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        34
      ],
      "id": "30:str_replace_editor\nstr_replace"
    },
    {
      "label": "\ngrep",
      "args": [
        "gid=.My_label",
        "example.svg"
      ],
      "phase": "general",
      "step_indices": [
        35
      ],
      "id": "31:\ngrep"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_annotation_gid.py",
        "old_str": "\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n\nfig, ax = plt.subplots()\narr_img = np.arange(100).reshape((10, 10))  # Simple test array\n\nxy = [0.3, 0.55]\nimagebox = OffsetImage(arr_img, zoom=0.1)\nimagebox.image.axes = ax\n\nab = AnnotationBbox(imagebox, xy,\n                    xybox=(120., -80.),\n                    xycoords='data',\n                    boxcoords=\"offset points\",\n                    pad=0.5,\n                    arrowprops=dict(\n                        arrowstyle=\"->\",\n                        connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n                    )\nab.set_gid('My_label')\nax.add_artist(ab)\n\nprint(f\"GID = {ab.get_gid()}\")\nfig.savefig(\"example.svg\", format=\"svg\")\n\n",
        "new_str": "\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\n\nfig, ax = plt.subplots()\nrect = Rectangle((0.2, 0.3), width=0.4, height=0.5)\nrect.set_gid('test_rect')\nax.add_patch(rect)\n\nprint(f\"GID = {rect.get_gid()}\")\nfig.savefig(\"simple_test.svg\", format=\"svg\")\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        36
      ],
      "id": "32:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_annotation_gid.py",
        "old_str": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n\nfig, ax = plt.subplots()\narr_img = np.arange(100).reshape((10, 10))  # Simple test array\n\nxy = [0.3, 0.55]\nimagebox = OffsetImage(arr_img, zoom=0.1)\nimagebox.image.axes = ax\n\nab = AnnotationBbox(imagebox, xy,\n                    xybox=(120., -80.),\n                    xycoords='data',\n                    boxcoords=\"offset points\",\n                    pad=0.5,\n                    arrowprops=dict(\n                        arrowstyle=\"->\",\n                        connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n                    )\nab.set_gid('My_label')\nax.add_artist(ab)\n\nprint(f\"GID = {ab.get_gid()}\")\nfig.savefig(\"example.svg\", format=\"svg\")",
        "new_str": "import matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\n\nfig, ax = plt.subplots()\nrect = Rectangle((0.2, 0.3), width=0.4, height=0.5)\nrect.set_gid('test_rect')\nax.add_patch(rect)\n\nprint(f\"GID = {rect.get_gid()}\")\nfig.savefig(\"simple_test.svg\", format=\"svg\")",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        37
      ],
      "id": "33:str_replace_editor\nstr_replace"
    },
    {
      "label": "\ngrep",
      "args": [
        "gid=.test_rect",
        "simple_test.svg"
      ],
      "phase": "general",
      "step_indices": [
        38
      ],
      "id": "34:\ngrep"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:\nfind",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "5:\ngrep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "1:cd",
      "target": "5:\ngrep",
      "key": 1
    },
    {
      "label": "7",
      "type": "exec",
      "source": "1:cd",
      "target": "7:\nfind",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "1:cd",
      "target": "9:\ngrep",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "1:cd",
      "target": "9:\ngrep",
      "key": 1
    },
    {
      "label": "18",
      "type": "exec",
      "source": "1:cd",
      "target": "9:\ngrep",
      "key": 2
    },
    {
      "label": "11",
      "type": "exec",
      "source": "1:cd",
      "target": "11:\ngrep",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "1:cd",
      "target": "13:\ngrep",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "1:cd",
      "target": "13:\ngrep",
      "key": 1
    },
    {
      "label": "30",
      "type": "exec",
      "source": "1:cd",
      "target": "26:\ngrep",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:\nfind",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:\ngrep",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:\nfind",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:\ngrep",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "9:\ngrep",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "9:\ngrep",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "13:\ngrep",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "13:\ngrep",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "18:str_replace_editor\ncreate",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python",
      "key": 1
    },
    {
      "label": "32",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python",
      "key": 2
    },
    {
      "label": "35",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python",
      "key": 3
    },
    {
      "label": "38",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python",
      "key": 4
    },
    {
      "label": "26",
      "type": "exec",
      "source": "19:cd",
      "target": "24:find",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "19:cd",
      "target": "21:grep",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "19:cd",
      "target": "21:grep",
      "key": 1
    },
    {
      "label": "29",
      "type": "exec",
      "source": "19:cd",
      "target": "25:cat",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "19:cd",
      "target": "29:head",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "20:python",
      "target": "21:grep",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "20:python",
      "target": "21:grep",
      "key": 1
    },
    {
      "label": "32",
      "type": "exec",
      "source": "20:python",
      "target": "28:\ngrep",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "20:python",
      "target": "31:\ngrep",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "20:python",
      "target": "34:\ngrep",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "21:grep",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "21:grep",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "21:grep",
      "target": "19:cd",
      "key": 1
    },
    {
      "label": "29",
      "type": "exec",
      "source": "21:grep",
      "target": "19:cd",
      "key": 2
    },
    {
      "label": "24",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "24:find",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "25:cat",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "26:\ngrep",
      "target": "27:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "27:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "28:\ngrep",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "29:head",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "31:\ngrep",
      "target": "32:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "32:str_replace_editor\nstr_replace",
      "target": "33:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "33:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "34:\ngrep",
      "target": "0:empty action",
      "key": 0
    }
  ]
}