{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-13112",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "cd",
      "args": [
        "/workspace/django__django__3.2"
      ],
      "phase": "general",
      "step_indices": [
        0,
        1,
        2,
        7,
        9,
        11,
        16,
        18,
        19,
        21,
        22,
        23
      ],
      "id": "0:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "test*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "1:find"
    },
    {
      "label": "grep",
      "args": [
        "django/",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:grep"
    },
    {
      "label": "grep",
      "args": [
        "django/db/migrations/"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "3:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__3.2/django/db/migrations/operations/utils.py",
        "view_range": [
          1,
          20
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__3.2/django/db/migrations/operations/utils.py",
        "view_range": [
          1,
          -1
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.2/django/db/migrations/operations/utils.py",
        "old_str": "def resolve_relation(model, app_label=None, model_name=None):\n    \"\"\"\n    Turn a model class or model reference string and return a model tuple.\n\n    app_label and model_name are used to resolve the scope of recursive and\n    unscoped model relationship.\n    \"\"\"\n    if isinstance(model, str):\n        if model == RECURSIVE_RELATIONSHIP_CONSTANT:\n            if app_label is None or model_name is None:\n                raise TypeError(\n                    'app_label and model_name must be provided to resolve '\n                    'recursive relationships.'\n                )\n            return app_label, model_name\n        if '.' in model:\n            return tuple(model.lower().split('.', 1))\n        if app_label is None:\n            raise TypeError(\n                'app_label must be provided to resolve unscoped model '\n                'relationships.'\n            )\n        return app_label, model.lower()",
        "new_str": "def resolve_relation(model, app_label=None, model_name=None):\n    \"\"\"\n    Turn a model class or model reference string and return a model tuple.\n\n    app_label and model_name are used to resolve the scope of recursive and\n    unscoped model relationship.\n    \"\"\"\n    if isinstance(model, str):\n        if model == RECURSIVE_RELATIONSHIP_CONSTANT:\n            if app_label is None or model_name is None:\n                raise TypeError(\n                    'app_label and model_name must be provided to resolve '\n                    'recursive relationships.'\n                )\n            return app_label, model_name\n        if '.' in model:\n            app_label, model_name = model.split('.', 1)\n            return app_label.lower(), model_name\n        if app_label is None:\n            raise TypeError(\n                'app_label must be provided to resolve unscoped model '\n                'relationships.'\n            )\n        return app_label.lower(), model.lower()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        6,
        12,
        17,
        20
      ],
      "id": "7:empty action"
    },
    {
      "label": "find",
      "args": [
        "tests/migrations/",
        "test*.py",
        "|",
        "xargs",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "8:find"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/django__django__3.2/tests/migrations/test_app_label_case.py",
        "file_text": "\nfrom django.db.migrations.operations.utils import resolve_relation\nfrom django.test import TestCase\n\nclass AppLabelCaseTests(TestCase):\n    def test_mixed_case_app_label(self):\n        # Test that mixed case app labels are resolved case-insensitively\n        self.assertEqual(\n            resolve_relation('DJ_RegLogin.Category'),\n            ('dj_reglogin', 'Category')\n        )\n        \n    def test_uppercase_app_label_with_model(self):\n        # Test with explicitly provided uppercase app label\n        self.assertEqual(\n            resolve_relation('Category', app_label='DJ_RegLogin'),\n            ('dj_reglogin', 'category')\n        )\n        \n    def test_lowercase_app_label_with_model(self):\n        # Test with lowercase app label for consistency\n        self.assertEqual(\n            resolve_relation('Category', app_label='dj_reglogin'),\n            ('dj_reglogin', 'category')\n        )\n        \n    def test_model_case_preserved(self):\n        # Verify model name case is preserved\n        self.assertEqual(\n            resolve_relation('DJ_RegLogin.MixedCaseModel'),\n            ('dj_reglogin', 'MixedCaseModel')\n        )\n"
      },
      "phase": "verification",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "args": [
        "tests/migrations/test_app_label_case.py"
      ],
      "phase": "verification",
      "step_indices": [
        9,
        11,
        16
      ],
      "id": "10:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.2/tests/migrations/test_app_label_case.py",
        "old_str": "\nfrom django.db.migrations.operations.utils import resolve_relation\nfrom django.test import TestCase\n\nclass AppLabelCaseTests(TestCase):\n",
        "new_str": "\nfrom django.db.migrations.operations.utils import resolve_relation\nfrom unittest import TestCase\n\nclass AppLabelCaseTests(TestCase):\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.2/django/db/migrations/operations/utils.py",
        "old_str": "\ndef resolve_relation(model, app_label=None, model_name=None):\n    \"\"\"\n    Turn a model class or model reference string and return a model tuple.\n\n    app_label and model_name are used to resolve the scope of recursive and\n    unscoped model relationship.\n    \"\"\"\n",
        "new_str": "\ndef resolve_relation(model, app_label=None, model_name=None):\n    \"\"\"\n    Turn a model class or model reference string and return a model tuple.\n\n    app_label and model_name are used to resolve the scope of recursive and\n    unscoped model relationship. App labels are normalized to lowercase while\n    model names preserve their original case.\n    \"\"\"\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.2/tests/migrations/test_app_label_case.py",
        "old_str": "\n\n    def test_model_case_preserved(self):\n        # Verify model name case is preserved\n        self.assertEqual(\n            resolve_relation('DJ_RegLogin.MixedCaseModel'),\n            ('dj_reglogin', 'MixedCaseModel')\n        )\n\n",
        "new_str": "\n\n    def test_model_case_preserved(self):\n        # Verify model name case is preserved\n        self.assertEqual(\n            resolve_relation('DJ_RegLogin.MixedCaseModel'),\n            ('dj_reglogin', 'MixedCaseModel')\n        )\n        \n    def test_non_ascii_app_label(self):\n        # Test with non-ASCII app label\n        self.assertEqual(\n            resolve_relation('M\u00fdApp.ModelName'),\n            ('m\u00fdapp', 'ModelName')\n        )\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.2/tests/migrations/test_app_label_case.py",
        "old_str": "\n    def test_model_case_preserved(self):\n        # Verify model name case is preserved\n        self.assertEqual(\n            resolve_relation('DJ_RegLogin.MixedCaseModel'),\n            ('dj_reglogin', 'MixedCaseModel')\n        )\n",
        "new_str": "\n    def test_model_case_preserved(self):\n        # Verify model name case is preserved\n        self.assertEqual(\n            resolve_relation('DJ_RegLogin.MixedCaseModel'),\n            ('dj_reglogin', 'MixedCaseModel')\n        )\n        \n    def test_non_ascii_app_label(self):\n        # Test with non-ASCII app label\n        self.assertEqual(\n            resolve_relation('M\u00fdApp.ModelName'),\n            ('m\u00fdapp', 'ModelName')\n        )\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "git",
      "args": [
        "status"
      ],
      "phase": "general",
      "step_indices": [
        18
      ],
      "id": "15:git"
    },
    {
      "label": "\ngit",
      "args": [
        "add",
        "django/db/migrations/operations/utils.py",
        "tests/migrations/test_app_label_case.py"
      ],
      "phase": "general",
      "step_indices": [
        19
      ],
      "id": "16:\ngit"
    },
    {
      "label": "\ngit",
      "args": [
        "commit"
      ],
      "phase": "general",
      "step_indices": [
        19
      ],
      "id": "17:\ngit"
    },
    {
      "label": "\ngit",
      "args": [
        "checkout"
      ],
      "phase": "general",
      "step_indices": [
        21
      ],
      "id": "18:\ngit"
    },
    {
      "label": "git",
      "args": [
        "remote"
      ],
      "phase": "general",
      "step_indices": [
        22
      ],
      "id": "19:git"
    },
    {
      "label": "\ngit",
      "args": [
        "config"
      ],
      "phase": "general",
      "step_indices": [
        23
      ],
      "id": "20:\ngit"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:find",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "0:cd",
      "target": "2:grep",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "0:cd",
      "target": "3:grep",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "0:cd",
      "target": "8:find",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "0:cd",
      "target": "10:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "0:cd",
      "target": "10:python",
      "key": 1
    },
    {
      "label": "16",
      "type": "exec",
      "source": "0:cd",
      "target": "10:python",
      "key": 2
    },
    {
      "label": "18",
      "type": "exec",
      "source": "0:cd",
      "target": "15:git",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "0:cd",
      "target": "16:\ngit",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "0:cd",
      "target": "18:\ngit",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "0:cd",
      "target": "19:git",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "0:cd",
      "target": "20:\ngit",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:find",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:grep",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:grep",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:empty action",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "7:empty action",
      "target": "0:cd",
      "key": 1
    },
    {
      "label": "21",
      "type": "exec",
      "source": "7:empty action",
      "target": "0:cd",
      "key": 2
    },
    {
      "label": "13",
      "type": "exec",
      "source": "7:empty action",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:find",
      "target": "9:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\ncreate",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:python",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "10:python",
      "target": "7:empty action",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "15:git",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "16:\ngit",
      "target": "17:\ngit",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "17:\ngit",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "18:\ngit",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "19:git",
      "target": "0:cd",
      "key": 0
    }
  ]
}