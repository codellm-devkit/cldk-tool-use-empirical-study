{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "astropy__astropy-7671",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0,
        9
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/astropy__astropy__1.3"
      ],
      "phase": "general",
      "step_indices": [
        1,
        4,
        8
      ],
      "id": "1:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:find"
    },
    {
      "label": "python",
      "args": [
        "astropy/utils/tests/test_introspection.py"
      ],
      "phase": "verification",
      "step_indices": [
        1,
        8
      ],
      "id": "3:python"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_minversion.py",
        "file_text": "\nfrom astropy.utils import minversion\nfrom distutils.version import LooseVersion\n\n# Test case from issue description\ntry:\n    print(\"Testing minversion('numpy', '1.14dev'):\")\n    result = minversion('numpy', '1.14dev')\n    print(f\"Result: {result}\")\nexcept Exception as e:\n    print(f\"Error: {type(e).__name__}: {e}\")\n\n# Additional test cases\ntry:\n    print(\"\\nTesting LooseVersion('1.14.3') >= LooseVersion('1.14dev'):\")\n    result = LooseVersion('1.14.3') >= LooseVersion('1.14dev')\n    print(f\"Result: {result}\")\nexcept Exception as e:\n    print(f\"Error: {type(e).__name__}: {e}\")\n\ntry:\n    print(\"\\nTesting LooseVersion('1.14') >= LooseVersion('1.14dev'):\")\n    result = LooseVersion('1.14') >= LooseVersion('1.14dev')\n    print(f\"Result: {result}\")\nexcept Exception as e:\n    print(f\"Error: {type(e).__name__}: {e}\")\n"
      },
      "phase": "verification",
      "step_indices": [
        2
      ],
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "args": [
        "/workspace"
      ],
      "phase": "general",
      "step_indices": [
        3,
        7
      ],
      "id": "5:cd"
    },
    {
      "label": "python",
      "args": [
        "test_minversion.py"
      ],
      "phase": "verification",
      "step_indices": [
        3,
        7
      ],
      "id": "6:python"
    },
    {
      "label": "grep",
      "args": [
        "."
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "7:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__1.3/astropy/utils/introspection.py",
        "view_range": [
          140,
          150
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__1.3/astropy/utils/introspection.py",
        "old_str": "    if inclusive:\n        return LooseVersion(have_version) >= LooseVersion(version)\n    else:\n        return LooseVersion(have_version) > LooseVersion(version)",
        "new_str": "    def _normalize_version(v):\n        # Replace 'dev' with '.dev' to ensure proper comparison\n        return v.replace('dev', '.dev') if isinstance(v, str) else v\n\n    if inclusive:\n        return LooseVersion(_normalize_version(have_version)) >= LooseVersion(_normalize_version(version))\n    else:\n        return LooseVersion(_normalize_version(have_version)) > LooseVersion(_normalize_version(version))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "9:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "7:grep",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "1:cd",
      "target": "3:python",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "2:find",
      "target": "3:python",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:python",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "3:python",
      "target": "0:empty action",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "6:python",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:python",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "5",
      "type": "exec",
      "source": "7:grep",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    }
  ]
}