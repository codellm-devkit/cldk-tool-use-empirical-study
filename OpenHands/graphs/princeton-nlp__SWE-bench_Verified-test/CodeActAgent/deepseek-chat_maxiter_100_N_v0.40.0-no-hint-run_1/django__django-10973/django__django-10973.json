{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-10973",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "cd",
      "args": [
        "/workspace/django__django__3.0"
      ],
      "phase": "general",
      "step_indices": [
        0,
        1,
        5,
        6
      ],
      "id": "0:cd"
    },
    {
      "label": "find",
      "args": [
        ".",
        "*postgres*client*test*"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "1:find"
    },
    {
      "label": "find",
      "args": [
        ".",
        "client.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:find"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__3.0/django/db/backends/postgresql/client.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:empty action"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__3.0/django/db/backends/postgresql/client.py",
        "old_str": "    @classmethod\n    def runshell_db(cls, conn_params):\n        args = [cls.executable_name]\n\n        host = conn_params.get('host', '')\n        port = conn_params.get('port', '')\n        dbname = conn_params.get('database', '')\n        user = conn_params.get('user', '')\n        passwd = conn_params.get('password', '')\n\n        if user:\n            args += ['-U', user]\n        if host:\n            args += ['-h', host]\n        if port:\n            args += ['-p', str(port)]\n        args += [dbname]\n\n        temp_pgpass = None\n        sigint_handler = signal.getsignal(signal.SIGINT)\n        try:\n            if passwd:\n                # Create temporary .pgpass file.\n                temp_pgpass = NamedTemporaryFile(mode='w+')\n                try:\n                    print(\n                        _escape_pgpass(host) or '*',\n                        str(port) or '*',\n                        _escape_pgpass(dbname) or '*',\n                        _escape_pgpass(user) or '*',\n                        _escape_pgpass(passwd),\n                        file=temp_pgpass,\n                        sep=':',\n                        flush=True,\n                    )\n                    os.environ['PGPASSFILE'] = temp_pgpass.name\n                except UnicodeEncodeError:\n                    # If the current locale can't encode the data, let the\n                    # user input the password manually.\n                    pass\n            # Allow SIGINT to pass to psql to abort queries.\n            signal.signal(signal.SIGINT, signal.SIG_IGN)\n            subprocess.check_call(args)\n        finally:\n            # Restore the original SIGINT handler.\n            signal.signal(signal.SIGINT, sigint_handler)\n            if temp_pgpass:\n                temp_pgpass.close()\n                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n                    del os.environ['PGPASSFILE']",
        "new_str": "    @classmethod\n    def runshell_db(cls, conn_params):\n        args = [cls.executable_name]\n        env = os.environ.copy()\n\n        host = conn_params.get('host', '')\n        port = conn_params.get('port', '')\n        dbname = conn_params.get('database', '')\n        user = conn_params.get('user', '')\n        passwd = conn_params.get('password', '')\n\n        if user:\n            args += ['-U', user]\n        if host:\n            args += ['-h', host]\n        if port:\n            args += ['-p', str(port)]\n        args += [dbname]\n\n        if passwd:\n            env['PGPASSWORD'] = passwd\n\n        sigint_handler = signal.getsignal(signal.SIGINT)\n        try:\n            # Allow SIGINT to pass to psql to abort queries.\n            signal.signal(signal.SIGINT, signal.SIG_IGN)\n            subprocess.run(args, env=env, check=True)\n        finally:\n            # Restore the original SIGINT handler.\n            signal.signal(signal.SIGINT, sigint_handler)\n            if 'PGPASSWORD' in env:\n                del env['PGPASSWORD']",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "find",
      "args": [
        "tests",
        "*postgres*client*test*"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "6:find"
    },
    {
      "label": "find",
      "args": [
        "tests",
        "*client*test*",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "7:find"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:find",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "0:cd",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "0:cd",
      "target": "6:find",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "0:cd",
      "target": "7:find",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:find",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:find",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:empty action",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:empty action",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:find",
      "target": "0:cd",
      "key": 0
    }
  ]
}