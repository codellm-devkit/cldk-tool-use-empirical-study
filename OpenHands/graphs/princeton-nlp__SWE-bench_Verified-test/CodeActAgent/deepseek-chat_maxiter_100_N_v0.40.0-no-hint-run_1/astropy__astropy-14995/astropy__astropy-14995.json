{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "astropy__astropy-14995",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/astropy__astropy__5.2"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "1:cd"
    },
    {
      "label": "ls",
      "args": [],
      "phase": "general",
      "step_indices": [
        1,
        2
      ],
      "id": "2:ls"
    },
    {
      "label": "find",
      "args": [
        ".",
        "test*",
        "d"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "3:find"
    },
    {
      "label": "find",
      "args": [
        "astropy/nddata",
        "*.py",
        "|",
        "grep"
      ],
      "phase": "general",
      "step_indices": [
        2,
        5
      ],
      "id": "4:find"
    },
    {
      "label": "grep",
      "args": [
        "mask.*propag",
        "astropy/nddata/tests/test_nddata.py",
        "|",
        "grep",
        "bitwise_or"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "5:grep"
    },
    {
      "label": "grep",
      "args": [
        "astropy/nddata/tests/test_nddata.py"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "6:grep"
    },
    {
      "label": "grep",
      "args": [
        "astropy/nddata"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "7:grep"
    },
    {
      "label": "grep",
      "args": [
        "def multiply",
        "astropy/nddata/mixins/ndarithmetic.py"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "8:grep"
    },
    {
      "label": "grep",
      "args": [
        "handle_mask",
        "astropy/nddata/mixins/ndarithmetic.py"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "9:grep"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "        # If only one mask is present we need not bother about any type checks\n        if (\n            self.mask is None and operand is not None and operand.mask is None\n        ) or handle_mask is None:\n            return None\n        elif self.mask is None and operand is not None:\n            # Make a copy so there is no reference in the result.\n            return deepcopy(operand.mask)\n        elif operand is None:\n            return deepcopy(self.mask)\n        else:\n            # Now lets calculate the resulting mask (operation enforces copy)\n            return handle_mask(self.mask, operand.mask, **kwds)",
        "new_str": "        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n        elif self.mask is None and operand is not None:\n            # Make a copy so there is no reference in the result.\n            return deepcopy(operand.mask)\n        elif operand is None or operand.mask is None:\n            return deepcopy(self.mask)\n        elif self.mask is None:\n            return deepcopy(operand.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_mask_propagation.py",
        "file_text": "\nimport numpy as np\nfrom astropy.nddata import NDDataRef\n\narray = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\nmask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n\nnref_nomask = NDDataRef(array)\nnref_mask = NDDataRef(array, mask=mask)\n\n# Test cases from issue\nprint(\"1. No mask * constant:\")\nprint(nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask)\n\nprint(\"\\n2. No mask * no mask:\")\nprint(nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)\n\nprint(\"\\n3. Mask * constant:\")\nprint(nref_mask.multiply(1., handle_mask=np.bitwise_or).mask)\n\nprint(\"\\n4. Mask * mask:\")\nprint(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask)\n\nprint(\"\\n5. Mask * no mask:\")\nprint(nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)\n"
      },
      "phase": "verification",
      "step_indices": [
        8
      ],
      "id": "11:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "args": [
        "/workspace/test_mask_propagation.py"
      ],
      "phase": "verification",
      "step_indices": [
        9,
        11,
        13,
        22,
        26,
        33,
        37
      ],
      "id": "12:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n        elif self.mask is None and operand is not None:\n            # Make a copy so there is no reference in the result.\n            return deepcopy(operand.mask)\n        elif operand is None or operand.mask is None:\n            return deepcopy(self.mask)\n        elif self.mask is None:\n            return deepcopy(operand.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "new_str": "\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n            \n        # Handle scalar operands (which have no mask attribute)\n        if not hasattr(operand, 'mask'):\n            return deepcopy(self.mask) if self.mask is not None else None\n            \n        # Handle NDDataRef-like operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n            \n        # Handle scalar operands (which have no mask attribute)\n        if not hasattr(operand, 'mask'):\n            return deepcopy(self.mask) if self.mask is not None else None\n            \n        # Handle NDDataRef-like operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "new_str": "\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n            \n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if not isinstance(operand, type(self)):\n            return deepcopy(self.mask) if self.mask is not None else None\n            \n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n            \n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if not isinstance(operand, type(self)):\n            return deepcopy(self.mask) if self.mask is not None else None\n            \n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n\n",
        "new_str": "\n\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n            \n        # First check for None operand\n        if operand is None:\n            return deepcopy(self.mask) if self.mask is not None else None\n            \n        # Then check for non-NDDataRef operands (scalars, arrays, etc)\n        if not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n            \n        # Finally handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n                \n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if not isinstance(operand, type(self)):\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "new_str": "\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n                \n        # First check for None operand\n        if operand is None:\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Then check for non-NDDataRef operands (scalars, arrays, etc)\n        if not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Finally handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "view_range": [
          510,
          530
        ]
      },
      "phase": "localization",
      "step_indices": [
        16
      ],
      "id": "17:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n                \n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if not isinstance(operand, type(self)):\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)",
        "new_str": "        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n                \n        # First check for None operand\n        if operand is None:\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Then check for non-NDDataRef operands (scalars, arrays, etc)\n        if not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Finally handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "if handle_mask is None:\n            return None\n                \n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if not isinstance(operand, type(self)):\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)",
        "new_str": "if handle_mask is None:\n            return None\n                \n        # First check for None operand\n        if operand is None:\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Then check for non-NDDataRef operands (scalars, arrays, etc)\n        if not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Finally handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\nif not isinstance(operand, type(self)):\n            return deepcopy(self.mask) if self.mask is not None else None\n",
        "new_str": "\nif operand is None or not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "view_range": [
          515,
          525
        ]
      },
      "phase": "localization",
      "step_indices": [
        20
      ],
      "id": "21:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if not isinstance(operand, type(self)):\n            return deepcopy(self.mask) if self.mask is not None else None\n",
        "new_str": "\n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n                \n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "new_str": "\n        # If mask handling is disabled\n        if handle_mask is None:\n            return None\n            \n        # Handle cases where we should just return self's mask\n        if operand is None or not hasattr(operand, 'mask'):\n            return deepcopy(self.mask) if self.mask is not None else None\n            \n        # Handle cases where we should return operand's mask\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n            \n        # Handle case where both masks exist\n        if operand.mask is not None and self.mask is not None:\n            return handle_mask(self.mask, operand.mask, **kwds)\n            \n        # Final fallthrough - return self's mask\n        return deepcopy(self.mask)\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "view_range": [
          515,
          530
        ]
      },
      "phase": "localization",
      "step_indices": [
        24,
        31
      ],
      "id": "24:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n",
        "new_str": "\n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, 'mask'):\n            return deepcopy(self.mask) if self.mask is not None else None\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        25
      ],
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n    def _prepare_then_do_arithmetic(\n        self,\n        operation,\n        operand,\n        handle_mask=np.logical_or,\n        handle_meta=None,\n        uncertainty_correlation=0,\n        compare_wcs=\"first_found\",\n        operation_ignores_mask=False,\n        axis=None,\n        **kwds,\n    ):\n        \"\"\"\n        Base method which calculates the result of the arithmetic operation.\n",
        "new_str": "\n\n    def _prepare_then_do_arithmetic(\n        self,\n        operation,\n        operand,\n        handle_mask=np.logical_or,\n        handle_meta=None,\n        uncertainty_correlation=0,\n        compare_wcs=\"first_found\",\n        operation_ignores_mask=False,\n        axis=None,\n        **kwds,\n    ):\n        \"\"\"\n        Base method which calculates the result of the arithmetic operation.\n        \n        # Convert scalar operands to NDDataRef first\n        if not hasattr(operand, '_nddata_subclass'):\n            from astropy.nddata import NDDataRef\n            operand = NDDataRef(operand)\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        27
      ],
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "view_range": [
          170,
          190
        ]
      },
      "phase": "localization",
      "step_indices": [
        28
      ],
      "id": "27:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n    def _prepare_then_do_arithmetic(\n        self,\n        operation,\n        operand,\n        propagate_uncertainties=True,\n        handle_mask=np.logical_or,\n        handle_meta=None,\n        uncertainty_correlation=0,\n        compare_wcs=\"first_found\",\n        operation_ignores_mask=False,\n        axis=None,\n        **kwds,\n    ):\n        \"\"\"\n        Base method which calculates the result of the arithmetic operation.\n",
        "new_str": "\n    def _prepare_then_do_arithmetic(\n        self,\n        operation,\n        operand,\n        propagate_uncertainties=True,\n        handle_mask=np.logical_or,\n        handle_meta=None,\n        uncertainty_correlation=0,\n        compare_wcs=\"first_found\",\n        operation_ignores_mask=False,\n        axis=None,\n        **kwds,\n    ):\n        \"\"\"\n        Base method which calculates the result of the arithmetic operation.\n        \n        # Convert scalar/array operands to NDDataRef first\n        if not hasattr(operand, '_nddata_subclass'):\n            from astropy.nddata import NDDataRef\n            operand = NDDataRef(operand, copy=False)\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n\n",
        "new_str": "\n\n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        elif not hasattr(operand, 'mask'):\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        30
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "new_str": "\n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        elif not hasattr(operand, 'mask'):\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        32
      ],
      "id": "30:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n        # If only one mask is present we need not bother about any type checks\n        if handle_mask is None:\n            return None\n                \n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, 'mask'):\n            return deepcopy(self.mask) if self.mask is not None else None\n                \n        # Handle NDDataRef operands\n        if self.mask is None:\n            return deepcopy(operand.mask) if operand.mask is not None else None\n        elif operand.mask is None:\n            return deepcopy(self.mask)\n        elif not hasattr(operand, 'mask'):\n            return deepcopy(self.mask)\n        else:\n            # Only apply handle_mask when both masks exist\n            return handle_mask(self.mask, operand.mask, **kwds)\n\n",
        "new_str": "\n\n        # If mask handling is disabled\n        if handle_mask is None:\n            return None\n            \n        # Handle case where neither operand has a mask\n        if self.mask is None and (operand is None or not hasattr(operand, 'mask') or \n           (hasattr(operand, 'mask') and operand.mask is None):\n            return None\n            \n        # Handle case where only self has a mask\n        if self.mask is not None and (operand is None or not hasattr(operand, 'mask') or \n           (hasattr(operand, 'mask') and operand.mask is None):\n            return deepcopy(self.mask)\n            \n        # Handle case where only operand has a mask\n        if self.mask is None and hasattr(operand, 'mask') and operand.mask is not None:\n            return deepcopy(operand.mask)\n            \n        # Handle case where both have masks\n        if self.mask is not None and hasattr(operand, 'mask') and operand.mask is not None:\n            return handle_mask(self.mask, operand.mask, **kwds)\n            \n        # Final fallback\n        return None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        34
      ],
      "id": "31:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, 'mask'):\n            return deepcopy(self.mask) if self.mask is not None else None\n\n",
        "new_str": "\n\n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        35
      ],
      "id": "32:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, 'mask'):\n            return deepcopy(self.mask) if self.mask is not None else None\n",
        "new_str": "\n        # Handle non-NDDataRef operands (scalars, arrays, etc)\n        if operand is None or not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        36
      ],
      "id": "33:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n        kwargs[\"mask\"] = self._arithmetic_mask(\n            operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n        )\n\n",
        "new_str": "\n\n        # Only propagate mask if both operands are NDDataRef objects\n        if hasattr(operand, '_nddata_subclass'):\n            kwargs[\"mask\"] = self._arithmetic_mask(\n                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n            )\n        else:\n            kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        38
      ],
      "id": "34:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "view_range": [
          330,
          340
        ]
      },
      "phase": "localization",
      "step_indices": [
        39,
        42,
        48,
        66,
        74,
        79
      ],
      "id": "35:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n            if self.mask is None:\n                kwargs[\"mask\"] = deepcopy(operand.mask)\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask)\n        else:\n            kwargs[\"mask\"] = self._arithmetic_mask(\n                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n            )\n\n",
        "new_str": "\n\n            if self.mask is None:\n                kwargs[\"mask\"] = deepcopy(operand.mask) if hasattr(operand, 'mask') else None\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask)\n        else:\n            if hasattr(operand, '_nddata_subclass'):\n                kwargs[\"mask\"] = self._arithmetic_mask(\n                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n                )\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        40
      ],
      "id": "36:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n            kwargs[\"mask\"] = self._arithmetic_mask(\n                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n            )\n\n",
        "new_str": "\n\n            if hasattr(operand, 'mask'):\n                kwargs[\"mask\"] = self._arithmetic_mask(\n                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n                )\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        41
      ],
      "id": "37:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n            if self.mask is None:\n                kwargs[\"mask\"] = deepcopy(operand.mask)\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask)\n        else:\n            kwargs[\"mask\"] = self._arithmetic_mask(\n                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n            )\n\n",
        "new_str": "\n\n            if self.mask is None:\n                kwargs[\"mask\"] = deepcopy(operand.mask) if hasattr(operand, 'mask') else None\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask)\n        else:\n            if hasattr(operand, '_nddata_subclass') and hasattr(operand, 'mask'):\n                kwargs[\"mask\"] = self._arithmetic_mask(\n                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n                )\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        43,
        44
      ],
      "id": "38:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n            kwargs[\"mask\"] = self._arithmetic_mask(\n                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n            )\n\n\n",
        "new_str": "\n\n\n            if hasattr(operand, 'mask'):\n                kwargs[\"mask\"] = self._arithmetic_mask(\n                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n                )\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        45
      ],
      "id": "39:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "view_range": [
          335,
          337
        ]
      },
      "phase": "localization",
      "step_indices": [
        46
      ],
      "id": "40:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n            kwargs[\"mask\"] = self._arithmetic_mask(\n                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n            )\n\n",
        "new_str": "\n\n            if hasattr(operand, 'mask') and operand.mask is not None:\n                kwargs[\"mask\"] = self._arithmetic_mask(\n                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n                )\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        47
      ],
      "id": "41:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n            if self.mask is None:\n                kwargs[\"mask\"] = deepcopy(operand.mask)\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask)\n        else:\n            kwargs[\"mask\"] = self._arithmetic_mask(\n                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n            )\n\n\n",
        "new_str": "\n\n\n            if self.mask is None:\n                kwargs[\"mask\"] = deepcopy(operand.mask) if hasattr(operand, 'mask') and operand.mask is not None else None\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask)\n        else:\n            if hasattr(operand, 'mask') and operand.mask is not None:\n                kwargs[\"mask\"] = self._arithmetic_mask(\n                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n                )\n            else:\n                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        49
      ],
      "id": "42:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n   330\t            if self.mask is None:\n   331\t                kwargs[\"mask\"] = deepcopy(operand.mask)\n   332\t            else:\n   333\t                kwargs[\"mask\"] = deepcopy(self.mask)\n   334\t        else:\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n",
        "new_str": "\n   330\t            if self.mask is None:\n   331\t                kwargs[\"mask\"] = deepcopy(operand.mask) if hasattr(operand, 'mask') else None\n   332\t            else:\n   333\t                kwargs[\"mask\"] = deepcopy(self.mask)\n   334\t        else:\n   335\t            if hasattr(operand, 'mask'):\n   336\t                kwargs[\"mask\"] = self._arithmetic_mask(\n   337\t                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   338\t                )\n   339\t            else:\n   340\t                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        50
      ],
      "id": "43:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n\n",
        "new_str": "\n\n   335\t            if hasattr(operand, 'mask'):\n   336\t                kwargs[\"mask\"] = self._arithmetic_mask(\n   337\t                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   338\t                )\n   339\t            else:\n   340\t                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        51
      ],
      "id": "44:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "view_range": [
          334,
          338
        ]
      },
      "phase": "localization",
      "step_indices": [
        52,
        63
      ],
      "id": "45:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n\n",
        "new_str": "\n\n   335\t            if hasattr(operand, 'mask') and operand.mask is not None:\n   336\t                kwargs[\"mask\"] = self._arithmetic_mask(\n   337\t                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   338\t                )\n   339\t            else:\n   340\t                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        53
      ],
      "id": "46:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n\n",
        "new_str": "\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        54
      ],
      "id": "47:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n\n",
        "new_str": "\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n\n",
        "edit_status": "failure: unknown"
      },
      "phase": "patch",
      "step_indices": [
        55
      ],
      "id": "48:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n   334\t        else:\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n\n\n",
        "new_str": "\n\n\n   334\t        else:\n   335\t            if not hasattr(operand, 'mask'):\n   336\t                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n   337\t            else:\n   338\t                kwargs[\"mask\"] = self._arithmetic_mask(\n   339\t                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   340\t                )\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        56
      ],
      "id": "49:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n\n\n",
        "new_str": "\n\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n\n\n",
        "edit_status": "failure: unknown"
      },
      "phase": "patch",
      "step_indices": [
        57,
        59
      ],
      "id": "50:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n   334\t        else:\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n\n",
        "new_str": "\n\n   334\t        else:\n   335\t            if not hasattr(operand, '_nddata_subclass'):\n   336\t                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n   337\t            else:\n   338\t                kwargs[\"mask\"] = self._arithmetic_mask(\n   339\t                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   340\t                )\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        58
      ],
      "id": "51:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n        \"\"\"\n        Calculate the resulting wcs.\n",
        "new_str": "\n\n    def _handle_mask_propagation(self, operand, handle_mask, **kwds):\n        \"\"\"Helper method to handle mask propagation logic.\"\"\"\n        if not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n        if self.mask is None:\n            return deepcopy(operand.mask) if hasattr(operand, 'mask') and operand.mask is not None else None\n        if operand.mask is None:\n            return deepcopy(self.mask)\n        return handle_mask(self.mask, operand.mask, **kwds)\n\n    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n        \"\"\"\n        Calculate the resulting wcs.\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        60
      ],
      "id": "52:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n\n\n",
        "new_str": "\n\n\n   335\t            kwargs[\"mask\"] = self._handle_mask_propagation(\n   336\t                operand, handle_mask, **kwds2[\"mask\"]\n   337\t            )\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        61
      ],
      "id": "53:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n\n\n",
        "new_str": "\n\n\n   335\t            kwargs[\"mask\"] = self._handle_mask_propagation(\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        62,
        65,
        68,
        73,
        78
      ],
      "id": "54:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n   334\t        else:\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n\n",
        "new_str": "\n\n   334\t        else:\n   335\t            kwargs[\"mask\"] = self._handle_mask_propagation(\n   336\t                operand, handle_mask, **kwds2[\"mask\"]\n   337\t            )\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        64
      ],
      "id": "55:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n   330\t            if self.mask is None:\n   331\t                kwargs[\"mask\"] = deepcopy(operand.mask)\n   332\t            else:\n   333\t                kwargs[\"mask\"] = deepcopy(self.mask)\n   334\t        else:\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n\n\n",
        "new_str": "\n\n\n   330\t            if self.mask is None:\n   331\t                kwargs[\"mask\"] = deepcopy(operand.mask) if hasattr(operand, 'mask') else None\n   332\t            else:\n   333\t                kwargs[\"mask\"] = deepcopy(self.mask)\n   334\t        else:\n   335\t            if hasattr(operand, 'mask'):\n   336\t                kwargs[\"mask\"] = self._arithmetic_mask(\n   337\t                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   338\t                )\n   339\t            else:\n   340\t                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        67
      ],
      "id": "56:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n        \"\"\"\n        Calculate the resulting wcs.\n\n",
        "new_str": "\n\n\n    def _handle_mask_propagation(self, operand, handle_mask, **kwds):\n        \"\"\"Helper method to handle mask propagation logic.\"\"\"\n        if not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n        if self.mask is None:\n            return deepcopy(operand.mask) if hasattr(operand, 'mask') and operand.mask is not None else None\n        if operand.mask is None:\n            return deepcopy(self.mask)\n        return handle_mask(self.mask, operand.mask, **kwds)\n\n    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n        \"\"\"\n        Calculate the resulting wcs.\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        69
      ],
      "id": "57:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "view_range": [
          540,
          550
        ]
      },
      "phase": "localization",
      "step_indices": [
        70,
        84,
        88,
        92,
        96
      ],
      "id": "58:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n   540\t        if operand.mask is None:\n   541\t            return deepcopy(self.mask)\n   542\t        return handle_mask(self.mask, operand.mask, **kwds)\n   543\t\n   544\t    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n   545\t        \"\"\"\n   546\t        Calculate the resulting wcs.\n\n\n",
        "new_str": "\n\n\n   540\t        if operand.mask is None:\n   541\t            return deepcopy(self.mask)\n   542\t        return handle_mask(self.mask, operand.mask, **kwds)\n   543\t\n   544\t    def _handle_mask_propagation(self, operand, handle_mask, **kwds):\n   545\t        \"\"\"Helper method to handle mask propagation logic.\"\"\"\n   546\t        if not hasattr(operand, '_nddata_subclass'):\n   547\t            return deepcopy(self.mask) if self.mask is not None else None\n   548\t        if self.mask is None:\n   549\t            return deepcopy(operand.mask) if hasattr(operand, 'mask') and operand.mask is not None else None\n   550\t        if operand.mask is None:\n   551\t            return deepcopy(self.mask)\n   552\t        return handle_mask(self.mask, operand.mask, **kwds)\n   553\t\n   554\t    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n   555\t        \"\"\"\n   556\t        Calculate the resulting wcs.\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        71
      ],
      "id": "59:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "edit_status": "failure: unknown"
      },
      "phase": "patch",
      "step_indices": [
        72,
        76,
        77,
        80,
        81,
        82,
        85,
        86,
        87,
        89,
        90,
        91,
        93,
        94,
        95,
        97,
        98,
        99
      ],
      "id": "60:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n   334\t        else:\n   335\t            kwargs[\"mask\"] = self._arithmetic_mask(\n   336\t                operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   337\t            )\n\n\n",
        "new_str": "\n\n\n   334\t        else:\n   335\t            if hasattr(operand, '_nddata_subclass') and hasattr(operand, 'mask'):\n   336\t                kwargs[\"mask\"] = self._arithmetic_mask(\n   337\t                    operation, operand, handle_mask, axis=axis, **kwds2[\"mask\"]\n   338\t                )\n   339\t            else:\n   340\t                kwargs[\"mask\"] = deepcopy(self.mask) if self.mask is not None else None\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        75
      ],
      "id": "61:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/astropy__astropy__5.2/astropy/nddata/mixins/ndarithmetic.py",
        "old_str": "\n\n\n    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n        \"\"\"\n        Calculate the resulting wcs.\n\n\n",
        "new_str": "\n\n\n    def _handle_mask_propagation(self, operand, handle_mask, **kwds):\n        \"\"\"Helper method to handle mask propagation logic.\"\"\"\n        if not hasattr(operand, '_nddata_subclass'):\n            return deepcopy(self.mask) if self.mask is not None else None\n        if self.mask is None:\n            return deepcopy(operand.mask) if hasattr(operand, 'mask') and operand.mask is not None else None\n        if operand.mask is None:\n            return deepcopy(self.mask)\n        return handle_mask(self.mask, operand.mask, **kwds)\n\n    def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n        \"\"\"\n        Calculate the resulting wcs.\n\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        83
      ],
      "id": "62:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:ls",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "2:ls",
      "target": "3:find",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:ls",
      "target": "4:find",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:find",
      "target": "2:ls",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "4:find",
      "target": "5:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:find",
      "target": "7:grep",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "5:grep",
      "target": "6:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "6:grep",
      "target": "4:find",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "7:grep",
      "target": "8:grep",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "8:grep",
      "target": "9:grep",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "9:grep",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "11:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "11:str_replace_editor\ncreate",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "12:python",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:python",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "12:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "12:python",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "12:python",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "12:python",
      "target": "31:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "12:python",
      "target": "34:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "17:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "17:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "17:str_replace_editor\nview",
      "target": "24:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "24:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "24:str_replace_editor\nview",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "24:str_replace_editor\nview",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "24:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "27:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "27:str_replace_editor\nview",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "24:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "31:str_replace_editor\nstr_replace",
      "target": "32:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "32:str_replace_editor\nstr_replace",
      "target": "33:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "33:str_replace_editor\nstr_replace",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "34:str_replace_editor\nstr_replace",
      "target": "35:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "35:str_replace_editor\nview",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "43",
      "type": "exec",
      "source": "35:str_replace_editor\nview",
      "target": "38:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "49",
      "type": "exec",
      "source": "35:str_replace_editor\nview",
      "target": "42:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "67",
      "type": "exec",
      "source": "35:str_replace_editor\nview",
      "target": "56:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "75",
      "type": "exec",
      "source": "35:str_replace_editor\nview",
      "target": "61:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "80",
      "type": "exec",
      "source": "35:str_replace_editor\nview",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "35:str_replace_editor\nview",
      "target": "40:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "35:str_replace_editor\nview",
      "target": "45:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "35:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "44",
      "type": "exec",
      "source": "38:str_replace_editor\nstr_replace",
      "target": "38:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "45",
      "type": "exec",
      "source": "38:str_replace_editor\nstr_replace",
      "target": "39:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "46",
      "type": "exec",
      "source": "39:str_replace_editor\nstr_replace",
      "target": "40:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "47",
      "type": "exec",
      "source": "40:str_replace_editor\nview",
      "target": "41:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "48",
      "type": "exec",
      "source": "41:str_replace_editor\nstr_replace",
      "target": "35:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "50",
      "type": "exec",
      "source": "42:str_replace_editor\nstr_replace",
      "target": "43:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "51",
      "type": "exec",
      "source": "43:str_replace_editor\nstr_replace",
      "target": "44:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "52",
      "type": "exec",
      "source": "44:str_replace_editor\nstr_replace",
      "target": "45:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "53",
      "type": "exec",
      "source": "45:str_replace_editor\nview",
      "target": "46:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "64",
      "type": "exec",
      "source": "45:str_replace_editor\nview",
      "target": "55:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "45:str_replace_editor\nview",
      "target": "40:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "54",
      "type": "exec",
      "source": "46:str_replace_editor\nstr_replace",
      "target": "47:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "55",
      "type": "exec",
      "source": "47:str_replace_editor\nstr_replace",
      "target": "48:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "56",
      "type": "exec",
      "source": "48:str_replace_editor\nstr_replace",
      "target": "49:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "57",
      "type": "exec",
      "source": "49:str_replace_editor\nstr_replace",
      "target": "50:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "58",
      "type": "exec",
      "source": "50:str_replace_editor\nstr_replace",
      "target": "51:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "60",
      "type": "exec",
      "source": "50:str_replace_editor\nstr_replace",
      "target": "52:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "59",
      "type": "exec",
      "source": "51:str_replace_editor\nstr_replace",
      "target": "50:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "61",
      "type": "exec",
      "source": "52:str_replace_editor\nstr_replace",
      "target": "53:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "62",
      "type": "exec",
      "source": "53:str_replace_editor\nstr_replace",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "63",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "45:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "66",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "35:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "74",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "35:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "79",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "35:str_replace_editor\nview",
      "key": 2
    },
    {
      "label": "69",
      "type": "exec",
      "source": "54:str_replace_editor\nstr_replace",
      "target": "57:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "65",
      "type": "exec",
      "source": "55:str_replace_editor\nstr_replace",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "68",
      "type": "exec",
      "source": "56:str_replace_editor\nstr_replace",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "70",
      "type": "exec",
      "source": "57:str_replace_editor\nstr_replace",
      "target": "58:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "71",
      "type": "exec",
      "source": "58:str_replace_editor\nview",
      "target": "59:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "85",
      "type": "exec",
      "source": "58:str_replace_editor\nview",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "89",
      "type": "exec",
      "source": "58:str_replace_editor\nview",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "93",
      "type": "exec",
      "source": "58:str_replace_editor\nview",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "97",
      "type": "exec",
      "source": "58:str_replace_editor\nview",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "72",
      "type": "exec",
      "source": "59:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "73",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "78",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "54:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "77",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "81",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "82",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "86",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "87",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "90",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 5
    },
    {
      "label": "91",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 6
    },
    {
      "label": "94",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 7
    },
    {
      "label": "95",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 8
    },
    {
      "label": "98",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 9
    },
    {
      "label": "99",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 10
    },
    {
      "label": "83",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "62:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "88",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "58:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "92",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "58:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "96",
      "type": "exec",
      "source": "60:str_replace_editor\nstr_replace",
      "target": "58:str_replace_editor\nview",
      "key": 2
    },
    {
      "label": "76",
      "type": "exec",
      "source": "61:str_replace_editor\nstr_replace",
      "target": "60:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "84",
      "type": "exec",
      "source": "62:str_replace_editor\nstr_replace",
      "target": "58:str_replace_editor\nview",
      "key": 0
    }
  ]
}