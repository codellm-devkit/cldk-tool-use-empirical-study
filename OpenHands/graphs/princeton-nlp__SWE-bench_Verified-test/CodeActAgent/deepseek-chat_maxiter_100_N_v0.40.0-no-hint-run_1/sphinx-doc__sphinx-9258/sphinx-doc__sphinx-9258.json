{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sphinx-doc__sphinx-9258",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "empty action",
      "args": {},
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:empty action"
    },
    {
      "label": "cd",
      "args": [
        "/workspace/sphinx-doc__sphinx__4.1"
      ],
      "phase": "general",
      "step_indices": [
        1,
        2,
        3,
        4,
        5,
        9,
        11,
        13,
        15,
        17,
        21,
        33
      ],
      "id": "1:cd"
    },
    {
      "label": "ls",
      "args": [],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:ls"
    },
    {
      "label": "\ngrep",
      "args": [
        "sphinx/",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "3:\ngrep"
    },
    {
      "label": "|",
      "args": [
        "head"
      ],
      "phase": "general",
      "step_indices": [
        3,
        4
      ],
      "id": "4:|"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          1,
          20
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          100,
          120
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          200,
          220
        ]
      },
      "phase": "localization",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "sphinx/ext/napoleon/docstring.py"
      ],
      "phase": "general",
      "step_indices": [
        9,
        15,
        17,
        33
      ],
      "id": "8:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          729,
          750
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "\ngrep",
      "args": [
        "sphinx/ext/napoleon/docstring.py",
        "|",
        "head"
      ],
      "phase": "general",
      "step_indices": [
        11,
        13
      ],
      "id": "10:\ngrep"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          285,
          310
        ]
      },
      "phase": "localization",
      "step_indices": [
        12
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          259,
          280
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          25,
          35
        ]
      },
      "phase": "localization",
      "step_indices": [
        16
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          57,
          70
        ]
      },
      "phase": "localization",
      "step_indices": [
        18
      ],
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "old_str": "_google_typed_arg_regex = re.compile(r'(.+?)\\(\\s*(.*[^\\s]+)\\s*\\)')",
        "new_str": "_google_typed_arg_regex = re.compile(r'(.+?)(?:\\(\\s*(.*[^\\s]+)\\s*\\)|:\\s*(.*[^\\s\\|]+(?:\\s*\\|\\s*[^\\s\\|]+)*)\\s*)')",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "old_str": "def _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:\n    \"\"\"Convert type specification to reference in reST.\"\"\"\n    if _type in translations:\n        return translations[_type]\n    else:\n        if _type == 'None':\n            return ':obj:`None`'\n        else:\n            return ':class:`%s`' % _type\n\n    return _type",
        "new_str": "def _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:\n    \"\"\"Convert type specification to reference in reST.\"\"\"\n    if _type in translations:\n        return translations[_type]\n    \n    if '|' in _type:\n        types = [t.strip() for t in _type.split('|')]\n        return ' | '.join(_convert_type_spec(t, translations) for t in types)\n    \n    if _type == 'None':\n        return ':obj:`None`'\n    else:\n        return ':class:`%s`' % _type",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "\nfind",
      "args": [
        "tests",
        "*docstring*",
        "*napoleon*"
      ],
      "phase": "general",
      "step_indices": [
        21
      ],
      "id": "17:\nfind"
    },
    {
      "label": "str_replace_editor\ncreate",
      "args": {
        "path": "/workspace/test_union_types.py",
        "file_text": "\nfrom sphinx.ext.napoleon import Config, GoogleDocstring\n\n# Test case with union types\ndocstring = '''Example function\n\n:param arg1: first argument\n:type arg1: int | str\n:param arg2: second argument\n:type arg2: bytes|str\n'''\n\nconfig = Config(napoleon_use_param=True)\nresult = GoogleDocstring(docstring, config)\nprint(str(result))\n"
      },
      "phase": "verification",
      "step_indices": [
        22
      ],
      "id": "18:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "args": [
        "/workspace"
      ],
      "phase": "general",
      "step_indices": [
        23,
        25,
        27,
        29,
        31,
        36,
        39,
        43,
        45
      ],
      "id": "19:cd"
    },
    {
      "label": "python3",
      "args": [
        "test_union_types.py"
      ],
      "phase": "general",
      "step_indices": [
        23,
        25,
        27,
        29,
        31,
        36,
        39,
        43,
        45
      ],
      "id": "20:python3"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_union_types.py",
        "old_str": "\nprint(str(result))\n",
        "new_str": "\n# Print the converted types\nfor line in str(result).split('\\n'):\n    if ':type arg1' in line or ':type arg2' in line:\n        print(line)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_union_types.py",
        "old_str": "\n# Print the converted types\nfor line in str(result).split('\\n'):\n    if ':type arg1' in line or ':type arg2' in line:\n        print(line)\n",
        "new_str": "\n# Print full output to verify reST formatting\nprint(\"=== FULL OUTPUT ===\")\nprint(str(result))\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "old_str": "\ndef _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:\n    \"\"\"Convert type specification to reference in reST.\"\"\"\n    if _type in translations:\n        return translations[_type]\n    \n    if '|' in _type:\n        types = [t.strip() for t in _type.split('|')]\n        return ' | '.join(_convert_type_spec(t, translations) for t in types)\n    \n    if _type == 'None':\n        return ':obj:`None`'\n    else:\n        return ':class:`%s`' % _type\n",
        "new_str": "\ndef _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:\n    \"\"\"Convert type specification to reference in reST.\"\"\"\n    _type = _type.strip()\n    if _type in translations:\n        return translations[_type]\n    \n    if '|' in _type:\n        types = []\n        for t in _type.split('|'):\n            converted = _convert_type_spec(t, translations)\n            # Only add :class: if not already present and not a special type\n            if not converted.startswith((':class:', ':obj:')) and t.strip() != 'None':\n                converted = f':class:`{t.strip()}`'\n            types.append(converted)\n        return ' | '.join(types)\n    \n    if _type == 'None':\n        return ':obj:`None`'\n    else:\n        return ':class:`%s`' % _type\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        28
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "old_str": "\n\ndef _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:\n    \"\"\"Convert type specification to reference in reST.\"\"\"\n    _type = _type.strip()\n    if _type in translations:\n        return translations[_type]\n    \n    if '|' in _type:\n        types = []\n        for t in _type.split('|'):\n            converted = _convert_type_spec(t, translations)\n            # Only add :class: if not already present and not a special type\n            if not converted.startswith((':class:', ':obj:')) and t.strip() != 'None':\n                converted = f':class:`{t.strip()}`'\n            types.append(converted)\n        return ' | '.join(types)\n    \n    if _type == 'None':\n        return ':obj:`None`'\n    else:\n        return ':class:`%s`' % _type\n\n",
        "new_str": "\n\ndef _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:\n    \"\"\"Convert type specification to reference in reST.\"\"\"\n    print(f\"DEBUG - Converting type: {_type}\")  # Debug output\n    _type = _type.strip()\n    if _type in translations:\n        return translations[_type]\n    \n    if '|' in _type:\n        types = []\n        for t in _type.split('|'):\n            converted = _convert_type_spec(t, translations)\n            # Only add :class: if not already present and not a special type\n            if not converted.startswith((':class:', ':obj:')) and t.strip() != 'None':\n                converted = f':class:`{t.strip()}`'\n            types.append(converted)\n        result = ' | '.join(types)\n        print(f\"DEBUG - Union type result: {result}\")  # Debug output\n        return result\n    \n    if _type == 'None':\n        return ':obj:`None`'\n    else:\n        result = f':class:`{_type}`'\n        print(f\"DEBUG - Simple type result: {result}\")  # Debug output\n        return result\n\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        30
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          260,
          280
        ]
      },
      "phase": "localization",
      "step_indices": [
        32
      ],
      "id": "25:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "view_range": [
          290,
          300
        ]
      },
      "phase": "localization",
      "step_indices": [
        34
      ],
      "id": "26:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_union_types.py",
        "old_str": "\n\nconfig = Config(napoleon_use_param=True)\n",
        "new_str": "\n\nconfig = Config(napoleon_use_param=True, napoleon_preprocess_types=True)\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        35
      ],
      "id": "27:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "old_str": "\n\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1).strip()\n                _type = match.group(2)\n\n",
        "new_str": "\n\n\n        before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n        print(f\"DEBUG - Raw before: {before}\")  # Debug output\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1).strip()\n                _type = match.group(2) or match.group(3)  # Handle both capture groups\n                print(f\"DEBUG - Parsed name: {_name}, type: {_type}\")  # Debug output\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        37
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/sphinx-doc__sphinx__4.1/sphinx/ext/napoleon/docstring.py",
        "old_str": "before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1).strip()\n                _type = match.group(2)",
        "new_str": "before, colon, after = self._partition_field_on_colon(line)\n        _name, _type, _desc = before, '', after\n        print(f\"DEBUG - Raw before: {before}\")  # Debug output\n\n        if parse_type:\n            match = _google_typed_arg_regex.match(before)\n            if match:\n                _name = match.group(1).strip()\n                _type = match.group(2) or match.group(3)  # Handle both capture groups\n                print(f\"DEBUG - Parsed name: {_name}, type: {_type}\")  # Debug output",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        38
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_union_types.py",
        "old_str": "\n\nfrom sphinx.ext.napoleon import Config, GoogleDocstring\n\n",
        "new_str": "\n\nimport sys\nsys.path.insert(0, '/workspace/sphinx-doc__sphinx__4.1')\nfrom sphinx.ext.napoleon import Config, GoogleDocstring\nprint(f\"DEBUG - Using module from: {GoogleDocstring.__module__}\")\n\n",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        40
      ],
      "id": "30:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/test_union_types.py",
        "view_range": [
          1,
          10
        ]
      },
      "phase": "localization",
      "step_indices": [
        41
      ],
      "id": "31:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_union_types.py",
        "old_str": "from sphinx.ext.napoleon import Config, GoogleDocstring",
        "new_str": "import sys\nsys.path.insert(0, '/workspace/sphinx-doc__sphinx__4.1')\nfrom sphinx.ext.napoleon import Config, GoogleDocstring\nprint(f\"DEBUG - Using module from: {GoogleDocstring.__module__}\")",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        42
      ],
      "id": "32:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/test_union_types.py",
        "old_str": "\ndocstring = '''Example function\n\n:param arg1: first argument\n:type arg1: int | str\n:param arg2: second argument\n:type arg2: bytes|str\n'''\n",
        "new_str": "\ndocstring = '''Example function\n\nArgs:\n    arg1 (int | str): first argument\n    arg2 (bytes|str): second argument\n'''\n",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        44
      ],
      "id": "33:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:empty action",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:ls",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:cd",
      "target": "3:\ngrep",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:cd",
      "target": "4:|",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "4:|",
      "key": 1
    },
    {
      "label": "6",
      "type": "exec",
      "source": "1:cd",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\ngrep",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\ngrep",
      "key": 1
    },
    {
      "label": "17",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\ngrep",
      "key": 2
    },
    {
      "label": "33",
      "type": "exec",
      "source": "1:cd",
      "target": "8:\ngrep",
      "key": 3
    },
    {
      "label": "11",
      "type": "exec",
      "source": "1:cd",
      "target": "10:\ngrep",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "1:cd",
      "target": "10:\ngrep",
      "key": 1
    },
    {
      "label": "21",
      "type": "exec",
      "source": "1:cd",
      "target": "17:\nfind",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:ls",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:\ngrep",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:|",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:|",
      "target": "1:cd",
      "key": 1
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:\ngrep",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "8:\ngrep",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "8:\ngrep",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "8:\ngrep",
      "target": "26:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:\ngrep",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "10:\ngrep",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "type": "hier",
      "source": "11:str_replace_editor\nview",
      "target": "26:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "type": "hier",
      "source": "12:str_replace_editor\nview",
      "target": "25:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "17:\nfind",
      "target": "18:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "18:str_replace_editor\ncreate",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 1
    },
    {
      "label": "27",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 2
    },
    {
      "label": "29",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 3
    },
    {
      "label": "31",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 4
    },
    {
      "label": "36",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 5
    },
    {
      "label": "39",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 6
    },
    {
      "label": "43",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 7
    },
    {
      "label": "45",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python3",
      "key": 8
    },
    {
      "label": "24",
      "type": "exec",
      "source": "20:python3",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "20:python3",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "20:python3",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "20:python3",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "20:python3",
      "target": "25:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "20:python3",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "20:python3",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "44",
      "type": "exec",
      "source": "20:python3",
      "target": "33:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "25:str_replace_editor\nview",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "26:str_replace_editor\nview",
      "target": "27:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "27:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "31:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "31:str_replace_editor\nview",
      "target": "32:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "43",
      "type": "exec",
      "source": "32:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "45",
      "type": "exec",
      "source": "33:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    }
  ]
}