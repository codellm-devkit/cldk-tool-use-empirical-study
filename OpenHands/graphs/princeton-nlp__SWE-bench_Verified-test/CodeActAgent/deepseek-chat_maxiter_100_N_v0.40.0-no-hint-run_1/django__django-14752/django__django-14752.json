{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-14752",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "args": {
        "path": "/workspace/django__django__4.0/django/contrib/admin/views/autocomplete.py"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "args": {
        "path": "/workspace/django__django__4.0/django/contrib/admin/views/autocomplete.py",
        "old_str": "    def get(self, request, *args, **kwargs):\n        \"\"\"\n        Return a JsonResponse with search results of the form:\n        {\n            results: [{id: \"123\" text: \"foo\"}],\n            pagination: {more: true}\n        }\n        \"\"\"\n        self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)\n\n        if not self.has_perm(request):\n            raise PermissionDenied\n\n        self.object_list = self.get_queryset()\n        context = self.get_context_data()\n        return JsonResponse({\n            'results': [\n                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n                for obj in context['object_list']\n            ],\n            'pagination': {'more': context['page_obj'].has_next()},\n        })",
        "new_str": "    def serialize_result(self, obj, to_field_name):\n        \"\"\"Serialize an object into a dictionary for the autocomplete response.\"\"\"\n        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        Return a JsonResponse with search results of the form:\n        {\n            results: [{id: \"123\" text: \"foo\"}],\n            pagination: {more: true}\n        }\n        \"\"\"\n        self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)\n\n        if not self.has_perm(request):\n            raise PermissionDenied\n\n        self.object_list = self.get_queryset()\n        context = self.get_context_data()\n        return JsonResponse({\n            'results': [\n                self.serialize_result(obj, to_field_name)\n                for obj in context['object_list']\n            ],\n            'pagination': {'more': context['page_obj'].has_next()},\n        })",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nstr_replace"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nstr_replace",
      "key": 0
    }
  ]
}