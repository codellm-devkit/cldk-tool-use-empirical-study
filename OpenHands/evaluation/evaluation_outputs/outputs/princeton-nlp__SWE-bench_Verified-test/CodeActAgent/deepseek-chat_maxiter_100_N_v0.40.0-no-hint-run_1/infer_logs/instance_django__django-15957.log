2025-06-20 15:40:05,566 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7z6l4gnirdxtk3pa_634egmkijx387tjz
2025-06-20 15:43:04,905 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7z6l4gnirdxtk3pa_634egmkijx387tjz] build finished.
2025-06-20 15:43:04,915 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7z6l4gnirdxtk3pa_634egmkijx387tjz] with more generic tag [oh_v0.40.0_7z6l4gnirdxtk3pa]
2025-06-20 15:43:04,918 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_7z6l4gnirdxtk3pa_634egmkijx387tjz, oh_v0.40.0_7z6l4gnirdxtk3pa] built successfully
2025-06-20 15:43:04,932 - INFO - [runtime 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7z6l4gnirdxtk3pa_634egmkijx387tjz
2025-06-20 15:43:05,403 - INFO - [runtime 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4] Container started: openhands-runtime-191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4. VSCode URL: None
2025-06-20 15:43:05,403 - INFO - [runtime 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4] Waiting for client to become ready at http://localhost:37725...
2025-06-20 15:43:37,496 - INFO - [runtime 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4] Runtime is ready.
2025-06-20 15:43:40,083 - INFO - ------------------------------
2025-06-20 15:43:40,083 - INFO - BEGIN Runtime Initialization Fn
2025-06-20 15:43:40,084 - INFO - ------------------------------
2025-06-20 15:43:40,084 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-15957' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-20 15:43:40,729 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:40,730 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-20 15:43:41,372 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:41,372 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-20 15:43:42,013 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:42,027 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-20 15:43:42,667 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-15957
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:42,667 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-20 15:43:43,307 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:43,308 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-20 15:43:44,453 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__4.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:44,454 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.2
2025-06-20 15:43:45,094 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:45,094 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-20 15:43:46,240 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at f387d024fc Refs #28333 -- Added partial support for filtering against window functions.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:46,241 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-20 15:43:46,884 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:46,885 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-20 15:43:47,525 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:43:47,525 - INFO - ------------------------------
2025-06-20 15:43:47,526 - INFO - END Runtime Initialization Fn
2025-06-20 15:43:47,526 - INFO - ------------------------------
2025-06-20 15:43:47,547 - INFO - [runtime 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-20 15:43:47,555 - INFO - Loading user workspace microagents: []
2025-06-20 15:43:47,555 - INFO - [Agent Controller 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4] AgentController 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4 - created new state. start_id: 0
2025-06-20 15:43:47,561 - INFO - [Agent Controller 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-20 15:53:38,796 - INFO - [Agent Controller 191d7566-a489-4034-9575-fda3e05b184f-27dc8a3b786f63f4] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-20 15:53:39,227 - INFO - ------------------------------
2025-06-20 15:53:39,227 - INFO - BEGIN Runtime Completion Fn
2025-06-20 15:53:39,228 - INFO - ------------------------------
2025-06-20 15:53:39,228 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.2
2025-06-20 15:53:39,869 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:53:39,870 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-20 15:53:40,510 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:53:40,511 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-20 15:53:41,151 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:53:41,152 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-20 15:53:41,792 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:53:41,793 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-20 15:53:42,444 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:53:42,445 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached f387d024fc75569d2a4a338bfda76cc2f328f627 > patch.diff
2025-06-20 15:53:43,085 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "402f4e3e79a2",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 15:53:43,086 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-20 15:53:43,091 - INFO - [Read from /workspace/django__django__4.2/patch.diff is successful.]
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index b192df4fbf..2463ad0462 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -132,12 +132,13 @@ class ForwardManyToOneDescriptor:
         related_field = self.field.foreign_related_fields[0]
         remote_field = self.field.remote_field
 
-        # FIXME: This will need to be revisited when we introduce support for
-        # composite fields. In the meantime we take this practical approach to
-        # solve a regression on 1.6 when the reverse manager in hidden
-        # (related_name ends with a '+'). Refs #21410.
-        # The check for len(...) == 1 is a special case that allows the query
-        # to be join-less and smaller. Refs #21760.
+        # Handle sliced querysets by first applying the slice
+        is_sliced = getattr(queryset, '_is_sliced', False)
+        if is_sliced:
+            sliced_queryset = queryset._clone()
+            queryset = queryset._clone()
+            queryset.query.clear_limits()
+
         if remote_field.is_hidden() or len(self.field.foreign_related_fields) == 1:
             query = {
                 "%s__in"
@@ -147,6 +148,11 @@ class ForwardManyToOneDescriptor:
             query = {"%s__in" % self.field.related_query_name(): instances}
         queryset = queryset.filter(**query)
 
+        # Reapply slice after filtering if original queryset was sliced
+        if is_sliced:
+            queryset = sliced_queryset._clone()
+            queryset._result_cache = list(queryset._result_cache)[:sliced_queryset.query.high_mark]
+
         # Since we're going to assign directly in the cache,
         # we must manage the reverse relation cache manually.
         if not remote_field.multiple:
diff --git a/django/db/models/query.py b/django/db/models/query.py
index be0deb90b0..d26523ac8c 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -2162,6 +2162,7 @@ class Prefetch:
 
         self.queryset = queryset
         self.to_attr = to_attr
+        self._is_sliced = queryset is not None and queryset.query.is_sliced
 
     def __getstate__(self):
         obj_dict = self.__dict__.copy()
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..ba32c57949
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.prefetch_related',
+]
+SECRET_KEY = 'test'
diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py
index 1ac17fde73..602057c685 100644
--- a/tests/prefetch_related/tests.py
+++ b/tests/prefetch_related/tests.py
@@ -48,6 +48,13 @@ class TestDataMixin:
 
         cls.author1 = Author.objects.create(name="Charlotte", first_book=cls.book1)
         cls.author2 = Author.objects.create(name="Anne", first_book=cls.book1)
+        # Add some books with authors for testing prefetch with slices
+        cls.book_with_authors1 = Book.objects.create(title="Book with authors 1")
+        cls.book_with_authors2 = Book.objects.create(title="Book with authors 2")
+        for i in range(10):
+            author = Author.objects.create(name=f"Author {i}", first_book=cls.book1)
+            cls.book_with_authors1.authors.add(author)
+            cls.book_with_authors2.authors.add(author)
         cls.author3 = Author.objects.create(name="Emily", first_book=cls.book1)
         cls.author4 = Author.objects.create(name="Jane", first_book=cls.book4)
 
@@ -541,6 +548,27 @@ class CustomPrefetchTests(TestCase):
                     [["houses", "rooms"]],
                 )
 
+    def test_prefetch_with_sliced_queryset(self):
+        # Test that prefetch_related works with sliced querysets
+        books = Book.objects.filter(
+            pk__in=[self.book_with_authors1.pk, self.book_with_authors2.pk]
+        ).prefetch_related(
+            Prefetch(
+                'authors',
+                queryset=Author.objects.order_by('name')[:3],  # Only get first 3 authors
+                to_attr='first_three_authors'
+            )
+        )
+        
+        with self.assertNumQueries(2):
+            for book in books:
+                authors = book.first_three_authors
+                self.assertEqual(len(authors), 3)
+                # Verify we got the first 3 alphabetically
+                self.assertEqual(authors[0].name, "Author 0")
+                self.assertEqual(authors[1].name, "Author 1")
+                self.assertEqual(authors[2].name, "Author 2")
+
         # Ambiguous: Lookup houses_lst doesn't yet exist when performing
         # houses_lst__rooms.
         msg = (

2025-06-20 15:53:43,092 - INFO - ------------------------------
2025-06-20 15:53:43,092 - INFO - END Runtime Completion Fn
2025-06-20 15:53:43,092 - INFO - ------------------------------
2025-06-20 15:53:43,093 - INFO - Got git diff for instance django__django-15957:
--------
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index b192df4fbf..2463ad0462 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -132,12 +132,13 @@ class ForwardManyToOneDescriptor:
         related_field = self.field.foreign_related_fields[0]
         remote_field = self.field.remote_field
 
-        # FIXME: This will need to be revisited when we introduce support for
-        # composite fields. In the meantime we take this practical approach to
-        # solve a regression on 1.6 when the reverse manager in hidden
-        # (related_name ends with a '+'). Refs #21410.
-        # The check for len(...) == 1 is a special case that allows the query
-        # to be join-less and smaller. Refs #21760.
+        # Handle sliced querysets by first applying the slice
+        is_sliced = getattr(queryset, '_is_sliced', False)
+        if is_sliced:
+            sliced_queryset = queryset._clone()
+            queryset = queryset._clone()
+            queryset.query.clear_limits()
+
         if remote_field.is_hidden() or len(self.field.foreign_related_fields) == 1:
             query = {
                 "%s__in"
@@ -147,6 +148,11 @@ class ForwardManyToOneDescriptor:
             query = {"%s__in" % self.field.related_query_name(): instances}
         queryset = queryset.filter(**query)
 
+        # Reapply slice after filtering if original queryset was sliced
+        if is_sliced:
+            queryset = sliced_queryset._clone()
+            queryset._result_cache = list(queryset._result_cache)[:sliced_queryset.query.high_mark]
+
         # Since we're going to assign directly in the cache,
         # we must manage the reverse relation cache manually.
         if not remote_field.multiple:
diff --git a/django/db/models/query.py b/django/db/models/query.py
index be0deb90b0..d26523ac8c 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -2162,6 +2162,7 @@ class Prefetch:
 
         self.queryset = queryset
         self.to_attr = to_attr
+        self._is_sliced = queryset is not None and queryset.query.is_sliced
 
     def __getstate__(self):
         obj_dict = self.__dict__.copy()
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..ba32c57949
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.prefetch_related',
+]
+SECRET_KEY = 'test'
diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py
index 1ac17fde73..602057c685 100644
--- a/tests/prefetch_related/tests.py
+++ b/tests/prefetch_related/tests.py
@@ -48,6 +48,13 @@ class TestDataMixin:
 
         cls.author1 = Author.objects.create(name="Charlotte", first_book=cls.book1)
         cls.author2 = Author.objects.create(name="Anne", first_book=cls.book1)
+        # Add some books with authors for testing prefetch with slices
+        cls.book_with_authors1 = Book.objects.create(title="Book with authors 1")
+        cls.book_with_authors2 = Book.objects.create(title="Book with authors 2")
+        for i in range(10):
+            author = Author.objects.create(name=f"Author {i}", first_book=cls.book1)
+            cls.book_with_authors1.authors.add(author)
+            cls.book_with_authors2.authors.add(author)
         cls.author3 = Author.objects.create(name="Emily", first_book=cls.book1)
         cls.author4 = Author.objects.create(name="Jane", first_book=cls.book4)
 
@@ -541,6 +548,27 @@ class CustomPrefetchTests(TestCase):
                     [["houses", "rooms"]],
                 )
 
+    def test_prefetch_with_sliced_queryset(self):
+        # Test that prefetch_related works with sliced querysets
+        books = Book.objects.filter(
+            pk__in=[self.book_with_authors1.pk, self.book_with_authors2.pk]
+        ).prefetch_related(
+            Prefetch(
+                'authors',
+                queryset=Author.objects.order_by('name')[:3],  # Only get first 3 authors
+                to_attr='first_three_authors'
+            )
+        )
+        
+        with self.assertNumQueries(2):
+            for book in books:
+                authors = book.first_three_authors
+                self.assertEqual(len(authors), 3)
+                # Verify we got the first 3 alphabetically
+                self.assertEqual(authors[0].name, "Author 0")
+                self.assertEqual(authors[1].name, "Author 1")
+                self.assertEqual(authors[2].name, "Author 2")
+
         # Ambiguous: Lookup houses_lst doesn't yet exist when performing
         # houses_lst__rooms.
         msg = (
--------
2025-06-20 15:53:45,431 - INFO - Using instance container image: swebench/sweb.eval.x86_64.sympy_1776_sympy-20428:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-20 15:53:45,431 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-20 15:53:45,432 - INFO - Logging LLM completions for instance sympy__sympy-20428 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/sympy__sympy-20428
