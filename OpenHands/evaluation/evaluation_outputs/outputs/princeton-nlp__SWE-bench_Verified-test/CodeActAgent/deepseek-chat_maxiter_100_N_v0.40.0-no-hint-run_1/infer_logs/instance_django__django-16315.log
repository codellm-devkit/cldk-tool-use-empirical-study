2025-06-26 08:50:07,288 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_dwro1g6w64niw43b_634egmkijx387tjz
2025-06-26 08:52:56,270 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_dwro1g6w64niw43b_634egmkijx387tjz] build finished.
2025-06-26 08:52:56,281 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_dwro1g6w64niw43b_634egmkijx387tjz] with more generic tag [oh_v0.40.0_dwro1g6w64niw43b]
2025-06-26 08:52:56,285 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_dwro1g6w64niw43b_634egmkijx387tjz, oh_v0.40.0_dwro1g6w64niw43b] built successfully
2025-06-26 08:52:56,306 - INFO - [runtime dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_dwro1g6w64niw43b_634egmkijx387tjz
2025-06-26 08:52:56,791 - INFO - [runtime dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398] Container started: openhands-runtime-dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398. VSCode URL: None
2025-06-26 08:52:56,791 - INFO - [runtime dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398] Waiting for client to become ready at http://localhost:35259...
2025-06-26 08:53:30,914 - INFO - [runtime dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398] Runtime is ready.
2025-06-26 08:53:33,493 - INFO - ------------------------------
2025-06-26 08:53:33,493 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 08:53:33,494 - INFO - ------------------------------
2025-06-26 08:53:33,494 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-16315' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 08:53:34,140 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:34,141 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 08:53:34,783 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:34,784 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 08:53:35,422 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:35,439 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 08:53:36,076 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-16315
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:36,077 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 08:53:36,717 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:36,718 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 08:53:37,863 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__4.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:37,864 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.2
2025-06-26 08:53:38,504 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:38,505 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 08:53:39,649 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 7d5329852f Fixed #34177 -- Fixed QuerySet.bulk_create() crash on "pk" in unique_fields.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:39,650 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 08:53:40,291 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:40,291 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 08:53:40,929 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 08:53:40,930 - INFO - ------------------------------
2025-06-26 08:53:40,930 - INFO - END Runtime Initialization Fn
2025-06-26 08:53:40,931 - INFO - ------------------------------
2025-06-26 08:53:40,953 - INFO - [runtime dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 08:53:40,960 - INFO - Loading user workspace microagents: []
2025-06-26 08:53:40,961 - INFO - [Agent Controller dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398] AgentController dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398 - created new state. start_id: 0
2025-06-26 08:53:40,967 - INFO - [Agent Controller dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 09:11:09,536 - INFO - [Agent Controller dbf036dd-2062-4dd3-a483-e5d855b05793-c23a66c259711398] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-26 09:11:10,124 - INFO - ------------------------------
2025-06-26 09:11:10,124 - INFO - BEGIN Runtime Completion Fn
2025-06-26 09:11:10,124 - INFO - ------------------------------
2025-06-26 09:11:10,125 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.2
2025-06-26 09:11:10,764 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:11:10,764 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 09:11:11,403 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:11:11,404 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 09:11:12,043 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:11:12,043 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 09:11:12,683 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:11:12,684 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 09:11:13,335 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:11:13,336 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 7d5329852f19c6ae78c6f6f3d3e41835377bf295 > patch.diff
2025-06-26 09:11:13,976 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b356067e7c2a",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:11:13,977 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 09:11:13,982 - INFO - [Read from /workspace/django__django__4.2/patch.diff is successful.]
diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 62273fc43c..7046fee0e6 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -353,14 +353,22 @@ class DatabaseOperations(BaseDatabaseOperations):
         if on_conflict == OnConflict.IGNORE:
             return "ON CONFLICT DO NOTHING"
         if on_conflict == OnConflict.UPDATE:
+            def get_column_name(field):
+                if hasattr(field, 'column'):  # Field object
+                    return field.column
+                if isinstance(field, str):  # String field name
+                    # Try to find matching field object
+                    for f in fields:
+                        if f.name == field:
+                            return f.column
+                return field
+            
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(self.quote_name(get_column_name(f)) for f in unique_fields),
                 ", ".join(
-                    [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
-                    ]
-                ),
+                    f"{self.quote_name(get_column_name(f))} = EXCLUDED.{self.quote_name(get_column_name(f))}"
+                    for f in update_fields
+                )
             )
         return super().on_conflict_suffix_sql(
             fields,
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..75828a099d
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+SECRET_KEY = 'test-key'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.bulk_create',
+]
diff --git a/tests/bulk_create/test_db_column.py b/tests/bulk_create/test_db_column.py
new file mode 100644
index 0000000000..6cb8843505
--- /dev/null
+++ b/tests/bulk_create/test_db_column.py
@@ -0,0 +1,49 @@
+
+from django.db import models
+from django.test import TestCase
+from django.db.models.constants import OnConflict
+
+class ActivityBlackListed(models.Model):
+    """Test model matching the issue description"""
+    class Meta:
+        db_table = "Activity_BlackListed"
+    
+    blacklistid = models.IntegerField(primary_key=True, db_column="BlacklistID")
+    sectorid = models.IntegerField(null=True, blank=True, db_column="SectorID")
+
+from django.db import connection
+from unittest import skipUnless
+
+class BulkCreateDbColumnTests(TestCase):
+    @skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific test')
+    def test_bulk_create_with_db_column(self):
+        """Test that bulk_create respects db_column in ON CONFLICT clause"""
+        instances = [
+            ActivityBlackListed(blacklistid=1, sectorid=100),
+            ActivityBlackListed(blacklistid=2, sectorid=200)
+        ]
+        
+        with self.assertNumQueries(1) as ctx:
+            ActivityBlackListed.objects.bulk_create(
+                instances,
+                update_conflicts=True,
+                update_fields=["sectorid"],
+                unique_fields=["blacklistid"]
+            )
+        
+        # Verify the SQL uses the db_column names
+        sql = ctx.captured_queries[0]['sql']
+        self.assertIn('"BlacklistID"', sql)  # Should use db_column
+        self.assertIn('"SectorID"', sql)  # Should use db_column
+        self.assertIn('ON CONFLICT("BlacklistID")', sql)
+        self.assertIn('"SectorID" = EXCLUDED."SectorID"', sql)
+
+    def test_field_name_conversion(self):
+        """Test that field names are properly converted to db_column names"""
+        field = ActivityBlackListed._meta.get_field('blacklistid')
+        
+        # Test with field object
+        self.assertEqual(field.column, "BlacklistID")
+        
+        # Test with string field name
+        self.assertEqual(ActivityBlackListed._meta.get_field('sectorid').column, "SectorID")

2025-06-26 09:11:13,983 - INFO - ------------------------------
2025-06-26 09:11:13,984 - INFO - END Runtime Completion Fn
2025-06-26 09:11:13,984 - INFO - ------------------------------
2025-06-26 09:11:13,985 - INFO - Got git diff for instance django__django-16315:
--------
diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 62273fc43c..7046fee0e6 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -353,14 +353,22 @@ class DatabaseOperations(BaseDatabaseOperations):
         if on_conflict == OnConflict.IGNORE:
             return "ON CONFLICT DO NOTHING"
         if on_conflict == OnConflict.UPDATE:
+            def get_column_name(field):
+                if hasattr(field, 'column'):  # Field object
+                    return field.column
+                if isinstance(field, str):  # String field name
+                    # Try to find matching field object
+                    for f in fields:
+                        if f.name == field:
+                            return f.column
+                return field
+            
             return "ON CONFLICT(%s) DO UPDATE SET %s" % (
-                ", ".join(map(self.quote_name, unique_fields)),
+                ", ".join(self.quote_name(get_column_name(f)) for f in unique_fields),
                 ", ".join(
-                    [
-                        f"{field} = EXCLUDED.{field}"
-                        for field in map(self.quote_name, update_fields)
-                    ]
-                ),
+                    f"{self.quote_name(get_column_name(f))} = EXCLUDED.{self.quote_name(get_column_name(f))}"
+                    for f in update_fields
+                )
             )
         return super().on_conflict_suffix_sql(
             fields,
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..75828a099d
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+SECRET_KEY = 'test-key'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.bulk_create',
+]
diff --git a/tests/bulk_create/test_db_column.py b/tests/bulk_create/test_db_column.py
new file mode 100644
index 0000000000..6cb8843505
--- /dev/null
+++ b/tests/bulk_create/test_db_column.py
@@ -0,0 +1,49 @@
+
+from django.db import models
+from django.test import TestCase
+from django.db.models.constants import OnConflict
+
+class ActivityBlackListed(models.Model):
+    """Test model matching the issue description"""
+    class Meta:
+        db_table = "Activity_BlackListed"
+    
+    blacklistid = models.IntegerField(primary_key=True, db_column="BlacklistID")
+    sectorid = models.IntegerField(null=True, blank=True, db_column="SectorID")
+
+from django.db import connection
+from unittest import skipUnless
+
+class BulkCreateDbColumnTests(TestCase):
+    @skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific test')
+    def test_bulk_create_with_db_column(self):
+        """Test that bulk_create respects db_column in ON CONFLICT clause"""
+        instances = [
+            ActivityBlackListed(blacklistid=1, sectorid=100),
+            ActivityBlackListed(blacklistid=2, sectorid=200)
+        ]
+        
+        with self.assertNumQueries(1) as ctx:
+            ActivityBlackListed.objects.bulk_create(
+                instances,
+                update_conflicts=True,
+                update_fields=["sectorid"],
+                unique_fields=["blacklistid"]
+            )
+        
+        # Verify the SQL uses the db_column names
+        sql = ctx.captured_queries[0]['sql']
+        self.assertIn('"BlacklistID"', sql)  # Should use db_column
+        self.assertIn('"SectorID"', sql)  # Should use db_column
+        self.assertIn('ON CONFLICT("BlacklistID")', sql)
+        self.assertIn('"SectorID" = EXCLUDED."SectorID"', sql)
+
+    def test_field_name_conversion(self):
+        """Test that field names are properly converted to db_column names"""
+        field = ActivityBlackListed._meta.get_field('blacklistid')
+        
+        # Test with field object
+        self.assertEqual(field.column, "BlacklistID")
+        
+        # Test with string field name
+        self.assertEqual(ActivityBlackListed._meta.get_field('sectorid').column, "SectorID")
--------
2025-06-26 09:11:17,295 - INFO - Using instance container image: swebench/sweb.eval.x86_64.scikit-learn_1776_scikit-learn-14894:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 09:11:17,295 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 09:11:17,296 - INFO - Logging LLM completions for instance scikit-learn__scikit-learn-14894 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/scikit-learn__scikit-learn-14894
