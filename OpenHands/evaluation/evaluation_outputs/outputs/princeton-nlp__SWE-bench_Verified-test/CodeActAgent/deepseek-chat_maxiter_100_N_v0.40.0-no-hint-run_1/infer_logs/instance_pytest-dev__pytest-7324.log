2025-06-26 10:38:07,051 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_gyeqk0mo7yqeqdph_634egmkijx387tjz
2025-06-26 10:41:08,025 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_gyeqk0mo7yqeqdph_634egmkijx387tjz] build finished.
2025-06-26 10:41:08,033 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_gyeqk0mo7yqeqdph_634egmkijx387tjz] with more generic tag [oh_v0.40.0_gyeqk0mo7yqeqdph]
2025-06-26 10:41:08,038 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_gyeqk0mo7yqeqdph_634egmkijx387tjz, oh_v0.40.0_gyeqk0mo7yqeqdph] built successfully
2025-06-26 10:41:08,076 - INFO - [runtime 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_gyeqk0mo7yqeqdph_634egmkijx387tjz
2025-06-26 10:41:08,455 - INFO - [runtime 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Container started: openhands-runtime-1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12. VSCode URL: None
2025-06-26 10:41:08,456 - INFO - [runtime 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Waiting for client to become ready at http://localhost:31525...
2025-06-26 10:41:40,569 - INFO - [runtime 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Runtime is ready.
2025-06-26 10:41:43,158 - INFO - ------------------------------
2025-06-26 10:41:43,158 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 10:41:43,159 - INFO - ------------------------------
2025-06-26 10:41:43,159 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-7324' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 10:41:43,803 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:43,804 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 10:41:44,447 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:44,448 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 10:41:45,089 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:45,101 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 10:41:45,741 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=pytest-dev__pytest-7324
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:45,742 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 10:41:46,381 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:46,381 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 10:41:47,019 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__5.4
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:47,019 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.4
2025-06-26 10:41:47,658 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:47,659 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 10:41:48,298 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 19ad58893 Add reference to builtin markers to doc (#7321)
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:48,299 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 10:41:48,941 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:48,941 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 10:41:49,579 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:41:49,580 - INFO - ------------------------------
2025-06-26 10:41:49,580 - INFO - END Runtime Initialization Fn
2025-06-26 10:41:49,581 - INFO - ------------------------------
2025-06-26 10:41:49,602 - INFO - [runtime 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 10:41:49,609 - INFO - Loading user workspace microagents: []
2025-06-26 10:41:49,609 - INFO - [Agent Controller 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] AgentController 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12 - created new state. start_id: 0
2025-06-26 10:41:49,615 - INFO - [Agent Controller 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 11:08:09,728 - INFO - [Agent Controller 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-26 11:08:09,731 - INFO - [Agent Controller 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-26 11:14:23,311 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-26 11:14:23,312 - INFO - [Agent Controller 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-26 11:14:23,319 - WARNING - Stopping agent due to traffic control
2025-06-26 11:14:23,321 - INFO - [Agent Controller 1ac6c385-5d89-404e-89cc-4ad9accaa71f-5104505a36d27f12] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-26 11:14:23,856 - INFO - ------------------------------
2025-06-26 11:14:23,856 - INFO - BEGIN Runtime Completion Fn
2025-06-26 11:14:23,856 - INFO - ------------------------------
2025-06-26 11:14:23,856 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pytest-dev__pytest__5.4
2025-06-26 11:14:24,495 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 11:14:24,496 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 11:14:25,138 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 11:14:25,138 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 11:14:25,780 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 11:14:25,781 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 11:14:26,423 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 11:14:26,424 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 11:14:27,068 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 11:14:27,069 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 19ad5889353c7f5f2b65cc2acd346b7a9e95dfcd > patch.diff
2025-06-26 11:14:27,710 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "56b591a313ee",
  "working_dir": "/workspace/pytest-dev__pytest__5.4",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__5.4]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 11:14:27,711 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 11:14:27,716 - INFO - [Read from /workspace/pytest-dev__pytest__5.4/patch.diff is successful.]
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..b0d2fa6a1
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,9 @@
+
+from _pytest.mark.expression import Expression
+
+# This should crash in Python 3.8+ debug builds
+try:
+    Expression.compile("False")
+    print("SUCCESS: No crash occurred")
+except Exception as e:
+    print(f"CRASH: {type(e).__name__}: {e}")
diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..daff5586d 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -46,6 +46,9 @@ class TokenType(enum.Enum):
     AND = "and"
     NOT = "not"
     IDENT = "identifier"
+    TRUE = "true"
+    FALSE = "false"
+    NONE = "none"
     EOF = "end of input"
 
 
@@ -99,6 +102,12 @@ class Scanner:
                         yield Token(TokenType.AND, value, pos)
                     elif value == "not":
                         yield Token(TokenType.NOT, value, pos)
+                    elif value == "True":
+                        yield Token(TokenType.TRUE, value, pos)
+                    elif value == "False":
+                        yield Token(TokenType.FALSE, value, pos)
+                    elif value == "None":
+                        yield Token(TokenType.NONE, value, pos)
                     else:
                         yield Token(TokenType.IDENT, value, pos)
                     pos += len(value)
@@ -161,6 +170,13 @@ def not_expr(s: Scanner) -> ast.expr:
         return ret
     ident = s.accept(TokenType.IDENT)
     if ident:
+        if ident.value in ("True", "False", "None"):
+            try:
+                # Try modern AST first (Python 3.8+)
+                return ast.Constant(value=eval(ident.value))
+            except AttributeError:
+                # Fall back to deprecated AST for older Python versions
+                return ast.NameConstant(value=eval(ident.value))
         return ast.Name(ident.value, ast.Load())
     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
 
@@ -200,7 +216,9 @@ class Expression:
         """
         astexpr = expression(Scanner(input))
         code = compile(
-            astexpr, filename="<pytest match expression>", mode="eval",
+            ast.fix_missing_locations(astexpr),
+            filename="<pytest match expression>",
+            mode="eval",
         )  # type: types.CodeType
         return Expression(code)
 
diff --git a/src/_pytest/mark/expression.py.bak b/src/_pytest/mark/expression.py.bak
new file mode 100644
index 000000000..daff5586d
--- /dev/null
+++ b/src/_pytest/mark/expression.py.bak
@@ -0,0 +1,236 @@
+r"""
+Evaluate match expressions, as used by `-k` and `-m`.
+
+The grammar is:
+
+expression: expr? EOF
+expr:       and_expr ('or' and_expr)*
+and_expr:   not_expr ('and' not_expr)*
+not_expr:   'not' not_expr | '(' expr ')' | ident
+ident:      (\w|:|\+|-|\.|\[|\])+
+
+The semantics are:
+
+- Empty expression evaluates to False.
+- ident evaluates to True of False according to a provided matcher function.
+- or/and/not evaluate according to the usual boolean semantics.
+"""
+import ast
+import enum
+import re
+import types
+from typing import Callable
+from typing import Iterator
+from typing import Mapping
+from typing import Optional
+from typing import Sequence
+
+import attr
+
+from _pytest.compat import TYPE_CHECKING
+
+if TYPE_CHECKING:
+    from typing import NoReturn
+
+
+__all__ = [
+    "Expression",
+    "ParseError",
+]
+
+
+class TokenType(enum.Enum):
+    LPAREN = "left parenthesis"
+    RPAREN = "right parenthesis"
+    OR = "or"
+    AND = "and"
+    NOT = "not"
+    IDENT = "identifier"
+    TRUE = "true"
+    FALSE = "false"
+    NONE = "none"
+    EOF = "end of input"
+
+
+@attr.s(frozen=True, slots=True)
+class Token:
+    type = attr.ib(type=TokenType)
+    value = attr.ib(type=str)
+    pos = attr.ib(type=int)
+
+
+class ParseError(Exception):
+    """The expression contains invalid syntax.
+
+    :param column: The column in the line where the error occurred (1-based).
+    :param message: A description of the error.
+    """
+
+    def __init__(self, column: int, message: str) -> None:
+        self.column = column
+        self.message = message
+
+    def __str__(self) -> str:
+        return "at column {}: {}".format(self.column, self.message)
+
+
+class Scanner:
+    __slots__ = ("tokens", "current")
+
+    def __init__(self, input: str) -> None:
+        self.tokens = self.lex(input)
+        self.current = next(self.tokens)
+
+    def lex(self, input: str) -> Iterator[Token]:
+        pos = 0
+        while pos < len(input):
+            if input[pos] in (" ", "\t"):
+                pos += 1
+            elif input[pos] == "(":
+                yield Token(TokenType.LPAREN, "(", pos)
+                pos += 1
+            elif input[pos] == ")":
+                yield Token(TokenType.RPAREN, ")", pos)
+                pos += 1
+            else:
+                match = re.match(r"(:?\w|:|\+|-|\.|\[|\])+", input[pos:])
+                if match:
+                    value = match.group(0)
+                    if value == "or":
+                        yield Token(TokenType.OR, value, pos)
+                    elif value == "and":
+                        yield Token(TokenType.AND, value, pos)
+                    elif value == "not":
+                        yield Token(TokenType.NOT, value, pos)
+                    elif value == "True":
+                        yield Token(TokenType.TRUE, value, pos)
+                    elif value == "False":
+                        yield Token(TokenType.FALSE, value, pos)
+                    elif value == "None":
+                        yield Token(TokenType.NONE, value, pos)
+                    else:
+                        yield Token(TokenType.IDENT, value, pos)
+                    pos += len(value)
+                else:
+                    raise ParseError(
+                        pos + 1, 'unexpected character "{}"'.format(input[pos]),
+                    )
+        yield Token(TokenType.EOF, "", pos)
+
+    def accept(self, type: TokenType, *, reject: bool = False) -> Optional[Token]:
+        if self.current.type is type:
+            token = self.current
+            if token.type is not TokenType.EOF:
+                self.current = next(self.tokens)
+            return token
+        if reject:
+            self.reject((type,))
+        return None
+
+    def reject(self, expected: Sequence[TokenType]) -> "NoReturn":
+        raise ParseError(
+            self.current.pos + 1,
+            "expected {}; got {}".format(
+                " OR ".join(type.value for type in expected), self.current.type.value,
+            ),
+        )
+
+
+def expression(s: Scanner) -> ast.Expression:
+    if s.accept(TokenType.EOF):
+        ret = ast.NameConstant(False)  # type: ast.expr
+    else:
+        ret = expr(s)
+        s.accept(TokenType.EOF, reject=True)
+    return ast.fix_missing_locations(ast.Expression(ret))
+
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
+
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        if ident.value in ("True", "False", "None"):
+            try:
+                # Try modern AST first (Python 3.8+)
+                return ast.Constant(value=eval(ident.value))
+            except AttributeError:
+                # Fall back to deprecated AST for older Python versions
+                return ast.NameConstant(value=eval(ident.value))
+        return ast.Name(ident.value, ast.Load())
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
+
+
+class MatcherAdapter(Mapping[str, bool]):
+    """Adapts a matcher function to a locals mapping as required by eval()."""
+
+    def __init__(self, matcher: Callable[[str], bool]) -> None:
+        self.matcher = matcher
+
+    def __getitem__(self, key: str) -> bool:
+        return self.matcher(key)
+
+    def __iter__(self) -> Iterator[str]:
+        raise NotImplementedError()
+
+    def __len__(self) -> int:
+        raise NotImplementedError()
+
+
+class Expression:
+    """A compiled match expression as used by -k and -m.
+
+    The expression can be evaulated against different matchers.
+    """
+
+    __slots__ = ("code",)
+
+    def __init__(self, code: types.CodeType) -> None:
+        self.code = code
+
+    @classmethod
+    def compile(self, input: str) -> "Expression":
+        """Compile a match expression.
+
+        :param input: The input expression - one line.
+        """
+        astexpr = expression(Scanner(input))
+        code = compile(
+            ast.fix_missing_locations(astexpr),
+            filename="<pytest match expression>",
+            mode="eval",
+        )  # type: types.CodeType
+        return Expression(code)
+
+    def evaluate(self, matcher: Callable[[str], bool]) -> bool:
+        """Evaluate the match expression.
+
+        :param matcher: Given an identifier, should return whether it matches or not.
+                        Should be prepared to handle arbitrary strings as input.
+
+        Returns whether the expression matches or not.
+        """
+        ret = eval(
+            self.code, {"__builtins__": {}}, MatcherAdapter(matcher)
+        )  # type: bool
+        return ret
diff --git a/src/_pytest/mark/expression_fixed.py b/src/_pytest/mark/expression_fixed.py
new file mode 100644
index 000000000..dcd1cbe73
--- /dev/null
+++ b/src/_pytest/mark/expression_fixed.py
@@ -0,0 +1,33 @@
+
+from _pytest.mark.expression import Scanner, TokenType, ParseError
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+        
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        if ident.value == "True":
+            try:
+                return ast.Constant(value=True)
+            except AttributeError:
+                return ast.NameConstant(value=True)
+        elif ident.value == "False":
+            try:
+                return ast.Constant(value=False)
+            except AttributeError:
+                return ast.NameConstant(value=False)
+        elif ident.value == "None":
+            try:
+                return ast.Constant(value=None)
+            except AttributeError:
+                return ast.NameConstant(value=None)
+        return ast.Name(ident.value, ast.Load())
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
+
+# Rest of the file remains unchanged...
diff --git a/src/_pytest/mark/expression_new.py b/src/_pytest/mark/expression_new.py
new file mode 100644
index 000000000..ae612011f
--- /dev/null
+++ b/src/_pytest/mark/expression_new.py
@@ -0,0 +1,35 @@
+
+
+from _pytest.mark.expression import Scanner, TokenType, ParseError
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+        
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        if ident.value == "True":
+            try:
+                return ast.Constant(value=True)
+            except AttributeError:
+                return ast.NameConstant(value=True)
+        elif ident.value == "False":
+            try:
+                return ast.Constant(value=False)
+            except AttributeError:
+                return ast.NameConstant(value=False)
+        elif ident.value == "None":
+            try:
+                return ast.Constant(value=None)
+            except AttributeError:
+                return ast.NameConstant(value=None)
+        return ast.Name(ident.value, ast.Load())
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
+
+# Rest of original file content goes here...
+
diff --git a/test_expression_final.py b/test_expression_final.py
new file mode 100644
index 000000000..e7f1f580a
--- /dev/null
+++ b/test_expression_final.py
@@ -0,0 +1,75 @@
+
+
+from _pytest.mark.expression import Scanner
+from _pytest.mark.expression import ParseError
+import ast
+
+class TokenType:
+    NOT = 'not'
+    LPAREN = 'left parenthesis'
+    RPAREN = 'right parenthesis'
+    TRUE = 'true'
+    FALSE = 'false'
+    NONE = 'none'
+    IDENT = 'identifier'
+
+def not_expr(s: Scanner) -> ast.expr:
+    """Modified not_expr implementation that properly handles boolean literals."""
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+    if s.accept(TokenType.TRUE):
+        try:
+            return ast.Constant(value=True)
+        except AttributeError:
+            return ast.NameConstant(value=True)
+    if s.accept(TokenType.FALSE):
+        try:
+            return ast.Constant(value=False)
+        except AttributeError:
+            return ast.NameConstant(value=False)
+    if s.accept(TokenType.NONE):
+        try:
+            return ast.Constant(value=None)
+        except AttributeError:
+            return ast.NameConstant(value=None)
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        return ast.Name(ident.value, ast.Load())
+    raise ParseError(0, "Unexpected token")
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
+
+if __name__ == "__main__":
+    # Test cases
+    test_cases = [
+        "True",
+        "False", 
+        "None",
+        "some_identifier",
+        "not True"
+    ]
+    
+    for case in test_cases:
+        try:
+            s = Scanner(case)
+            result = not_expr(s)
+            print(f"Success: '{case}' -> {ast.dump(result)}")
+        except Exception as e:
+            print(f"Failed: '{case}' - {type(e).__name__}: {str(e)}")
+
diff --git a/test_expression_final_v2.py b/test_expression_final_v2.py
new file mode 100644
index 000000000..a612ca77c
--- /dev/null
+++ b/test_expression_final_v2.py
@@ -0,0 +1,65 @@
+
+
+from _pytest.mark.expression import Scanner, TokenType, ParseError
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    """Modified not_expr implementation that properly handles boolean literals."""
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+    if s.accept(TokenType.TRUE):
+        try:
+            return ast.Constant(value=True)
+        except AttributeError:
+            return ast.NameConstant(value=True)
+    if s.accept(TokenType.FALSE):
+        try:
+            return ast.Constant(value=False)
+        except AttributeError:
+            return ast.NameConstant(value=False)
+    if s.accept(TokenType.NONE):
+        try:
+            return ast.Constant(value=None)
+        except AttributeError:
+            return ast.NameConstant(value=None)
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        return ast.Name(ident.value, ast.Load())
+    raise ParseError(0, "Unexpected token")
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
+
+if __name__ == "__main__":
+    # Test cases
+    test_cases = [
+        ("True", "True"),
+        ("False", "False"),
+        ("None", "None"),
+        ("some_identifier", "some_identifier"),
+        ("not True", "not True")
+    ]
+    
+    for input_str, expected in test_cases:
+        try:
+            s = Scanner(input_str)
+            result = not_expr(s)
+            print(f"Success: '{input_str}' -> {ast.dump(result)}")
+        except Exception as e:
+            print(f"Failed: '{input_str}' - {type(e).__name__}: {str(e)}")
+
diff --git a/test_expression_final_v3.py b/test_expression_final_v3.py
new file mode 100644
index 000000000..9bd233516
--- /dev/null
+++ b/test_expression_final_v3.py
@@ -0,0 +1,55 @@
+
+from _pytest.mark.expression import Scanner, TokenType, ParseError
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+        
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        if ident.value == "True":
+            try:
+                return ast.Constant(value=True)
+            except AttributeError:
+                return ast.NameConstant(value=True)
+        elif ident.value == "False":
+            try:
+                return ast.Constant(value=False)
+            except AttributeError:
+                return ast.NameConstant(value=False)
+        elif ident.value == "None":
+            try:
+                return ast.Constant(value=None)
+            except AttributeError:
+                return ast.NameConstant(value=None)
+        return ast.Name(ident.value, ast.Load())
+    raise ParseError(0, "Unexpected token")
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
+
+if __name__ == "__main__":
+    test_cases = ["True", "False", "None", "some_identifier", "not True"]
+    for case in test_cases:
+        try:
+            s = Scanner(case)
+            result = not_expr(s)
+            print(f"Success: '{case}' -> {ast.dump(result)}")
+        except Exception as e:
+            print(f"Failed: '{case}' - {type(e).__name__}: {str(e)}")
diff --git a/test_expression_fix.py b/test_expression_fix.py
new file mode 100644
index 000000000..735f468c0
--- /dev/null
+++ b/test_expression_fix.py
@@ -0,0 +1,44 @@
+
+from _pytest.mark.expression import Scanner, TokenType
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+    if (true_tok := s.accept(TokenType.TRUE)):
+        try:
+            return ast.Constant(value=True)
+        except AttributeError:
+            return ast.NameConstant(value=True)
+    if (false_tok := s.accept(TokenType.FALSE)):
+        try:
+            return ast.Constant(value=False)
+        except AttributeError:
+            return ast.NameConstant(value=False)
+    if (none_tok := s.accept(TokenType.NONE)):
+        try:
+            return ast.Constant(value=None)
+        except AttributeError:
+            return ast.NameConstant(value=None)
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        return ast.Name(ident.value, ast.Load())
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.TRUE, TokenType.FALSE, TokenType.NONE, TokenType.IDENT))
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret

2025-06-26 11:14:27,719 - INFO - ------------------------------
2025-06-26 11:14:27,719 - INFO - END Runtime Completion Fn
2025-06-26 11:14:27,720 - INFO - ------------------------------
2025-06-26 11:14:27,720 - INFO - Got git diff for instance pytest-dev__pytest-7324:
--------
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..b0d2fa6a1
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,9 @@
+
+from _pytest.mark.expression import Expression
+
+# This should crash in Python 3.8+ debug builds
+try:
+    Expression.compile("False")
+    print("SUCCESS: No crash occurred")
+except Exception as e:
+    print(f"CRASH: {type(e).__name__}: {e}")
diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..daff5586d 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -46,6 +46,9 @@ class TokenType(enum.Enum):
     AND = "and"
     NOT = "not"
     IDENT = "identifier"
+    TRUE = "true"
+    FALSE = "false"
+    NONE = "none"
     EOF = "end of input"
 
 
@@ -99,6 +102,12 @@ class Scanner:
                         yield Token(TokenType.AND, value, pos)
                     elif value == "not":
                         yield Token(TokenType.NOT, value, pos)
+                    elif value == "True":
+                        yield Token(TokenType.TRUE, value, pos)
+                    elif value == "False":
+                        yield Token(TokenType.FALSE, value, pos)
+                    elif value == "None":
+                        yield Token(TokenType.NONE, value, pos)
                     else:
                         yield Token(TokenType.IDENT, value, pos)
                     pos += len(value)
@@ -161,6 +170,13 @@ def not_expr(s: Scanner) -> ast.expr:
         return ret
     ident = s.accept(TokenType.IDENT)
     if ident:
+        if ident.value in ("True", "False", "None"):
+            try:
+                # Try modern AST first (Python 3.8+)
+                return ast.Constant(value=eval(ident.value))
+            except AttributeError:
+                # Fall back to deprecated AST for older Python versions
+                return ast.NameConstant(value=eval(ident.value))
         return ast.Name(ident.value, ast.Load())
     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
 
@@ -200,7 +216,9 @@ class Expression:
         """
         astexpr = expression(Scanner(input))
         code = compile(
-            astexpr, filename="<pytest match expression>", mode="eval",
+            ast.fix_missing_locations(astexpr),
+            filename="<pytest match expression>",
+            mode="eval",
         )  # type: types.CodeType
         return Expression(code)
 
diff --git a/src/_pytest/mark/expression.py.bak b/src/_pytest/mark/expression.py.bak
new file mode 100644
index 000000000..daff5586d
--- /dev/null
+++ b/src/_pytest/mark/expression.py.bak
@@ -0,0 +1,236 @@
+r"""
+Evaluate match expressions, as used by `-k` and `-m`.
+
+The grammar is:
+
+expression: expr? EOF
+expr:       and_expr ('or' and_expr)*
+and_expr:   not_expr ('and' not_expr)*
+not_expr:   'not' not_expr | '(' expr ')' | ident
+ident:      (\w|:|\+|-|\.|\[|\])+
+
+The semantics are:
+
+- Empty expression evaluates to False.
+- ident evaluates to True of False according to a provided matcher function.
+- or/and/not evaluate according to the usual boolean semantics.
+"""
+import ast
+import enum
+import re
+import types
+from typing import Callable
+from typing import Iterator
+from typing import Mapping
+from typing import Optional
+from typing import Sequence
+
+import attr
+
+from _pytest.compat import TYPE_CHECKING
+
+if TYPE_CHECKING:
+    from typing import NoReturn
+
+
+__all__ = [
+    "Expression",
+    "ParseError",
+]
+
+
+class TokenType(enum.Enum):
+    LPAREN = "left parenthesis"
+    RPAREN = "right parenthesis"
+    OR = "or"
+    AND = "and"
+    NOT = "not"
+    IDENT = "identifier"
+    TRUE = "true"
+    FALSE = "false"
+    NONE = "none"
+    EOF = "end of input"
+
+
+@attr.s(frozen=True, slots=True)
+class Token:
+    type = attr.ib(type=TokenType)
+    value = attr.ib(type=str)
+    pos = attr.ib(type=int)
+
+
+class ParseError(Exception):
+    """The expression contains invalid syntax.
+
+    :param column: The column in the line where the error occurred (1-based).
+    :param message: A description of the error.
+    """
+
+    def __init__(self, column: int, message: str) -> None:
+        self.column = column
+        self.message = message
+
+    def __str__(self) -> str:
+        return "at column {}: {}".format(self.column, self.message)
+
+
+class Scanner:
+    __slots__ = ("tokens", "current")
+
+    def __init__(self, input: str) -> None:
+        self.tokens = self.lex(input)
+        self.current = next(self.tokens)
+
+    def lex(self, input: str) -> Iterator[Token]:
+        pos = 0
+        while pos < len(input):
+            if input[pos] in (" ", "\t"):
+                pos += 1
+            elif input[pos] == "(":
+                yield Token(TokenType.LPAREN, "(", pos)
+                pos += 1
+            elif input[pos] == ")":
+                yield Token(TokenType.RPAREN, ")", pos)
+                pos += 1
+            else:
+                match = re.match(r"(:?\w|:|\+|-|\.|\[|\])+", input[pos:])
+                if match:
+                    value = match.group(0)
+                    if value == "or":
+                        yield Token(TokenType.OR, value, pos)
+                    elif value == "and":
+                        yield Token(TokenType.AND, value, pos)
+                    elif value == "not":
+                        yield Token(TokenType.NOT, value, pos)
+                    elif value == "True":
+                        yield Token(TokenType.TRUE, value, pos)
+                    elif value == "False":
+                        yield Token(TokenType.FALSE, value, pos)
+                    elif value == "None":
+                        yield Token(TokenType.NONE, value, pos)
+                    else:
+                        yield Token(TokenType.IDENT, value, pos)
+                    pos += len(value)
+                else:
+                    raise ParseError(
+                        pos + 1, 'unexpected character "{}"'.format(input[pos]),
+                    )
+        yield Token(TokenType.EOF, "", pos)
+
+    def accept(self, type: TokenType, *, reject: bool = False) -> Optional[Token]:
+        if self.current.type is type:
+            token = self.current
+            if token.type is not TokenType.EOF:
+                self.current = next(self.tokens)
+            return token
+        if reject:
+            self.reject((type,))
+        return None
+
+    def reject(self, expected: Sequence[TokenType]) -> "NoReturn":
+        raise ParseError(
+            self.current.pos + 1,
+            "expected {}; got {}".format(
+                " OR ".join(type.value for type in expected), self.current.type.value,
+            ),
+        )
+
+
+def expression(s: Scanner) -> ast.Expression:
+    if s.accept(TokenType.EOF):
+        ret = ast.NameConstant(False)  # type: ast.expr
+    else:
+        ret = expr(s)
+        s.accept(TokenType.EOF, reject=True)
+    return ast.fix_missing_locations(ast.Expression(ret))
+
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
+
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        if ident.value in ("True", "False", "None"):
+            try:
+                # Try modern AST first (Python 3.8+)
+                return ast.Constant(value=eval(ident.value))
+            except AttributeError:
+                # Fall back to deprecated AST for older Python versions
+                return ast.NameConstant(value=eval(ident.value))
+        return ast.Name(ident.value, ast.Load())
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
+
+
+class MatcherAdapter(Mapping[str, bool]):
+    """Adapts a matcher function to a locals mapping as required by eval()."""
+
+    def __init__(self, matcher: Callable[[str], bool]) -> None:
+        self.matcher = matcher
+
+    def __getitem__(self, key: str) -> bool:
+        return self.matcher(key)
+
+    def __iter__(self) -> Iterator[str]:
+        raise NotImplementedError()
+
+    def __len__(self) -> int:
+        raise NotImplementedError()
+
+
+class Expression:
+    """A compiled match expression as used by -k and -m.
+
+    The expression can be evaulated against different matchers.
+    """
+
+    __slots__ = ("code",)
+
+    def __init__(self, code: types.CodeType) -> None:
+        self.code = code
+
+    @classmethod
+    def compile(self, input: str) -> "Expression":
+        """Compile a match expression.
+
+        :param input: The input expression - one line.
+        """
+        astexpr = expression(Scanner(input))
+        code = compile(
+            ast.fix_missing_locations(astexpr),
+            filename="<pytest match expression>",
+            mode="eval",
+        )  # type: types.CodeType
+        return Expression(code)
+
+    def evaluate(self, matcher: Callable[[str], bool]) -> bool:
+        """Evaluate the match expression.
+
+        :param matcher: Given an identifier, should return whether it matches or not.
+                        Should be prepared to handle arbitrary strings as input.
+
+        Returns whether the expression matches or not.
+        """
+        ret = eval(
+            self.code, {"__builtins__": {}}, MatcherAdapter(matcher)
+        )  # type: bool
+        return ret
diff --git a/src/_pytest/mark/expression_fixed.py b/src/_pytest/mark/expression_fixed.py
new file mode 100644
index 000000000..dcd1cbe73
--- /dev/null
+++ b/src/_pytest/mark/expression_fixed.py
@@ -0,0 +1,33 @@
+
+from _pytest.mark.expression import Scanner, TokenType, ParseError
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+        
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        if ident.value == "True":
+            try:
+                return ast.Constant(value=True)
+            except AttributeError:
+                return ast.NameConstant(value=True)
+        elif ident.value == "False":
+            try:
+                return ast.Constant(value=False)
+            except AttributeError:
+                return ast.NameConstant(value=False)
+        elif ident.value == "None":
+            try:
+                return ast.Constant(value=None)
+            except AttributeError:
+                return ast.NameConstant(value=None)
+        return ast.Name(ident.value, ast.Load())
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
+
+# Rest of the file remains unchanged...
diff --git a/src/_pytest/mark/expression_new.py b/src/_pytest/mark/expression_new.py
new file mode 100644
index 000000000..ae612011f
--- /dev/null
+++ b/src/_pytest/mark/expression_new.py
@@ -0,0 +1,35 @@
+
+
+from _pytest.mark.expression import Scanner, TokenType, ParseError
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+        
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        if ident.value == "True":
+            try:
+                return ast.Constant(value=True)
+            except AttributeError:
+                return ast.NameConstant(value=True)
+        elif ident.value == "False":
+            try:
+                return ast.Constant(value=False)
+            except AttributeError:
+                return ast.NameConstant(value=False)
+        elif ident.value == "None":
+            try:
+                return ast.Constant(value=None)
+            except AttributeError:
+                return ast.NameConstant(value=None)
+        return ast.Name(ident.value, ast.Load())
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
+
+# Rest of original file content goes here...
+
diff --git a/test_expression_final.py b/test_expression_final.py
new file mode 100644
index 000000000..e7f1f580a
--- /dev/null
+++ b/test_expression_final.py
@@ -0,0 +1,75 @@
+
+
+from _pytest.mark.expression import Scanner
+from _pytest.mark.expression import ParseError
+import ast
+
+class TokenType:
+    NOT = 'not'
+    LPAREN = 'left parenthesis'
+    RPAREN = 'right parenthesis'
+    TRUE = 'true'
+    FALSE = 'false'
+    NONE = 'none'
+    IDENT = 'identifier'
+
+def not_expr(s: Scanner) -> ast.expr:
+    """Modified not_expr implementation that properly handles boolean literals."""
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+    if s.accept(TokenType.TRUE):
+        try:
+            return ast.Constant(value=True)
+        except AttributeError:
+            return ast.NameConstant(value=True)
+    if s.accept(TokenType.FALSE):
+        try:
+            return ast.Constant(value=False)
+        except AttributeError:
+            return ast.NameConstant(value=False)
+    if s.accept(TokenType.NONE):
+        try:
+            return ast.Constant(value=None)
+        except AttributeError:
+            return ast.NameConstant(value=None)
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        return ast.Name(ident.value, ast.Load())
+    raise ParseError(0, "Unexpected token")
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
+
+if __name__ == "__main__":
+    # Test cases
+    test_cases = [
+        "True",
+        "False", 
+        "None",
+        "some_identifier",
+        "not True"
+    ]
+    
+    for case in test_cases:
+        try:
+            s = Scanner(case)
+            result = not_expr(s)
+            print(f"Success: '{case}' -> {ast.dump(result)}")
+        except Exception as e:
+            print(f"Failed: '{case}' - {type(e).__name__}: {str(e)}")
+
diff --git a/test_expression_final_v2.py b/test_expression_final_v2.py
new file mode 100644
index 000000000..a612ca77c
--- /dev/null
+++ b/test_expression_final_v2.py
@@ -0,0 +1,65 @@
+
+
+from _pytest.mark.expression import Scanner, TokenType, ParseError
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    """Modified not_expr implementation that properly handles boolean literals."""
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+    if s.accept(TokenType.TRUE):
+        try:
+            return ast.Constant(value=True)
+        except AttributeError:
+            return ast.NameConstant(value=True)
+    if s.accept(TokenType.FALSE):
+        try:
+            return ast.Constant(value=False)
+        except AttributeError:
+            return ast.NameConstant(value=False)
+    if s.accept(TokenType.NONE):
+        try:
+            return ast.Constant(value=None)
+        except AttributeError:
+            return ast.NameConstant(value=None)
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        return ast.Name(ident.value, ast.Load())
+    raise ParseError(0, "Unexpected token")
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
+
+if __name__ == "__main__":
+    # Test cases
+    test_cases = [
+        ("True", "True"),
+        ("False", "False"),
+        ("None", "None"),
+        ("some_identifier", "some_identifier"),
+        ("not True", "not True")
+    ]
+    
+    for input_str, expected in test_cases:
+        try:
+            s = Scanner(input_str)
+            result = not_expr(s)
+            print(f"Success: '{input_str}' -> {ast.dump(result)}")
+        except Exception as e:
+            print(f"Failed: '{input_str}' - {type(e).__name__}: {str(e)}")
+
diff --git a/test_expression_final_v3.py b/test_expression_final_v3.py
new file mode 100644
index 000000000..9bd233516
--- /dev/null
+++ b/test_expression_final_v3.py
@@ -0,0 +1,55 @@
+
+from _pytest.mark.expression import Scanner, TokenType, ParseError
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+        
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        if ident.value == "True":
+            try:
+                return ast.Constant(value=True)
+            except AttributeError:
+                return ast.NameConstant(value=True)
+        elif ident.value == "False":
+            try:
+                return ast.Constant(value=False)
+            except AttributeError:
+                return ast.NameConstant(value=False)
+        elif ident.value == "None":
+            try:
+                return ast.Constant(value=None)
+            except AttributeError:
+                return ast.NameConstant(value=None)
+        return ast.Name(ident.value, ast.Load())
+    raise ParseError(0, "Unexpected token")
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
+
+if __name__ == "__main__":
+    test_cases = ["True", "False", "None", "some_identifier", "not True"]
+    for case in test_cases:
+        try:
+            s = Scanner(case)
+            result = not_expr(s)
+            print(f"Success: '{case}' -> {ast.dump(result)}")
+        except Exception as e:
+            print(f"Failed: '{case}' - {type(e).__name__}: {str(e)}")
diff --git a/test_expression_fix.py b/test_expression_fix.py
new file mode 100644
index 000000000..735f468c0
--- /dev/null
+++ b/test_expression_fix.py
@@ -0,0 +1,44 @@
+
+from _pytest.mark.expression import Scanner, TokenType
+import ast
+
+def not_expr(s: Scanner) -> ast.expr:
+    if s.accept(TokenType.NOT):
+        return ast.UnaryOp(ast.Not(), not_expr(s))
+    if s.accept(TokenType.LPAREN):
+        ret = expr(s)
+        s.accept(TokenType.RPAREN, reject=True)
+        return ret
+    if (true_tok := s.accept(TokenType.TRUE)):
+        try:
+            return ast.Constant(value=True)
+        except AttributeError:
+            return ast.NameConstant(value=True)
+    if (false_tok := s.accept(TokenType.FALSE)):
+        try:
+            return ast.Constant(value=False)
+        except AttributeError:
+            return ast.NameConstant(value=False)
+    if (none_tok := s.accept(TokenType.NONE)):
+        try:
+            return ast.Constant(value=None)
+        except AttributeError:
+            return ast.NameConstant(value=None)
+    ident = s.accept(TokenType.IDENT)
+    if ident:
+        return ast.Name(ident.value, ast.Load())
+    s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.TRUE, TokenType.FALSE, TokenType.NONE, TokenType.IDENT))
+
+def expr(s: Scanner) -> ast.expr:
+    ret = and_expr(s)
+    while s.accept(TokenType.OR):
+        rhs = and_expr(s)
+        ret = ast.BoolOp(ast.Or(), [ret, rhs])
+    return ret
+
+def and_expr(s: Scanner) -> ast.expr:
+    ret = not_expr(s)
+    while s.accept(TokenType.AND):
+        rhs = not_expr(s)
+        ret = ast.BoolOp(ast.And(), [ret, rhs])
+    return ret
--------
2025-06-26 11:14:31,750 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-11239:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 11:14:31,751 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 11:14:31,751 - INFO - Logging LLM completions for instance django__django-11239 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-11239
