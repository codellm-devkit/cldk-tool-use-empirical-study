2025-06-26 18:44:20,533 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_1xtc9pp4bnjdyfyw_634egmkijx387tjz
2025-06-26 18:47:32,029 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_1xtc9pp4bnjdyfyw_634egmkijx387tjz] build finished.
2025-06-26 18:47:32,038 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_1xtc9pp4bnjdyfyw_634egmkijx387tjz] with more generic tag [oh_v0.40.0_1xtc9pp4bnjdyfyw]
2025-06-26 18:47:32,041 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_1xtc9pp4bnjdyfyw_634egmkijx387tjz, oh_v0.40.0_1xtc9pp4bnjdyfyw] built successfully
2025-06-26 18:47:32,061 - INFO - [runtime da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_1xtc9pp4bnjdyfyw_634egmkijx387tjz
2025-06-26 18:47:33,267 - INFO - [runtime da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] Container started: openhands-runtime-da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a. VSCode URL: None
2025-06-26 18:47:33,268 - INFO - [runtime da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] Waiting for client to become ready at http://localhost:34198...
2025-06-26 18:48:27,423 - INFO - [runtime da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] Runtime is ready.
2025-06-26 18:48:29,485 - INFO - ------------------------------
2025-06-26 18:48:29,485 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 18:48:29,486 - INFO - ------------------------------
2025-06-26 18:48:29,486 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=scikit-learn__scikit-learn-13779' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 18:48:30,122 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:30,123 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 18:48:30,754 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:30,755 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 18:48:31,387 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:31,398 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 18:48:32,037 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=scikit-learn__scikit-learn-13779
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:32,037 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 18:48:32,675 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:32,676 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 18:48:33,813 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: scikit-learn__scikit-learn__0.22
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:33,815 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/scikit-learn__scikit-learn__0.22
2025-06-26 18:48:33,940 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:33,941 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 18:48:34,573 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at b34751b7e [MRG] MAINT: add fixture for init and clean-up with matplotlib (#13708)
[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:34,574 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 18:48:35,211 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:35,212 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 18:48:35,848 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 18:48:35,849 - INFO - ------------------------------
2025-06-26 18:48:35,850 - INFO - END Runtime Initialization Fn
2025-06-26 18:48:35,850 - INFO - ------------------------------
2025-06-26 18:48:35,873 - INFO - [runtime da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 18:48:35,880 - INFO - Loading user workspace microagents: []
2025-06-26 18:48:35,880 - INFO - [Agent Controller da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] AgentController da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a - created new state. start_id: 0
2025-06-26 18:48:35,887 - INFO - [Agent Controller da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 19:11:51,720 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-26 19:11:51,721 - INFO - [Agent Controller da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-26 19:11:51,725 - WARNING - Stopping agent due to traffic control
2025-06-26 19:11:51,726 - INFO - [Agent Controller da4f6d02-84a0-4d76-9319-dc62af22f9ef-cc95c3738d4ea05a] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-26 19:11:52,408 - INFO - ------------------------------
2025-06-26 19:11:52,408 - INFO - BEGIN Runtime Completion Fn
2025-06-26 19:11:52,408 - INFO - ------------------------------
2025-06-26 19:11:52,409 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/scikit-learn__scikit-learn__0.22
2025-06-26 19:11:53,046 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 19:11:53,047 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 19:11:53,688 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 19:11:53,689 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 19:11:54,327 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 19:11:54,328 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 19:11:54,968 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 19:11:54,969 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 19:11:55,623 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 19:11:55,624 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached b34751b7ed02b2cfcc36037fb729d4360480a299 > patch.diff
2025-06-26 19:11:56,265 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "99b800a90892",
  "working_dir": "/workspace/scikit-learn__scikit-learn__0.22",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/scikit-learn__scikit-learn__0.22]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 19:11:56,266 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 19:11:56,272 - INFO - [Read from /workspace/scikit-learn__scikit-learn__0.22/patch.diff is successful.]
diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py
index 7afa7180c..0c4d8c882 100644
--- a/sklearn/ensemble/voting.py
+++ b/sklearn/ensemble/voting.py
@@ -65,39 +65,71 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
         """
         common fit operations.
         """
+        # Clear previous state first
+        if hasattr(self, 'estimators_'):
+            del self.estimators_
+        if hasattr(self, 'named_estimators_'):
+            del self.named_estimators_
+
+        # Validate estimators list structure
         if self.estimators is None or len(self.estimators) == 0:
             raise AttributeError('Invalid `estimators` attribute, `estimators`'
-                                 ' should be a list of (string, estimator)'
-                                 ' tuples')
+                               ' should be a list of (string, estimator) tuples')
 
+        # Validate weights length against original estimators list
         if (self.weights is not None and
                 len(self.weights) != len(self.estimators)):
             raise ValueError('Number of `estimators` and weights must be equal'
-                             '; got %d weights, %d estimators'
-                             % (len(self.weights), len(self.estimators)))
-
-        if sample_weight is not None:
-            for name, step in self.estimators:
-                if not has_fit_parameter(step, 'sample_weight'):
-                    raise ValueError('Underlying estimator \'%s\' does not'
-                                     ' support sample weights.' % name)
-
-        names, clfs = zip(*self.estimators)
-        self._validate_names(names)
-
-        n_isnone = np.sum([clf is None for _, clf in self.estimators])
-        if n_isnone == len(self.estimators):
-            raise ValueError('All estimators are None. At least one is '
-                             'required!')
-
+                           '; got %d weights, %d estimators'
+                           % (len(self.weights), len(self.estimators)))
+
+        # Process and validate estimators with comprehensive checks
+        active_estimators = []
+        valid_names = []
+        valid_clfs = []
+        
+        for name, est in self.estimators:
+            # Skip None estimators immediately
+            if est is None:
+                continue
+                
+            # Validate estimator has required interface
+            if not hasattr(est, 'fit') or not callable(est.fit):
+                continue
+                
+            # Check sample weight support if needed
+            if sample_weight is not None:
+                try:
+                    # First validate estimator exists and has required methods
+                    if est is None or not hasattr(est, 'fit') or not callable(est.fit):
+                        continue
+                    # Then validate sample weight support
+                    if not has_fit_parameter(est, 'sample_weight'):
+                        continue
+                except Exception as e:
+                    raise ValueError(f'Error validating estimator \'{name}\': {str(e)}')
+                    
+            # Only include fully validated estimators
+            active_estimators.append((name, est))
+            valid_names.append(name)
+            valid_clfs.append(est)
+                
+        if not active_estimators:
+            raise ValueError('All estimators are None or invalid. At least one valid estimator is required!')
+
+        self._validate_names(valid_names)
+
+        # Fit only valid estimators
         self.estimators_ = Parallel(n_jobs=self.n_jobs)(
                 delayed(_parallel_fit_estimator)(clone(clf), X, y,
-                                                 sample_weight=sample_weight)
-                for clf in clfs if clf is not None)
+                                               sample_weight=sample_weight)
+                for clf in valid_clfs)
+
+        # Store references to active estimators
+        self.named_estimators_ = Bunch(**{name: est 
+                                         for name, est in zip(valid_names, self.estimators_)})
 
-        self.named_estimators_ = Bunch()
-        for k, e in zip(self.estimators, self.estimators_):
-            self.named_estimators_[k[0]] = e
+            
         return self
 
     def set_params(self, **params):
@@ -113,14 +145,20 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
             the individual estimators of the ensemble estimator can also be
             set or replaced by setting them to None.
 
+        Notes
+        -----
+        This method clears any previously fitted estimators when called.
+
         Examples
         --------
         # In this example, the RandomForestClassifier is removed
-        clf1 = LogisticRegression()
-        clf2 = RandomForestClassifier()
-        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)]
-        eclf.set_params(rf=None)
         """
+        # Clear existing estimators before setting new ones
+        if hasattr(self, 'estimators_'):
+            del self.estimators_
+        if hasattr(self, 'named_estimators_'):
+            del self.named_estimators_
+            
         return self._set_params('estimators', **params)
 
     def get_params(self, deep=True):

2025-06-26 19:11:56,273 - INFO - ------------------------------
2025-06-26 19:11:56,273 - INFO - END Runtime Completion Fn
2025-06-26 19:11:56,274 - INFO - ------------------------------
2025-06-26 19:11:56,274 - INFO - Got git diff for instance scikit-learn__scikit-learn-13779:
--------
diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py
index 7afa7180c..0c4d8c882 100644
--- a/sklearn/ensemble/voting.py
+++ b/sklearn/ensemble/voting.py
@@ -65,39 +65,71 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
         """
         common fit operations.
         """
+        # Clear previous state first
+        if hasattr(self, 'estimators_'):
+            del self.estimators_
+        if hasattr(self, 'named_estimators_'):
+            del self.named_estimators_
+
+        # Validate estimators list structure
         if self.estimators is None or len(self.estimators) == 0:
             raise AttributeError('Invalid `estimators` attribute, `estimators`'
-                                 ' should be a list of (string, estimator)'
-                                 ' tuples')
+                               ' should be a list of (string, estimator) tuples')
 
+        # Validate weights length against original estimators list
         if (self.weights is not None and
                 len(self.weights) != len(self.estimators)):
             raise ValueError('Number of `estimators` and weights must be equal'
-                             '; got %d weights, %d estimators'
-                             % (len(self.weights), len(self.estimators)))
-
-        if sample_weight is not None:
-            for name, step in self.estimators:
-                if not has_fit_parameter(step, 'sample_weight'):
-                    raise ValueError('Underlying estimator \'%s\' does not'
-                                     ' support sample weights.' % name)
-
-        names, clfs = zip(*self.estimators)
-        self._validate_names(names)
-
-        n_isnone = np.sum([clf is None for _, clf in self.estimators])
-        if n_isnone == len(self.estimators):
-            raise ValueError('All estimators are None. At least one is '
-                             'required!')
-
+                           '; got %d weights, %d estimators'
+                           % (len(self.weights), len(self.estimators)))
+
+        # Process and validate estimators with comprehensive checks
+        active_estimators = []
+        valid_names = []
+        valid_clfs = []
+        
+        for name, est in self.estimators:
+            # Skip None estimators immediately
+            if est is None:
+                continue
+                
+            # Validate estimator has required interface
+            if not hasattr(est, 'fit') or not callable(est.fit):
+                continue
+                
+            # Check sample weight support if needed
+            if sample_weight is not None:
+                try:
+                    # First validate estimator exists and has required methods
+                    if est is None or not hasattr(est, 'fit') or not callable(est.fit):
+                        continue
+                    # Then validate sample weight support
+                    if not has_fit_parameter(est, 'sample_weight'):
+                        continue
+                except Exception as e:
+                    raise ValueError(f'Error validating estimator \'{name}\': {str(e)}')
+                    
+            # Only include fully validated estimators
+            active_estimators.append((name, est))
+            valid_names.append(name)
+            valid_clfs.append(est)
+                
+        if not active_estimators:
+            raise ValueError('All estimators are None or invalid. At least one valid estimator is required!')
+
+        self._validate_names(valid_names)
+
+        # Fit only valid estimators
         self.estimators_ = Parallel(n_jobs=self.n_jobs)(
                 delayed(_parallel_fit_estimator)(clone(clf), X, y,
-                                                 sample_weight=sample_weight)
-                for clf in clfs if clf is not None)
+                                               sample_weight=sample_weight)
+                for clf in valid_clfs)
+
+        # Store references to active estimators
+        self.named_estimators_ = Bunch(**{name: est 
+                                         for name, est in zip(valid_names, self.estimators_)})
 
-        self.named_estimators_ = Bunch()
-        for k, e in zip(self.estimators, self.estimators_):
-            self.named_estimators_[k[0]] = e
+            
         return self
 
     def set_params(self, **params):
@@ -113,14 +145,20 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
             the individual estimators of the ensemble estimator can also be
             set or replaced by setting them to None.
 
+        Notes
+        -----
+        This method clears any previously fitted estimators when called.
+
         Examples
         --------
         # In this example, the RandomForestClassifier is removed
-        clf1 = LogisticRegression()
-        clf2 = RandomForestClassifier()
-        eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2)]
-        eclf.set_params(rf=None)
         """
+        # Clear existing estimators before setting new ones
+        if hasattr(self, 'estimators_'):
+            del self.estimators_
+        if hasattr(self, 'named_estimators_'):
+            del self.named_estimators_
+            
         return self._set_params('estimators', **params)
 
     def get_params(self, deep=True):
--------
2025-06-26 19:11:58,329 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-15315:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 19:11:58,330 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 19:11:58,330 - INFO - Logging LLM completions for instance django__django-15315 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-15315
