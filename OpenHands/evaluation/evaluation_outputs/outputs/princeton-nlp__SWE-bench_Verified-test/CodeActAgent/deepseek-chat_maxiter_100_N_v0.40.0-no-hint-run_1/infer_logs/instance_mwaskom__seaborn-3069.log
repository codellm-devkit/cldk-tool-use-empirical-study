2025-06-25 22:05:26,006 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_v5cpl3pjyta04nsc_634egmkijx387tjz
2025-06-25 22:09:04,390 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_v5cpl3pjyta04nsc_634egmkijx387tjz] build finished.
2025-06-25 22:09:04,397 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_v5cpl3pjyta04nsc_634egmkijx387tjz] with more generic tag [oh_v0.40.0_v5cpl3pjyta04nsc]
2025-06-25 22:09:04,400 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_v5cpl3pjyta04nsc_634egmkijx387tjz, oh_v0.40.0_v5cpl3pjyta04nsc] built successfully
2025-06-25 22:09:04,423 - INFO - [runtime 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_v5cpl3pjyta04nsc_634egmkijx387tjz
2025-06-25 22:09:05,062 - INFO - [runtime 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Container started: openhands-runtime-01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921. VSCode URL: None
2025-06-25 22:09:05,062 - INFO - [runtime 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Waiting for client to become ready at http://localhost:34502...
2025-06-25 22:09:39,174 - INFO - [runtime 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Runtime is ready.
2025-06-25 22:09:41,763 - INFO - ------------------------------
2025-06-25 22:09:41,764 - INFO - BEGIN Runtime Initialization Fn
2025-06-25 22:09:41,764 - INFO - ------------------------------
2025-06-25 22:09:41,764 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=mwaskom__seaborn-3069' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-25 22:09:42,410 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:42,411 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-25 22:09:43,046 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:43,046 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-25 22:09:43,681 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:43,695 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-25 22:09:44,335 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=mwaskom__seaborn-3069
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:44,336 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-25 22:09:44,974 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:44,974 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-25 22:09:45,612 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: mwaskom__seaborn__0.12
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:45,613 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/mwaskom__seaborn__0.12
2025-06-25 22:09:46,252 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:46,253 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-25 22:09:46,893 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 54cab15b Make Jitter do something by default (#3066)
[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:46,894 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-25 22:09:47,536 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:47,537 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-25 22:09:48,170 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:09:48,170 - INFO - ------------------------------
2025-06-25 22:09:48,170 - INFO - END Runtime Initialization Fn
2025-06-25 22:09:48,170 - INFO - ------------------------------
2025-06-25 22:09:48,182 - INFO - [runtime 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-25 22:09:48,188 - INFO - Loading user workspace microagents: []
2025-06-25 22:09:48,188 - INFO - [Agent Controller 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] AgentController 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921 - created new state. start_id: 0
2025-06-25 22:09:48,192 - INFO - [Agent Controller 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-25 22:09:48,193 - INFO - Microagent 'gitlab' triggered by keyword 'git'
2025-06-25 22:09:48,193 - INFO - Microagent 'github' triggered by keyword 'git'
2025-06-25 22:14:48,857 - INFO - [Agent Controller 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-25 22:14:48,860 - INFO - [Agent Controller 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-25 22:17:54,156 - INFO - [Agent Controller 01206369-16bc-4d9e-8ad0-4fb81b6e0dfc-f50eaaf30f5f8921] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-25 22:17:54,737 - INFO - ------------------------------
2025-06-25 22:17:54,737 - INFO - BEGIN Runtime Completion Fn
2025-06-25 22:17:54,738 - INFO - ------------------------------
2025-06-25 22:17:54,738 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/mwaskom__seaborn__0.12
2025-06-25 22:17:55,376 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:17:55,377 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-25 22:17:56,015 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:17:56,016 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-25 22:17:56,654 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:17:56,654 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-25 22:17:57,291 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:17:57,292 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-25 22:17:57,944 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:17:57,945 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 54cab15bdacfaa05a88fbc5502a5b322d99f148e > patch.diff
2025-06-25 22:17:58,585 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "58ee6e1c806d",
  "working_dir": "/workspace/mwaskom__seaborn__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/mwaskom__seaborn__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:17:58,585 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-25 22:17:58,591 - INFO - [Read from /workspace/mwaskom__seaborn__0.12/patch.diff is successful.]
diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..12f86129 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1142,6 +1142,9 @@ class Plotter:
                 scale = prop.infer_scale(arg, values)
         else:
             scale = prop.default_scale(values)
+        # Add axis information to nominal scales
+        if isinstance(scale, Nominal) and m is not None:
+            scale.axis = m["axis"]
 
         return scale
 
@@ -1638,11 +1641,21 @@ class Plotter:
                     a, b = p._limits[axis_key]
                     lo = a if a is None else convert_units(a)
                     hi = b if b is None else convert_units(b)
-                    if isinstance(a, str):
-                        lo = cast(float, lo) - 0.5
-                    if isinstance(b, str):
-                        hi = cast(float, hi) + 0.5
-                    ax.set(**{f"{axis}lim": (lo, hi)})
+                    # Handle both string data and nominal scales
+                scale = self._scales.get(axis_key)
+                is_categorical = (
+                    isinstance(a, str) or isinstance(b, str) or
+                    (isinstance(scale, Nominal) and scale._categorical_behaviors)
+                )
+                if is_categorical:
+                    lo = cast(float, lo) - 0.5
+                    hi = cast(float, hi) + 0.5
+                    # Suppress grid for categorical axis
+                    ax.grid(False, axis=axis)
+                    # Invert y-axis for categorical data
+                    if axis == "y":
+                        ax.invert_yaxis()
+                ax.set(**{f"{axis}lim": (lo, hi)})
 
         engine_default = None if p._target is not None else "tight"
         layout_engine = p._layout_spec.get("engine", engine_default)
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index bbd71ec1..f41fe20c 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -138,13 +138,16 @@ class Scale:
 class Nominal(Scale):
     """
     A categorical scale without relative importance / magnitude.
+    Implements categorical behaviors for axis scaling, grid display, and inversion.
     """
     # Categorical (convert to strings), un-sortable
 
     values: tuple | str | list | dict | None = None
     order: list | None = None
+    axis: str | None = None  # Track whether scale is used on x/y axis
 
     _priority: ClassVar[int] = 3
+    _categorical_behaviors: ClassVar[bool] = True  # Enable categorical behaviors
 
     def _setup(
         self, data: Series, prop: Property, axis: Axis | None = None,
@@ -190,6 +193,10 @@ class Nominal(Scale):
             # TODO Currently just used in non-Coordinate contexts, but should
             # we use this to (A) set the padding we want for categorial plots
             # and (B) allow the values parameter for a Coordinate to set xlim/ylim
+            # Implement categorical axis padding (-0.5 to n+0.5)
+        if self._categorical_behaviors and self.axis is not None:
+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)
+        else:
             axis.set_view_interval(0, len(units_seed) - 1)
 
         new._matplotlib_scale = mpl_scale

2025-06-25 22:17:58,591 - INFO - ------------------------------
2025-06-25 22:17:58,592 - INFO - END Runtime Completion Fn
2025-06-25 22:17:58,592 - INFO - ------------------------------
2025-06-25 22:17:58,593 - INFO - Got git diff for instance mwaskom__seaborn-3069:
--------
diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..12f86129 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1142,6 +1142,9 @@ class Plotter:
                 scale = prop.infer_scale(arg, values)
         else:
             scale = prop.default_scale(values)
+        # Add axis information to nominal scales
+        if isinstance(scale, Nominal) and m is not None:
+            scale.axis = m["axis"]
 
         return scale
 
@@ -1638,11 +1641,21 @@ class Plotter:
                     a, b = p._limits[axis_key]
                     lo = a if a is None else convert_units(a)
                     hi = b if b is None else convert_units(b)
-                    if isinstance(a, str):
-                        lo = cast(float, lo) - 0.5
-                    if isinstance(b, str):
-                        hi = cast(float, hi) + 0.5
-                    ax.set(**{f"{axis}lim": (lo, hi)})
+                    # Handle both string data and nominal scales
+                scale = self._scales.get(axis_key)
+                is_categorical = (
+                    isinstance(a, str) or isinstance(b, str) or
+                    (isinstance(scale, Nominal) and scale._categorical_behaviors)
+                )
+                if is_categorical:
+                    lo = cast(float, lo) - 0.5
+                    hi = cast(float, hi) + 0.5
+                    # Suppress grid for categorical axis
+                    ax.grid(False, axis=axis)
+                    # Invert y-axis for categorical data
+                    if axis == "y":
+                        ax.invert_yaxis()
+                ax.set(**{f"{axis}lim": (lo, hi)})
 
         engine_default = None if p._target is not None else "tight"
         layout_engine = p._layout_spec.get("engine", engine_default)
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index bbd71ec1..f41fe20c 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -138,13 +138,16 @@ class Scale:
 class Nominal(Scale):
     """
     A categorical scale without relative importance / magnitude.
+    Implements categorical behaviors for axis scaling, grid display, and inversion.
     """
     # Categorical (convert to strings), un-sortable
 
     values: tuple | str | list | dict | None = None
     order: list | None = None
+    axis: str | None = None  # Track whether scale is used on x/y axis
 
     _priority: ClassVar[int] = 3
+    _categorical_behaviors: ClassVar[bool] = True  # Enable categorical behaviors
 
     def _setup(
         self, data: Series, prop: Property, axis: Axis | None = None,
@@ -190,6 +193,10 @@ class Nominal(Scale):
             # TODO Currently just used in non-Coordinate contexts, but should
             # we use this to (A) set the padding we want for categorial plots
             # and (B) allow the values parameter for a Coordinate to set xlim/ylim
+            # Implement categorical axis padding (-0.5 to n+0.5)
+        if self._categorical_behaviors and self.axis is not None:
+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)
+        else:
             axis.set_view_interval(0, len(units_seed) - 1)
 
         new._matplotlib_scale = mpl_scale
--------
2025-06-25 22:18:01,881 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-16662:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-25 22:18:01,882 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-25 22:18:01,882 - INFO - Logging LLM completions for instance django__django-16662 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-16662
