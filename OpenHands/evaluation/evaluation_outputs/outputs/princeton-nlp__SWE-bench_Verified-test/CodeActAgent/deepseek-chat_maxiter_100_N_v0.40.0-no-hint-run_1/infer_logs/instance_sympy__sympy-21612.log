2025-06-26 16:32:40,657 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_y32dskiy3qneb8bx_634egmkijx387tjz
2025-06-26 16:35:10,902 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_y32dskiy3qneb8bx_634egmkijx387tjz] build finished.
2025-06-26 16:35:10,912 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_y32dskiy3qneb8bx_634egmkijx387tjz] with more generic tag [oh_v0.40.0_y32dskiy3qneb8bx]
2025-06-26 16:35:10,916 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_y32dskiy3qneb8bx_634egmkijx387tjz, oh_v0.40.0_y32dskiy3qneb8bx] built successfully
2025-06-26 16:35:10,936 - INFO - [runtime 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_y32dskiy3qneb8bx_634egmkijx387tjz
2025-06-26 16:35:11,433 - INFO - [runtime 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] Container started: openhands-runtime-17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a. VSCode URL: None
2025-06-26 16:35:11,434 - INFO - [runtime 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] Waiting for client to become ready at http://localhost:36672...
2025-06-26 16:35:41,545 - INFO - [runtime 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] Runtime is ready.
2025-06-26 16:35:44,126 - INFO - ------------------------------
2025-06-26 16:35:44,126 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 16:35:44,127 - INFO - ------------------------------
2025-06-26 16:35:44,127 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-21612' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 16:35:44,771 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:44,772 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 16:35:45,412 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:45,413 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 16:35:46,054 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:46,066 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 16:35:46,706 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=sympy__sympy-21612
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:46,707 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 16:35:47,347 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:47,347 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 16:35:48,492 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.9
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:48,492 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/sympy__sympy__1.9
2025-06-26 16:35:49,128 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:49,128 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 16:35:49,768 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at b4777fdcef Merge pull request #21607 from oscarbenjamin/pr_pythonsat
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:49,769 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 16:35:50,411 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:50,412 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 16:35:51,051 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:35:51,052 - INFO - ------------------------------
2025-06-26 16:35:51,052 - INFO - END Runtime Initialization Fn
2025-06-26 16:35:51,053 - INFO - ------------------------------
2025-06-26 16:35:51,074 - INFO - [runtime 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 16:35:51,081 - INFO - Loading user workspace microagents: []
2025-06-26 16:35:51,081 - INFO - [Agent Controller 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] AgentController 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a - created new state. start_id: 0
2025-06-26 16:35:51,087 - INFO - [Agent Controller 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 16:50:45,992 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-26 16:50:45,993 - INFO - [Agent Controller 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-26 16:50:45,996 - WARNING - Stopping agent due to traffic control
2025-06-26 16:50:45,997 - INFO - [Agent Controller 17a46c6c-83ce-4df8-9d79-05ac2d54b352-60638f852538e13a] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-26 16:50:46,128 - INFO - ------------------------------
2025-06-26 16:50:46,128 - INFO - BEGIN Runtime Completion Fn
2025-06-26 16:50:46,129 - INFO - ------------------------------
2025-06-26 16:50:46,129 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/sympy__sympy__1.9
2025-06-26 16:50:46,769 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:50:46,769 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 16:50:47,409 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:50:47,410 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 16:50:48,052 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:50:48,053 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 16:50:48,693 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:50:48,694 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 16:50:49,346 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:50:49,347 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached b4777fdcef467b7132c055f8ac2c9a5059e6a145 > patch.diff
2025-06-26 16:50:49,987 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5cf7b3950765",
  "working_dir": "/workspace/sympy__sympy__1.9",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.9]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 16:50:49,988 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 16:50:50,000 - INFO - [Read from /workspace/sympy__sympy__1.9/patch.diff is successful.]
diff --git a/sympy/parsing/latex/__init__.py b/sympy/parsing/latex/__init__.py
index f98e53e70f..7f7d47dbbc 100644
--- a/sympy/parsing/latex/__init__.py
+++ b/sympy/parsing/latex/__init__.py
@@ -27,9 +27,18 @@ def parse_latex(s):
     1.618
     """
 
+    print("DEBUG: Attempting to import _parse_latex_antlr")
     _latex = import_module(
         'sympy.parsing.latex._parse_latex_antlr',
         import_kwargs={'fromlist': ['X']})
+    print(f"DEBUG: _latex module: {_latex}")
 
     if _latex is not None:
-        return _latex.parse_latex(s)
+        print("DEBUG: Attempting to parse LaTeX")
+        try:
+            result = _latex.parse_latex(s)
+            print("DEBUG: Parsing completed successfully")
+            return result
+        except Exception as e:
+            print(f"DEBUG: Parsing failed - {str(e)}")
+            raise
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.interp b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.interp
new file mode 100644
index 0000000000..5baaa48103
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.interp
@@ -0,0 +1,227 @@
+token literal names:
+null
+','
+null
+null
+null
+null
+'\\quad'
+'\\qquad'
+null
+'\\negmedspace'
+'\\negthickspace'
+'\\left'
+'\\right'
+null
+'+'
+'-'
+'*'
+'/'
+'('
+')'
+'{'
+'}'
+'\\{'
+'\\}'
+'['
+']'
+'|'
+'\\right|'
+'\\left|'
+'\\langle'
+'\\rangle'
+'\\lim'
+null
+'\\int'
+'\\sum'
+'\\prod'
+'\\exp'
+'\\log'
+'\\ln'
+'\\sin'
+'\\cos'
+'\\tan'
+'\\csc'
+'\\sec'
+'\\cot'
+'\\arcsin'
+'\\arccos'
+'\\arctan'
+'\\arccsc'
+'\\arcsec'
+'\\arccot'
+'\\sinh'
+'\\cosh'
+'\\tanh'
+'\\arsinh'
+'\\arcosh'
+'\\artanh'
+'\\lfloor'
+'\\rfloor'
+'\\lceil'
+'\\rceil'
+'\\sqrt'
+'\\overline'
+'\\times'
+'\\cdot'
+'\\div'
+'\\frac'
+'\\binom'
+'\\dbinom'
+'\\tbinom'
+'\\mathit'
+'_'
+'^'
+':'
+null
+null
+null
+null
+'\\neq'
+'<'
+null
+'\\leqq'
+'\\leqslant'
+'>'
+null
+'\\geqq'
+'\\geqslant'
+'!'
+null
+
+token symbolic names:
+null
+null
+WS
+THINSPACE
+MEDSPACE
+THICKSPACE
+QUAD
+QQUAD
+NEGTHINSPACE
+NEGMEDSPACE
+NEGTHICKSPACE
+CMD_LEFT
+CMD_RIGHT
+IGNORE
+ADD
+SUB
+MUL
+DIV
+L_PAREN
+R_PAREN
+L_BRACE
+R_BRACE
+L_BRACE_LITERAL
+R_BRACE_LITERAL
+L_BRACKET
+R_BRACKET
+BAR
+R_BAR
+L_BAR
+L_ANGLE
+R_ANGLE
+FUNC_LIM
+LIM_APPROACH_SYM
+FUNC_INT
+FUNC_SUM
+FUNC_PROD
+FUNC_EXP
+FUNC_LOG
+FUNC_LN
+FUNC_SIN
+FUNC_COS
+FUNC_TAN
+FUNC_CSC
+FUNC_SEC
+FUNC_COT
+FUNC_ARCSIN
+FUNC_ARCCOS
+FUNC_ARCTAN
+FUNC_ARCCSC
+FUNC_ARCSEC
+FUNC_ARCCOT
+FUNC_SINH
+FUNC_COSH
+FUNC_TANH
+FUNC_ARSINH
+FUNC_ARCOSH
+FUNC_ARTANH
+L_FLOOR
+R_FLOOR
+L_CEIL
+R_CEIL
+FUNC_SQRT
+FUNC_OVERLINE
+CMD_TIMES
+CMD_CDOT
+CMD_DIV
+CMD_FRAC
+CMD_BINOM
+CMD_DBINOM
+CMD_TBINOM
+CMD_MATHIT
+UNDERSCORE
+CARET
+COLON
+DIFFERENTIAL
+LETTER
+NUMBER
+EQUAL
+NEQ
+LT
+LTE
+LTE_Q
+LTE_S
+GT
+GTE
+GTE_Q
+GTE_S
+BANG
+SYMBOL
+
+rule names:
+math
+relation
+equality
+expr
+additive
+mp
+mp_nofunc
+unary
+unary_nofunc
+postfix
+postfix_nofunc
+postfix_op
+eval_at
+eval_at_sub
+eval_at_sup
+exp
+exp_nofunc
+comp
+comp_nofunc
+group
+abs_group
+atom
+bra
+ket
+mathit
+mathit_text
+frac
+binom
+floor
+ceil
+func_normal
+func
+args
+limit_sub
+func_arg
+func_arg_noparens
+subexpr
+supexpr
+subeq
+supeq
+
+
+atn:
+[4, 1, 88, 467, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 89, 8, 1, 10, 1, 12, 1, 92, 9, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 106, 8, 4, 10, 4, 12, 4, 109, 9, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 117, 8, 5, 10, 5, 12, 5, 120, 9, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 5, 6, 128, 8, 6, 10, 6, 12, 6, 131, 9, 6, 1, 7, 1, 7, 1, 7, 4, 7, 136, 8, 7, 11, 7, 12, 7, 137, 3, 7, 140, 8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 5, 8, 146, 8, 8, 10, 8, 12, 8, 149, 9, 8, 3, 8, 151, 8, 8, 1, 9, 1, 9, 5, 9, 155, 8, 9, 10, 9, 12, 9, 158, 9, 9, 1, 10, 1, 10, 5, 10, 162, 8, 10, 10, 10, 12, 10, 165, 9, 10, 1, 11, 1, 11, 3, 11, 169, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 177, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 183, 8, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 191, 8, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 205, 8, 15, 1, 15, 3, 15, 208, 8, 15, 5, 15, 210, 8, 15, 10, 15, 12, 15, 213, 9, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 225, 8, 16, 1, 16, 3, 16, 228, 8, 16, 5, 16, 230, 8, 16, 10, 16, 12, 16, 233, 9, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 243, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 252, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 270, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 3, 21, 278, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 285, 8, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 5, 25, 301, 8, 25, 10, 25, 12, 25, 304, 9, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 3, 31, 334, 8, 31, 1, 31, 3, 31, 337, 8, 31, 1, 31, 3, 31, 340, 8, 31, 1, 31, 3, 31, 343, 8, 31, 3, 31, 345, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 352, 8, 31, 1, 31, 1, 31, 3, 31, 356, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 369, 8, 31, 1, 31, 3, 31, 372, 8, 31, 1, 31, 1, 31, 1, 31, 3, 31, 377, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 384, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 402, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 410, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 417, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 428, 8, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 3, 34, 437, 8, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 447, 8, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 455, 8, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 0, 6, 2, 8, 10, 12, 30, 32, 40, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 0, 9, 2, 0, 77, 80, 83, 84, 1, 0, 14, 15, 3, 0, 16, 17, 63, 65, 73, 73, 2, 0, 75, 75, 88, 88, 1, 0, 26, 27, 2, 0, 26, 26, 28, 28, 1, 0, 67, 69, 1, 0, 36, 56, 1, 0, 34, 35, 495, 0, 80, 1, 0, 0, 0, 2, 82, 1, 0, 0, 0, 4, 93, 1, 0, 0, 0, 6, 97, 1, 0, 0, 0, 8, 99, 1, 0, 0, 0, 10, 110, 1, 0, 0, 0, 12, 121, 1, 0, 0, 0, 14, 139, 1, 0, 0, 0, 16, 150, 1, 0, 0, 0, 18, 152, 1, 0, 0, 0, 20, 159, 1, 0, 0, 0, 22, 168, 1, 0, 0, 0, 24, 170, 1, 0, 0, 0, 26, 178, 1, 0, 0, 0, 28, 186, 1, 0, 0, 0, 30, 194, 1, 0, 0, 0, 32, 214, 1, 0, 0, 0, 34, 242, 1, 0, 0, 0, 36, 251, 1, 0, 0, 0, 38, 269, 1, 0, 0, 0, 40, 271, 1, 0, 0, 0, 42, 284, 1, 0, 0, 0, 44, 286, 1, 0, 0, 0, 46, 290, 1, 0, 0, 0, 48, 294, 1, 0, 0, 0, 50, 302, 1, 0, 0, 0, 52, 305, 1, 0, 0, 0, 54, 313, 1, 0, 0, 0, 56, 321, 1, 0, 0, 0, 58, 325, 1, 0, 0, 0, 60, 329, 1, 0, 0, 0, 62, 409, 1, 0, 0, 0, 64, 416, 1, 0, 0, 0, 66, 418, 1, 0, 0, 0, 68, 436, 1, 0, 0, 0, 70, 438, 1, 0, 0, 0, 72, 440, 1, 0, 0, 0, 74, 448, 1, 0, 0, 0, 76, 456, 1, 0, 0, 0, 78, 461, 1, 0, 0, 0, 80, 81, 3, 2, 1, 0, 81, 1, 1, 0, 0, 0, 82, 83, 6, 1, -1, 0, 83, 84, 3, 6, 3, 0, 84, 90, 1, 0, 0, 0, 85, 86, 10, 2, 0, 0, 86, 87, 7, 0, 0, 0, 87, 89, 3, 2, 1, 3, 88, 85, 1, 0, 0, 0, 89, 92, 1, 0, 0, 0, 90, 88, 1, 0, 0, 0, 90, 91, 1, 0, 0, 0, 91, 3, 1, 0, 0, 0, 92, 90, 1, 0, 0, 0, 93, 94, 3, 6, 3, 0, 94, 95, 5, 77, 0, 0, 95, 96, 3, 6, 3, 0, 96, 5, 1, 0, 0, 0, 97, 98, 3, 8, 4, 0, 98, 7, 1, 0, 0, 0, 99, 100, 6, 4, -1, 0, 100, 101, 3, 10, 5, 0, 101, 107, 1, 0, 0, 0, 102, 103, 10, 2, 0, 0, 103, 104, 7, 1, 0, 0, 104, 106, 3, 8, 4, 3, 105, 102, 1, 0, 0, 0, 106, 109, 1, 0, 0, 0, 107, 105, 1, 0, 0, 0, 107, 108, 1, 0, 0, 0, 108, 9, 1, 0, 0, 0, 109, 107, 1, 0, 0, 0, 110, 111, 6, 5, -1, 0, 111, 112, 3, 14, 7, 0, 112, 118, 1, 0, 0, 0, 113, 114, 10, 2, 0, 0, 114, 115, 7, 2, 0, 0, 115, 117, 3, 10, 5, 3, 116, 113, 1, 0, 0, 0, 117, 120, 1, 0, 0, 0, 118, 116, 1, 0, 0, 0, 118, 119, 1, 0, 0, 0, 119, 11, 1, 0, 0, 0, 120, 118, 1, 0, 0, 0, 121, 122, 6, 6, -1, 0, 122, 123, 3, 16, 8, 0, 123, 129, 1, 0, 0, 0, 124, 125, 10, 2, 0, 0, 125, 126, 7, 2, 0, 0, 126, 128, 3, 12, 6, 3, 127, 124, 1, 0, 0, 0, 128, 131, 1, 0, 0, 0, 129, 127, 1, 0, 0, 0, 129, 130, 1, 0, 0, 0, 130, 13, 1, 0, 0, 0, 131, 129, 1, 0, 0, 0, 132, 133, 7, 1, 0, 0, 133, 140, 3, 14, 7, 0, 134, 136, 3, 18, 9, 0, 135, 134, 1, 0, 0, 0, 136, 137, 1, 0, 0, 0, 137, 135, 1, 0, 0, 0, 137, 138, 1, 0, 0, 0, 138, 140, 1, 0, 0, 0, 139, 132, 1, 0, 0, 0, 139, 135, 1, 0, 0, 0, 140, 15, 1, 0, 0, 0, 141, 142, 7, 1, 0, 0, 142, 151, 3, 16, 8, 0, 143, 147, 3, 18, 9, 0, 144, 146, 3, 20, 10, 0, 145, 144, 1, 0, 0, 0, 146, 149, 1, 0, 0, 0, 147, 145, 1, 0, 0, 0, 147, 148, 1, 0, 0, 0, 148, 151, 1, 0, 0, 0, 149, 147, 1, 0, 0, 0, 150, 141, 1, 0, 0, 0, 150, 143, 1, 0, 0, 0, 151, 17, 1, 0, 0, 0, 152, 156, 3, 30, 15, 0, 153, 155, 3, 22, 11, 0, 154, 153, 1, 0, 0, 0, 155, 158, 1, 0, 0, 0, 156, 154, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 19, 1, 0, 0, 0, 158, 156, 1, 0, 0, 0, 159, 163, 3, 32, 16, 0, 160, 162, 3, 22, 11, 0, 161, 160, 1, 0, 0, 0, 162, 165, 1, 0, 0, 0, 163, 161, 1, 0, 0, 0, 163, 164, 1, 0, 0, 0, 164, 21, 1, 0, 0, 0, 165, 163, 1, 0, 0, 0, 166, 169, 5, 87, 0, 0, 167, 169, 3, 24, 12, 0, 168, 166, 1, 0, 0, 0, 168, 167, 1, 0, 0, 0, 169, 23, 1, 0, 0, 0, 170, 176, 5, 26, 0, 0, 171, 177, 3, 28, 14, 0, 172, 177, 3, 26, 13, 0, 173, 174, 3, 28, 14, 0, 174, 175, 3, 26, 13, 0, 175, 177, 1, 0, 0, 0, 176, 171, 1, 0, 0, 0, 176, 172, 1, 0, 0, 0, 176, 173, 1, 0, 0, 0, 177, 25, 1, 0, 0, 0, 178, 179, 5, 71, 0, 0, 179, 182, 5, 20, 0, 0, 180, 183, 3, 6, 3, 0, 181, 183, 3, 4, 2, 0, 182, 180, 1, 0, 0, 0, 182, 181, 1, 0, 0, 0, 183, 184, 1, 0, 0, 0, 184, 185, 5, 21, 0, 0, 185, 27, 1, 0, 0, 0, 186, 187, 5, 72, 0, 0, 187, 190, 5, 20, 0, 0, 188, 191, 3, 6, 3, 0, 189, 191, 3, 4, 2, 0, 190, 188, 1, 0, 0, 0, 190, 189, 1, 0, 0, 0, 191, 192, 1, 0, 0, 0, 192, 193, 5, 21, 0, 0, 193, 29, 1, 0, 0, 0, 194, 195, 6, 15, -1, 0, 195, 196, 3, 34, 17, 0, 196, 211, 1, 0, 0, 0, 197, 198, 10, 2, 0, 0, 198, 204, 5, 72, 0, 0, 199, 205, 3, 42, 21, 0, 200, 201, 5, 20, 0, 0, 201, 202, 3, 6, 3, 0, 202, 203, 5, 21, 0, 0, 203, 205, 1, 0, 0, 0, 204, 199, 1, 0, 0, 0, 204, 200, 1, 0, 0, 0, 205, 207, 1, 0, 0, 0, 206, 208, 3, 72, 36, 0, 207, 206, 1, 0, 0, 0, 207, 208, 1, 0, 0, 0, 208, 210, 1, 0, 0, 0, 209, 197, 1, 0, 0, 0, 210, 213, 1, 0, 0, 0, 211, 209, 1, 0, 0, 0, 211, 212, 1, 0, 0, 0, 212, 31, 1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 214, 215, 6, 16, -1, 0, 215, 216, 3, 36, 18, 0, 216, 231, 1, 0, 0, 0, 217, 218, 10, 2, 0, 0, 218, 224, 5, 72, 0, 0, 219, 225, 3, 42, 21, 0, 220, 221, 5, 20, 0, 0, 221, 222, 3, 6, 3, 0, 222, 223, 5, 21, 0, 0, 223, 225, 1, 0, 0, 0, 224, 219, 1, 0, 0, 0, 224, 220, 1, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226, 228, 3, 72, 36, 0, 227, 226, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 230, 1, 0, 0, 0, 229, 217, 1, 0, 0, 0, 230, 233, 1, 0, 0, 0, 231, 229, 1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 33, 1, 0, 0, 0, 233, 231, 1, 0, 0, 0, 234, 243, 3, 38, 19, 0, 235, 243, 3, 40, 20, 0, 236, 243, 3, 62, 31, 0, 237, 243, 3, 42, 21, 0, 238, 243, 3, 52, 26, 0, 239, 243, 3, 54, 27, 0, 240, 243, 3, 56, 28, 0, 241, 243, 3, 58, 29, 0, 242, 234, 1, 0, 0, 0, 242, 235, 1, 0, 0, 0, 242, 236, 1, 0, 0, 0, 242, 237, 1, 0, 0, 0, 242, 238, 1, 0, 0, 0, 242, 239, 1, 0, 0, 0, 242, 240, 1, 0, 0, 0, 242, 241, 1, 0, 0, 0, 243, 35, 1, 0, 0, 0, 244, 252, 3, 38, 19, 0, 245, 252, 3, 40, 20, 0, 246, 252, 3, 42, 21, 0, 247, 252, 3, 52, 26, 0, 248, 252, 3, 54, 27, 0, 249, 252, 3, 56, 28, 0, 250, 252, 3, 58, 29, 0, 251, 244, 1, 0, 0, 0, 251, 245, 1, 0, 0, 0, 251, 246, 1, 0, 0, 0, 251, 247, 1, 0, 0, 0, 251, 248, 1, 0, 0, 0, 251, 249, 1, 0, 0, 0, 251, 250, 1, 0, 0, 0, 252, 37, 1, 0, 0, 0, 253, 254, 5, 18, 0, 0, 254, 255, 3, 6, 3, 0, 255, 256, 5, 19, 0, 0, 256, 270, 1, 0, 0, 0, 257, 258, 5, 24, 0, 0, 258, 259, 3, 6, 3, 0, 259, 260, 5, 25, 0, 0, 260, 270, 1, 0, 0, 0, 261, 262, 5, 20, 0, 0, 262, 263, 3, 6, 3, 0, 263, 264, 5, 21, 0, 0, 264, 270, 1, 0, 0, 0, 265, 266, 5, 22, 0, 0, 266, 267, 3, 6, 3, 0, 267, 268, 5, 23, 0, 0, 268, 270, 1, 0, 0, 0, 269, 253, 1, 0, 0, 0, 269, 257, 1, 0, 0, 0, 269, 261, 1, 0, 0, 0, 269, 265, 1, 0, 0, 0, 270, 39, 1, 0, 0, 0, 271, 272, 5, 26, 0, 0, 272, 273, 3, 6, 3, 0, 273, 274, 5, 26, 0, 0, 274, 41, 1, 0, 0, 0, 275, 277, 7, 3, 0, 0, 276, 278, 3, 72, 36, 0, 277, 276, 1, 0, 0, 0, 277, 278, 1, 0, 0, 0, 278, 285, 1, 0, 0, 0, 279, 285, 5, 76, 0, 0, 280, 285, 5, 74, 0, 0, 281, 285, 3, 48, 24, 0, 282, 285, 3, 44, 22, 0, 283, 285, 3, 46, 23, 0, 284, 275, 1, 0, 0, 0, 284, 279, 1, 0, 0, 0, 284, 280, 1, 0, 0, 0, 284, 281, 1, 0, 0, 0, 284, 282, 1, 0, 0, 0, 284, 283, 1, 0, 0, 0, 285, 43, 1, 0, 0, 0, 286, 287, 5, 29, 0, 0, 287, 288, 3, 6, 3, 0, 288, 289, 7, 4, 0, 0, 289, 45, 1, 0, 0, 0, 290, 291, 7, 5, 0, 0, 291, 292, 3, 6, 3, 0, 292, 293, 5, 30, 0, 0, 293, 47, 1, 0, 0, 0, 294, 295, 5, 70, 0, 0, 295, 296, 5, 20, 0, 0, 296, 297, 3, 50, 25, 0, 297, 298, 5, 21, 0, 0, 298, 49, 1, 0, 0, 0, 299, 301, 5, 75, 0, 0, 300, 299, 1, 0, 0, 0, 301, 304, 1, 0, 0, 0, 302, 300, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 51, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 305, 306, 5, 66, 0, 0, 306, 307, 5, 20, 0, 0, 307, 308, 3, 6, 3, 0, 308, 309, 5, 21, 0, 0, 309, 310, 5, 20, 0, 0, 310, 311, 3, 6, 3, 0, 311, 312, 5, 21, 0, 0, 312, 53, 1, 0, 0, 0, 313, 314, 7, 6, 0, 0, 314, 315, 5, 20, 0, 0, 315, 316, 3, 6, 3, 0, 316, 317, 5, 21, 0, 0, 317, 318, 5, 20, 0, 0, 318, 319, 3, 6, 3, 0, 319, 320, 5, 21, 0, 0, 320, 55, 1, 0, 0, 0, 321, 322, 5, 57, 0, 0, 322, 323, 3, 6, 3, 0, 323, 324, 5, 58, 0, 0, 324, 57, 1, 0, 0, 0, 325, 326, 5, 59, 0, 0, 326, 327, 3, 6, 3, 0, 327, 328, 5, 60, 0, 0, 328, 59, 1, 0, 0, 0, 329, 330, 7, 7, 0, 0, 330, 61, 1, 0, 0, 0, 331, 344, 3, 60, 30, 0, 332, 334, 3, 72, 36, 0, 333, 332, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 336, 1, 0, 0, 0, 335, 337, 3, 74, 37, 0, 336, 335, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 345, 1, 0, 0, 0, 338, 340, 3, 74, 37, 0, 339, 338, 1, 0, 0, 0, 339, 340, 1, 0, 0, 0, 340, 342, 1, 0, 0, 0, 341, 343, 3, 72, 36, 0, 342, 341, 1, 0, 0, 0, 342, 343, 1, 0, 0, 0, 343, 345, 1, 0, 0, 0, 344, 333, 1, 0, 0, 0, 344, 339, 1, 0, 0, 0, 345, 351, 1, 0, 0, 0, 346, 347, 5, 18, 0, 0, 347, 348, 3, 68, 34, 0, 348, 349, 5, 19, 0, 0, 349, 352, 1, 0, 0, 0, 350, 352, 3, 70, 35, 0, 351, 346, 1, 0, 0, 0, 351, 350, 1, 0, 0, 0, 352, 410, 1, 0, 0, 0, 353, 355, 7, 3, 0, 0, 354, 356, 3, 72, 36, 0, 355, 354, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356, 357, 1, 0, 0, 0, 357, 358, 5, 18, 0, 0, 358, 359, 3, 64, 32, 0, 359, 360, 5, 19, 0, 0, 360, 410, 1, 0, 0, 0, 361, 368, 5, 33, 0, 0, 362, 363, 3, 72, 36, 0, 363, 364, 3, 74, 37, 0, 364, 369, 1, 0, 0, 0, 365, 366, 3, 74, 37, 0, 366, 367, 3, 72, 36, 0, 367, 369, 1, 0, 0, 0, 368, 362, 1, 0, 0, 0, 368, 365, 1, 0, 0, 0, 368, 369, 1, 0, 0, 0, 369, 376, 1, 0, 0, 0, 370, 372, 3, 8, 4, 0, 371, 370, 1, 0, 0, 0, 371, 372, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0, 373, 377, 5, 74, 0, 0, 374, 377, 3, 52, 26, 0, 375, 377, 3, 8, 4, 0, 376, 371, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 376, 375, 1, 0, 0, 0, 377, 410, 1, 0, 0, 0, 378, 383, 5, 61, 0, 0, 379, 380, 5, 24, 0, 0, 380, 381, 3, 6, 3, 0, 381, 382, 5, 25, 0, 0, 382, 384, 1, 0, 0, 0, 383, 379, 1, 0, 0, 0, 383, 384, 1, 0, 0, 0, 384, 385, 1, 0, 0, 0, 385, 386, 5, 20, 0, 0, 386, 387, 3, 6, 3, 0, 387, 388, 5, 21, 0, 0, 388, 410, 1, 0, 0, 0, 389, 390, 5, 62, 0, 0, 390, 391, 5, 20, 0, 0, 391, 392, 3, 6, 3, 0, 392, 393, 5, 21, 0, 0, 393, 410, 1, 0, 0, 0, 394, 401, 7, 8, 0, 0, 395, 396, 3, 76, 38, 0, 396, 397, 3, 74, 37, 0, 397, 402, 1, 0, 0, 0, 398, 399, 3, 74, 37, 0, 399, 400, 3, 76, 38, 0, 400, 402, 1, 0, 0, 0, 401, 395, 1, 0, 0, 0, 401, 398, 1, 0, 0, 0, 402, 403, 1, 0, 0, 0, 403, 404, 3, 10, 5, 0, 404, 410, 1, 0, 0, 0, 405, 406, 5, 31, 0, 0, 406, 407, 3, 66, 33, 0, 407, 408, 3, 10, 5, 0, 408, 410, 1, 0, 0, 0, 409, 331, 1, 0, 0, 0, 409, 353, 1, 0, 0, 0, 409, 361, 1, 0, 0, 0, 409, 378, 1, 0, 0, 0, 409, 389, 1, 0, 0, 0, 409, 394, 1, 0, 0, 0, 409, 405, 1, 0, 0, 0, 410, 63, 1, 0, 0, 0, 411, 412, 3, 6, 3, 0, 412, 413, 5, 1, 0, 0, 413, 414, 3, 64, 32, 0, 414, 417, 1, 0, 0, 0, 415, 417, 3, 6, 3, 0, 416, 411, 1, 0, 0, 0, 416, 415, 1, 0, 0, 0, 417, 65, 1, 0, 0, 0, 418, 419, 5, 71, 0, 0, 419, 420, 5, 20, 0, 0, 420, 421, 7, 3, 0, 0, 421, 422, 5, 32, 0, 0, 422, 427, 3, 6, 3, 0, 423, 424, 5, 72, 0, 0, 424, 425, 5, 20, 0, 0, 425, 426, 7, 1, 0, 0, 426, 428, 5, 21, 0, 0, 427, 423, 1, 0, 0, 0, 427, 428, 1, 0, 0, 0, 428, 429, 1, 0, 0, 0, 429, 430, 5, 21, 0, 0, 430, 67, 1, 0, 0, 0, 431, 437, 3, 6, 3, 0, 432, 433, 3, 6, 3, 0, 433, 434, 5, 1, 0, 0, 434, 435, 3, 68, 34, 0, 435, 437, 1, 0, 0, 0, 436, 431, 1, 0, 0, 0, 436, 432, 1, 0, 0, 0, 437, 69, 1, 0, 0, 0, 438, 439, 3, 12, 6, 0, 439, 71, 1, 0, 0, 0, 440, 446, 5, 71, 0, 0, 441, 447, 3, 42, 21, 0, 442, 443, 5, 20, 0, 0, 443, 444, 3, 6, 3, 0, 444, 445, 5, 21, 0, 0, 445, 447, 1, 0, 0, 0, 446, 441, 1, 0, 0, 0, 446, 442, 1, 0, 0, 0, 447, 73, 1, 0, 0, 0, 448, 454, 5, 72, 0, 0, 449, 455, 3, 42, 21, 0, 450, 451, 5, 20, 0, 0, 451, 452, 3, 6, 3, 0, 452, 453, 5, 21, 0, 0, 453, 455, 1, 0, 0, 0, 454, 449, 1, 0, 0, 0, 454, 450, 1, 0, 0, 0, 455, 75, 1, 0, 0, 0, 456, 457, 5, 71, 0, 0, 457, 458, 5, 20, 0, 0, 458, 459, 3, 4, 2, 0, 459, 460, 5, 21, 0, 0, 460, 77, 1, 0, 0, 0, 461, 462, 5, 71, 0, 0, 462, 463, 5, 20, 0, 0, 463, 464, 3, 4, 2, 0, 464, 465, 5, 21, 0, 0, 465, 79, 1, 0, 0, 0, 44, 90, 107, 118, 129, 137, 139, 147, 150, 156, 163, 168, 176, 182, 190, 204, 207, 211, 224, 227, 231, 242, 251, 269, 277, 284, 302, 333, 336, 339, 342, 344, 351, 355, 368, 371, 376, 383, 401, 409, 416, 427, 436, 446, 454]
\ No newline at end of file
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.tokens b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.tokens
new file mode 100644
index 0000000000..2196d34b30
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.tokens
@@ -0,0 +1,162 @@
+T__0=1
+WS=2
+THINSPACE=3
+MEDSPACE=4
+THICKSPACE=5
+QUAD=6
+QQUAD=7
+NEGTHINSPACE=8
+NEGMEDSPACE=9
+NEGTHICKSPACE=10
+CMD_LEFT=11
+CMD_RIGHT=12
+IGNORE=13
+ADD=14
+SUB=15
+MUL=16
+DIV=17
+L_PAREN=18
+R_PAREN=19
+L_BRACE=20
+R_BRACE=21
+L_BRACE_LITERAL=22
+R_BRACE_LITERAL=23
+L_BRACKET=24
+R_BRACKET=25
+BAR=26
+R_BAR=27
+L_BAR=28
+L_ANGLE=29
+R_ANGLE=30
+FUNC_LIM=31
+LIM_APPROACH_SYM=32
+FUNC_INT=33
+FUNC_SUM=34
+FUNC_PROD=35
+FUNC_EXP=36
+FUNC_LOG=37
+FUNC_LN=38
+FUNC_SIN=39
+FUNC_COS=40
+FUNC_TAN=41
+FUNC_CSC=42
+FUNC_SEC=43
+FUNC_COT=44
+FUNC_ARCSIN=45
+FUNC_ARCCOS=46
+FUNC_ARCTAN=47
+FUNC_ARCCSC=48
+FUNC_ARCSEC=49
+FUNC_ARCCOT=50
+FUNC_SINH=51
+FUNC_COSH=52
+FUNC_TANH=53
+FUNC_ARSINH=54
+FUNC_ARCOSH=55
+FUNC_ARTANH=56
+L_FLOOR=57
+R_FLOOR=58
+L_CEIL=59
+R_CEIL=60
+FUNC_SQRT=61
+FUNC_OVERLINE=62
+CMD_TIMES=63
+CMD_CDOT=64
+CMD_DIV=65
+CMD_FRAC=66
+CMD_BINOM=67
+CMD_DBINOM=68
+CMD_TBINOM=69
+CMD_MATHIT=70
+UNDERSCORE=71
+CARET=72
+COLON=73
+DIFFERENTIAL=74
+LETTER=75
+NUMBER=76
+EQUAL=77
+NEQ=78
+LT=79
+LTE=80
+LTE_Q=81
+LTE_S=82
+GT=83
+GTE=84
+GTE_Q=85
+GTE_S=86
+BANG=87
+SYMBOL=88
+','=1
+'\\quad'=6
+'\\qquad'=7
+'\\negmedspace'=9
+'\\negthickspace'=10
+'\\left'=11
+'\\right'=12
+'+'=14
+'-'=15
+'*'=16
+'/'=17
+'('=18
+')'=19
+'{'=20
+'}'=21
+'\\{'=22
+'\\}'=23
+'['=24
+']'=25
+'|'=26
+'\\right|'=27
+'\\left|'=28
+'\\langle'=29
+'\\rangle'=30
+'\\lim'=31
+'\\int'=33
+'\\sum'=34
+'\\prod'=35
+'\\exp'=36
+'\\log'=37
+'\\ln'=38
+'\\sin'=39
+'\\cos'=40
+'\\tan'=41
+'\\csc'=42
+'\\sec'=43
+'\\cot'=44
+'\\arcsin'=45
+'\\arccos'=46
+'\\arctan'=47
+'\\arccsc'=48
+'\\arcsec'=49
+'\\arccot'=50
+'\\sinh'=51
+'\\cosh'=52
+'\\tanh'=53
+'\\arsinh'=54
+'\\arcosh'=55
+'\\artanh'=56
+'\\lfloor'=57
+'\\rfloor'=58
+'\\lceil'=59
+'\\rceil'=60
+'\\sqrt'=61
+'\\overline'=62
+'\\times'=63
+'\\cdot'=64
+'\\div'=65
+'\\frac'=66
+'\\binom'=67
+'\\dbinom'=68
+'\\tbinom'=69
+'\\mathit'=70
+'_'=71
+'^'=72
+':'=73
+'\\neq'=78
+'<'=79
+'\\leqq'=81
+'\\leqslant'=82
+'>'=83
+'\\geqq'=85
+'\\geqslant'=86
+'!'=87
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.interp b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.interp
new file mode 100644
index 0000000000..1597964e10
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.interp
@@ -0,0 +1,283 @@
+token literal names:
+null
+','
+null
+null
+null
+null
+'\\quad'
+'\\qquad'
+null
+'\\negmedspace'
+'\\negthickspace'
+'\\left'
+'\\right'
+null
+'+'
+'-'
+'*'
+'/'
+'('
+')'
+'{'
+'}'
+'\\{'
+'\\}'
+'['
+']'
+'|'
+'\\right|'
+'\\left|'
+'\\langle'
+'\\rangle'
+'\\lim'
+null
+'\\int'
+'\\sum'
+'\\prod'
+'\\exp'
+'\\log'
+'\\ln'
+'\\sin'
+'\\cos'
+'\\tan'
+'\\csc'
+'\\sec'
+'\\cot'
+'\\arcsin'
+'\\arccos'
+'\\arctan'
+'\\arccsc'
+'\\arcsec'
+'\\arccot'
+'\\sinh'
+'\\cosh'
+'\\tanh'
+'\\arsinh'
+'\\arcosh'
+'\\artanh'
+'\\lfloor'
+'\\rfloor'
+'\\lceil'
+'\\rceil'
+'\\sqrt'
+'\\overline'
+'\\times'
+'\\cdot'
+'\\div'
+'\\frac'
+'\\binom'
+'\\dbinom'
+'\\tbinom'
+'\\mathit'
+'_'
+'^'
+':'
+null
+null
+null
+null
+'\\neq'
+'<'
+null
+'\\leqq'
+'\\leqslant'
+'>'
+null
+'\\geqq'
+'\\geqslant'
+'!'
+null
+
+token symbolic names:
+null
+null
+WS
+THINSPACE
+MEDSPACE
+THICKSPACE
+QUAD
+QQUAD
+NEGTHINSPACE
+NEGMEDSPACE
+NEGTHICKSPACE
+CMD_LEFT
+CMD_RIGHT
+IGNORE
+ADD
+SUB
+MUL
+DIV
+L_PAREN
+R_PAREN
+L_BRACE
+R_BRACE
+L_BRACE_LITERAL
+R_BRACE_LITERAL
+L_BRACKET
+R_BRACKET
+BAR
+R_BAR
+L_BAR
+L_ANGLE
+R_ANGLE
+FUNC_LIM
+LIM_APPROACH_SYM
+FUNC_INT
+FUNC_SUM
+FUNC_PROD
+FUNC_EXP
+FUNC_LOG
+FUNC_LN
+FUNC_SIN
+FUNC_COS
+FUNC_TAN
+FUNC_CSC
+FUNC_SEC
+FUNC_COT
+FUNC_ARCSIN
+FUNC_ARCCOS
+FUNC_ARCTAN
+FUNC_ARCCSC
+FUNC_ARCSEC
+FUNC_ARCCOT
+FUNC_SINH
+FUNC_COSH
+FUNC_TANH
+FUNC_ARSINH
+FUNC_ARCOSH
+FUNC_ARTANH
+L_FLOOR
+R_FLOOR
+L_CEIL
+R_CEIL
+FUNC_SQRT
+FUNC_OVERLINE
+CMD_TIMES
+CMD_CDOT
+CMD_DIV
+CMD_FRAC
+CMD_BINOM
+CMD_DBINOM
+CMD_TBINOM
+CMD_MATHIT
+UNDERSCORE
+CARET
+COLON
+DIFFERENTIAL
+LETTER
+NUMBER
+EQUAL
+NEQ
+LT
+LTE
+LTE_Q
+LTE_S
+GT
+GTE
+GTE_Q
+GTE_S
+BANG
+SYMBOL
+
+rule names:
+T__0
+WS
+THINSPACE
+MEDSPACE
+THICKSPACE
+QUAD
+QQUAD
+NEGTHINSPACE
+NEGMEDSPACE
+NEGTHICKSPACE
+CMD_LEFT
+CMD_RIGHT
+IGNORE
+ADD
+SUB
+MUL
+DIV
+L_PAREN
+R_PAREN
+L_BRACE
+R_BRACE
+L_BRACE_LITERAL
+R_BRACE_LITERAL
+L_BRACKET
+R_BRACKET
+BAR
+R_BAR
+L_BAR
+L_ANGLE
+R_ANGLE
+FUNC_LIM
+LIM_APPROACH_SYM
+FUNC_INT
+FUNC_SUM
+FUNC_PROD
+FUNC_EXP
+FUNC_LOG
+FUNC_LN
+FUNC_SIN
+FUNC_COS
+FUNC_TAN
+FUNC_CSC
+FUNC_SEC
+FUNC_COT
+FUNC_ARCSIN
+FUNC_ARCCOS
+FUNC_ARCTAN
+FUNC_ARCCSC
+FUNC_ARCSEC
+FUNC_ARCCOT
+FUNC_SINH
+FUNC_COSH
+FUNC_TANH
+FUNC_ARSINH
+FUNC_ARCOSH
+FUNC_ARTANH
+L_FLOOR
+R_FLOOR
+L_CEIL
+R_CEIL
+FUNC_SQRT
+FUNC_OVERLINE
+CMD_TIMES
+CMD_CDOT
+CMD_DIV
+CMD_FRAC
+CMD_BINOM
+CMD_DBINOM
+CMD_TBINOM
+CMD_MATHIT
+UNDERSCORE
+CARET
+COLON
+WS_CHAR
+DIFFERENTIAL
+LETTER
+DIGIT
+NUMBER
+EQUAL
+NEQ
+LT
+LTE
+LTE_Q
+LTE_S
+GT
+GTE
+GTE_Q
+GTE_S
+BANG
+SYMBOL
+
+channel names:
+DEFAULT_TOKEN_CHANNEL
+HIDDEN
+
+mode names:
+DEFAULT_MODE
+
+atn:
+[4, 0, 88, 910, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 1, 0, 1, 0, 1, 1, 4, 1, 185, 8, 1, 11, 1, 12, 1, 186, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 203, 8, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 218, 8, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 235, 8, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 271, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 375, 8, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 498, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 71, 1, 71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 74, 1, 74, 5, 74, 761, 8, 74, 10, 74, 12, 74, 764, 9, 74, 1, 74, 1, 74, 1, 74, 4, 74, 769, 8, 74, 11, 74, 12, 74, 770, 3, 74, 773, 8, 74, 1, 75, 1, 75, 1, 76, 1, 76, 1, 77, 4, 77, 780, 8, 77, 11, 77, 12, 77, 781, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 5, 77, 789, 8, 77, 10, 77, 12, 77, 792, 9, 77, 1, 77, 5, 77, 795, 8, 77, 10, 77, 12, 77, 798, 9, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 5, 77, 805, 8, 77, 10, 77, 12, 77, 808, 9, 77, 1, 77, 1, 77, 4, 77, 812, 8, 77, 11, 77, 12, 77, 813, 3, 77, 816, 8, 77, 1, 78, 1, 78, 5, 78, 820, 8, 78, 10, 78, 12, 78, 823, 9, 78, 3, 78, 825, 8, 78, 1, 78, 1, 78, 1, 78, 5, 78, 830, 8, 78, 10, 78, 12, 78, 833, 9, 78, 1, 78, 3, 78, 836, 8, 78, 3, 78, 838, 8, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 856, 8, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 3, 85, 885, 8, 85, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 89, 1, 89, 4, 89, 907, 8, 89, 11, 89, 12, 89, 908, 3, 762, 821, 831, 0, 90, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113, 57, 115, 58, 117, 59, 119, 60, 121, 61, 123, 62, 125, 63, 127, 64, 129, 65, 131, 66, 133, 67, 135, 68, 137, 69, 139, 70, 141, 71, 143, 72, 145, 73, 147, 0, 149, 74, 151, 75, 153, 0, 155, 76, 157, 77, 159, 78, 161, 79, 163, 80, 165, 81, 167, 82, 169, 83, 171, 84, 173, 85, 175, 86, 177, 87, 179, 88, 1, 0, 3, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 65, 90, 97, 122, 1, 0, 48, 57, 949, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0, 0, 0, 0, 127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 0, 131, 1, 0, 0, 0, 0, 133, 1, 0, 0, 0, 0, 135, 1, 0, 0, 0, 0, 137, 1, 0, 0, 0, 0, 139, 1, 0, 0, 0, 0, 141, 1, 0, 0, 0, 0, 143, 1, 0, 0, 0, 0, 145, 1, 0, 0, 0, 0, 149, 1, 0, 0, 0, 0, 151, 1, 0, 0, 0, 0, 155, 1, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 159, 1, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 163, 1, 0, 0, 0, 0, 165, 1, 0, 0, 0, 0, 167, 1, 0, 0, 0, 0, 169, 1, 0, 0, 0, 0, 171, 1, 0, 0, 0, 0, 173, 1, 0, 0, 0, 0, 175, 1, 0, 0, 0, 0, 177, 1, 0, 0, 0, 0, 179, 1, 0, 0, 0, 1, 181, 1, 0, 0, 0, 3, 184, 1, 0, 0, 0, 5, 202, 1, 0, 0, 0, 7, 217, 1, 0, 0, 0, 9, 234, 1, 0, 0, 0, 11, 238, 1, 0, 0, 0, 13, 246, 1, 0, 0, 0, 15, 270, 1, 0, 0, 0, 17, 274, 1, 0, 0, 0, 19, 289, 1, 0, 0, 0, 21, 306, 1, 0, 0, 0, 23, 314, 1, 0, 0, 0, 25, 374, 1, 0, 0, 0, 27, 378, 1, 0, 0, 0, 29, 380, 1, 0, 0, 0, 31, 382, 1, 0, 0, 0, 33, 384, 1, 0, 0, 0, 35, 386, 1, 0, 0, 0, 37, 388, 1, 0, 0, 0, 39, 390, 1, 0, 0, 0, 41, 392, 1, 0, 0, 0, 43, 394, 1, 0, 0, 0, 45, 397, 1, 0, 0, 0, 47, 400, 1, 0, 0, 0, 49, 402, 1, 0, 0, 0, 51, 404, 1, 0, 0, 0, 53, 406, 1, 0, 0, 0, 55, 414, 1, 0, 0, 0, 57, 421, 1, 0, 0, 0, 59, 429, 1, 0, 0, 0, 61, 437, 1, 0, 0, 0, 63, 497, 1, 0, 0, 0, 65, 499, 1, 0, 0, 0, 67, 504, 1, 0, 0, 0, 69, 509, 1, 0, 0, 0, 71, 515, 1, 0, 0, 0, 73, 520, 1, 0, 0, 0, 75, 525, 1, 0, 0, 0, 77, 529, 1, 0, 0, 0, 79, 534, 1, 0, 0, 0, 81, 539, 1, 0, 0, 0, 83, 544, 1, 0, 0, 0, 85, 549, 1, 0, 0, 0, 87, 554, 1, 0, 0, 0, 89, 559, 1, 0, 0, 0, 91, 567, 1, 0, 0, 0, 93, 575, 1, 0, 0, 0, 95, 583, 1, 0, 0, 0, 97, 591, 1, 0, 0, 0, 99, 599, 1, 0, 0, 0, 101, 607, 1, 0, 0, 0, 103, 613, 1, 0, 0, 0, 105, 619, 1, 0, 0, 0, 107, 625, 1, 0, 0, 0, 109, 633, 1, 0, 0, 0, 111, 641, 1, 0, 0, 0, 113, 649, 1, 0, 0, 0, 115, 657, 1, 0, 0, 0, 117, 665, 1, 0, 0, 0, 119, 672, 1, 0, 0, 0, 121, 679, 1, 0, 0, 0, 123, 685, 1, 0, 0, 0, 125, 695, 1, 0, 0, 0, 127, 702, 1, 0, 0, 0, 129, 708, 1, 0, 0, 0, 131, 713, 1, 0, 0, 0, 133, 719, 1, 0, 0, 0, 135, 726, 1, 0, 0, 0, 137, 734, 1, 0, 0, 0, 139, 742, 1, 0, 0, 0, 141, 750, 1, 0, 0, 0, 143, 752, 1, 0, 0, 0, 145, 754, 1, 0, 0, 0, 147, 756, 1, 0, 0, 0, 149, 758, 1, 0, 0, 0, 151, 774, 1, 0, 0, 0, 153, 776, 1, 0, 0, 0, 155, 815, 1, 0, 0, 0, 157, 837, 1, 0, 0, 0, 159, 839, 1, 0, 0, 0, 161, 844, 1, 0, 0, 0, 163, 855, 1, 0, 0, 0, 165, 857, 1, 0, 0, 0, 167, 863, 1, 0, 0, 0, 169, 873, 1, 0, 0, 0, 171, 884, 1, 0, 0, 0, 173, 886, 1, 0, 0, 0, 175, 892, 1, 0, 0, 0, 177, 902, 1, 0, 0, 0, 179, 904, 1, 0, 0, 0, 181, 182, 5, 44, 0, 0, 182, 2, 1, 0, 0, 0, 183, 185, 7, 0, 0, 0, 184, 183, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 184, 1, 0, 0, 0, 186, 187, 1, 0, 0, 0, 187, 188, 1, 0, 0, 0, 188, 189, 6, 1, 0, 0, 189, 4, 1, 0, 0, 0, 190, 191, 5, 92, 0, 0, 191, 203, 5, 44, 0, 0, 192, 193, 5, 92, 0, 0, 193, 194, 5, 116, 0, 0, 194, 195, 5, 104, 0, 0, 195, 196, 5, 105, 0, 0, 196, 197, 5, 110, 0, 0, 197, 198, 5, 115, 0, 0, 198, 199, 5, 112, 0, 0, 199, 200, 5, 97, 0, 0, 200, 201, 5, 99, 0, 0, 201, 203, 5, 101, 0, 0, 202, 190, 1, 0, 0, 0, 202, 192, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 205, 6, 2, 0, 0, 205, 6, 1, 0, 0, 0, 206, 207, 5, 92, 0, 0, 207, 218, 5, 58, 0, 0, 208, 209, 5, 92, 0, 0, 209, 210, 5, 109, 0, 0, 210, 211, 5, 101, 0, 0, 211, 212, 5, 100, 0, 0, 212, 213, 5, 115, 0, 0, 213, 214, 5, 112, 0, 0, 214, 215, 5, 97, 0, 0, 215, 216, 5, 99, 0, 0, 216, 218, 5, 101, 0, 0, 217, 206, 1, 0, 0, 0, 217, 208, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 219, 220, 6, 3, 0, 0, 220, 8, 1, 0, 0, 0, 221, 222, 5, 92, 0, 0, 222, 235, 5, 59, 0, 0, 223, 224, 5, 92, 0, 0, 224, 225, 5, 116, 0, 0, 225, 226, 5, 104, 0, 0, 226, 227, 5, 105, 0, 0, 227, 228, 5, 99, 0, 0, 228, 229, 5, 107, 0, 0, 229, 230, 5, 115, 0, 0, 230, 231, 5, 112, 0, 0, 231, 232, 5, 97, 0, 0, 232, 233, 5, 99, 0, 0, 233, 235, 5, 101, 0, 0, 234, 221, 1, 0, 0, 0, 234, 223, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0, 236, 237, 6, 4, 0, 0, 237, 10, 1, 0, 0, 0, 238, 239, 5, 92, 0, 0, 239, 240, 5, 113, 0, 0, 240, 241, 5, 117, 0, 0, 241, 242, 5, 97, 0, 0, 242, 243, 5, 100, 0, 0, 243, 244, 1, 0, 0, 0, 244, 245, 6, 5, 0, 0, 245, 12, 1, 0, 0, 0, 246, 247, 5, 92, 0, 0, 247, 248, 5, 113, 0, 0, 248, 249, 5, 113, 0, 0, 249, 250, 5, 117, 0, 0, 250, 251, 5, 97, 0, 0, 251, 252, 5, 100, 0, 0, 252, 253, 1, 0, 0, 0, 253, 254, 6, 6, 0, 0, 254, 14, 1, 0, 0, 0, 255, 256, 5, 92, 0, 0, 256, 271, 5, 33, 0, 0, 257, 258, 5, 92, 0, 0, 258, 259, 5, 110, 0, 0, 259, 260, 5, 101, 0, 0, 260, 261, 5, 103, 0, 0, 261, 262, 5, 116, 0, 0, 262, 263, 5, 104, 0, 0, 263, 264, 5, 105, 0, 0, 264, 265, 5, 110, 0, 0, 265, 266, 5, 115, 0, 0, 266, 267, 5, 112, 0, 0, 267, 268, 5, 97, 0, 0, 268, 269, 5, 99, 0, 0, 269, 271, 5, 101, 0, 0, 270, 255, 1, 0, 0, 0, 270, 257, 1, 0, 0, 0, 271, 272, 1, 0, 0, 0, 272, 273, 6, 7, 0, 0, 273, 16, 1, 0, 0, 0, 274, 275, 5, 92, 0, 0, 275, 276, 5, 110, 0, 0, 276, 277, 5, 101, 0, 0, 277, 278, 5, 103, 0, 0, 278, 279, 5, 109, 0, 0, 279, 280, 5, 101, 0, 0, 280, 281, 5, 100, 0, 0, 281, 282, 5, 115, 0, 0, 282, 283, 5, 112, 0, 0, 283, 284, 5, 97, 0, 0, 284, 285, 5, 99, 0, 0, 285, 286, 5, 101, 0, 0, 286, 287, 1, 0, 0, 0, 287, 288, 6, 8, 0, 0, 288, 18, 1, 0, 0, 0, 289, 290, 5, 92, 0, 0, 290, 291, 5, 110, 0, 0, 291, 292, 5, 101, 0, 0, 292, 293, 5, 103, 0, 0, 293, 294, 5, 116, 0, 0, 294, 295, 5, 104, 0, 0, 295, 296, 5, 105, 0, 0, 296, 297, 5, 99, 0, 0, 297, 298, 5, 107, 0, 0, 298, 299, 5, 115, 0, 0, 299, 300, 5, 112, 0, 0, 300, 301, 5, 97, 0, 0, 301, 302, 5, 99, 0, 0, 302, 303, 5, 101, 0, 0, 303, 304, 1, 0, 0, 0, 304, 305, 6, 9, 0, 0, 305, 20, 1, 0, 0, 0, 306, 307, 5, 92, 0, 0, 307, 308, 5, 108, 0, 0, 308, 309, 5, 101, 0, 0, 309, 310, 5, 102, 0, 0, 310, 311, 5, 116, 0, 0, 311, 312, 1, 0, 0, 0, 312, 313, 6, 10, 0, 0, 313, 22, 1, 0, 0, 0, 314, 315, 5, 92, 0, 0, 315, 316, 5, 114, 0, 0, 316, 317, 5, 105, 0, 0, 317, 318, 5, 103, 0, 0, 318, 319, 5, 104, 0, 0, 319, 320, 5, 116, 0, 0, 320, 321, 1, 0, 0, 0, 321, 322, 6, 11, 0, 0, 322, 24, 1, 0, 0, 0, 323, 324, 5, 92, 0, 0, 324, 325, 5, 118, 0, 0, 325, 326, 5, 114, 0, 0, 326, 327, 5, 117, 0, 0, 327, 328, 5, 108, 0, 0, 328, 375, 5, 101, 0, 0, 329, 330, 5, 92, 0, 0, 330, 331, 5, 118, 0, 0, 331, 332, 5, 99, 0, 0, 332, 333, 5, 101, 0, 0, 333, 334, 5, 110, 0, 0, 334, 335, 5, 116, 0, 0, 335, 336, 5, 101, 0, 0, 336, 375, 5, 114, 0, 0, 337, 338, 5, 92, 0, 0, 338, 339, 5, 118, 0, 0, 339, 340, 5, 98, 0, 0, 340, 341, 5, 111, 0, 0, 341, 375, 5, 120, 0, 0, 342, 343, 5, 92, 0, 0, 343, 344, 5, 118, 0, 0, 344, 345, 5, 115, 0, 0, 345, 346, 5, 107, 0, 0, 346, 347, 5, 105, 0, 0, 347, 375, 5, 112, 0, 0, 348, 349, 5, 92, 0, 0, 349, 350, 5, 118, 0, 0, 350, 351, 5, 115, 0, 0, 351, 352, 5, 112, 0, 0, 352, 353, 5, 97, 0, 0, 353, 354, 5, 99, 0, 0, 354, 375, 5, 101, 0, 0, 355, 356, 5, 92, 0, 0, 356, 357, 5, 104, 0, 0, 357, 358, 5, 102, 0, 0, 358, 359, 5, 105, 0, 0, 359, 375, 5, 108, 0, 0, 360, 361, 5, 92, 0, 0, 361, 375, 5, 42, 0, 0, 362, 363, 5, 92, 0, 0, 363, 375, 5, 45, 0, 0, 364, 365, 5, 92, 0, 0, 365, 375, 5, 46, 0, 0, 366, 367, 5, 92, 0, 0, 367, 375, 5, 47, 0, 0, 368, 369, 5, 92, 0, 0, 369, 375, 5, 34, 0, 0, 370, 371, 5, 92, 0, 0, 371, 375, 5, 40, 0, 0, 372, 373, 5, 92, 0, 0, 373, 375, 5, 61, 0, 0, 374, 323, 1, 0, 0, 0, 374, 329, 1, 0, 0, 0, 374, 337, 1, 0, 0, 0, 374, 342, 1, 0, 0, 0, 374, 348, 1, 0, 0, 0, 374, 355, 1, 0, 0, 0, 374, 360, 1, 0, 0, 0, 374, 362, 1, 0, 0, 0, 374, 364, 1, 0, 0, 0, 374, 366, 1, 0, 0, 0, 374, 368, 1, 0, 0, 0, 374, 370, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 375, 376, 1, 0, 0, 0, 376, 377, 6, 12, 0, 0, 377, 26, 1, 0, 0, 0, 378, 379, 5, 43, 0, 0, 379, 28, 1, 0, 0, 0, 380, 381, 5, 45, 0, 0, 381, 30, 1, 0, 0, 0, 382, 383, 5, 42, 0, 0, 383, 32, 1, 0, 0, 0, 384, 385, 5, 47, 0, 0, 385, 34, 1, 0, 0, 0, 386, 387, 5, 40, 0, 0, 387, 36, 1, 0, 0, 0, 388, 389, 5, 41, 0, 0, 389, 38, 1, 0, 0, 0, 390, 391, 5, 123, 0, 0, 391, 40, 1, 0, 0, 0, 392, 393, 5, 125, 0, 0, 393, 42, 1, 0, 0, 0, 394, 395, 5, 92, 0, 0, 395, 396, 5, 123, 0, 0, 396, 44, 1, 0, 0, 0, 397, 398, 5, 92, 0, 0, 398, 399, 5, 125, 0, 0, 399, 46, 1, 0, 0, 0, 400, 401, 5, 91, 0, 0, 401, 48, 1, 0, 0, 0, 402, 403, 5, 93, 0, 0, 403, 50, 1, 0, 0, 0, 404, 405, 5, 124, 0, 0, 405, 52, 1, 0, 0, 0, 406, 407, 5, 92, 0, 0, 407, 408, 5, 114, 0, 0, 408, 409, 5, 105, 0, 0, 409, 410, 5, 103, 0, 0, 410, 411, 5, 104, 0, 0, 411, 412, 5, 116, 0, 0, 412, 413, 5, 124, 0, 0, 413, 54, 1, 0, 0, 0, 414, 415, 5, 92, 0, 0, 415, 416, 5, 108, 0, 0, 416, 417, 5, 101, 0, 0, 417, 418, 5, 102, 0, 0, 418, 419, 5, 116, 0, 0, 419, 420, 5, 124, 0, 0, 420, 56, 1, 0, 0, 0, 421, 422, 5, 92, 0, 0, 422, 423, 5, 108, 0, 0, 423, 424, 5, 97, 0, 0, 424, 425, 5, 110, 0, 0, 425, 426, 5, 103, 0, 0, 426, 427, 5, 108, 0, 0, 427, 428, 5, 101, 0, 0, 428, 58, 1, 0, 0, 0, 429, 430, 5, 92, 0, 0, 430, 431, 5, 114, 0, 0, 431, 432, 5, 97, 0, 0, 432, 433, 5, 110, 0, 0, 433, 434, 5, 103, 0, 0, 434, 435, 5, 108, 0, 0, 435, 436, 5, 101, 0, 0, 436, 60, 1, 0, 0, 0, 437, 438, 5, 92, 0, 0, 438, 439, 5, 108, 0, 0, 439, 440, 5, 105, 0, 0, 440, 441, 5, 109, 0, 0, 441, 62, 1, 0, 0, 0, 442, 443, 5, 92, 0, 0, 443, 444, 5, 116, 0, 0, 444, 498, 5, 111, 0, 0, 445, 446, 5, 92, 0, 0, 446, 447, 5, 114, 0, 0, 447, 448, 5, 105, 0, 0, 448, 449, 5, 103, 0, 0, 449, 450, 5, 104, 0, 0, 450, 451, 5, 116, 0, 0, 451, 452, 5, 97, 0, 0, 452, 453, 5, 114, 0, 0, 453, 454, 5, 114, 0, 0, 454, 455, 5, 111, 0, 0, 455, 498, 5, 119, 0, 0, 456, 457, 5, 92, 0, 0, 457, 458, 5, 82, 0, 0, 458, 459, 5, 105, 0, 0, 459, 460, 5, 103, 0, 0, 460, 461, 5, 104, 0, 0, 461, 462, 5, 116, 0, 0, 462, 463, 5, 97, 0, 0, 463, 464, 5, 114, 0, 0, 464, 465, 5, 114, 0, 0, 465, 466, 5, 111, 0, 0, 466, 498, 5, 119, 0, 0, 467, 468, 5, 92, 0, 0, 468, 469, 5, 108, 0, 0, 469, 470, 5, 111, 0, 0, 470, 471, 5, 110, 0, 0, 471, 472, 5, 103, 0, 0, 472, 473, 5, 114, 0, 0, 473, 474, 5, 105, 0, 0, 474, 475, 5, 103, 0, 0, 475, 476, 5, 104, 0, 0, 476, 477, 5, 116, 0, 0, 477, 478, 5, 97, 0, 0, 478, 479, 5, 114, 0, 0, 479, 480, 5, 114, 0, 0, 480, 481, 5, 111, 0, 0, 481, 498, 5, 119, 0, 0, 482, 483, 5, 92, 0, 0, 483, 484, 5, 76, 0, 0, 484, 485, 5, 111, 0, 0, 485, 486, 5, 110, 0, 0, 486, 487, 5, 103, 0, 0, 487, 488, 5, 114, 0, 0, 488, 489, 5, 105, 0, 0, 489, 490, 5, 103, 0, 0, 490, 491, 5, 104, 0, 0, 491, 492, 5, 116, 0, 0, 492, 493, 5, 97, 0, 0, 493, 494, 5, 114, 0, 0, 494, 495, 5, 114, 0, 0, 495, 496, 5, 111, 0, 0, 496, 498, 5, 119, 0, 0, 497, 442, 1, 0, 0, 0, 497, 445, 1, 0, 0, 0, 497, 456, 1, 0, 0, 0, 497, 467, 1, 0, 0, 0, 497, 482, 1, 0, 0, 0, 498, 64, 1, 0, 0, 0, 499, 500, 5, 92, 0, 0, 500, 501, 5, 105, 0, 0, 501, 502, 5, 110, 0, 0, 502, 503, 5, 116, 0, 0, 503, 66, 1, 0, 0, 0, 504, 505, 5, 92, 0, 0, 505, 506, 5, 115, 0, 0, 506, 507, 5, 117, 0, 0, 507, 508, 5, 109, 0, 0, 508, 68, 1, 0, 0, 0, 509, 510, 5, 92, 0, 0, 510, 511, 5, 112, 0, 0, 511, 512, 5, 114, 0, 0, 512, 513, 5, 111, 0, 0, 513, 514, 5, 100, 0, 0, 514, 70, 1, 0, 0, 0, 515, 516, 5, 92, 0, 0, 516, 517, 5, 101, 0, 0, 517, 518, 5, 120, 0, 0, 518, 519, 5, 112, 0, 0, 519, 72, 1, 0, 0, 0, 520, 521, 5, 92, 0, 0, 521, 522, 5, 108, 0, 0, 522, 523, 5, 111, 0, 0, 523, 524, 5, 103, 0, 0, 524, 74, 1, 0, 0, 0, 525, 526, 5, 92, 0, 0, 526, 527, 5, 108, 0, 0, 527, 528, 5, 110, 0, 0, 528, 76, 1, 0, 0, 0, 529, 530, 5, 92, 0, 0, 530, 531, 5, 115, 0, 0, 531, 532, 5, 105, 0, 0, 532, 533, 5, 110, 0, 0, 533, 78, 1, 0, 0, 0, 534, 535, 5, 92, 0, 0, 535, 536, 5, 99, 0, 0, 536, 537, 5, 111, 0, 0, 537, 538, 5, 115, 0, 0, 538, 80, 1, 0, 0, 0, 539, 540, 5, 92, 0, 0, 540, 541, 5, 116, 0, 0, 541, 542, 5, 97, 0, 0, 542, 543, 5, 110, 0, 0, 543, 82, 1, 0, 0, 0, 544, 545, 5, 92, 0, 0, 545, 546, 5, 99, 0, 0, 546, 547, 5, 115, 0, 0, 547, 548, 5, 99, 0, 0, 548, 84, 1, 0, 0, 0, 549, 550, 5, 92, 0, 0, 550, 551, 5, 115, 0, 0, 551, 552, 5, 101, 0, 0, 552, 553, 5, 99, 0, 0, 553, 86, 1, 0, 0, 0, 554, 555, 5, 92, 0, 0, 555, 556, 5, 99, 0, 0, 556, 557, 5, 111, 0, 0, 557, 558, 5, 116, 0, 0, 558, 88, 1, 0, 0, 0, 559, 560, 5, 92, 0, 0, 560, 561, 5, 97, 0, 0, 561, 562, 5, 114, 0, 0, 562, 563, 5, 99, 0, 0, 563, 564, 5, 115, 0, 0, 564, 565, 5, 105, 0, 0, 565, 566, 5, 110, 0, 0, 566, 90, 1, 0, 0, 0, 567, 568, 5, 92, 0, 0, 568, 569, 5, 97, 0, 0, 569, 570, 5, 114, 0, 0, 570, 571, 5, 99, 0, 0, 571, 572, 5, 99, 0, 0, 572, 573, 5, 111, 0, 0, 573, 574, 5, 115, 0, 0, 574, 92, 1, 0, 0, 0, 575, 576, 5, 92, 0, 0, 576, 577, 5, 97, 0, 0, 577, 578, 5, 114, 0, 0, 578, 579, 5, 99, 0, 0, 579, 580, 5, 116, 0, 0, 580, 581, 5, 97, 0, 0, 581, 582, 5, 110, 0, 0, 582, 94, 1, 0, 0, 0, 583, 584, 5, 92, 0, 0, 584, 585, 5, 97, 0, 0, 585, 586, 5, 114, 0, 0, 586, 587, 5, 99, 0, 0, 587, 588, 5, 99, 0, 0, 588, 589, 5, 115, 0, 0, 589, 590, 5, 99, 0, 0, 590, 96, 1, 0, 0, 0, 591, 592, 5, 92, 0, 0, 592, 593, 5, 97, 0, 0, 593, 594, 5, 114, 0, 0, 594, 595, 5, 99, 0, 0, 595, 596, 5, 115, 0, 0, 596, 597, 5, 101, 0, 0, 597, 598, 5, 99, 0, 0, 598, 98, 1, 0, 0, 0, 599, 600, 5, 92, 0, 0, 600, 601, 5, 97, 0, 0, 601, 602, 5, 114, 0, 0, 602, 603, 5, 99, 0, 0, 603, 604, 5, 99, 0, 0, 604, 605, 5, 111, 0, 0, 605, 606, 5, 116, 0, 0, 606, 100, 1, 0, 0, 0, 607, 608, 5, 92, 0, 0, 608, 609, 5, 115, 0, 0, 609, 610, 5, 105, 0, 0, 610, 611, 5, 110, 0, 0, 611, 612, 5, 104, 0, 0, 612, 102, 1, 0, 0, 0, 613, 614, 5, 92, 0, 0, 614, 615, 5, 99, 0, 0, 615, 616, 5, 111, 0, 0, 616, 617, 5, 115, 0, 0, 617, 618, 5, 104, 0, 0, 618, 104, 1, 0, 0, 0, 619, 620, 5, 92, 0, 0, 620, 621, 5, 116, 0, 0, 621, 622, 5, 97, 0, 0, 622, 623, 5, 110, 0, 0, 623, 624, 5, 104, 0, 0, 624, 106, 1, 0, 0, 0, 625, 626, 5, 92, 0, 0, 626, 627, 5, 97, 0, 0, 627, 628, 5, 114, 0, 0, 628, 629, 5, 115, 0, 0, 629, 630, 5, 105, 0, 0, 630, 631, 5, 110, 0, 0, 631, 632, 5, 104, 0, 0, 632, 108, 1, 0, 0, 0, 633, 634, 5, 92, 0, 0, 634, 635, 5, 97, 0, 0, 635, 636, 5, 114, 0, 0, 636, 637, 5, 99, 0, 0, 637, 638, 5, 111, 0, 0, 638, 639, 5, 115, 0, 0, 639, 640, 5, 104, 0, 0, 640, 110, 1, 0, 0, 0, 641, 642, 5, 92, 0, 0, 642, 643, 5, 97, 0, 0, 643, 644, 5, 114, 0, 0, 644, 645, 5, 116, 0, 0, 645, 646, 5, 97, 0, 0, 646, 647, 5, 110, 0, 0, 647, 648, 5, 104, 0, 0, 648, 112, 1, 0, 0, 0, 649, 650, 5, 92, 0, 0, 650, 651, 5, 108, 0, 0, 651, 652, 5, 102, 0, 0, 652, 653, 5, 108, 0, 0, 653, 654, 5, 111, 0, 0, 654, 655, 5, 111, 0, 0, 655, 656, 5, 114, 0, 0, 656, 114, 1, 0, 0, 0, 657, 658, 5, 92, 0, 0, 658, 659, 5, 114, 0, 0, 659, 660, 5, 102, 0, 0, 660, 661, 5, 108, 0, 0, 661, 662, 5, 111, 0, 0, 662, 663, 5, 111, 0, 0, 663, 664, 5, 114, 0, 0, 664, 116, 1, 0, 0, 0, 665, 666, 5, 92, 0, 0, 666, 667, 5, 108, 0, 0, 667, 668, 5, 99, 0, 0, 668, 669, 5, 101, 0, 0, 669, 670, 5, 105, 0, 0, 670, 671, 5, 108, 0, 0, 671, 118, 1, 0, 0, 0, 672, 673, 5, 92, 0, 0, 673, 674, 5, 114, 0, 0, 674, 675, 5, 99, 0, 0, 675, 676, 5, 101, 0, 0, 676, 677, 5, 105, 0, 0, 677, 678, 5, 108, 0, 0, 678, 120, 1, 0, 0, 0, 679, 680, 5, 92, 0, 0, 680, 681, 5, 115, 0, 0, 681, 682, 5, 113, 0, 0, 682, 683, 5, 114, 0, 0, 683, 684, 5, 116, 0, 0, 684, 122, 1, 0, 0, 0, 685, 686, 5, 92, 0, 0, 686, 687, 5, 111, 0, 0, 687, 688, 5, 118, 0, 0, 688, 689, 5, 101, 0, 0, 689, 690, 5, 114, 0, 0, 690, 691, 5, 108, 0, 0, 691, 692, 5, 105, 0, 0, 692, 693, 5, 110, 0, 0, 693, 694, 5, 101, 0, 0, 694, 124, 1, 0, 0, 0, 695, 696, 5, 92, 0, 0, 696, 697, 5, 116, 0, 0, 697, 698, 5, 105, 0, 0, 698, 699, 5, 109, 0, 0, 699, 700, 5, 101, 0, 0, 700, 701, 5, 115, 0, 0, 701, 126, 1, 0, 0, 0, 702, 703, 5, 92, 0, 0, 703, 704, 5, 99, 0, 0, 704, 705, 5, 100, 0, 0, 705, 706, 5, 111, 0, 0, 706, 707, 5, 116, 0, 0, 707, 128, 1, 0, 0, 0, 708, 709, 5, 92, 0, 0, 709, 710, 5, 100, 0, 0, 710, 711, 5, 105, 0, 0, 711, 712, 5, 118, 0, 0, 712, 130, 1, 0, 0, 0, 713, 714, 5, 92, 0, 0, 714, 715, 5, 102, 0, 0, 715, 716, 5, 114, 0, 0, 716, 717, 5, 97, 0, 0, 717, 718, 5, 99, 0, 0, 718, 132, 1, 0, 0, 0, 719, 720, 5, 92, 0, 0, 720, 721, 5, 98, 0, 0, 721, 722, 5, 105, 0, 0, 722, 723, 5, 110, 0, 0, 723, 724, 5, 111, 0, 0, 724, 725, 5, 109, 0, 0, 725, 134, 1, 0, 0, 0, 726, 727, 5, 92, 0, 0, 727, 728, 5, 100, 0, 0, 728, 729, 5, 98, 0, 0, 729, 730, 5, 105, 0, 0, 730, 731, 5, 110, 0, 0, 731, 732, 5, 111, 0, 0, 732, 733, 5, 109, 0, 0, 733, 136, 1, 0, 0, 0, 734, 735, 5, 92, 0, 0, 735, 736, 5, 116, 0, 0, 736, 737, 5, 98, 0, 0, 737, 738, 5, 105, 0, 0, 738, 739, 5, 110, 0, 0, 739, 740, 5, 111, 0, 0, 740, 741, 5, 109, 0, 0, 741, 138, 1, 0, 0, 0, 742, 743, 5, 92, 0, 0, 743, 744, 5, 109, 0, 0, 744, 745, 5, 97, 0, 0, 745, 746, 5, 116, 0, 0, 746, 747, 5, 104, 0, 0, 747, 748, 5, 105, 0, 0, 748, 749, 5, 116, 0, 0, 749, 140, 1, 0, 0, 0, 750, 751, 5, 95, 0, 0, 751, 142, 1, 0, 0, 0, 752, 753, 5, 94, 0, 0, 753, 144, 1, 0, 0, 0, 754, 755, 5, 58, 0, 0, 755, 146, 1, 0, 0, 0, 756, 757, 7, 0, 0, 0, 757, 148, 1, 0, 0, 0, 758, 762, 5, 100, 0, 0, 759, 761, 3, 147, 73, 0, 760, 759, 1, 0, 0, 0, 761, 764, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0, 762, 760, 1, 0, 0, 0, 763, 772, 1, 0, 0, 0, 764, 762, 1, 0, 0, 0, 765, 773, 7, 1, 0, 0, 766, 768, 5, 92, 0, 0, 767, 769, 7, 1, 0, 0, 768, 767, 1, 0, 0, 0, 769, 770, 1, 0, 0, 0, 770, 768, 1, 0, 0, 0, 770, 771, 1, 0, 0, 0, 771, 773, 1, 0, 0, 0, 772, 765, 1, 0, 0, 0, 772, 766, 1, 0, 0, 0, 773, 150, 1, 0, 0, 0, 774, 775, 7, 1, 0, 0, 775, 152, 1, 0, 0, 0, 776, 777, 7, 2, 0, 0, 777, 154, 1, 0, 0, 0, 778, 780, 3, 153, 76, 0, 779, 778, 1, 0, 0, 0, 780, 781, 1, 0, 0, 0, 781, 779, 1, 0, 0, 0, 781, 782, 1, 0, 0, 0, 782, 790, 1, 0, 0, 0, 783, 784, 5, 44, 0, 0, 784, 785, 3, 153, 76, 0, 785, 786, 3, 153, 76, 0, 786, 787, 3, 153, 76, 0, 787, 789, 1, 0, 0, 0, 788, 783, 1, 0, 0, 0, 789, 792, 1, 0, 0, 0, 790, 788, 1, 0, 0, 0, 790, 791, 1, 0, 0, 0, 791, 816, 1, 0, 0, 0, 792, 790, 1, 0, 0, 0, 793, 795, 3, 153, 76, 0, 794, 793, 1, 0, 0, 0, 795, 798, 1, 0, 0, 0, 796, 794, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797, 806, 1, 0, 0, 0, 798, 796, 1, 0, 0, 0, 799, 800, 5, 44, 0, 0, 800, 801, 3, 153, 76, 0, 801, 802, 3, 153, 76, 0, 802, 803, 3, 153, 76, 0, 803, 805, 1, 0, 0, 0, 804, 799, 1, 0, 0, 0, 805, 808, 1, 0, 0, 0, 806, 804, 1, 0, 0, 0, 806, 807, 1, 0, 0, 0, 807, 809, 1, 0, 0, 0, 808, 806, 1, 0, 0, 0, 809, 811, 5, 46, 0, 0, 810, 812, 3, 153, 76, 0, 811, 810, 1, 0, 0, 0, 812, 813, 1, 0, 0, 0, 813, 811, 1, 0, 0, 0, 813, 814, 1, 0, 0, 0, 814, 816, 1, 0, 0, 0, 815, 779, 1, 0, 0, 0, 815, 796, 1, 0, 0, 0, 816, 156, 1, 0, 0, 0, 817, 821, 5, 38, 0, 0, 818, 820, 3, 147, 73, 0, 819, 818, 1, 0, 0, 0, 820, 823, 1, 0, 0, 0, 821, 822, 1, 0, 0, 0, 821, 819, 1, 0, 0, 0, 822, 825, 1, 0, 0, 0, 823, 821, 1, 0, 0, 0, 824, 817, 1, 0, 0, 0, 824, 825, 1, 0, 0, 0, 825, 826, 1, 0, 0, 0, 826, 838, 5, 61, 0, 0, 827, 835, 5, 61, 0, 0, 828, 830, 3, 147, 73, 0, 829, 828, 1, 0, 0, 0, 830, 833, 1, 0, 0, 0, 831, 832, 1, 0, 0, 0, 831, 829, 1, 0, 0, 0, 832, 834, 1, 0, 0, 0, 833, 831, 1, 0, 0, 0, 834, 836, 5, 38, 0, 0, 835, 831, 1, 0, 0, 0, 835, 836, 1, 0, 0, 0, 836, 838, 1, 0, 0, 0, 837, 824, 1, 0, 0, 0, 837, 827, 1, 0, 0, 0, 838, 158, 1, 0, 0, 0, 839, 840, 5, 92, 0, 0, 840, 841, 5, 110, 0, 0, 841, 842, 5, 101, 0, 0, 842, 843, 5, 113, 0, 0, 843, 160, 1, 0, 0, 0, 844, 845, 5, 60, 0, 0, 845, 162, 1, 0, 0, 0, 846, 847, 5, 92, 0, 0, 847, 848, 5, 108, 0, 0, 848, 849, 5, 101, 0, 0, 849, 856, 5, 113, 0, 0, 850, 851, 5, 92, 0, 0, 851, 852, 5, 108, 0, 0, 852, 856, 5, 101, 0, 0, 853, 856, 3, 165, 82, 0, 854, 856, 3, 167, 83, 0, 855, 846, 1, 0, 0, 0, 855, 850, 1, 0, 0, 0, 855, 853, 1, 0, 0, 0, 855, 854, 1, 0, 0, 0, 856, 164, 1, 0, 0, 0, 857, 858, 5, 92, 0, 0, 858, 859, 5, 108, 0, 0, 859, 860, 5, 101, 0, 0, 860, 861, 5, 113, 0, 0, 861, 862, 5, 113, 0, 0, 862, 166, 1, 0, 0, 0, 863, 864, 5, 92, 0, 0, 864, 865, 5, 108, 0, 0, 865, 866, 5, 101, 0, 0, 866, 867, 5, 113, 0, 0, 867, 868, 5, 115, 0, 0, 868, 869, 5, 108, 0, 0, 869, 870, 5, 97, 0, 0, 870, 871, 5, 110, 0, 0, 871, 872, 5, 116, 0, 0, 872, 168, 1, 0, 0, 0, 873, 874, 5, 62, 0, 0, 874, 170, 1, 0, 0, 0, 875, 876, 5, 92, 0, 0, 876, 877, 5, 103, 0, 0, 877, 878, 5, 101, 0, 0, 878, 885, 5, 113, 0, 0, 879, 880, 5, 92, 0, 0, 880, 881, 5, 103, 0, 0, 881, 885, 5, 101, 0, 0, 882, 885, 3, 173, 86, 0, 883, 885, 3, 175, 87, 0, 884, 875, 1, 0, 0, 0, 884, 879, 1, 0, 0, 0, 884, 882, 1, 0, 0, 0, 884, 883, 1, 0, 0, 0, 885, 172, 1, 0, 0, 0, 886, 887, 5, 92, 0, 0, 887, 888, 5, 103, 0, 0, 888, 889, 5, 101, 0, 0, 889, 890, 5, 113, 0, 0, 890, 891, 5, 113, 0, 0, 891, 174, 1, 0, 0, 0, 892, 893, 5, 92, 0, 0, 893, 894, 5, 103, 0, 0, 894, 895, 5, 101, 0, 0, 895, 896, 5, 113, 0, 0, 896, 897, 5, 115, 0, 0, 897, 898, 5, 108, 0, 0, 898, 899, 5, 97, 0, 0, 899, 900, 5, 110, 0, 0, 900, 901, 5, 116, 0, 0, 901, 176, 1, 0, 0, 0, 902, 903, 5, 33, 0, 0, 903, 178, 1, 0, 0, 0, 904, 906, 5, 92, 0, 0, 905, 907, 7, 1, 0, 0, 906, 905, 1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908, 906, 1, 0, 0, 0, 908, 909, 1, 0, 0, 0, 909, 180, 1, 0, 0, 0, 25, 0, 186, 202, 217, 234, 270, 374, 497, 762, 770, 772, 781, 790, 796, 806, 813, 815, 821, 824, 831, 835, 837, 855, 884, 908, 1, 6, 0, 0]
\ No newline at end of file
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.py b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.py
new file mode 100644
index 0000000000..8f0ad1f8d3
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.py
@@ -0,0 +1,500 @@
+# Generated from sympy/parsing/latex/LaTeX.g4 by ANTLR 4.13.1
+from antlr4 import *
+from io import StringIO
+import sys
+if sys.version_info[1] > 5:
+    from typing import TextIO
+else:
+    from typing.io import TextIO
+
+
+def serializedATN():
+    return [
+        4,0,88,910,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
+        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
+        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
+        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
+        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
+        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
+        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
+        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
+        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
+        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
+        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
+        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
+        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
+        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,1,0,1,0,1,1,
+        4,1,185,8,1,11,1,12,1,186,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
+        2,1,2,1,2,1,2,1,2,3,2,203,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
+        3,1,3,1,3,1,3,1,3,3,3,218,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
+        4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,235,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
+        5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
+        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,271,8,7,1,7,1,
+        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
+        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
+        9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
+        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,3,12,375,8,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
+        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
+        21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
+        26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
+        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
+        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,498,8,
+        31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,
+        34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
+        36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,
+        39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,
+        42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
+        44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,
+        46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,
+        47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,
+        49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
+        51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,
+        53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
+        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,
+        56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,
+        58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,
+        60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
+        61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,
+        63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,
+        66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,
+        67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,
+        69,1,69,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,
+        74,1,74,5,74,761,8,74,10,74,12,74,764,9,74,1,74,1,74,1,74,4,74,769,
+        8,74,11,74,12,74,770,3,74,773,8,74,1,75,1,75,1,76,1,76,1,77,4,77,
+        780,8,77,11,77,12,77,781,1,77,1,77,1,77,1,77,1,77,5,77,789,8,77,
+        10,77,12,77,792,9,77,1,77,5,77,795,8,77,10,77,12,77,798,9,77,1,77,
+        1,77,1,77,1,77,1,77,5,77,805,8,77,10,77,12,77,808,9,77,1,77,1,77,
+        4,77,812,8,77,11,77,12,77,813,3,77,816,8,77,1,78,1,78,5,78,820,8,
+        78,10,78,12,78,823,9,78,3,78,825,8,78,1,78,1,78,1,78,5,78,830,8,
+        78,10,78,12,78,833,9,78,1,78,3,78,836,8,78,3,78,838,8,78,1,79,1,
+        79,1,79,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
+        81,1,81,3,81,856,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,
+        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,85,1,85,1,85,1,
+        85,1,85,1,85,1,85,1,85,1,85,3,85,885,8,85,1,86,1,86,1,86,1,86,1,
+        86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,
+        88,1,89,1,89,4,89,907,8,89,11,89,12,89,908,3,762,821,831,0,90,1,
+        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
+        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
+        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
+        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
+        47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
+        57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,
+        133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,0,149,74,151,
+        75,153,0,155,76,157,77,159,78,161,79,163,80,165,81,167,82,169,83,
+        171,84,173,85,175,86,177,87,179,88,1,0,3,3,0,9,10,13,13,32,32,2,
+        0,65,90,97,122,1,0,48,57,949,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
+        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
+        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
+        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
+        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
+        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
+        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
+        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
+        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
+        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
+        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
+        0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
+        1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
+        0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,
+        0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,
+        143,1,0,0,0,0,145,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,155,1,0,
+        0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,
+        1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,
+        0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,1,181,1,0,0,0,3,184,1,
+        0,0,0,5,202,1,0,0,0,7,217,1,0,0,0,9,234,1,0,0,0,11,238,1,0,0,0,13,
+        246,1,0,0,0,15,270,1,0,0,0,17,274,1,0,0,0,19,289,1,0,0,0,21,306,
+        1,0,0,0,23,314,1,0,0,0,25,374,1,0,0,0,27,378,1,0,0,0,29,380,1,0,
+        0,0,31,382,1,0,0,0,33,384,1,0,0,0,35,386,1,0,0,0,37,388,1,0,0,0,
+        39,390,1,0,0,0,41,392,1,0,0,0,43,394,1,0,0,0,45,397,1,0,0,0,47,400,
+        1,0,0,0,49,402,1,0,0,0,51,404,1,0,0,0,53,406,1,0,0,0,55,414,1,0,
+        0,0,57,421,1,0,0,0,59,429,1,0,0,0,61,437,1,0,0,0,63,497,1,0,0,0,
+        65,499,1,0,0,0,67,504,1,0,0,0,69,509,1,0,0,0,71,515,1,0,0,0,73,520,
+        1,0,0,0,75,525,1,0,0,0,77,529,1,0,0,0,79,534,1,0,0,0,81,539,1,0,
+        0,0,83,544,1,0,0,0,85,549,1,0,0,0,87,554,1,0,0,0,89,559,1,0,0,0,
+        91,567,1,0,0,0,93,575,1,0,0,0,95,583,1,0,0,0,97,591,1,0,0,0,99,599,
+        1,0,0,0,101,607,1,0,0,0,103,613,1,0,0,0,105,619,1,0,0,0,107,625,
+        1,0,0,0,109,633,1,0,0,0,111,641,1,0,0,0,113,649,1,0,0,0,115,657,
+        1,0,0,0,117,665,1,0,0,0,119,672,1,0,0,0,121,679,1,0,0,0,123,685,
+        1,0,0,0,125,695,1,0,0,0,127,702,1,0,0,0,129,708,1,0,0,0,131,713,
+        1,0,0,0,133,719,1,0,0,0,135,726,1,0,0,0,137,734,1,0,0,0,139,742,
+        1,0,0,0,141,750,1,0,0,0,143,752,1,0,0,0,145,754,1,0,0,0,147,756,
+        1,0,0,0,149,758,1,0,0,0,151,774,1,0,0,0,153,776,1,0,0,0,155,815,
+        1,0,0,0,157,837,1,0,0,0,159,839,1,0,0,0,161,844,1,0,0,0,163,855,
+        1,0,0,0,165,857,1,0,0,0,167,863,1,0,0,0,169,873,1,0,0,0,171,884,
+        1,0,0,0,173,886,1,0,0,0,175,892,1,0,0,0,177,902,1,0,0,0,179,904,
+        1,0,0,0,181,182,5,44,0,0,182,2,1,0,0,0,183,185,7,0,0,0,184,183,1,
+        0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,188,1,
+        0,0,0,188,189,6,1,0,0,189,4,1,0,0,0,190,191,5,92,0,0,191,203,5,44,
+        0,0,192,193,5,92,0,0,193,194,5,116,0,0,194,195,5,104,0,0,195,196,
+        5,105,0,0,196,197,5,110,0,0,197,198,5,115,0,0,198,199,5,112,0,0,
+        199,200,5,97,0,0,200,201,5,99,0,0,201,203,5,101,0,0,202,190,1,0,
+        0,0,202,192,1,0,0,0,203,204,1,0,0,0,204,205,6,2,0,0,205,6,1,0,0,
+        0,206,207,5,92,0,0,207,218,5,58,0,0,208,209,5,92,0,0,209,210,5,109,
+        0,0,210,211,5,101,0,0,211,212,5,100,0,0,212,213,5,115,0,0,213,214,
+        5,112,0,0,214,215,5,97,0,0,215,216,5,99,0,0,216,218,5,101,0,0,217,
+        206,1,0,0,0,217,208,1,0,0,0,218,219,1,0,0,0,219,220,6,3,0,0,220,
+        8,1,0,0,0,221,222,5,92,0,0,222,235,5,59,0,0,223,224,5,92,0,0,224,
+        225,5,116,0,0,225,226,5,104,0,0,226,227,5,105,0,0,227,228,5,99,0,
+        0,228,229,5,107,0,0,229,230,5,115,0,0,230,231,5,112,0,0,231,232,
+        5,97,0,0,232,233,5,99,0,0,233,235,5,101,0,0,234,221,1,0,0,0,234,
+        223,1,0,0,0,235,236,1,0,0,0,236,237,6,4,0,0,237,10,1,0,0,0,238,239,
+        5,92,0,0,239,240,5,113,0,0,240,241,5,117,0,0,241,242,5,97,0,0,242,
+        243,5,100,0,0,243,244,1,0,0,0,244,245,6,5,0,0,245,12,1,0,0,0,246,
+        247,5,92,0,0,247,248,5,113,0,0,248,249,5,113,0,0,249,250,5,117,0,
+        0,250,251,5,97,0,0,251,252,5,100,0,0,252,253,1,0,0,0,253,254,6,6,
+        0,0,254,14,1,0,0,0,255,256,5,92,0,0,256,271,5,33,0,0,257,258,5,92,
+        0,0,258,259,5,110,0,0,259,260,5,101,0,0,260,261,5,103,0,0,261,262,
+        5,116,0,0,262,263,5,104,0,0,263,264,5,105,0,0,264,265,5,110,0,0,
+        265,266,5,115,0,0,266,267,5,112,0,0,267,268,5,97,0,0,268,269,5,99,
+        0,0,269,271,5,101,0,0,270,255,1,0,0,0,270,257,1,0,0,0,271,272,1,
+        0,0,0,272,273,6,7,0,0,273,16,1,0,0,0,274,275,5,92,0,0,275,276,5,
+        110,0,0,276,277,5,101,0,0,277,278,5,103,0,0,278,279,5,109,0,0,279,
+        280,5,101,0,0,280,281,5,100,0,0,281,282,5,115,0,0,282,283,5,112,
+        0,0,283,284,5,97,0,0,284,285,5,99,0,0,285,286,5,101,0,0,286,287,
+        1,0,0,0,287,288,6,8,0,0,288,18,1,0,0,0,289,290,5,92,0,0,290,291,
+        5,110,0,0,291,292,5,101,0,0,292,293,5,103,0,0,293,294,5,116,0,0,
+        294,295,5,104,0,0,295,296,5,105,0,0,296,297,5,99,0,0,297,298,5,107,
+        0,0,298,299,5,115,0,0,299,300,5,112,0,0,300,301,5,97,0,0,301,302,
+        5,99,0,0,302,303,5,101,0,0,303,304,1,0,0,0,304,305,6,9,0,0,305,20,
+        1,0,0,0,306,307,5,92,0,0,307,308,5,108,0,0,308,309,5,101,0,0,309,
+        310,5,102,0,0,310,311,5,116,0,0,311,312,1,0,0,0,312,313,6,10,0,0,
+        313,22,1,0,0,0,314,315,5,92,0,0,315,316,5,114,0,0,316,317,5,105,
+        0,0,317,318,5,103,0,0,318,319,5,104,0,0,319,320,5,116,0,0,320,321,
+        1,0,0,0,321,322,6,11,0,0,322,24,1,0,0,0,323,324,5,92,0,0,324,325,
+        5,118,0,0,325,326,5,114,0,0,326,327,5,117,0,0,327,328,5,108,0,0,
+        328,375,5,101,0,0,329,330,5,92,0,0,330,331,5,118,0,0,331,332,5,99,
+        0,0,332,333,5,101,0,0,333,334,5,110,0,0,334,335,5,116,0,0,335,336,
+        5,101,0,0,336,375,5,114,0,0,337,338,5,92,0,0,338,339,5,118,0,0,339,
+        340,5,98,0,0,340,341,5,111,0,0,341,375,5,120,0,0,342,343,5,92,0,
+        0,343,344,5,118,0,0,344,345,5,115,0,0,345,346,5,107,0,0,346,347,
+        5,105,0,0,347,375,5,112,0,0,348,349,5,92,0,0,349,350,5,118,0,0,350,
+        351,5,115,0,0,351,352,5,112,0,0,352,353,5,97,0,0,353,354,5,99,0,
+        0,354,375,5,101,0,0,355,356,5,92,0,0,356,357,5,104,0,0,357,358,5,
+        102,0,0,358,359,5,105,0,0,359,375,5,108,0,0,360,361,5,92,0,0,361,
+        375,5,42,0,0,362,363,5,92,0,0,363,375,5,45,0,0,364,365,5,92,0,0,
+        365,375,5,46,0,0,366,367,5,92,0,0,367,375,5,47,0,0,368,369,5,92,
+        0,0,369,375,5,34,0,0,370,371,5,92,0,0,371,375,5,40,0,0,372,373,5,
+        92,0,0,373,375,5,61,0,0,374,323,1,0,0,0,374,329,1,0,0,0,374,337,
+        1,0,0,0,374,342,1,0,0,0,374,348,1,0,0,0,374,355,1,0,0,0,374,360,
+        1,0,0,0,374,362,1,0,0,0,374,364,1,0,0,0,374,366,1,0,0,0,374,368,
+        1,0,0,0,374,370,1,0,0,0,374,372,1,0,0,0,375,376,1,0,0,0,376,377,
+        6,12,0,0,377,26,1,0,0,0,378,379,5,43,0,0,379,28,1,0,0,0,380,381,
+        5,45,0,0,381,30,1,0,0,0,382,383,5,42,0,0,383,32,1,0,0,0,384,385,
+        5,47,0,0,385,34,1,0,0,0,386,387,5,40,0,0,387,36,1,0,0,0,388,389,
+        5,41,0,0,389,38,1,0,0,0,390,391,5,123,0,0,391,40,1,0,0,0,392,393,
+        5,125,0,0,393,42,1,0,0,0,394,395,5,92,0,0,395,396,5,123,0,0,396,
+        44,1,0,0,0,397,398,5,92,0,0,398,399,5,125,0,0,399,46,1,0,0,0,400,
+        401,5,91,0,0,401,48,1,0,0,0,402,403,5,93,0,0,403,50,1,0,0,0,404,
+        405,5,124,0,0,405,52,1,0,0,0,406,407,5,92,0,0,407,408,5,114,0,0,
+        408,409,5,105,0,0,409,410,5,103,0,0,410,411,5,104,0,0,411,412,5,
+        116,0,0,412,413,5,124,0,0,413,54,1,0,0,0,414,415,5,92,0,0,415,416,
+        5,108,0,0,416,417,5,101,0,0,417,418,5,102,0,0,418,419,5,116,0,0,
+        419,420,5,124,0,0,420,56,1,0,0,0,421,422,5,92,0,0,422,423,5,108,
+        0,0,423,424,5,97,0,0,424,425,5,110,0,0,425,426,5,103,0,0,426,427,
+        5,108,0,0,427,428,5,101,0,0,428,58,1,0,0,0,429,430,5,92,0,0,430,
+        431,5,114,0,0,431,432,5,97,0,0,432,433,5,110,0,0,433,434,5,103,0,
+        0,434,435,5,108,0,0,435,436,5,101,0,0,436,60,1,0,0,0,437,438,5,92,
+        0,0,438,439,5,108,0,0,439,440,5,105,0,0,440,441,5,109,0,0,441,62,
+        1,0,0,0,442,443,5,92,0,0,443,444,5,116,0,0,444,498,5,111,0,0,445,
+        446,5,92,0,0,446,447,5,114,0,0,447,448,5,105,0,0,448,449,5,103,0,
+        0,449,450,5,104,0,0,450,451,5,116,0,0,451,452,5,97,0,0,452,453,5,
+        114,0,0,453,454,5,114,0,0,454,455,5,111,0,0,455,498,5,119,0,0,456,
+        457,5,92,0,0,457,458,5,82,0,0,458,459,5,105,0,0,459,460,5,103,0,
+        0,460,461,5,104,0,0,461,462,5,116,0,0,462,463,5,97,0,0,463,464,5,
+        114,0,0,464,465,5,114,0,0,465,466,5,111,0,0,466,498,5,119,0,0,467,
+        468,5,92,0,0,468,469,5,108,0,0,469,470,5,111,0,0,470,471,5,110,0,
+        0,471,472,5,103,0,0,472,473,5,114,0,0,473,474,5,105,0,0,474,475,
+        5,103,0,0,475,476,5,104,0,0,476,477,5,116,0,0,477,478,5,97,0,0,478,
+        479,5,114,0,0,479,480,5,114,0,0,480,481,5,111,0,0,481,498,5,119,
+        0,0,482,483,5,92,0,0,483,484,5,76,0,0,484,485,5,111,0,0,485,486,
+        5,110,0,0,486,487,5,103,0,0,487,488,5,114,0,0,488,489,5,105,0,0,
+        489,490,5,103,0,0,490,491,5,104,0,0,491,492,5,116,0,0,492,493,5,
+        97,0,0,493,494,5,114,0,0,494,495,5,114,0,0,495,496,5,111,0,0,496,
+        498,5,119,0,0,497,442,1,0,0,0,497,445,1,0,0,0,497,456,1,0,0,0,497,
+        467,1,0,0,0,497,482,1,0,0,0,498,64,1,0,0,0,499,500,5,92,0,0,500,
+        501,5,105,0,0,501,502,5,110,0,0,502,503,5,116,0,0,503,66,1,0,0,0,
+        504,505,5,92,0,0,505,506,5,115,0,0,506,507,5,117,0,0,507,508,5,109,
+        0,0,508,68,1,0,0,0,509,510,5,92,0,0,510,511,5,112,0,0,511,512,5,
+        114,0,0,512,513,5,111,0,0,513,514,5,100,0,0,514,70,1,0,0,0,515,516,
+        5,92,0,0,516,517,5,101,0,0,517,518,5,120,0,0,518,519,5,112,0,0,519,
+        72,1,0,0,0,520,521,5,92,0,0,521,522,5,108,0,0,522,523,5,111,0,0,
+        523,524,5,103,0,0,524,74,1,0,0,0,525,526,5,92,0,0,526,527,5,108,
+        0,0,527,528,5,110,0,0,528,76,1,0,0,0,529,530,5,92,0,0,530,531,5,
+        115,0,0,531,532,5,105,0,0,532,533,5,110,0,0,533,78,1,0,0,0,534,535,
+        5,92,0,0,535,536,5,99,0,0,536,537,5,111,0,0,537,538,5,115,0,0,538,
+        80,1,0,0,0,539,540,5,92,0,0,540,541,5,116,0,0,541,542,5,97,0,0,542,
+        543,5,110,0,0,543,82,1,0,0,0,544,545,5,92,0,0,545,546,5,99,0,0,546,
+        547,5,115,0,0,547,548,5,99,0,0,548,84,1,0,0,0,549,550,5,92,0,0,550,
+        551,5,115,0,0,551,552,5,101,0,0,552,553,5,99,0,0,553,86,1,0,0,0,
+        554,555,5,92,0,0,555,556,5,99,0,0,556,557,5,111,0,0,557,558,5,116,
+        0,0,558,88,1,0,0,0,559,560,5,92,0,0,560,561,5,97,0,0,561,562,5,114,
+        0,0,562,563,5,99,0,0,563,564,5,115,0,0,564,565,5,105,0,0,565,566,
+        5,110,0,0,566,90,1,0,0,0,567,568,5,92,0,0,568,569,5,97,0,0,569,570,
+        5,114,0,0,570,571,5,99,0,0,571,572,5,99,0,0,572,573,5,111,0,0,573,
+        574,5,115,0,0,574,92,1,0,0,0,575,576,5,92,0,0,576,577,5,97,0,0,577,
+        578,5,114,0,0,578,579,5,99,0,0,579,580,5,116,0,0,580,581,5,97,0,
+        0,581,582,5,110,0,0,582,94,1,0,0,0,583,584,5,92,0,0,584,585,5,97,
+        0,0,585,586,5,114,0,0,586,587,5,99,0,0,587,588,5,99,0,0,588,589,
+        5,115,0,0,589,590,5,99,0,0,590,96,1,0,0,0,591,592,5,92,0,0,592,593,
+        5,97,0,0,593,594,5,114,0,0,594,595,5,99,0,0,595,596,5,115,0,0,596,
+        597,5,101,0,0,597,598,5,99,0,0,598,98,1,0,0,0,599,600,5,92,0,0,600,
+        601,5,97,0,0,601,602,5,114,0,0,602,603,5,99,0,0,603,604,5,99,0,0,
+        604,605,5,111,0,0,605,606,5,116,0,0,606,100,1,0,0,0,607,608,5,92,
+        0,0,608,609,5,115,0,0,609,610,5,105,0,0,610,611,5,110,0,0,611,612,
+        5,104,0,0,612,102,1,0,0,0,613,614,5,92,0,0,614,615,5,99,0,0,615,
+        616,5,111,0,0,616,617,5,115,0,0,617,618,5,104,0,0,618,104,1,0,0,
+        0,619,620,5,92,0,0,620,621,5,116,0,0,621,622,5,97,0,0,622,623,5,
+        110,0,0,623,624,5,104,0,0,624,106,1,0,0,0,625,626,5,92,0,0,626,627,
+        5,97,0,0,627,628,5,114,0,0,628,629,5,115,0,0,629,630,5,105,0,0,630,
+        631,5,110,0,0,631,632,5,104,0,0,632,108,1,0,0,0,633,634,5,92,0,0,
+        634,635,5,97,0,0,635,636,5,114,0,0,636,637,5,99,0,0,637,638,5,111,
+        0,0,638,639,5,115,0,0,639,640,5,104,0,0,640,110,1,0,0,0,641,642,
+        5,92,0,0,642,643,5,97,0,0,643,644,5,114,0,0,644,645,5,116,0,0,645,
+        646,5,97,0,0,646,647,5,110,0,0,647,648,5,104,0,0,648,112,1,0,0,0,
+        649,650,5,92,0,0,650,651,5,108,0,0,651,652,5,102,0,0,652,653,5,108,
+        0,0,653,654,5,111,0,0,654,655,5,111,0,0,655,656,5,114,0,0,656,114,
+        1,0,0,0,657,658,5,92,0,0,658,659,5,114,0,0,659,660,5,102,0,0,660,
+        661,5,108,0,0,661,662,5,111,0,0,662,663,5,111,0,0,663,664,5,114,
+        0,0,664,116,1,0,0,0,665,666,5,92,0,0,666,667,5,108,0,0,667,668,5,
+        99,0,0,668,669,5,101,0,0,669,670,5,105,0,0,670,671,5,108,0,0,671,
+        118,1,0,0,0,672,673,5,92,0,0,673,674,5,114,0,0,674,675,5,99,0,0,
+        675,676,5,101,0,0,676,677,5,105,0,0,677,678,5,108,0,0,678,120,1,
+        0,0,0,679,680,5,92,0,0,680,681,5,115,0,0,681,682,5,113,0,0,682,683,
+        5,114,0,0,683,684,5,116,0,0,684,122,1,0,0,0,685,686,5,92,0,0,686,
+        687,5,111,0,0,687,688,5,118,0,0,688,689,5,101,0,0,689,690,5,114,
+        0,0,690,691,5,108,0,0,691,692,5,105,0,0,692,693,5,110,0,0,693,694,
+        5,101,0,0,694,124,1,0,0,0,695,696,5,92,0,0,696,697,5,116,0,0,697,
+        698,5,105,0,0,698,699,5,109,0,0,699,700,5,101,0,0,700,701,5,115,
+        0,0,701,126,1,0,0,0,702,703,5,92,0,0,703,704,5,99,0,0,704,705,5,
+        100,0,0,705,706,5,111,0,0,706,707,5,116,0,0,707,128,1,0,0,0,708,
+        709,5,92,0,0,709,710,5,100,0,0,710,711,5,105,0,0,711,712,5,118,0,
+        0,712,130,1,0,0,0,713,714,5,92,0,0,714,715,5,102,0,0,715,716,5,114,
+        0,0,716,717,5,97,0,0,717,718,5,99,0,0,718,132,1,0,0,0,719,720,5,
+        92,0,0,720,721,5,98,0,0,721,722,5,105,0,0,722,723,5,110,0,0,723,
+        724,5,111,0,0,724,725,5,109,0,0,725,134,1,0,0,0,726,727,5,92,0,0,
+        727,728,5,100,0,0,728,729,5,98,0,0,729,730,5,105,0,0,730,731,5,110,
+        0,0,731,732,5,111,0,0,732,733,5,109,0,0,733,136,1,0,0,0,734,735,
+        5,92,0,0,735,736,5,116,0,0,736,737,5,98,0,0,737,738,5,105,0,0,738,
+        739,5,110,0,0,739,740,5,111,0,0,740,741,5,109,0,0,741,138,1,0,0,
+        0,742,743,5,92,0,0,743,744,5,109,0,0,744,745,5,97,0,0,745,746,5,
+        116,0,0,746,747,5,104,0,0,747,748,5,105,0,0,748,749,5,116,0,0,749,
+        140,1,0,0,0,750,751,5,95,0,0,751,142,1,0,0,0,752,753,5,94,0,0,753,
+        144,1,0,0,0,754,755,5,58,0,0,755,146,1,0,0,0,756,757,7,0,0,0,757,
+        148,1,0,0,0,758,762,5,100,0,0,759,761,3,147,73,0,760,759,1,0,0,0,
+        761,764,1,0,0,0,762,763,1,0,0,0,762,760,1,0,0,0,763,772,1,0,0,0,
+        764,762,1,0,0,0,765,773,7,1,0,0,766,768,5,92,0,0,767,769,7,1,0,0,
+        768,767,1,0,0,0,769,770,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,
+        771,773,1,0,0,0,772,765,1,0,0,0,772,766,1,0,0,0,773,150,1,0,0,0,
+        774,775,7,1,0,0,775,152,1,0,0,0,776,777,7,2,0,0,777,154,1,0,0,0,
+        778,780,3,153,76,0,779,778,1,0,0,0,780,781,1,0,0,0,781,779,1,0,0,
+        0,781,782,1,0,0,0,782,790,1,0,0,0,783,784,5,44,0,0,784,785,3,153,
+        76,0,785,786,3,153,76,0,786,787,3,153,76,0,787,789,1,0,0,0,788,783,
+        1,0,0,0,789,792,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,816,
+        1,0,0,0,792,790,1,0,0,0,793,795,3,153,76,0,794,793,1,0,0,0,795,798,
+        1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,806,1,0,0,0,798,796,
+        1,0,0,0,799,800,5,44,0,0,800,801,3,153,76,0,801,802,3,153,76,0,802,
+        803,3,153,76,0,803,805,1,0,0,0,804,799,1,0,0,0,805,808,1,0,0,0,806,
+        804,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,806,1,0,0,0,809,
+        811,5,46,0,0,810,812,3,153,76,0,811,810,1,0,0,0,812,813,1,0,0,0,
+        813,811,1,0,0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,779,1,0,0,0,
+        815,796,1,0,0,0,816,156,1,0,0,0,817,821,5,38,0,0,818,820,3,147,73,
+        0,819,818,1,0,0,0,820,823,1,0,0,0,821,822,1,0,0,0,821,819,1,0,0,
+        0,822,825,1,0,0,0,823,821,1,0,0,0,824,817,1,0,0,0,824,825,1,0,0,
+        0,825,826,1,0,0,0,826,838,5,61,0,0,827,835,5,61,0,0,828,830,3,147,
+        73,0,829,828,1,0,0,0,830,833,1,0,0,0,831,832,1,0,0,0,831,829,1,0,
+        0,0,832,834,1,0,0,0,833,831,1,0,0,0,834,836,5,38,0,0,835,831,1,0,
+        0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,824,1,0,0,0,837,827,1,0,
+        0,0,838,158,1,0,0,0,839,840,5,92,0,0,840,841,5,110,0,0,841,842,5,
+        101,0,0,842,843,5,113,0,0,843,160,1,0,0,0,844,845,5,60,0,0,845,162,
+        1,0,0,0,846,847,5,92,0,0,847,848,5,108,0,0,848,849,5,101,0,0,849,
+        856,5,113,0,0,850,851,5,92,0,0,851,852,5,108,0,0,852,856,5,101,0,
+        0,853,856,3,165,82,0,854,856,3,167,83,0,855,846,1,0,0,0,855,850,
+        1,0,0,0,855,853,1,0,0,0,855,854,1,0,0,0,856,164,1,0,0,0,857,858,
+        5,92,0,0,858,859,5,108,0,0,859,860,5,101,0,0,860,861,5,113,0,0,861,
+        862,5,113,0,0,862,166,1,0,0,0,863,864,5,92,0,0,864,865,5,108,0,0,
+        865,866,5,101,0,0,866,867,5,113,0,0,867,868,5,115,0,0,868,869,5,
+        108,0,0,869,870,5,97,0,0,870,871,5,110,0,0,871,872,5,116,0,0,872,
+        168,1,0,0,0,873,874,5,62,0,0,874,170,1,0,0,0,875,876,5,92,0,0,876,
+        877,5,103,0,0,877,878,5,101,0,0,878,885,5,113,0,0,879,880,5,92,0,
+        0,880,881,5,103,0,0,881,885,5,101,0,0,882,885,3,173,86,0,883,885,
+        3,175,87,0,884,875,1,0,0,0,884,879,1,0,0,0,884,882,1,0,0,0,884,883,
+        1,0,0,0,885,172,1,0,0,0,886,887,5,92,0,0,887,888,5,103,0,0,888,889,
+        5,101,0,0,889,890,5,113,0,0,890,891,5,113,0,0,891,174,1,0,0,0,892,
+        893,5,92,0,0,893,894,5,103,0,0,894,895,5,101,0,0,895,896,5,113,0,
+        0,896,897,5,115,0,0,897,898,5,108,0,0,898,899,5,97,0,0,899,900,5,
+        110,0,0,900,901,5,116,0,0,901,176,1,0,0,0,902,903,5,33,0,0,903,178,
+        1,0,0,0,904,906,5,92,0,0,905,907,7,1,0,0,906,905,1,0,0,0,907,908,
+        1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,180,1,0,0,0,25,0,186,
+        202,217,234,270,374,497,762,770,772,781,790,796,806,813,815,821,
+        824,831,835,837,855,884,908,1,6,0,0
+    ]
+
+class LaTeXLexer(Lexer):
+
+    atn = ATNDeserializer().deserialize(serializedATN())
+
+    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
+
+    T__0 = 1
+    WS = 2
+    THINSPACE = 3
+    MEDSPACE = 4
+    THICKSPACE = 5
+    QUAD = 6
+    QQUAD = 7
+    NEGTHINSPACE = 8
+    NEGMEDSPACE = 9
+    NEGTHICKSPACE = 10
+    CMD_LEFT = 11
+    CMD_RIGHT = 12
+    IGNORE = 13
+    ADD = 14
+    SUB = 15
+    MUL = 16
+    DIV = 17
+    L_PAREN = 18
+    R_PAREN = 19
+    L_BRACE = 20
+    R_BRACE = 21
+    L_BRACE_LITERAL = 22
+    R_BRACE_LITERAL = 23
+    L_BRACKET = 24
+    R_BRACKET = 25
+    BAR = 26
+    R_BAR = 27
+    L_BAR = 28
+    L_ANGLE = 29
+    R_ANGLE = 30
+    FUNC_LIM = 31
+    LIM_APPROACH_SYM = 32
+    FUNC_INT = 33
+    FUNC_SUM = 34
+    FUNC_PROD = 35
+    FUNC_EXP = 36
+    FUNC_LOG = 37
+    FUNC_LN = 38
+    FUNC_SIN = 39
+    FUNC_COS = 40
+    FUNC_TAN = 41
+    FUNC_CSC = 42
+    FUNC_SEC = 43
+    FUNC_COT = 44
+    FUNC_ARCSIN = 45
+    FUNC_ARCCOS = 46
+    FUNC_ARCTAN = 47
+    FUNC_ARCCSC = 48
+    FUNC_ARCSEC = 49
+    FUNC_ARCCOT = 50
+    FUNC_SINH = 51
+    FUNC_COSH = 52
+    FUNC_TANH = 53
+    FUNC_ARSINH = 54
+    FUNC_ARCOSH = 55
+    FUNC_ARTANH = 56
+    L_FLOOR = 57
+    R_FLOOR = 58
+    L_CEIL = 59
+    R_CEIL = 60
+    FUNC_SQRT = 61
+    FUNC_OVERLINE = 62
+    CMD_TIMES = 63
+    CMD_CDOT = 64
+    CMD_DIV = 65
+    CMD_FRAC = 66
+    CMD_BINOM = 67
+    CMD_DBINOM = 68
+    CMD_TBINOM = 69
+    CMD_MATHIT = 70
+    UNDERSCORE = 71
+    CARET = 72
+    COLON = 73
+    DIFFERENTIAL = 74
+    LETTER = 75
+    NUMBER = 76
+    EQUAL = 77
+    NEQ = 78
+    LT = 79
+    LTE = 80
+    LTE_Q = 81
+    LTE_S = 82
+    GT = 83
+    GTE = 84
+    GTE_Q = 85
+    GTE_S = 86
+    BANG = 87
+    SYMBOL = 88
+
+    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]
+
+    modeNames = [ "DEFAULT_MODE" ]
+
+    literalNames = [ "<INVALID>",
+            "','", "'\\quad'", "'\\qquad'", "'\\negmedspace'", "'\\negthickspace'", 
+            "'\\left'", "'\\right'", "'+'", "'-'", "'*'", "'/'", "'('", 
+            "')'", "'{'", "'}'", "'\\{'", "'\\}'", "'['", "']'", "'|'", 
+            "'\\right|'", "'\\left|'", "'\\langle'", "'\\rangle'", "'\\lim'", 
+            "'\\int'", "'\\sum'", "'\\prod'", "'\\exp'", "'\\log'", "'\\ln'", 
+            "'\\sin'", "'\\cos'", "'\\tan'", "'\\csc'", "'\\sec'", "'\\cot'", 
+            "'\\arcsin'", "'\\arccos'", "'\\arctan'", "'\\arccsc'", "'\\arcsec'", 
+            "'\\arccot'", "'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\arsinh'", 
+            "'\\arcosh'", "'\\artanh'", "'\\lfloor'", "'\\rfloor'", "'\\lceil'", 
+            "'\\rceil'", "'\\sqrt'", "'\\overline'", "'\\times'", "'\\cdot'", 
+            "'\\div'", "'\\frac'", "'\\binom'", "'\\dbinom'", "'\\tbinom'", 
+            "'\\mathit'", "'_'", "'^'", "':'", "'\\neq'", "'<'", "'\\leqq'", 
+            "'\\leqslant'", "'>'", "'\\geqq'", "'\\geqslant'", "'!'" ]
+
+    symbolicNames = [ "<INVALID>",
+            "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", "QUAD", "QQUAD", 
+            "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE", "CMD_LEFT", 
+            "CMD_RIGHT", "IGNORE", "ADD", "SUB", "MUL", "DIV", "L_PAREN", 
+            "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL", 
+            "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", "L_BAR", "L_ANGLE", 
+            "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_SUM", 
+            "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", "FUNC_LN", "FUNC_SIN", 
+            "FUNC_COS", "FUNC_TAN", "FUNC_CSC", "FUNC_SEC", "FUNC_COT", 
+            "FUNC_ARCSIN", "FUNC_ARCCOS", "FUNC_ARCTAN", "FUNC_ARCCSC", 
+            "FUNC_ARCSEC", "FUNC_ARCCOT", "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", 
+            "FUNC_ARSINH", "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR", 
+            "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE", "CMD_TIMES", 
+            "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_DBINOM", 
+            "CMD_TBINOM", "CMD_MATHIT", "UNDERSCORE", "CARET", "COLON", 
+            "DIFFERENTIAL", "LETTER", "NUMBER", "EQUAL", "NEQ", "LT", "LTE", 
+            "LTE_Q", "LTE_S", "GT", "GTE", "GTE_Q", "GTE_S", "BANG", "SYMBOL" ]
+
+    ruleNames = [ "T__0", "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", "QUAD", 
+                  "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE", 
+                  "CMD_LEFT", "CMD_RIGHT", "IGNORE", "ADD", "SUB", "MUL", 
+                  "DIV", "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", 
+                  "R_BRACE_LITERAL", "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", 
+                  "L_BAR", "L_ANGLE", "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM", 
+                  "FUNC_INT", "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", 
+                  "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC", 
+                  "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS", 
+                  "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT", 
+                  "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", "FUNC_ARSINH", 
+                  "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR", "L_CEIL", 
+                  "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE", "CMD_TIMES", "CMD_CDOT", 
+                  "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_DBINOM", "CMD_TBINOM", 
+                  "CMD_MATHIT", "UNDERSCORE", "CARET", "COLON", "WS_CHAR", 
+                  "DIFFERENTIAL", "LETTER", "DIGIT", "NUMBER", "EQUAL", 
+                  "NEQ", "LT", "LTE", "LTE_Q", "LTE_S", "GT", "GTE", "GTE_Q", 
+                  "GTE_S", "BANG", "SYMBOL" ]
+
+    grammarFileName = "LaTeX.g4"
+
+    def __init__(self, input=None, output:TextIO = sys.stdout):
+        super().__init__(input, output)
+        self.checkVersion("4.13.1")
+        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
+        self._actions = None
+        self._predicates = None
+
+
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.tokens b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.tokens
new file mode 100644
index 0000000000..2196d34b30
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.tokens
@@ -0,0 +1,162 @@
+T__0=1
+WS=2
+THINSPACE=3
+MEDSPACE=4
+THICKSPACE=5
+QUAD=6
+QQUAD=7
+NEGTHINSPACE=8
+NEGMEDSPACE=9
+NEGTHICKSPACE=10
+CMD_LEFT=11
+CMD_RIGHT=12
+IGNORE=13
+ADD=14
+SUB=15
+MUL=16
+DIV=17
+L_PAREN=18
+R_PAREN=19
+L_BRACE=20
+R_BRACE=21
+L_BRACE_LITERAL=22
+R_BRACE_LITERAL=23
+L_BRACKET=24
+R_BRACKET=25
+BAR=26
+R_BAR=27
+L_BAR=28
+L_ANGLE=29
+R_ANGLE=30
+FUNC_LIM=31
+LIM_APPROACH_SYM=32
+FUNC_INT=33
+FUNC_SUM=34
+FUNC_PROD=35
+FUNC_EXP=36
+FUNC_LOG=37
+FUNC_LN=38
+FUNC_SIN=39
+FUNC_COS=40
+FUNC_TAN=41
+FUNC_CSC=42
+FUNC_SEC=43
+FUNC_COT=44
+FUNC_ARCSIN=45
+FUNC_ARCCOS=46
+FUNC_ARCTAN=47
+FUNC_ARCCSC=48
+FUNC_ARCSEC=49
+FUNC_ARCCOT=50
+FUNC_SINH=51
+FUNC_COSH=52
+FUNC_TANH=53
+FUNC_ARSINH=54
+FUNC_ARCOSH=55
+FUNC_ARTANH=56
+L_FLOOR=57
+R_FLOOR=58
+L_CEIL=59
+R_CEIL=60
+FUNC_SQRT=61
+FUNC_OVERLINE=62
+CMD_TIMES=63
+CMD_CDOT=64
+CMD_DIV=65
+CMD_FRAC=66
+CMD_BINOM=67
+CMD_DBINOM=68
+CMD_TBINOM=69
+CMD_MATHIT=70
+UNDERSCORE=71
+CARET=72
+COLON=73
+DIFFERENTIAL=74
+LETTER=75
+NUMBER=76
+EQUAL=77
+NEQ=78
+LT=79
+LTE=80
+LTE_Q=81
+LTE_S=82
+GT=83
+GTE=84
+GTE_Q=85
+GTE_S=86
+BANG=87
+SYMBOL=88
+','=1
+'\\quad'=6
+'\\qquad'=7
+'\\negmedspace'=9
+'\\negthickspace'=10
+'\\left'=11
+'\\right'=12
+'+'=14
+'-'=15
+'*'=16
+'/'=17
+'('=18
+')'=19
+'{'=20
+'}'=21
+'\\{'=22
+'\\}'=23
+'['=24
+']'=25
+'|'=26
+'\\right|'=27
+'\\left|'=28
+'\\langle'=29
+'\\rangle'=30
+'\\lim'=31
+'\\int'=33
+'\\sum'=34
+'\\prod'=35
+'\\exp'=36
+'\\log'=37
+'\\ln'=38
+'\\sin'=39
+'\\cos'=40
+'\\tan'=41
+'\\csc'=42
+'\\sec'=43
+'\\cot'=44
+'\\arcsin'=45
+'\\arccos'=46
+'\\arctan'=47
+'\\arccsc'=48
+'\\arcsec'=49
+'\\arccot'=50
+'\\sinh'=51
+'\\cosh'=52
+'\\tanh'=53
+'\\arsinh'=54
+'\\arcosh'=55
+'\\artanh'=56
+'\\lfloor'=57
+'\\rfloor'=58
+'\\lceil'=59
+'\\rceil'=60
+'\\sqrt'=61
+'\\overline'=62
+'\\times'=63
+'\\cdot'=64
+'\\div'=65
+'\\frac'=66
+'\\binom'=67
+'\\dbinom'=68
+'\\tbinom'=69
+'\\mathit'=70
+'_'=71
+'^'=72
+':'=73
+'\\neq'=78
+'<'=79
+'\\leqq'=81
+'\\leqslant'=82
+'>'=83
+'\\geqq'=85
+'\\geqslant'=86
+'!'=87
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXListener.py b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXListener.py
new file mode 100644
index 0000000000..f3663c9a65
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXListener.py
@@ -0,0 +1,372 @@
+# Generated from sympy/parsing/latex/LaTeX.g4 by ANTLR 4.13.1
+from antlr4 import *
+if "." in __name__:
+    from .LaTeXParser import LaTeXParser
+else:
+    from LaTeXParser import LaTeXParser
+
+# This class defines a complete listener for a parse tree produced by LaTeXParser.
+class LaTeXListener(ParseTreeListener):
+
+    # Enter a parse tree produced by LaTeXParser#math.
+    def enterMath(self, ctx:LaTeXParser.MathContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#math.
+    def exitMath(self, ctx:LaTeXParser.MathContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#relation.
+    def enterRelation(self, ctx:LaTeXParser.RelationContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#relation.
+    def exitRelation(self, ctx:LaTeXParser.RelationContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#equality.
+    def enterEquality(self, ctx:LaTeXParser.EqualityContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#equality.
+    def exitEquality(self, ctx:LaTeXParser.EqualityContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#expr.
+    def enterExpr(self, ctx:LaTeXParser.ExprContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#expr.
+    def exitExpr(self, ctx:LaTeXParser.ExprContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#additive.
+    def enterAdditive(self, ctx:LaTeXParser.AdditiveContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#additive.
+    def exitAdditive(self, ctx:LaTeXParser.AdditiveContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#mp.
+    def enterMp(self, ctx:LaTeXParser.MpContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#mp.
+    def exitMp(self, ctx:LaTeXParser.MpContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#mp_nofunc.
+    def enterMp_nofunc(self, ctx:LaTeXParser.Mp_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#mp_nofunc.
+    def exitMp_nofunc(self, ctx:LaTeXParser.Mp_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#unary.
+    def enterUnary(self, ctx:LaTeXParser.UnaryContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#unary.
+    def exitUnary(self, ctx:LaTeXParser.UnaryContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#unary_nofunc.
+    def enterUnary_nofunc(self, ctx:LaTeXParser.Unary_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#unary_nofunc.
+    def exitUnary_nofunc(self, ctx:LaTeXParser.Unary_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#postfix.
+    def enterPostfix(self, ctx:LaTeXParser.PostfixContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#postfix.
+    def exitPostfix(self, ctx:LaTeXParser.PostfixContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#postfix_nofunc.
+    def enterPostfix_nofunc(self, ctx:LaTeXParser.Postfix_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#postfix_nofunc.
+    def exitPostfix_nofunc(self, ctx:LaTeXParser.Postfix_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#postfix_op.
+    def enterPostfix_op(self, ctx:LaTeXParser.Postfix_opContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#postfix_op.
+    def exitPostfix_op(self, ctx:LaTeXParser.Postfix_opContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#eval_at.
+    def enterEval_at(self, ctx:LaTeXParser.Eval_atContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#eval_at.
+    def exitEval_at(self, ctx:LaTeXParser.Eval_atContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#eval_at_sub.
+    def enterEval_at_sub(self, ctx:LaTeXParser.Eval_at_subContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#eval_at_sub.
+    def exitEval_at_sub(self, ctx:LaTeXParser.Eval_at_subContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#eval_at_sup.
+    def enterEval_at_sup(self, ctx:LaTeXParser.Eval_at_supContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#eval_at_sup.
+    def exitEval_at_sup(self, ctx:LaTeXParser.Eval_at_supContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#exp.
+    def enterExp(self, ctx:LaTeXParser.ExpContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#exp.
+    def exitExp(self, ctx:LaTeXParser.ExpContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#exp_nofunc.
+    def enterExp_nofunc(self, ctx:LaTeXParser.Exp_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#exp_nofunc.
+    def exitExp_nofunc(self, ctx:LaTeXParser.Exp_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#comp.
+    def enterComp(self, ctx:LaTeXParser.CompContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#comp.
+    def exitComp(self, ctx:LaTeXParser.CompContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#comp_nofunc.
+    def enterComp_nofunc(self, ctx:LaTeXParser.Comp_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#comp_nofunc.
+    def exitComp_nofunc(self, ctx:LaTeXParser.Comp_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#group.
+    def enterGroup(self, ctx:LaTeXParser.GroupContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#group.
+    def exitGroup(self, ctx:LaTeXParser.GroupContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#abs_group.
+    def enterAbs_group(self, ctx:LaTeXParser.Abs_groupContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#abs_group.
+    def exitAbs_group(self, ctx:LaTeXParser.Abs_groupContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#atom.
+    def enterAtom(self, ctx:LaTeXParser.AtomContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#atom.
+    def exitAtom(self, ctx:LaTeXParser.AtomContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#bra.
+    def enterBra(self, ctx:LaTeXParser.BraContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#bra.
+    def exitBra(self, ctx:LaTeXParser.BraContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#ket.
+    def enterKet(self, ctx:LaTeXParser.KetContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#ket.
+    def exitKet(self, ctx:LaTeXParser.KetContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#mathit.
+    def enterMathit(self, ctx:LaTeXParser.MathitContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#mathit.
+    def exitMathit(self, ctx:LaTeXParser.MathitContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#mathit_text.
+    def enterMathit_text(self, ctx:LaTeXParser.Mathit_textContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#mathit_text.
+    def exitMathit_text(self, ctx:LaTeXParser.Mathit_textContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#frac.
+    def enterFrac(self, ctx:LaTeXParser.FracContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#frac.
+    def exitFrac(self, ctx:LaTeXParser.FracContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#binom.
+    def enterBinom(self, ctx:LaTeXParser.BinomContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#binom.
+    def exitBinom(self, ctx:LaTeXParser.BinomContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#floor.
+    def enterFloor(self, ctx:LaTeXParser.FloorContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#floor.
+    def exitFloor(self, ctx:LaTeXParser.FloorContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#ceil.
+    def enterCeil(self, ctx:LaTeXParser.CeilContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#ceil.
+    def exitCeil(self, ctx:LaTeXParser.CeilContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#func_normal.
+    def enterFunc_normal(self, ctx:LaTeXParser.Func_normalContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#func_normal.
+    def exitFunc_normal(self, ctx:LaTeXParser.Func_normalContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#func.
+    def enterFunc(self, ctx:LaTeXParser.FuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#func.
+    def exitFunc(self, ctx:LaTeXParser.FuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#args.
+    def enterArgs(self, ctx:LaTeXParser.ArgsContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#args.
+    def exitArgs(self, ctx:LaTeXParser.ArgsContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#limit_sub.
+    def enterLimit_sub(self, ctx:LaTeXParser.Limit_subContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#limit_sub.
+    def exitLimit_sub(self, ctx:LaTeXParser.Limit_subContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#func_arg.
+    def enterFunc_arg(self, ctx:LaTeXParser.Func_argContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#func_arg.
+    def exitFunc_arg(self, ctx:LaTeXParser.Func_argContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#func_arg_noparens.
+    def enterFunc_arg_noparens(self, ctx:LaTeXParser.Func_arg_noparensContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#func_arg_noparens.
+    def exitFunc_arg_noparens(self, ctx:LaTeXParser.Func_arg_noparensContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#subexpr.
+    def enterSubexpr(self, ctx:LaTeXParser.SubexprContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#subexpr.
+    def exitSubexpr(self, ctx:LaTeXParser.SubexprContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#supexpr.
+    def enterSupexpr(self, ctx:LaTeXParser.SupexprContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#supexpr.
+    def exitSupexpr(self, ctx:LaTeXParser.SupexprContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#subeq.
+    def enterSubeq(self, ctx:LaTeXParser.SubeqContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#subeq.
+    def exitSubeq(self, ctx:LaTeXParser.SubeqContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#supeq.
+    def enterSupeq(self, ctx:LaTeXParser.SupeqContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#supeq.
+    def exitSupeq(self, ctx:LaTeXParser.SupeqContext):
+        pass
+
+
+
+del LaTeXParser
\ No newline at end of file
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXParser.py b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXParser.py
new file mode 100644
index 0000000000..1ee0a2062f
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXParser.py
@@ -0,0 +1,3746 @@
+# Generated from sympy/parsing/latex/LaTeX.g4 by ANTLR 4.13.1
+# encoding: utf-8
+from antlr4 import *
+from io import StringIO
+import sys
+if sys.version_info[1] > 5:
+	from typing import TextIO
+else:
+	from typing.io import TextIO
+
+def serializedATN():
+    return [
+        4,1,88,467,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
+        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
+        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
+        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
+        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
+        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
+        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,5,1,89,8,1,10,1,12,1,92,9,1,1,2,
+        1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,106,8,4,10,4,12,
+        4,109,9,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,117,8,5,10,5,12,5,120,9,5,
+        1,6,1,6,1,6,1,6,1,6,1,6,5,6,128,8,6,10,6,12,6,131,9,6,1,7,1,7,1,
+        7,4,7,136,8,7,11,7,12,7,137,3,7,140,8,7,1,8,1,8,1,8,1,8,5,8,146,
+        8,8,10,8,12,8,149,9,8,3,8,151,8,8,1,9,1,9,5,9,155,8,9,10,9,12,9,
+        158,9,9,1,10,1,10,5,10,162,8,10,10,10,12,10,165,9,10,1,11,1,11,3,
+        11,169,8,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,177,8,12,1,13,1,13,
+        1,13,1,13,3,13,183,8,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,191,8,
+        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
+        15,205,8,15,1,15,3,15,208,8,15,5,15,210,8,15,10,15,12,15,213,9,15,
+        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,225,8,16,
+        1,16,3,16,228,8,16,5,16,230,8,16,10,16,12,16,233,9,16,1,17,1,17,
+        1,17,1,17,1,17,1,17,1,17,1,17,3,17,243,8,17,1,18,1,18,1,18,1,18,
+        1,18,1,18,1,18,3,18,252,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
+        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,270,8,19,1,20,
+        1,20,1,20,1,20,1,21,1,21,3,21,278,8,21,1,21,1,21,1,21,1,21,1,21,
+        3,21,285,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
+        1,24,1,24,1,24,1,25,5,25,301,8,25,10,25,12,25,304,9,25,1,26,1,26,
+        1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
+        1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
+        3,31,334,8,31,1,31,3,31,337,8,31,1,31,3,31,340,8,31,1,31,3,31,343,
+        8,31,3,31,345,8,31,1,31,1,31,1,31,1,31,1,31,3,31,352,8,31,1,31,1,
+        31,3,31,356,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,3,31,369,8,31,1,31,3,31,372,8,31,1,31,1,31,1,31,3,31,377,
+        8,31,1,31,1,31,1,31,1,31,1,31,3,31,384,8,31,1,31,1,31,1,31,1,31,
+        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
+        402,8,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,410,8,31,1,32,1,32,1,
+        32,1,32,1,32,3,32,417,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
+        33,1,33,3,33,428,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,437,
+        8,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,447,8,36,1,37,
+        1,37,1,37,1,37,1,37,1,37,3,37,455,8,37,1,38,1,38,1,38,1,38,1,38,
+        1,39,1,39,1,39,1,39,1,39,1,39,0,6,2,8,10,12,30,32,40,0,2,4,6,8,10,
+        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
+        56,58,60,62,64,66,68,70,72,74,76,78,0,9,2,0,77,80,83,84,1,0,14,15,
+        3,0,16,17,63,65,73,73,2,0,75,75,88,88,1,0,26,27,2,0,26,26,28,28,
+        1,0,67,69,1,0,36,56,1,0,34,35,495,0,80,1,0,0,0,2,82,1,0,0,0,4,93,
+        1,0,0,0,6,97,1,0,0,0,8,99,1,0,0,0,10,110,1,0,0,0,12,121,1,0,0,0,
+        14,139,1,0,0,0,16,150,1,0,0,0,18,152,1,0,0,0,20,159,1,0,0,0,22,168,
+        1,0,0,0,24,170,1,0,0,0,26,178,1,0,0,0,28,186,1,0,0,0,30,194,1,0,
+        0,0,32,214,1,0,0,0,34,242,1,0,0,0,36,251,1,0,0,0,38,269,1,0,0,0,
+        40,271,1,0,0,0,42,284,1,0,0,0,44,286,1,0,0,0,46,290,1,0,0,0,48,294,
+        1,0,0,0,50,302,1,0,0,0,52,305,1,0,0,0,54,313,1,0,0,0,56,321,1,0,
+        0,0,58,325,1,0,0,0,60,329,1,0,0,0,62,409,1,0,0,0,64,416,1,0,0,0,
+        66,418,1,0,0,0,68,436,1,0,0,0,70,438,1,0,0,0,72,440,1,0,0,0,74,448,
+        1,0,0,0,76,456,1,0,0,0,78,461,1,0,0,0,80,81,3,2,1,0,81,1,1,0,0,0,
+        82,83,6,1,-1,0,83,84,3,6,3,0,84,90,1,0,0,0,85,86,10,2,0,0,86,87,
+        7,0,0,0,87,89,3,2,1,3,88,85,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,
+        90,91,1,0,0,0,91,3,1,0,0,0,92,90,1,0,0,0,93,94,3,6,3,0,94,95,5,77,
+        0,0,95,96,3,6,3,0,96,5,1,0,0,0,97,98,3,8,4,0,98,7,1,0,0,0,99,100,
+        6,4,-1,0,100,101,3,10,5,0,101,107,1,0,0,0,102,103,10,2,0,0,103,104,
+        7,1,0,0,104,106,3,8,4,3,105,102,1,0,0,0,106,109,1,0,0,0,107,105,
+        1,0,0,0,107,108,1,0,0,0,108,9,1,0,0,0,109,107,1,0,0,0,110,111,6,
+        5,-1,0,111,112,3,14,7,0,112,118,1,0,0,0,113,114,10,2,0,0,114,115,
+        7,2,0,0,115,117,3,10,5,3,116,113,1,0,0,0,117,120,1,0,0,0,118,116,
+        1,0,0,0,118,119,1,0,0,0,119,11,1,0,0,0,120,118,1,0,0,0,121,122,6,
+        6,-1,0,122,123,3,16,8,0,123,129,1,0,0,0,124,125,10,2,0,0,125,126,
+        7,2,0,0,126,128,3,12,6,3,127,124,1,0,0,0,128,131,1,0,0,0,129,127,
+        1,0,0,0,129,130,1,0,0,0,130,13,1,0,0,0,131,129,1,0,0,0,132,133,7,
+        1,0,0,133,140,3,14,7,0,134,136,3,18,9,0,135,134,1,0,0,0,136,137,
+        1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,132,
+        1,0,0,0,139,135,1,0,0,0,140,15,1,0,0,0,141,142,7,1,0,0,142,151,3,
+        16,8,0,143,147,3,18,9,0,144,146,3,20,10,0,145,144,1,0,0,0,146,149,
+        1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,151,1,0,0,0,149,147,
+        1,0,0,0,150,141,1,0,0,0,150,143,1,0,0,0,151,17,1,0,0,0,152,156,3,
+        30,15,0,153,155,3,22,11,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,
+        1,0,0,0,156,157,1,0,0,0,157,19,1,0,0,0,158,156,1,0,0,0,159,163,3,
+        32,16,0,160,162,3,22,11,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
+        1,0,0,0,163,164,1,0,0,0,164,21,1,0,0,0,165,163,1,0,0,0,166,169,5,
+        87,0,0,167,169,3,24,12,0,168,166,1,0,0,0,168,167,1,0,0,0,169,23,
+        1,0,0,0,170,176,5,26,0,0,171,177,3,28,14,0,172,177,3,26,13,0,173,
+        174,3,28,14,0,174,175,3,26,13,0,175,177,1,0,0,0,176,171,1,0,0,0,
+        176,172,1,0,0,0,176,173,1,0,0,0,177,25,1,0,0,0,178,179,5,71,0,0,
+        179,182,5,20,0,0,180,183,3,6,3,0,181,183,3,4,2,0,182,180,1,0,0,0,
+        182,181,1,0,0,0,183,184,1,0,0,0,184,185,5,21,0,0,185,27,1,0,0,0,
+        186,187,5,72,0,0,187,190,5,20,0,0,188,191,3,6,3,0,189,191,3,4,2,
+        0,190,188,1,0,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,193,5,21,0,
+        0,193,29,1,0,0,0,194,195,6,15,-1,0,195,196,3,34,17,0,196,211,1,0,
+        0,0,197,198,10,2,0,0,198,204,5,72,0,0,199,205,3,42,21,0,200,201,
+        5,20,0,0,201,202,3,6,3,0,202,203,5,21,0,0,203,205,1,0,0,0,204,199,
+        1,0,0,0,204,200,1,0,0,0,205,207,1,0,0,0,206,208,3,72,36,0,207,206,
+        1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,197,1,0,0,0,210,213,
+        1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,31,1,0,0,0,213,211,1,
+        0,0,0,214,215,6,16,-1,0,215,216,3,36,18,0,216,231,1,0,0,0,217,218,
+        10,2,0,0,218,224,5,72,0,0,219,225,3,42,21,0,220,221,5,20,0,0,221,
+        222,3,6,3,0,222,223,5,21,0,0,223,225,1,0,0,0,224,219,1,0,0,0,224,
+        220,1,0,0,0,225,227,1,0,0,0,226,228,3,72,36,0,227,226,1,0,0,0,227,
+        228,1,0,0,0,228,230,1,0,0,0,229,217,1,0,0,0,230,233,1,0,0,0,231,
+        229,1,0,0,0,231,232,1,0,0,0,232,33,1,0,0,0,233,231,1,0,0,0,234,243,
+        3,38,19,0,235,243,3,40,20,0,236,243,3,62,31,0,237,243,3,42,21,0,
+        238,243,3,52,26,0,239,243,3,54,27,0,240,243,3,56,28,0,241,243,3,
+        58,29,0,242,234,1,0,0,0,242,235,1,0,0,0,242,236,1,0,0,0,242,237,
+        1,0,0,0,242,238,1,0,0,0,242,239,1,0,0,0,242,240,1,0,0,0,242,241,
+        1,0,0,0,243,35,1,0,0,0,244,252,3,38,19,0,245,252,3,40,20,0,246,252,
+        3,42,21,0,247,252,3,52,26,0,248,252,3,54,27,0,249,252,3,56,28,0,
+        250,252,3,58,29,0,251,244,1,0,0,0,251,245,1,0,0,0,251,246,1,0,0,
+        0,251,247,1,0,0,0,251,248,1,0,0,0,251,249,1,0,0,0,251,250,1,0,0,
+        0,252,37,1,0,0,0,253,254,5,18,0,0,254,255,3,6,3,0,255,256,5,19,0,
+        0,256,270,1,0,0,0,257,258,5,24,0,0,258,259,3,6,3,0,259,260,5,25,
+        0,0,260,270,1,0,0,0,261,262,5,20,0,0,262,263,3,6,3,0,263,264,5,21,
+        0,0,264,270,1,0,0,0,265,266,5,22,0,0,266,267,3,6,3,0,267,268,5,23,
+        0,0,268,270,1,0,0,0,269,253,1,0,0,0,269,257,1,0,0,0,269,261,1,0,
+        0,0,269,265,1,0,0,0,270,39,1,0,0,0,271,272,5,26,0,0,272,273,3,6,
+        3,0,273,274,5,26,0,0,274,41,1,0,0,0,275,277,7,3,0,0,276,278,3,72,
+        36,0,277,276,1,0,0,0,277,278,1,0,0,0,278,285,1,0,0,0,279,285,5,76,
+        0,0,280,285,5,74,0,0,281,285,3,48,24,0,282,285,3,44,22,0,283,285,
+        3,46,23,0,284,275,1,0,0,0,284,279,1,0,0,0,284,280,1,0,0,0,284,281,
+        1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,43,1,0,0,0,286,287,5,
+        29,0,0,287,288,3,6,3,0,288,289,7,4,0,0,289,45,1,0,0,0,290,291,7,
+        5,0,0,291,292,3,6,3,0,292,293,5,30,0,0,293,47,1,0,0,0,294,295,5,
+        70,0,0,295,296,5,20,0,0,296,297,3,50,25,0,297,298,5,21,0,0,298,49,
+        1,0,0,0,299,301,5,75,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,
+        1,0,0,0,302,303,1,0,0,0,303,51,1,0,0,0,304,302,1,0,0,0,305,306,5,
+        66,0,0,306,307,5,20,0,0,307,308,3,6,3,0,308,309,5,21,0,0,309,310,
+        5,20,0,0,310,311,3,6,3,0,311,312,5,21,0,0,312,53,1,0,0,0,313,314,
+        7,6,0,0,314,315,5,20,0,0,315,316,3,6,3,0,316,317,5,21,0,0,317,318,
+        5,20,0,0,318,319,3,6,3,0,319,320,5,21,0,0,320,55,1,0,0,0,321,322,
+        5,57,0,0,322,323,3,6,3,0,323,324,5,58,0,0,324,57,1,0,0,0,325,326,
+        5,59,0,0,326,327,3,6,3,0,327,328,5,60,0,0,328,59,1,0,0,0,329,330,
+        7,7,0,0,330,61,1,0,0,0,331,344,3,60,30,0,332,334,3,72,36,0,333,332,
+        1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,3,74,37,0,336,335,
+        1,0,0,0,336,337,1,0,0,0,337,345,1,0,0,0,338,340,3,74,37,0,339,338,
+        1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,343,3,72,36,0,342,341,
+        1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,333,1,0,0,0,344,339,
+        1,0,0,0,345,351,1,0,0,0,346,347,5,18,0,0,347,348,3,68,34,0,348,349,
+        5,19,0,0,349,352,1,0,0,0,350,352,3,70,35,0,351,346,1,0,0,0,351,350,
+        1,0,0,0,352,410,1,0,0,0,353,355,7,3,0,0,354,356,3,72,36,0,355,354,
+        1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,18,0,0,358,359,
+        3,64,32,0,359,360,5,19,0,0,360,410,1,0,0,0,361,368,5,33,0,0,362,
+        363,3,72,36,0,363,364,3,74,37,0,364,369,1,0,0,0,365,366,3,74,37,
+        0,366,367,3,72,36,0,367,369,1,0,0,0,368,362,1,0,0,0,368,365,1,0,
+        0,0,368,369,1,0,0,0,369,376,1,0,0,0,370,372,3,8,4,0,371,370,1,0,
+        0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,377,5,74,0,0,374,377,3,52,
+        26,0,375,377,3,8,4,0,376,371,1,0,0,0,376,374,1,0,0,0,376,375,1,0,
+        0,0,377,410,1,0,0,0,378,383,5,61,0,0,379,380,5,24,0,0,380,381,3,
+        6,3,0,381,382,5,25,0,0,382,384,1,0,0,0,383,379,1,0,0,0,383,384,1,
+        0,0,0,384,385,1,0,0,0,385,386,5,20,0,0,386,387,3,6,3,0,387,388,5,
+        21,0,0,388,410,1,0,0,0,389,390,5,62,0,0,390,391,5,20,0,0,391,392,
+        3,6,3,0,392,393,5,21,0,0,393,410,1,0,0,0,394,401,7,8,0,0,395,396,
+        3,76,38,0,396,397,3,74,37,0,397,402,1,0,0,0,398,399,3,74,37,0,399,
+        400,3,76,38,0,400,402,1,0,0,0,401,395,1,0,0,0,401,398,1,0,0,0,402,
+        403,1,0,0,0,403,404,3,10,5,0,404,410,1,0,0,0,405,406,5,31,0,0,406,
+        407,3,66,33,0,407,408,3,10,5,0,408,410,1,0,0,0,409,331,1,0,0,0,409,
+        353,1,0,0,0,409,361,1,0,0,0,409,378,1,0,0,0,409,389,1,0,0,0,409,
+        394,1,0,0,0,409,405,1,0,0,0,410,63,1,0,0,0,411,412,3,6,3,0,412,413,
+        5,1,0,0,413,414,3,64,32,0,414,417,1,0,0,0,415,417,3,6,3,0,416,411,
+        1,0,0,0,416,415,1,0,0,0,417,65,1,0,0,0,418,419,5,71,0,0,419,420,
+        5,20,0,0,420,421,7,3,0,0,421,422,5,32,0,0,422,427,3,6,3,0,423,424,
+        5,72,0,0,424,425,5,20,0,0,425,426,7,1,0,0,426,428,5,21,0,0,427,423,
+        1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,430,5,21,0,0,430,67,
+        1,0,0,0,431,437,3,6,3,0,432,433,3,6,3,0,433,434,5,1,0,0,434,435,
+        3,68,34,0,435,437,1,0,0,0,436,431,1,0,0,0,436,432,1,0,0,0,437,69,
+        1,0,0,0,438,439,3,12,6,0,439,71,1,0,0,0,440,446,5,71,0,0,441,447,
+        3,42,21,0,442,443,5,20,0,0,443,444,3,6,3,0,444,445,5,21,0,0,445,
+        447,1,0,0,0,446,441,1,0,0,0,446,442,1,0,0,0,447,73,1,0,0,0,448,454,
+        5,72,0,0,449,455,3,42,21,0,450,451,5,20,0,0,451,452,3,6,3,0,452,
+        453,5,21,0,0,453,455,1,0,0,0,454,449,1,0,0,0,454,450,1,0,0,0,455,
+        75,1,0,0,0,456,457,5,71,0,0,457,458,5,20,0,0,458,459,3,4,2,0,459,
+        460,5,21,0,0,460,77,1,0,0,0,461,462,5,71,0,0,462,463,5,20,0,0,463,
+        464,3,4,2,0,464,465,5,21,0,0,465,79,1,0,0,0,44,90,107,118,129,137,
+        139,147,150,156,163,168,176,182,190,204,207,211,224,227,231,242,
+        251,269,277,284,302,333,336,339,342,344,351,355,368,371,376,383,
+        401,409,416,427,436,446,454
+    ]
+
+class LaTeXParser ( Parser ):
+
+    grammarFileName = "LaTeX.g4"
+
+    atn = ATNDeserializer().deserialize(serializedATN())
+
+    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
+
+    sharedContextCache = PredictionContextCache()
+
+    literalNames = [ "<INVALID>", "','", "<INVALID>", "<INVALID>", "<INVALID>", 
+                     "<INVALID>", "'\\quad'", "'\\qquad'", "<INVALID>", 
+                     "'\\negmedspace'", "'\\negthickspace'", "'\\left'", 
+                     "'\\right'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", 
+                     "'('", "')'", "'{'", "'}'", "'\\{'", "'\\}'", "'['", 
+                     "']'", "'|'", "'\\right|'", "'\\left|'", "'\\langle'", 
+                     "'\\rangle'", "'\\lim'", "<INVALID>", "'\\int'", "'\\sum'", 
+                     "'\\prod'", "'\\exp'", "'\\log'", "'\\ln'", "'\\sin'", 
+                     "'\\cos'", "'\\tan'", "'\\csc'", "'\\sec'", "'\\cot'", 
+                     "'\\arcsin'", "'\\arccos'", "'\\arctan'", "'\\arccsc'", 
+                     "'\\arcsec'", "'\\arccot'", "'\\sinh'", "'\\cosh'", 
+                     "'\\tanh'", "'\\arsinh'", "'\\arcosh'", "'\\artanh'", 
+                     "'\\lfloor'", "'\\rfloor'", "'\\lceil'", "'\\rceil'", 
+                     "'\\sqrt'", "'\\overline'", "'\\times'", "'\\cdot'", 
+                     "'\\div'", "'\\frac'", "'\\binom'", "'\\dbinom'", "'\\tbinom'", 
+                     "'\\mathit'", "'_'", "'^'", "':'", "<INVALID>", "<INVALID>", 
+                     "<INVALID>", "<INVALID>", "'\\neq'", "'<'", "<INVALID>", 
+                     "'\\leqq'", "'\\leqslant'", "'>'", "<INVALID>", "'\\geqq'", 
+                     "'\\geqslant'", "'!'" ]
+
+    symbolicNames = [ "<INVALID>", "<INVALID>", "WS", "THINSPACE", "MEDSPACE", 
+                      "THICKSPACE", "QUAD", "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE", 
+                      "NEGTHICKSPACE", "CMD_LEFT", "CMD_RIGHT", "IGNORE", 
+                      "ADD", "SUB", "MUL", "DIV", "L_PAREN", "R_PAREN", 
+                      "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL", 
+                      "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", "L_BAR", 
+                      "L_ANGLE", "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM", 
+                      "FUNC_INT", "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", 
+                      "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC", 
+                      "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS", 
+                      "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT", 
+                      "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", "FUNC_ARSINH", 
+                      "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR", 
+                      "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE", 
+                      "CMD_TIMES", "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM", 
+                      "CMD_DBINOM", "CMD_TBINOM", "CMD_MATHIT", "UNDERSCORE", 
+                      "CARET", "COLON", "DIFFERENTIAL", "LETTER", "NUMBER", 
+                      "EQUAL", "NEQ", "LT", "LTE", "LTE_Q", "LTE_S", "GT", 
+                      "GTE", "GTE_Q", "GTE_S", "BANG", "SYMBOL" ]
+
+    RULE_math = 0
+    RULE_relation = 1
+    RULE_equality = 2
+    RULE_expr = 3
+    RULE_additive = 4
+    RULE_mp = 5
+    RULE_mp_nofunc = 6
+    RULE_unary = 7
+    RULE_unary_nofunc = 8
+    RULE_postfix = 9
+    RULE_postfix_nofunc = 10
+    RULE_postfix_op = 11
+    RULE_eval_at = 12
+    RULE_eval_at_sub = 13
+    RULE_eval_at_sup = 14
+    RULE_exp = 15
+    RULE_exp_nofunc = 16
+    RULE_comp = 17
+    RULE_comp_nofunc = 18
+    RULE_group = 19
+    RULE_abs_group = 20
+    RULE_atom = 21
+    RULE_bra = 22
+    RULE_ket = 23
+    RULE_mathit = 24
+    RULE_mathit_text = 25
+    RULE_frac = 26
+    RULE_binom = 27
+    RULE_floor = 28
+    RULE_ceil = 29
+    RULE_func_normal = 30
+    RULE_func = 31
+    RULE_args = 32
+    RULE_limit_sub = 33
+    RULE_func_arg = 34
+    RULE_func_arg_noparens = 35
+    RULE_subexpr = 36
+    RULE_supexpr = 37
+    RULE_subeq = 38
+    RULE_supeq = 39
+
+    ruleNames =  [ "math", "relation", "equality", "expr", "additive", "mp", 
+                   "mp_nofunc", "unary", "unary_nofunc", "postfix", "postfix_nofunc", 
+                   "postfix_op", "eval_at", "eval_at_sub", "eval_at_sup", 
+                   "exp", "exp_nofunc", "comp", "comp_nofunc", "group", 
+                   "abs_group", "atom", "bra", "ket", "mathit", "mathit_text", 
+                   "frac", "binom", "floor", "ceil", "func_normal", "func", 
+                   "args", "limit_sub", "func_arg", "func_arg_noparens", 
+                   "subexpr", "supexpr", "subeq", "supeq" ]
+
+    EOF = Token.EOF
+    T__0=1
+    WS=2
+    THINSPACE=3
+    MEDSPACE=4
+    THICKSPACE=5
+    QUAD=6
+    QQUAD=7
+    NEGTHINSPACE=8
+    NEGMEDSPACE=9
+    NEGTHICKSPACE=10
+    CMD_LEFT=11
+    CMD_RIGHT=12
+    IGNORE=13
+    ADD=14
+    SUB=15
+    MUL=16
+    DIV=17
+    L_PAREN=18
+    R_PAREN=19
+    L_BRACE=20
+    R_BRACE=21
+    L_BRACE_LITERAL=22
+    R_BRACE_LITERAL=23
+    L_BRACKET=24
+    R_BRACKET=25
+    BAR=26
+    R_BAR=27
+    L_BAR=28
+    L_ANGLE=29
+    R_ANGLE=30
+    FUNC_LIM=31
+    LIM_APPROACH_SYM=32
+    FUNC_INT=33
+    FUNC_SUM=34
+    FUNC_PROD=35
+    FUNC_EXP=36
+    FUNC_LOG=37
+    FUNC_LN=38
+    FUNC_SIN=39
+    FUNC_COS=40
+    FUNC_TAN=41
+    FUNC_CSC=42
+    FUNC_SEC=43
+    FUNC_COT=44
+    FUNC_ARCSIN=45
+    FUNC_ARCCOS=46
+    FUNC_ARCTAN=47
+    FUNC_ARCCSC=48
+    FUNC_ARCSEC=49
+    FUNC_ARCCOT=50
+    FUNC_SINH=51
+    FUNC_COSH=52
+    FUNC_TANH=53
+    FUNC_ARSINH=54
+    FUNC_ARCOSH=55
+    FUNC_ARTANH=56
+    L_FLOOR=57
+    R_FLOOR=58
+    L_CEIL=59
+    R_CEIL=60
+    FUNC_SQRT=61
+    FUNC_OVERLINE=62
+    CMD_TIMES=63
+    CMD_CDOT=64
+    CMD_DIV=65
+    CMD_FRAC=66
+    CMD_BINOM=67
+    CMD_DBINOM=68
+    CMD_TBINOM=69
+    CMD_MATHIT=70
+    UNDERSCORE=71
+    CARET=72
+    COLON=73
+    DIFFERENTIAL=74
+    LETTER=75
+    NUMBER=76
+    EQUAL=77
+    NEQ=78
+    LT=79
+    LTE=80
+    LTE_Q=81
+    LTE_S=82
+    GT=83
+    GTE=84
+    GTE_Q=85
+    GTE_S=86
+    BANG=87
+    SYMBOL=88
+
+    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
+        super().__init__(input, output)
+        self.checkVersion("4.13.1")
+        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
+        self._predicates = None
+
+
+
+
+    class MathContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def relation(self):
+            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_math
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMath" ):
+                listener.enterMath(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMath" ):
+                listener.exitMath(self)
+
+
+
+
+    def math(self):
+
+        localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 0, self.RULE_math)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 80
+            self.relation(0)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class RelationContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def relation(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)
+
+
+        def EQUAL(self):
+            return self.getToken(LaTeXParser.EQUAL, 0)
+
+        def LT(self):
+            return self.getToken(LaTeXParser.LT, 0)
+
+        def LTE(self):
+            return self.getToken(LaTeXParser.LTE, 0)
+
+        def GT(self):
+            return self.getToken(LaTeXParser.GT, 0)
+
+        def GTE(self):
+            return self.getToken(LaTeXParser.GTE, 0)
+
+        def NEQ(self):
+            return self.getToken(LaTeXParser.NEQ, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_relation
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterRelation" ):
+                listener.enterRelation(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitRelation" ):
+                listener.exitRelation(self)
+
+
+
+    def relation(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 2
+        self.enterRecursionRule(localctx, 2, self.RULE_relation, _p)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 83
+            self.expr()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 90
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
+                    self.state = 85
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 86
+                    _la = self._input.LA(1)
+                    if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 207) != 0)):
+                        self._errHandler.recoverInline(self)
+                    else:
+                        self._errHandler.reportMatch(self)
+                        self.consume()
+                    self.state = 87
+                    self.relation(3) 
+                self.state = 92
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class EqualityContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
+
+
+        def EQUAL(self):
+            return self.getToken(LaTeXParser.EQUAL, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_equality
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterEquality" ):
+                listener.enterEquality(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitEquality" ):
+                listener.exitEquality(self)
+
+
+
+
+    def equality(self):
+
+        localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 4, self.RULE_equality)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 93
+            self.expr()
+            self.state = 94
+            self.match(LaTeXParser.EQUAL)
+            self.state = 95
+            self.expr()
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class ExprContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def additive(self):
+            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_expr
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterExpr" ):
+                listener.enterExpr(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitExpr" ):
+                listener.exitExpr(self)
+
+
+
+
+    def expr(self):
+
+        localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 6, self.RULE_expr)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 97
+            self.additive(0)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class AdditiveContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def mp(self):
+            return self.getTypedRuleContext(LaTeXParser.MpContext,0)
+
+
+        def additive(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)
+
+
+        def ADD(self):
+            return self.getToken(LaTeXParser.ADD, 0)
+
+        def SUB(self):
+            return self.getToken(LaTeXParser.SUB, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_additive
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterAdditive" ):
+                listener.enterAdditive(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitAdditive" ):
+                listener.exitAdditive(self)
+
+
+
+    def additive(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 8
+        self.enterRecursionRule(localctx, 8, self.RULE_additive, _p)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 100
+            self.mp(0)
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 107
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
+                    self.state = 102
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 103
+                    _la = self._input.LA(1)
+                    if not(_la==14 or _la==15):
+                        self._errHandler.recoverInline(self)
+                    else:
+                        self._errHandler.reportMatch(self)
+                        self.consume()
+                    self.state = 104
+                    self.additive(3) 
+                self.state = 109
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class MpContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def unary(self):
+            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
+
+
+        def mp(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.MpContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.MpContext,i)
+
+
+        def MUL(self):
+            return self.getToken(LaTeXParser.MUL, 0)
+
+        def CMD_TIMES(self):
+            return self.getToken(LaTeXParser.CMD_TIMES, 0)
+
+        def CMD_CDOT(self):
+            return self.getToken(LaTeXParser.CMD_CDOT, 0)
+
+        def DIV(self):
+            return self.getToken(LaTeXParser.DIV, 0)
+
+        def CMD_DIV(self):
+            return self.getToken(LaTeXParser.CMD_DIV, 0)
+
+        def COLON(self):
+            return self.getToken(LaTeXParser.COLON, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_mp
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMp" ):
+                listener.enterMp(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMp" ):
+                listener.exitMp(self)
+
+
+
+    def mp(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 10
+        self.enterRecursionRule(localctx, 10, self.RULE_mp, _p)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 111
+            self.unary()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 118
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
+                    self.state = 113
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 114
+                    _la = self._input.LA(1)
+                    if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 145100350494343171) != 0)):
+                        self._errHandler.recoverInline(self)
+                    else:
+                        self._errHandler.reportMatch(self)
+                        self.consume()
+                    self.state = 115
+                    self.mp(3) 
+                self.state = 120
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class Mp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def unary_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
+
+
+        def mp_nofunc(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)
+
+
+        def MUL(self):
+            return self.getToken(LaTeXParser.MUL, 0)
+
+        def CMD_TIMES(self):
+            return self.getToken(LaTeXParser.CMD_TIMES, 0)
+
+        def CMD_CDOT(self):
+            return self.getToken(LaTeXParser.CMD_CDOT, 0)
+
+        def DIV(self):
+            return self.getToken(LaTeXParser.DIV, 0)
+
+        def CMD_DIV(self):
+            return self.getToken(LaTeXParser.CMD_DIV, 0)
+
+        def COLON(self):
+            return self.getToken(LaTeXParser.COLON, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_mp_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMp_nofunc" ):
+                listener.enterMp_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMp_nofunc" ):
+                listener.exitMp_nofunc(self)
+
+
+
+    def mp_nofunc(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 12
+        self.enterRecursionRule(localctx, 12, self.RULE_mp_nofunc, _p)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 122
+            self.unary_nofunc()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 129
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
+                    self.state = 124
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 125
+                    _la = self._input.LA(1)
+                    if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 145100350494343171) != 0)):
+                        self._errHandler.recoverInline(self)
+                    else:
+                        self._errHandler.reportMatch(self)
+                        self.consume()
+                    self.state = 126
+                    self.mp_nofunc(3) 
+                self.state = 131
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class UnaryContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def unary(self):
+            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
+
+
+        def ADD(self):
+            return self.getToken(LaTeXParser.ADD, 0)
+
+        def SUB(self):
+            return self.getToken(LaTeXParser.SUB, 0)
+
+        def postfix(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_unary
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterUnary" ):
+                listener.enterUnary(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitUnary" ):
+                listener.exitUnary(self)
+
+
+
+
+    def unary(self):
+
+        localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 14, self.RULE_unary)
+        self._la = 0 # Token type
+        try:
+            self.state = 139
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [14, 15]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 132
+                _la = self._input.LA(1)
+                if not(_la==14 or _la==15):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 133
+                self.unary()
+                pass
+            elif token in [18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 135 
+                self._errHandler.sync(self)
+                _alt = 1
+                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                    if _alt == 1:
+                        self.state = 134
+                        self.postfix()
+
+                    else:
+                        raise NoViableAltException(self)
+                    self.state = 137 
+                    self._errHandler.sync(self)
+                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
+
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Unary_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def unary_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
+
+
+        def ADD(self):
+            return self.getToken(LaTeXParser.ADD, 0)
+
+        def SUB(self):
+            return self.getToken(LaTeXParser.SUB, 0)
+
+        def postfix(self):
+            return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)
+
+
+        def postfix_nofunc(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_unary_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterUnary_nofunc" ):
+                listener.enterUnary_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitUnary_nofunc" ):
+                listener.exitUnary_nofunc(self)
+
+
+
+
+    def unary_nofunc(self):
+
+        localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 16, self.RULE_unary_nofunc)
+        self._la = 0 # Token type
+        try:
+            self.state = 150
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [14, 15]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 141
+                _la = self._input.LA(1)
+                if not(_la==14 or _la==15):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 142
+                self.unary_nofunc()
+                pass
+            elif token in [18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 143
+                self.postfix()
+                self.state = 147
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
+                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                    if _alt==1:
+                        self.state = 144
+                        self.postfix_nofunc() 
+                    self.state = 149
+                    self._errHandler.sync(self)
+                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
+
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class PostfixContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def exp(self):
+            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
+
+
+        def postfix_op(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_postfix
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterPostfix" ):
+                listener.enterPostfix(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitPostfix" ):
+                listener.exitPostfix(self)
+
+
+
+
+    def postfix(self):
+
+        localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 18, self.RULE_postfix)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 152
+            self.exp(0)
+            self.state = 156
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    self.state = 153
+                    self.postfix_op() 
+                self.state = 158
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Postfix_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def exp_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
+
+
+        def postfix_op(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_postfix_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterPostfix_nofunc" ):
+                listener.enterPostfix_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitPostfix_nofunc" ):
+                listener.exitPostfix_nofunc(self)
+
+
+
+
+    def postfix_nofunc(self):
+
+        localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 20, self.RULE_postfix_nofunc)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 159
+            self.exp_nofunc(0)
+            self.state = 163
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    self.state = 160
+                    self.postfix_op() 
+                self.state = 165
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Postfix_opContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def BANG(self):
+            return self.getToken(LaTeXParser.BANG, 0)
+
+        def eval_at(self):
+            return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_postfix_op
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterPostfix_op" ):
+                listener.enterPostfix_op(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitPostfix_op" ):
+                listener.exitPostfix_op(self)
+
+
+
+
+    def postfix_op(self):
+
+        localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 22, self.RULE_postfix_op)
+        try:
+            self.state = 168
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [87]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 166
+                self.match(LaTeXParser.BANG)
+                pass
+            elif token in [26]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 167
+                self.eval_at()
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Eval_atContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def BAR(self):
+            return self.getToken(LaTeXParser.BAR, 0)
+
+        def eval_at_sup(self):
+            return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)
+
+
+        def eval_at_sub(self):
+            return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_eval_at
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterEval_at" ):
+                listener.enterEval_at(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitEval_at" ):
+                listener.exitEval_at(self)
+
+
+
+
+    def eval_at(self):
+
+        localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 24, self.RULE_eval_at)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 170
+            self.match(LaTeXParser.BAR)
+            self.state = 176
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
+            if la_ == 1:
+                self.state = 171
+                self.eval_at_sup()
+                pass
+
+            elif la_ == 2:
+                self.state = 172
+                self.eval_at_sub()
+                pass
+
+            elif la_ == 3:
+                self.state = 173
+                self.eval_at_sup()
+                self.state = 174
+                self.eval_at_sub()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Eval_at_subContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def equality(self):
+            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_eval_at_sub
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterEval_at_sub" ):
+                listener.enterEval_at_sub(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitEval_at_sub" ):
+                listener.exitEval_at_sub(self)
+
+
+
+
+    def eval_at_sub(self):
+
+        localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 26, self.RULE_eval_at_sub)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 178
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 179
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 182
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
+            if la_ == 1:
+                self.state = 180
+                self.expr()
+                pass
+
+            elif la_ == 2:
+                self.state = 181
+                self.equality()
+                pass
+
+
+            self.state = 184
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Eval_at_supContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def equality(self):
+            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_eval_at_sup
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterEval_at_sup" ):
+                listener.enterEval_at_sup(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitEval_at_sup" ):
+                listener.exitEval_at_sup(self)
+
+
+
+
+    def eval_at_sup(self):
+
+        localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 28, self.RULE_eval_at_sup)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 186
+            self.match(LaTeXParser.CARET)
+            self.state = 187
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 190
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
+            if la_ == 1:
+                self.state = 188
+                self.expr()
+                pass
+
+            elif la_ == 2:
+                self.state = 189
+                self.equality()
+                pass
+
+
+            self.state = 192
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class ExpContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def comp(self):
+            return self.getTypedRuleContext(LaTeXParser.CompContext,0)
+
+
+        def exp(self):
+            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
+
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def subexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_exp
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterExp" ):
+                listener.enterExp(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitExp" ):
+                listener.exitExp(self)
+
+
+
+    def exp(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 30
+        self.enterRecursionRule(localctx, 30, self.RULE_exp, _p)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 195
+            self.comp()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 211
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
+                    self.state = 197
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 198
+                    self.match(LaTeXParser.CARET)
+                    self.state = 204
+                    self._errHandler.sync(self)
+                    token = self._input.LA(1)
+                    if token in [26, 28, 29, 70, 74, 75, 76, 88]:
+                        self.state = 199
+                        self.atom()
+                        pass
+                    elif token in [20]:
+                        self.state = 200
+                        self.match(LaTeXParser.L_BRACE)
+                        self.state = 201
+                        self.expr()
+                        self.state = 202
+                        self.match(LaTeXParser.R_BRACE)
+                        pass
+                    else:
+                        raise NoViableAltException(self)
+
+                    self.state = 207
+                    self._errHandler.sync(self)
+                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
+                    if la_ == 1:
+                        self.state = 206
+                        self.subexpr()
+
+             
+                self.state = 213
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class Exp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def comp_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)
+
+
+        def exp_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
+
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def subexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_exp_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterExp_nofunc" ):
+                listener.enterExp_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitExp_nofunc" ):
+                listener.exitExp_nofunc(self)
+
+
+
+    def exp_nofunc(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 32
+        self.enterRecursionRule(localctx, 32, self.RULE_exp_nofunc, _p)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 215
+            self.comp_nofunc()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 231
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
+                    self.state = 217
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 218
+                    self.match(LaTeXParser.CARET)
+                    self.state = 224
+                    self._errHandler.sync(self)
+                    token = self._input.LA(1)
+                    if token in [26, 28, 29, 70, 74, 75, 76, 88]:
+                        self.state = 219
+                        self.atom()
+                        pass
+                    elif token in [20]:
+                        self.state = 220
+                        self.match(LaTeXParser.L_BRACE)
+                        self.state = 221
+                        self.expr()
+                        self.state = 222
+                        self.match(LaTeXParser.R_BRACE)
+                        pass
+                    else:
+                        raise NoViableAltException(self)
+
+                    self.state = 227
+                    self._errHandler.sync(self)
+                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
+                    if la_ == 1:
+                        self.state = 226
+                        self.subexpr()
+
+             
+                self.state = 233
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class CompContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def group(self):
+            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
+
+
+        def abs_group(self):
+            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
+
+
+        def func(self):
+            return self.getTypedRuleContext(LaTeXParser.FuncContext,0)
+
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def frac(self):
+            return self.getTypedRuleContext(LaTeXParser.FracContext,0)
+
+
+        def binom(self):
+            return self.getTypedRuleContext(LaTeXParser.BinomContext,0)
+
+
+        def floor(self):
+            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)
+
+
+        def ceil(self):
+            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_comp
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterComp" ):
+                listener.enterComp(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitComp" ):
+                listener.exitComp(self)
+
+
+
+
+    def comp(self):
+
+        localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 34, self.RULE_comp)
+        try:
+            self.state = 242
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
+            if la_ == 1:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 234
+                self.group()
+                pass
+
+            elif la_ == 2:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 235
+                self.abs_group()
+                pass
+
+            elif la_ == 3:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 236
+                self.func()
+                pass
+
+            elif la_ == 4:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 237
+                self.atom()
+                pass
+
+            elif la_ == 5:
+                self.enterOuterAlt(localctx, 5)
+                self.state = 238
+                self.frac()
+                pass
+
+            elif la_ == 6:
+                self.enterOuterAlt(localctx, 6)
+                self.state = 239
+                self.binom()
+                pass
+
+            elif la_ == 7:
+                self.enterOuterAlt(localctx, 7)
+                self.state = 240
+                self.floor()
+                pass
+
+            elif la_ == 8:
+                self.enterOuterAlt(localctx, 8)
+                self.state = 241
+                self.ceil()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Comp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def group(self):
+            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
+
+
+        def abs_group(self):
+            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
+
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def frac(self):
+            return self.getTypedRuleContext(LaTeXParser.FracContext,0)
+
+
+        def binom(self):
+            return self.getTypedRuleContext(LaTeXParser.BinomContext,0)
+
+
+        def floor(self):
+            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)
+
+
+        def ceil(self):
+            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_comp_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterComp_nofunc" ):
+                listener.enterComp_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitComp_nofunc" ):
+                listener.exitComp_nofunc(self)
+
+
+
+
+    def comp_nofunc(self):
+
+        localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 36, self.RULE_comp_nofunc)
+        try:
+            self.state = 251
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
+            if la_ == 1:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 244
+                self.group()
+                pass
+
+            elif la_ == 2:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 245
+                self.abs_group()
+                pass
+
+            elif la_ == 3:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 246
+                self.atom()
+                pass
+
+            elif la_ == 4:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 247
+                self.frac()
+                pass
+
+            elif la_ == 5:
+                self.enterOuterAlt(localctx, 5)
+                self.state = 248
+                self.binom()
+                pass
+
+            elif la_ == 6:
+                self.enterOuterAlt(localctx, 6)
+                self.state = 249
+                self.floor()
+                pass
+
+            elif la_ == 7:
+                self.enterOuterAlt(localctx, 7)
+                self.state = 250
+                self.ceil()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class GroupContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def L_PAREN(self):
+            return self.getToken(LaTeXParser.L_PAREN, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_PAREN(self):
+            return self.getToken(LaTeXParser.R_PAREN, 0)
+
+        def L_BRACKET(self):
+            return self.getToken(LaTeXParser.L_BRACKET, 0)
+
+        def R_BRACKET(self):
+            return self.getToken(LaTeXParser.R_BRACKET, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def L_BRACE_LITERAL(self):
+            return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)
+
+        def R_BRACE_LITERAL(self):
+            return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_group
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterGroup" ):
+                listener.enterGroup(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitGroup" ):
+                listener.exitGroup(self)
+
+
+
+
+    def group(self):
+
+        localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 38, self.RULE_group)
+        try:
+            self.state = 269
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [18]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 253
+                self.match(LaTeXParser.L_PAREN)
+                self.state = 254
+                self.expr()
+                self.state = 255
+                self.match(LaTeXParser.R_PAREN)
+                pass
+            elif token in [24]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 257
+                self.match(LaTeXParser.L_BRACKET)
+                self.state = 258
+                self.expr()
+                self.state = 259
+                self.match(LaTeXParser.R_BRACKET)
+                pass
+            elif token in [20]:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 261
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 262
+                self.expr()
+                self.state = 263
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            elif token in [22]:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 265
+                self.match(LaTeXParser.L_BRACE_LITERAL)
+                self.state = 266
+                self.expr()
+                self.state = 267
+                self.match(LaTeXParser.R_BRACE_LITERAL)
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Abs_groupContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def BAR(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.BAR)
+            else:
+                return self.getToken(LaTeXParser.BAR, i)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_abs_group
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterAbs_group" ):
+                listener.enterAbs_group(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitAbs_group" ):
+                listener.exitAbs_group(self)
+
+
+
+
+    def abs_group(self):
+
+        localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 40, self.RULE_abs_group)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 271
+            self.match(LaTeXParser.BAR)
+            self.state = 272
+            self.expr()
+            self.state = 273
+            self.match(LaTeXParser.BAR)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class AtomContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def LETTER(self):
+            return self.getToken(LaTeXParser.LETTER, 0)
+
+        def SYMBOL(self):
+            return self.getToken(LaTeXParser.SYMBOL, 0)
+
+        def subexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
+
+
+        def NUMBER(self):
+            return self.getToken(LaTeXParser.NUMBER, 0)
+
+        def DIFFERENTIAL(self):
+            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
+
+        def mathit(self):
+            return self.getTypedRuleContext(LaTeXParser.MathitContext,0)
+
+
+        def bra(self):
+            return self.getTypedRuleContext(LaTeXParser.BraContext,0)
+
+
+        def ket(self):
+            return self.getTypedRuleContext(LaTeXParser.KetContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_atom
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterAtom" ):
+                listener.enterAtom(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitAtom" ):
+                listener.exitAtom(self)
+
+
+
+
+    def atom(self):
+
+        localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 42, self.RULE_atom)
+        self._la = 0 # Token type
+        try:
+            self.state = 284
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [75, 88]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 275
+                _la = self._input.LA(1)
+                if not(_la==75 or _la==88):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 277
+                self._errHandler.sync(self)
+                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
+                if la_ == 1:
+                    self.state = 276
+                    self.subexpr()
+
+
+                pass
+            elif token in [76]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 279
+                self.match(LaTeXParser.NUMBER)
+                pass
+            elif token in [74]:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 280
+                self.match(LaTeXParser.DIFFERENTIAL)
+                pass
+            elif token in [70]:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 281
+                self.mathit()
+                pass
+            elif token in [29]:
+                self.enterOuterAlt(localctx, 5)
+                self.state = 282
+                self.bra()
+                pass
+            elif token in [26, 28]:
+                self.enterOuterAlt(localctx, 6)
+                self.state = 283
+                self.ket()
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class BraContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def L_ANGLE(self):
+            return self.getToken(LaTeXParser.L_ANGLE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BAR(self):
+            return self.getToken(LaTeXParser.R_BAR, 0)
+
+        def BAR(self):
+            return self.getToken(LaTeXParser.BAR, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_bra
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterBra" ):
+                listener.enterBra(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitBra" ):
+                listener.exitBra(self)
+
+
+
+
+    def bra(self):
+
+        localctx = LaTeXParser.BraContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 44, self.RULE_bra)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 286
+            self.match(LaTeXParser.L_ANGLE)
+            self.state = 287
+            self.expr()
+            self.state = 288
+            _la = self._input.LA(1)
+            if not(_la==26 or _la==27):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class KetContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_ANGLE(self):
+            return self.getToken(LaTeXParser.R_ANGLE, 0)
+
+        def L_BAR(self):
+            return self.getToken(LaTeXParser.L_BAR, 0)
+
+        def BAR(self):
+            return self.getToken(LaTeXParser.BAR, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_ket
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterKet" ):
+                listener.enterKet(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitKet" ):
+                listener.exitKet(self)
+
+
+
+
+    def ket(self):
+
+        localctx = LaTeXParser.KetContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 46, self.RULE_ket)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 290
+            _la = self._input.LA(1)
+            if not(_la==26 or _la==28):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+            self.state = 291
+            self.expr()
+            self.state = 292
+            self.match(LaTeXParser.R_ANGLE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class MathitContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def CMD_MATHIT(self):
+            return self.getToken(LaTeXParser.CMD_MATHIT, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def mathit_text(self):
+            return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_mathit
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMathit" ):
+                listener.enterMathit(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMathit" ):
+                listener.exitMathit(self)
+
+
+
+
+    def mathit(self):
+
+        localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 48, self.RULE_mathit)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 294
+            self.match(LaTeXParser.CMD_MATHIT)
+            self.state = 295
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 296
+            self.mathit_text()
+            self.state = 297
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Mathit_textContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def LETTER(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.LETTER)
+            else:
+                return self.getToken(LaTeXParser.LETTER, i)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_mathit_text
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMathit_text" ):
+                listener.enterMathit_text(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMathit_text" ):
+                listener.exitMathit_text(self)
+
+
+
+
+    def mathit_text(self):
+
+        localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 50, self.RULE_mathit_text)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 302
+            self._errHandler.sync(self)
+            _la = self._input.LA(1)
+            while _la==75:
+                self.state = 299
+                self.match(LaTeXParser.LETTER)
+                self.state = 304
+                self._errHandler.sync(self)
+                _la = self._input.LA(1)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class FracContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.upper = None # ExprContext
+            self.lower = None # ExprContext
+
+        def CMD_FRAC(self):
+            return self.getToken(LaTeXParser.CMD_FRAC, 0)
+
+        def L_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.L_BRACE)
+            else:
+                return self.getToken(LaTeXParser.L_BRACE, i)
+
+        def R_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.R_BRACE)
+            else:
+                return self.getToken(LaTeXParser.R_BRACE, i)
+
+        def expr(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_frac
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFrac" ):
+                listener.enterFrac(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFrac" ):
+                listener.exitFrac(self)
+
+
+
+
+    def frac(self):
+
+        localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 52, self.RULE_frac)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 305
+            self.match(LaTeXParser.CMD_FRAC)
+            self.state = 306
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 307
+            localctx.upper = self.expr()
+            self.state = 308
+            self.match(LaTeXParser.R_BRACE)
+            self.state = 309
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 310
+            localctx.lower = self.expr()
+            self.state = 311
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class BinomContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.n = None # ExprContext
+            self.k = None # ExprContext
+
+        def L_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.L_BRACE)
+            else:
+                return self.getToken(LaTeXParser.L_BRACE, i)
+
+        def R_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.R_BRACE)
+            else:
+                return self.getToken(LaTeXParser.R_BRACE, i)
+
+        def CMD_BINOM(self):
+            return self.getToken(LaTeXParser.CMD_BINOM, 0)
+
+        def CMD_DBINOM(self):
+            return self.getToken(LaTeXParser.CMD_DBINOM, 0)
+
+        def CMD_TBINOM(self):
+            return self.getToken(LaTeXParser.CMD_TBINOM, 0)
+
+        def expr(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_binom
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterBinom" ):
+                listener.enterBinom(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitBinom" ):
+                listener.exitBinom(self)
+
+
+
+
+    def binom(self):
+
+        localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 54, self.RULE_binom)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 313
+            _la = self._input.LA(1)
+            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 7) != 0)):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+            self.state = 314
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 315
+            localctx.n = self.expr()
+            self.state = 316
+            self.match(LaTeXParser.R_BRACE)
+            self.state = 317
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 318
+            localctx.k = self.expr()
+            self.state = 319
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class FloorContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.val = None # ExprContext
+
+        def L_FLOOR(self):
+            return self.getToken(LaTeXParser.L_FLOOR, 0)
+
+        def R_FLOOR(self):
+            return self.getToken(LaTeXParser.R_FLOOR, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_floor
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFloor" ):
+                listener.enterFloor(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFloor" ):
+                listener.exitFloor(self)
+
+
+
+
+    def floor(self):
+
+        localctx = LaTeXParser.FloorContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 56, self.RULE_floor)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 321
+            self.match(LaTeXParser.L_FLOOR)
+            self.state = 322
+            localctx.val = self.expr()
+            self.state = 323
+            self.match(LaTeXParser.R_FLOOR)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class CeilContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.val = None # ExprContext
+
+        def L_CEIL(self):
+            return self.getToken(LaTeXParser.L_CEIL, 0)
+
+        def R_CEIL(self):
+            return self.getToken(LaTeXParser.R_CEIL, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_ceil
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterCeil" ):
+                listener.enterCeil(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitCeil" ):
+                listener.exitCeil(self)
+
+
+
+
+    def ceil(self):
+
+        localctx = LaTeXParser.CeilContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 58, self.RULE_ceil)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 325
+            self.match(LaTeXParser.L_CEIL)
+            self.state = 326
+            localctx.val = self.expr()
+            self.state = 327
+            self.match(LaTeXParser.R_CEIL)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Func_normalContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def FUNC_EXP(self):
+            return self.getToken(LaTeXParser.FUNC_EXP, 0)
+
+        def FUNC_LOG(self):
+            return self.getToken(LaTeXParser.FUNC_LOG, 0)
+
+        def FUNC_LN(self):
+            return self.getToken(LaTeXParser.FUNC_LN, 0)
+
+        def FUNC_SIN(self):
+            return self.getToken(LaTeXParser.FUNC_SIN, 0)
+
+        def FUNC_COS(self):
+            return self.getToken(LaTeXParser.FUNC_COS, 0)
+
+        def FUNC_TAN(self):
+            return self.getToken(LaTeXParser.FUNC_TAN, 0)
+
+        def FUNC_CSC(self):
+            return self.getToken(LaTeXParser.FUNC_CSC, 0)
+
+        def FUNC_SEC(self):
+            return self.getToken(LaTeXParser.FUNC_SEC, 0)
+
+        def FUNC_COT(self):
+            return self.getToken(LaTeXParser.FUNC_COT, 0)
+
+        def FUNC_ARCSIN(self):
+            return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)
+
+        def FUNC_ARCCOS(self):
+            return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)
+
+        def FUNC_ARCTAN(self):
+            return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)
+
+        def FUNC_ARCCSC(self):
+            return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)
+
+        def FUNC_ARCSEC(self):
+            return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)
+
+        def FUNC_ARCCOT(self):
+            return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)
+
+        def FUNC_SINH(self):
+            return self.getToken(LaTeXParser.FUNC_SINH, 0)
+
+        def FUNC_COSH(self):
+            return self.getToken(LaTeXParser.FUNC_COSH, 0)
+
+        def FUNC_TANH(self):
+            return self.getToken(LaTeXParser.FUNC_TANH, 0)
+
+        def FUNC_ARSINH(self):
+            return self.getToken(LaTeXParser.FUNC_ARSINH, 0)
+
+        def FUNC_ARCOSH(self):
+            return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)
+
+        def FUNC_ARTANH(self):
+            return self.getToken(LaTeXParser.FUNC_ARTANH, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_func_normal
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFunc_normal" ):
+                listener.enterFunc_normal(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFunc_normal" ):
+                listener.exitFunc_normal(self)
+
+
+
+
+    def func_normal(self):
+
+        localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 60, self.RULE_func_normal)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 329
+            _la = self._input.LA(1)
+            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144115119356379136) != 0)):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class FuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.root = None # ExprContext
+            self.base = None # ExprContext
+
+        def func_normal(self):
+            return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)
+
+
+        def L_PAREN(self):
+            return self.getToken(LaTeXParser.L_PAREN, 0)
+
+        def func_arg(self):
+            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
+
+
+        def R_PAREN(self):
+            return self.getToken(LaTeXParser.R_PAREN, 0)
+
+        def func_arg_noparens(self):
+            return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)
+
+
+        def subexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
+
+
+        def supexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)
+
+
+        def args(self):
+            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
+
+
+        def LETTER(self):
+            return self.getToken(LaTeXParser.LETTER, 0)
+
+        def SYMBOL(self):
+            return self.getToken(LaTeXParser.SYMBOL, 0)
+
+        def FUNC_INT(self):
+            return self.getToken(LaTeXParser.FUNC_INT, 0)
+
+        def DIFFERENTIAL(self):
+            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
+
+        def frac(self):
+            return self.getTypedRuleContext(LaTeXParser.FracContext,0)
+
+
+        def additive(self):
+            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
+
+
+        def FUNC_SQRT(self):
+            return self.getToken(LaTeXParser.FUNC_SQRT, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def expr(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
+
+
+        def L_BRACKET(self):
+            return self.getToken(LaTeXParser.L_BRACKET, 0)
+
+        def R_BRACKET(self):
+            return self.getToken(LaTeXParser.R_BRACKET, 0)
+
+        def FUNC_OVERLINE(self):
+            return self.getToken(LaTeXParser.FUNC_OVERLINE, 0)
+
+        def mp(self):
+            return self.getTypedRuleContext(LaTeXParser.MpContext,0)
+
+
+        def FUNC_SUM(self):
+            return self.getToken(LaTeXParser.FUNC_SUM, 0)
+
+        def FUNC_PROD(self):
+            return self.getToken(LaTeXParser.FUNC_PROD, 0)
+
+        def subeq(self):
+            return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)
+
+
+        def FUNC_LIM(self):
+            return self.getToken(LaTeXParser.FUNC_LIM, 0)
+
+        def limit_sub(self):
+            return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_func
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFunc" ):
+                listener.enterFunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFunc" ):
+                listener.exitFunc(self)
+
+
+
+
+    def func(self):
+
+        localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 62, self.RULE_func)
+        self._la = 0 # Token type
+        try:
+            self.state = 409
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 331
+                self.func_normal()
+                self.state = 344
+                self._errHandler.sync(self)
+                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
+                if la_ == 1:
+                    self.state = 333
+                    self._errHandler.sync(self)
+                    _la = self._input.LA(1)
+                    if _la==71:
+                        self.state = 332
+                        self.subexpr()
+
+
+                    self.state = 336
+                    self._errHandler.sync(self)
+                    _la = self._input.LA(1)
+                    if _la==72:
+                        self.state = 335
+                        self.supexpr()
+
+
+                    pass
+
+                elif la_ == 2:
+                    self.state = 339
+                    self._errHandler.sync(self)
+                    _la = self._input.LA(1)
+                    if _la==72:
+                        self.state = 338
+                        self.supexpr()
+
+
+                    self.state = 342
+                    self._errHandler.sync(self)
+                    _la = self._input.LA(1)
+                    if _la==71:
+                        self.state = 341
+                        self.subexpr()
+
+
+                    pass
+
+
+                self.state = 351
+                self._errHandler.sync(self)
+                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
+                if la_ == 1:
+                    self.state = 346
+                    self.match(LaTeXParser.L_PAREN)
+                    self.state = 347
+                    self.func_arg()
+                    self.state = 348
+                    self.match(LaTeXParser.R_PAREN)
+                    pass
+
+                elif la_ == 2:
+                    self.state = 350
+                    self.func_arg_noparens()
+                    pass
+
+
+                pass
+            elif token in [75, 88]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 353
+                _la = self._input.LA(1)
+                if not(_la==75 or _la==88):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 355
+                self._errHandler.sync(self)
+                _la = self._input.LA(1)
+                if _la==71:
+                    self.state = 354
+                    self.subexpr()
+
+
+                self.state = 357
+                self.match(LaTeXParser.L_PAREN)
+                self.state = 358
+                self.args()
+                self.state = 359
+                self.match(LaTeXParser.R_PAREN)
+                pass
+            elif token in [33]:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 361
+                self.match(LaTeXParser.FUNC_INT)
+                self.state = 368
+                self._errHandler.sync(self)
+                token = self._input.LA(1)
+                if token in [71]:
+                    self.state = 362
+                    self.subexpr()
+                    self.state = 363
+                    self.supexpr()
+                    pass
+                elif token in [72]:
+                    self.state = 365
+                    self.supexpr()
+                    self.state = 366
+                    self.subexpr()
+                    pass
+                elif token in [14, 15, 18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
+                    pass
+                else:
+                    pass
+                self.state = 376
+                self._errHandler.sync(self)
+                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
+                if la_ == 1:
+                    self.state = 371
+                    self._errHandler.sync(self)
+                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
+                    if la_ == 1:
+                        self.state = 370
+                        self.additive(0)
+
+
+                    self.state = 373
+                    self.match(LaTeXParser.DIFFERENTIAL)
+                    pass
+
+                elif la_ == 2:
+                    self.state = 374
+                    self.frac()
+                    pass
+
+                elif la_ == 3:
+                    self.state = 375
+                    self.additive(0)
+                    pass
+
+
+                pass
+            elif token in [61]:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 378
+                self.match(LaTeXParser.FUNC_SQRT)
+                self.state = 383
+                self._errHandler.sync(self)
+                _la = self._input.LA(1)
+                if _la==24:
+                    self.state = 379
+                    self.match(LaTeXParser.L_BRACKET)
+                    self.state = 380
+                    localctx.root = self.expr()
+                    self.state = 381
+                    self.match(LaTeXParser.R_BRACKET)
+
+
+                self.state = 385
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 386
+                localctx.base = self.expr()
+                self.state = 387
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            elif token in [62]:
+                self.enterOuterAlt(localctx, 5)
+                self.state = 389
+                self.match(LaTeXParser.FUNC_OVERLINE)
+                self.state = 390
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 391
+                localctx.base = self.expr()
+                self.state = 392
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            elif token in [34, 35]:
+                self.enterOuterAlt(localctx, 6)
+                self.state = 394
+                _la = self._input.LA(1)
+                if not(_la==34 or _la==35):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 401
+                self._errHandler.sync(self)
+                token = self._input.LA(1)
+                if token in [71]:
+                    self.state = 395
+                    self.subeq()
+                    self.state = 396
+                    self.supexpr()
+                    pass
+                elif token in [72]:
+                    self.state = 398
+                    self.supexpr()
+                    self.state = 399
+                    self.subeq()
+                    pass
+                else:
+                    raise NoViableAltException(self)
+
+                self.state = 403
+                self.mp(0)
+                pass
+            elif token in [31]:
+                self.enterOuterAlt(localctx, 7)
+                self.state = 405
+                self.match(LaTeXParser.FUNC_LIM)
+                self.state = 406
+                self.limit_sub()
+                self.state = 407
+                self.mp(0)
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class ArgsContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def args(self):
+            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_args
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterArgs" ):
+                listener.enterArgs(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitArgs" ):
+                listener.exitArgs(self)
+
+
+
+
+    def args(self):
+
+        localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 64, self.RULE_args)
+        try:
+            self.state = 416
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
+            if la_ == 1:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 411
+                self.expr()
+                self.state = 412
+                self.match(LaTeXParser.T__0)
+                self.state = 413
+                self.args()
+                pass
+
+            elif la_ == 2:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 415
+                self.expr()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Limit_subContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def L_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.L_BRACE)
+            else:
+                return self.getToken(LaTeXParser.L_BRACE, i)
+
+        def LIM_APPROACH_SYM(self):
+            return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.R_BRACE)
+            else:
+                return self.getToken(LaTeXParser.R_BRACE, i)
+
+        def LETTER(self):
+            return self.getToken(LaTeXParser.LETTER, 0)
+
+        def SYMBOL(self):
+            return self.getToken(LaTeXParser.SYMBOL, 0)
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def ADD(self):
+            return self.getToken(LaTeXParser.ADD, 0)
+
+        def SUB(self):
+            return self.getToken(LaTeXParser.SUB, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_limit_sub
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterLimit_sub" ):
+                listener.enterLimit_sub(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitLimit_sub" ):
+                listener.exitLimit_sub(self)
+
+
+
+
+    def limit_sub(self):
+
+        localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 66, self.RULE_limit_sub)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 418
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 419
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 420
+            _la = self._input.LA(1)
+            if not(_la==75 or _la==88):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+            self.state = 421
+            self.match(LaTeXParser.LIM_APPROACH_SYM)
+            self.state = 422
+            self.expr()
+            self.state = 427
+            self._errHandler.sync(self)
+            _la = self._input.LA(1)
+            if _la==72:
+                self.state = 423
+                self.match(LaTeXParser.CARET)
+                self.state = 424
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 425
+                _la = self._input.LA(1)
+                if not(_la==14 or _la==15):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 426
+                self.match(LaTeXParser.R_BRACE)
+
+
+            self.state = 429
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Func_argContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def func_arg(self):
+            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_func_arg
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFunc_arg" ):
+                listener.enterFunc_arg(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFunc_arg" ):
+                listener.exitFunc_arg(self)
+
+
+
+
+    def func_arg(self):
+
+        localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 68, self.RULE_func_arg)
+        try:
+            self.state = 436
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
+            if la_ == 1:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 431
+                self.expr()
+                pass
+
+            elif la_ == 2:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 432
+                self.expr()
+                self.state = 433
+                self.match(LaTeXParser.T__0)
+                self.state = 434
+                self.func_arg()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Func_arg_noparensContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def mp_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_func_arg_noparens
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFunc_arg_noparens" ):
+                listener.enterFunc_arg_noparens(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFunc_arg_noparens" ):
+                listener.exitFunc_arg_noparens(self)
+
+
+
+
+    def func_arg_noparens(self):
+
+        localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 70, self.RULE_func_arg_noparens)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 438
+            self.mp_nofunc(0)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class SubexprContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_subexpr
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterSubexpr" ):
+                listener.enterSubexpr(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitSubexpr" ):
+                listener.exitSubexpr(self)
+
+
+
+
+    def subexpr(self):
+
+        localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 72, self.RULE_subexpr)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 440
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 446
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [26, 28, 29, 70, 74, 75, 76, 88]:
+                self.state = 441
+                self.atom()
+                pass
+            elif token in [20]:
+                self.state = 442
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 443
+                self.expr()
+                self.state = 444
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class SupexprContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_supexpr
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterSupexpr" ):
+                listener.enterSupexpr(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitSupexpr" ):
+                listener.exitSupexpr(self)
+
+
+
+
+    def supexpr(self):
+
+        localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 74, self.RULE_supexpr)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 448
+            self.match(LaTeXParser.CARET)
+            self.state = 454
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [26, 28, 29, 70, 74, 75, 76, 88]:
+                self.state = 449
+                self.atom()
+                pass
+            elif token in [20]:
+                self.state = 450
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 451
+                self.expr()
+                self.state = 452
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class SubeqContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def equality(self):
+            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_subeq
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterSubeq" ):
+                listener.enterSubeq(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitSubeq" ):
+                listener.exitSubeq(self)
+
+
+
+
+    def subeq(self):
+
+        localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 76, self.RULE_subeq)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 456
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 457
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 458
+            self.equality()
+            self.state = 459
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class SupeqContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def equality(self):
+            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_supeq
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterSupeq" ):
+                listener.enterSupeq(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitSupeq" ):
+                listener.exitSupeq(self)
+
+
+
+
+    def supeq(self):
+
+        localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 78, self.RULE_supeq)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 461
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 462
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 463
+            self.equality()
+            self.state = 464
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+
+    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
+        if self._predicates == None:
+            self._predicates = dict()
+        self._predicates[1] = self.relation_sempred
+        self._predicates[4] = self.additive_sempred
+        self._predicates[5] = self.mp_sempred
+        self._predicates[6] = self.mp_nofunc_sempred
+        self._predicates[15] = self.exp_sempred
+        self._predicates[16] = self.exp_nofunc_sempred
+        pred = self._predicates.get(ruleIndex, None)
+        if pred is None:
+            raise Exception("No predicate with index:" + str(ruleIndex))
+        else:
+            return pred(localctx, predIndex)
+
+    def relation_sempred(self, localctx:RelationContext, predIndex:int):
+            if predIndex == 0:
+                return self.precpred(self._ctx, 2)
+         
+
+    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
+            if predIndex == 1:
+                return self.precpred(self._ctx, 2)
+         
+
+    def mp_sempred(self, localctx:MpContext, predIndex:int):
+            if predIndex == 2:
+                return self.precpred(self._ctx, 2)
+         
+
+    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
+            if predIndex == 3:
+                return self.precpred(self._ctx, 2)
+         
+
+    def exp_sempred(self, localctx:ExpContext, predIndex:int):
+            if predIndex == 4:
+                return self.precpred(self._ctx, 2)
+         
+
+    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
+            if predIndex == 5:
+                return self.precpred(self._ctx, 2)
+         
+
+
+
+
diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py
index 2e4a45ad20..f10327009b 100644
--- a/sympy/parsing/latex/_parse_latex_antlr.py
+++ b/sympy/parsing/latex/_parse_latex_antlr.py
@@ -382,6 +382,10 @@ def convert_frac(frac):
 
     expr_top = convert_expr(frac.upper)
     expr_bot = convert_expr(frac.lower)
+    # Wrap denominator in parentheses if it's a fraction or contains division
+    if (hasattr(frac.lower, 'frac') or 
+        any(op.DIV() or op.CMD_DIV() for op in frac.lower.getChildren() if hasattr(op, 'DIV'))):
+        expr_bot = sympy.Paren(expr_bot, evaluate=False)
     inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)
     if expr_top == 1:
         return inverse_denom

2025-06-26 16:50:50,016 - INFO - ------------------------------
2025-06-26 16:50:50,016 - INFO - END Runtime Completion Fn
2025-06-26 16:50:50,016 - INFO - ------------------------------
2025-06-26 16:50:50,017 - INFO - Got git diff for instance sympy__sympy-21612:
--------
diff --git a/sympy/parsing/latex/__init__.py b/sympy/parsing/latex/__init__.py
index f98e53e70f..7f7d47dbbc 100644
--- a/sympy/parsing/latex/__init__.py
+++ b/sympy/parsing/latex/__init__.py
@@ -27,9 +27,18 @@ def parse_latex(s):
     1.618
     """
 
+    print("DEBUG: Attempting to import _parse_latex_antlr")
     _latex = import_module(
         'sympy.parsing.latex._parse_latex_antlr',
         import_kwargs={'fromlist': ['X']})
+    print(f"DEBUG: _latex module: {_latex}")
 
     if _latex is not None:
-        return _latex.parse_latex(s)
+        print("DEBUG: Attempting to parse LaTeX")
+        try:
+            result = _latex.parse_latex(s)
+            print("DEBUG: Parsing completed successfully")
+            return result
+        except Exception as e:
+            print(f"DEBUG: Parsing failed - {str(e)}")
+            raise
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.interp b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.interp
new file mode 100644
index 0000000000..5baaa48103
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.interp
@@ -0,0 +1,227 @@
+token literal names:
+null
+','
+null
+null
+null
+null
+'\\quad'
+'\\qquad'
+null
+'\\negmedspace'
+'\\negthickspace'
+'\\left'
+'\\right'
+null
+'+'
+'-'
+'*'
+'/'
+'('
+')'
+'{'
+'}'
+'\\{'
+'\\}'
+'['
+']'
+'|'
+'\\right|'
+'\\left|'
+'\\langle'
+'\\rangle'
+'\\lim'
+null
+'\\int'
+'\\sum'
+'\\prod'
+'\\exp'
+'\\log'
+'\\ln'
+'\\sin'
+'\\cos'
+'\\tan'
+'\\csc'
+'\\sec'
+'\\cot'
+'\\arcsin'
+'\\arccos'
+'\\arctan'
+'\\arccsc'
+'\\arcsec'
+'\\arccot'
+'\\sinh'
+'\\cosh'
+'\\tanh'
+'\\arsinh'
+'\\arcosh'
+'\\artanh'
+'\\lfloor'
+'\\rfloor'
+'\\lceil'
+'\\rceil'
+'\\sqrt'
+'\\overline'
+'\\times'
+'\\cdot'
+'\\div'
+'\\frac'
+'\\binom'
+'\\dbinom'
+'\\tbinom'
+'\\mathit'
+'_'
+'^'
+':'
+null
+null
+null
+null
+'\\neq'
+'<'
+null
+'\\leqq'
+'\\leqslant'
+'>'
+null
+'\\geqq'
+'\\geqslant'
+'!'
+null
+
+token symbolic names:
+null
+null
+WS
+THINSPACE
+MEDSPACE
+THICKSPACE
+QUAD
+QQUAD
+NEGTHINSPACE
+NEGMEDSPACE
+NEGTHICKSPACE
+CMD_LEFT
+CMD_RIGHT
+IGNORE
+ADD
+SUB
+MUL
+DIV
+L_PAREN
+R_PAREN
+L_BRACE
+R_BRACE
+L_BRACE_LITERAL
+R_BRACE_LITERAL
+L_BRACKET
+R_BRACKET
+BAR
+R_BAR
+L_BAR
+L_ANGLE
+R_ANGLE
+FUNC_LIM
+LIM_APPROACH_SYM
+FUNC_INT
+FUNC_SUM
+FUNC_PROD
+FUNC_EXP
+FUNC_LOG
+FUNC_LN
+FUNC_SIN
+FUNC_COS
+FUNC_TAN
+FUNC_CSC
+FUNC_SEC
+FUNC_COT
+FUNC_ARCSIN
+FUNC_ARCCOS
+FUNC_ARCTAN
+FUNC_ARCCSC
+FUNC_ARCSEC
+FUNC_ARCCOT
+FUNC_SINH
+FUNC_COSH
+FUNC_TANH
+FUNC_ARSINH
+FUNC_ARCOSH
+FUNC_ARTANH
+L_FLOOR
+R_FLOOR
+L_CEIL
+R_CEIL
+FUNC_SQRT
+FUNC_OVERLINE
+CMD_TIMES
+CMD_CDOT
+CMD_DIV
+CMD_FRAC
+CMD_BINOM
+CMD_DBINOM
+CMD_TBINOM
+CMD_MATHIT
+UNDERSCORE
+CARET
+COLON
+DIFFERENTIAL
+LETTER
+NUMBER
+EQUAL
+NEQ
+LT
+LTE
+LTE_Q
+LTE_S
+GT
+GTE
+GTE_Q
+GTE_S
+BANG
+SYMBOL
+
+rule names:
+math
+relation
+equality
+expr
+additive
+mp
+mp_nofunc
+unary
+unary_nofunc
+postfix
+postfix_nofunc
+postfix_op
+eval_at
+eval_at_sub
+eval_at_sup
+exp
+exp_nofunc
+comp
+comp_nofunc
+group
+abs_group
+atom
+bra
+ket
+mathit
+mathit_text
+frac
+binom
+floor
+ceil
+func_normal
+func
+args
+limit_sub
+func_arg
+func_arg_noparens
+subexpr
+supexpr
+subeq
+supeq
+
+
+atn:
+[4, 1, 88, 467, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 89, 8, 1, 10, 1, 12, 1, 92, 9, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 5, 4, 106, 8, 4, 10, 4, 12, 4, 109, 9, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 117, 8, 5, 10, 5, 12, 5, 120, 9, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 5, 6, 128, 8, 6, 10, 6, 12, 6, 131, 9, 6, 1, 7, 1, 7, 1, 7, 4, 7, 136, 8, 7, 11, 7, 12, 7, 137, 3, 7, 140, 8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 5, 8, 146, 8, 8, 10, 8, 12, 8, 149, 9, 8, 3, 8, 151, 8, 8, 1, 9, 1, 9, 5, 9, 155, 8, 9, 10, 9, 12, 9, 158, 9, 9, 1, 10, 1, 10, 5, 10, 162, 8, 10, 10, 10, 12, 10, 165, 9, 10, 1, 11, 1, 11, 3, 11, 169, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 177, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 183, 8, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 191, 8, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 205, 8, 15, 1, 15, 3, 15, 208, 8, 15, 5, 15, 210, 8, 15, 10, 15, 12, 15, 213, 9, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 225, 8, 16, 1, 16, 3, 16, 228, 8, 16, 5, 16, 230, 8, 16, 10, 16, 12, 16, 233, 9, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 243, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 252, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 270, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 3, 21, 278, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 285, 8, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 5, 25, 301, 8, 25, 10, 25, 12, 25, 304, 9, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 3, 31, 334, 8, 31, 1, 31, 3, 31, 337, 8, 31, 1, 31, 3, 31, 340, 8, 31, 1, 31, 3, 31, 343, 8, 31, 3, 31, 345, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 352, 8, 31, 1, 31, 1, 31, 3, 31, 356, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 369, 8, 31, 1, 31, 3, 31, 372, 8, 31, 1, 31, 1, 31, 1, 31, 3, 31, 377, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 384, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 402, 8, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 410, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 417, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 428, 8, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 3, 34, 437, 8, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 447, 8, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 455, 8, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 0, 6, 2, 8, 10, 12, 30, 32, 40, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 0, 9, 2, 0, 77, 80, 83, 84, 1, 0, 14, 15, 3, 0, 16, 17, 63, 65, 73, 73, 2, 0, 75, 75, 88, 88, 1, 0, 26, 27, 2, 0, 26, 26, 28, 28, 1, 0, 67, 69, 1, 0, 36, 56, 1, 0, 34, 35, 495, 0, 80, 1, 0, 0, 0, 2, 82, 1, 0, 0, 0, 4, 93, 1, 0, 0, 0, 6, 97, 1, 0, 0, 0, 8, 99, 1, 0, 0, 0, 10, 110, 1, 0, 0, 0, 12, 121, 1, 0, 0, 0, 14, 139, 1, 0, 0, 0, 16, 150, 1, 0, 0, 0, 18, 152, 1, 0, 0, 0, 20, 159, 1, 0, 0, 0, 22, 168, 1, 0, 0, 0, 24, 170, 1, 0, 0, 0, 26, 178, 1, 0, 0, 0, 28, 186, 1, 0, 0, 0, 30, 194, 1, 0, 0, 0, 32, 214, 1, 0, 0, 0, 34, 242, 1, 0, 0, 0, 36, 251, 1, 0, 0, 0, 38, 269, 1, 0, 0, 0, 40, 271, 1, 0, 0, 0, 42, 284, 1, 0, 0, 0, 44, 286, 1, 0, 0, 0, 46, 290, 1, 0, 0, 0, 48, 294, 1, 0, 0, 0, 50, 302, 1, 0, 0, 0, 52, 305, 1, 0, 0, 0, 54, 313, 1, 0, 0, 0, 56, 321, 1, 0, 0, 0, 58, 325, 1, 0, 0, 0, 60, 329, 1, 0, 0, 0, 62, 409, 1, 0, 0, 0, 64, 416, 1, 0, 0, 0, 66, 418, 1, 0, 0, 0, 68, 436, 1, 0, 0, 0, 70, 438, 1, 0, 0, 0, 72, 440, 1, 0, 0, 0, 74, 448, 1, 0, 0, 0, 76, 456, 1, 0, 0, 0, 78, 461, 1, 0, 0, 0, 80, 81, 3, 2, 1, 0, 81, 1, 1, 0, 0, 0, 82, 83, 6, 1, -1, 0, 83, 84, 3, 6, 3, 0, 84, 90, 1, 0, 0, 0, 85, 86, 10, 2, 0, 0, 86, 87, 7, 0, 0, 0, 87, 89, 3, 2, 1, 3, 88, 85, 1, 0, 0, 0, 89, 92, 1, 0, 0, 0, 90, 88, 1, 0, 0, 0, 90, 91, 1, 0, 0, 0, 91, 3, 1, 0, 0, 0, 92, 90, 1, 0, 0, 0, 93, 94, 3, 6, 3, 0, 94, 95, 5, 77, 0, 0, 95, 96, 3, 6, 3, 0, 96, 5, 1, 0, 0, 0, 97, 98, 3, 8, 4, 0, 98, 7, 1, 0, 0, 0, 99, 100, 6, 4, -1, 0, 100, 101, 3, 10, 5, 0, 101, 107, 1, 0, 0, 0, 102, 103, 10, 2, 0, 0, 103, 104, 7, 1, 0, 0, 104, 106, 3, 8, 4, 3, 105, 102, 1, 0, 0, 0, 106, 109, 1, 0, 0, 0, 107, 105, 1, 0, 0, 0, 107, 108, 1, 0, 0, 0, 108, 9, 1, 0, 0, 0, 109, 107, 1, 0, 0, 0, 110, 111, 6, 5, -1, 0, 111, 112, 3, 14, 7, 0, 112, 118, 1, 0, 0, 0, 113, 114, 10, 2, 0, 0, 114, 115, 7, 2, 0, 0, 115, 117, 3, 10, 5, 3, 116, 113, 1, 0, 0, 0, 117, 120, 1, 0, 0, 0, 118, 116, 1, 0, 0, 0, 118, 119, 1, 0, 0, 0, 119, 11, 1, 0, 0, 0, 120, 118, 1, 0, 0, 0, 121, 122, 6, 6, -1, 0, 122, 123, 3, 16, 8, 0, 123, 129, 1, 0, 0, 0, 124, 125, 10, 2, 0, 0, 125, 126, 7, 2, 0, 0, 126, 128, 3, 12, 6, 3, 127, 124, 1, 0, 0, 0, 128, 131, 1, 0, 0, 0, 129, 127, 1, 0, 0, 0, 129, 130, 1, 0, 0, 0, 130, 13, 1, 0, 0, 0, 131, 129, 1, 0, 0, 0, 132, 133, 7, 1, 0, 0, 133, 140, 3, 14, 7, 0, 134, 136, 3, 18, 9, 0, 135, 134, 1, 0, 0, 0, 136, 137, 1, 0, 0, 0, 137, 135, 1, 0, 0, 0, 137, 138, 1, 0, 0, 0, 138, 140, 1, 0, 0, 0, 139, 132, 1, 0, 0, 0, 139, 135, 1, 0, 0, 0, 140, 15, 1, 0, 0, 0, 141, 142, 7, 1, 0, 0, 142, 151, 3, 16, 8, 0, 143, 147, 3, 18, 9, 0, 144, 146, 3, 20, 10, 0, 145, 144, 1, 0, 0, 0, 146, 149, 1, 0, 0, 0, 147, 145, 1, 0, 0, 0, 147, 148, 1, 0, 0, 0, 148, 151, 1, 0, 0, 0, 149, 147, 1, 0, 0, 0, 150, 141, 1, 0, 0, 0, 150, 143, 1, 0, 0, 0, 151, 17, 1, 0, 0, 0, 152, 156, 3, 30, 15, 0, 153, 155, 3, 22, 11, 0, 154, 153, 1, 0, 0, 0, 155, 158, 1, 0, 0, 0, 156, 154, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 19, 1, 0, 0, 0, 158, 156, 1, 0, 0, 0, 159, 163, 3, 32, 16, 0, 160, 162, 3, 22, 11, 0, 161, 160, 1, 0, 0, 0, 162, 165, 1, 0, 0, 0, 163, 161, 1, 0, 0, 0, 163, 164, 1, 0, 0, 0, 164, 21, 1, 0, 0, 0, 165, 163, 1, 0, 0, 0, 166, 169, 5, 87, 0, 0, 167, 169, 3, 24, 12, 0, 168, 166, 1, 0, 0, 0, 168, 167, 1, 0, 0, 0, 169, 23, 1, 0, 0, 0, 170, 176, 5, 26, 0, 0, 171, 177, 3, 28, 14, 0, 172, 177, 3, 26, 13, 0, 173, 174, 3, 28, 14, 0, 174, 175, 3, 26, 13, 0, 175, 177, 1, 0, 0, 0, 176, 171, 1, 0, 0, 0, 176, 172, 1, 0, 0, 0, 176, 173, 1, 0, 0, 0, 177, 25, 1, 0, 0, 0, 178, 179, 5, 71, 0, 0, 179, 182, 5, 20, 0, 0, 180, 183, 3, 6, 3, 0, 181, 183, 3, 4, 2, 0, 182, 180, 1, 0, 0, 0, 182, 181, 1, 0, 0, 0, 183, 184, 1, 0, 0, 0, 184, 185, 5, 21, 0, 0, 185, 27, 1, 0, 0, 0, 186, 187, 5, 72, 0, 0, 187, 190, 5, 20, 0, 0, 188, 191, 3, 6, 3, 0, 189, 191, 3, 4, 2, 0, 190, 188, 1, 0, 0, 0, 190, 189, 1, 0, 0, 0, 191, 192, 1, 0, 0, 0, 192, 193, 5, 21, 0, 0, 193, 29, 1, 0, 0, 0, 194, 195, 6, 15, -1, 0, 195, 196, 3, 34, 17, 0, 196, 211, 1, 0, 0, 0, 197, 198, 10, 2, 0, 0, 198, 204, 5, 72, 0, 0, 199, 205, 3, 42, 21, 0, 200, 201, 5, 20, 0, 0, 201, 202, 3, 6, 3, 0, 202, 203, 5, 21, 0, 0, 203, 205, 1, 0, 0, 0, 204, 199, 1, 0, 0, 0, 204, 200, 1, 0, 0, 0, 205, 207, 1, 0, 0, 0, 206, 208, 3, 72, 36, 0, 207, 206, 1, 0, 0, 0, 207, 208, 1, 0, 0, 0, 208, 210, 1, 0, 0, 0, 209, 197, 1, 0, 0, 0, 210, 213, 1, 0, 0, 0, 211, 209, 1, 0, 0, 0, 211, 212, 1, 0, 0, 0, 212, 31, 1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 214, 215, 6, 16, -1, 0, 215, 216, 3, 36, 18, 0, 216, 231, 1, 0, 0, 0, 217, 218, 10, 2, 0, 0, 218, 224, 5, 72, 0, 0, 219, 225, 3, 42, 21, 0, 220, 221, 5, 20, 0, 0, 221, 222, 3, 6, 3, 0, 222, 223, 5, 21, 0, 0, 223, 225, 1, 0, 0, 0, 224, 219, 1, 0, 0, 0, 224, 220, 1, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226, 228, 3, 72, 36, 0, 227, 226, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 230, 1, 0, 0, 0, 229, 217, 1, 0, 0, 0, 230, 233, 1, 0, 0, 0, 231, 229, 1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 33, 1, 0, 0, 0, 233, 231, 1, 0, 0, 0, 234, 243, 3, 38, 19, 0, 235, 243, 3, 40, 20, 0, 236, 243, 3, 62, 31, 0, 237, 243, 3, 42, 21, 0, 238, 243, 3, 52, 26, 0, 239, 243, 3, 54, 27, 0, 240, 243, 3, 56, 28, 0, 241, 243, 3, 58, 29, 0, 242, 234, 1, 0, 0, 0, 242, 235, 1, 0, 0, 0, 242, 236, 1, 0, 0, 0, 242, 237, 1, 0, 0, 0, 242, 238, 1, 0, 0, 0, 242, 239, 1, 0, 0, 0, 242, 240, 1, 0, 0, 0, 242, 241, 1, 0, 0, 0, 243, 35, 1, 0, 0, 0, 244, 252, 3, 38, 19, 0, 245, 252, 3, 40, 20, 0, 246, 252, 3, 42, 21, 0, 247, 252, 3, 52, 26, 0, 248, 252, 3, 54, 27, 0, 249, 252, 3, 56, 28, 0, 250, 252, 3, 58, 29, 0, 251, 244, 1, 0, 0, 0, 251, 245, 1, 0, 0, 0, 251, 246, 1, 0, 0, 0, 251, 247, 1, 0, 0, 0, 251, 248, 1, 0, 0, 0, 251, 249, 1, 0, 0, 0, 251, 250, 1, 0, 0, 0, 252, 37, 1, 0, 0, 0, 253, 254, 5, 18, 0, 0, 254, 255, 3, 6, 3, 0, 255, 256, 5, 19, 0, 0, 256, 270, 1, 0, 0, 0, 257, 258, 5, 24, 0, 0, 258, 259, 3, 6, 3, 0, 259, 260, 5, 25, 0, 0, 260, 270, 1, 0, 0, 0, 261, 262, 5, 20, 0, 0, 262, 263, 3, 6, 3, 0, 263, 264, 5, 21, 0, 0, 264, 270, 1, 0, 0, 0, 265, 266, 5, 22, 0, 0, 266, 267, 3, 6, 3, 0, 267, 268, 5, 23, 0, 0, 268, 270, 1, 0, 0, 0, 269, 253, 1, 0, 0, 0, 269, 257, 1, 0, 0, 0, 269, 261, 1, 0, 0, 0, 269, 265, 1, 0, 0, 0, 270, 39, 1, 0, 0, 0, 271, 272, 5, 26, 0, 0, 272, 273, 3, 6, 3, 0, 273, 274, 5, 26, 0, 0, 274, 41, 1, 0, 0, 0, 275, 277, 7, 3, 0, 0, 276, 278, 3, 72, 36, 0, 277, 276, 1, 0, 0, 0, 277, 278, 1, 0, 0, 0, 278, 285, 1, 0, 0, 0, 279, 285, 5, 76, 0, 0, 280, 285, 5, 74, 0, 0, 281, 285, 3, 48, 24, 0, 282, 285, 3, 44, 22, 0, 283, 285, 3, 46, 23, 0, 284, 275, 1, 0, 0, 0, 284, 279, 1, 0, 0, 0, 284, 280, 1, 0, 0, 0, 284, 281, 1, 0, 0, 0, 284, 282, 1, 0, 0, 0, 284, 283, 1, 0, 0, 0, 285, 43, 1, 0, 0, 0, 286, 287, 5, 29, 0, 0, 287, 288, 3, 6, 3, 0, 288, 289, 7, 4, 0, 0, 289, 45, 1, 0, 0, 0, 290, 291, 7, 5, 0, 0, 291, 292, 3, 6, 3, 0, 292, 293, 5, 30, 0, 0, 293, 47, 1, 0, 0, 0, 294, 295, 5, 70, 0, 0, 295, 296, 5, 20, 0, 0, 296, 297, 3, 50, 25, 0, 297, 298, 5, 21, 0, 0, 298, 49, 1, 0, 0, 0, 299, 301, 5, 75, 0, 0, 300, 299, 1, 0, 0, 0, 301, 304, 1, 0, 0, 0, 302, 300, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 51, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 305, 306, 5, 66, 0, 0, 306, 307, 5, 20, 0, 0, 307, 308, 3, 6, 3, 0, 308, 309, 5, 21, 0, 0, 309, 310, 5, 20, 0, 0, 310, 311, 3, 6, 3, 0, 311, 312, 5, 21, 0, 0, 312, 53, 1, 0, 0, 0, 313, 314, 7, 6, 0, 0, 314, 315, 5, 20, 0, 0, 315, 316, 3, 6, 3, 0, 316, 317, 5, 21, 0, 0, 317, 318, 5, 20, 0, 0, 318, 319, 3, 6, 3, 0, 319, 320, 5, 21, 0, 0, 320, 55, 1, 0, 0, 0, 321, 322, 5, 57, 0, 0, 322, 323, 3, 6, 3, 0, 323, 324, 5, 58, 0, 0, 324, 57, 1, 0, 0, 0, 325, 326, 5, 59, 0, 0, 326, 327, 3, 6, 3, 0, 327, 328, 5, 60, 0, 0, 328, 59, 1, 0, 0, 0, 329, 330, 7, 7, 0, 0, 330, 61, 1, 0, 0, 0, 331, 344, 3, 60, 30, 0, 332, 334, 3, 72, 36, 0, 333, 332, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 336, 1, 0, 0, 0, 335, 337, 3, 74, 37, 0, 336, 335, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 345, 1, 0, 0, 0, 338, 340, 3, 74, 37, 0, 339, 338, 1, 0, 0, 0, 339, 340, 1, 0, 0, 0, 340, 342, 1, 0, 0, 0, 341, 343, 3, 72, 36, 0, 342, 341, 1, 0, 0, 0, 342, 343, 1, 0, 0, 0, 343, 345, 1, 0, 0, 0, 344, 333, 1, 0, 0, 0, 344, 339, 1, 0, 0, 0, 345, 351, 1, 0, 0, 0, 346, 347, 5, 18, 0, 0, 347, 348, 3, 68, 34, 0, 348, 349, 5, 19, 0, 0, 349, 352, 1, 0, 0, 0, 350, 352, 3, 70, 35, 0, 351, 346, 1, 0, 0, 0, 351, 350, 1, 0, 0, 0, 352, 410, 1, 0, 0, 0, 353, 355, 7, 3, 0, 0, 354, 356, 3, 72, 36, 0, 355, 354, 1, 0, 0, 0, 355, 356, 1, 0, 0, 0, 356, 357, 1, 0, 0, 0, 357, 358, 5, 18, 0, 0, 358, 359, 3, 64, 32, 0, 359, 360, 5, 19, 0, 0, 360, 410, 1, 0, 0, 0, 361, 368, 5, 33, 0, 0, 362, 363, 3, 72, 36, 0, 363, 364, 3, 74, 37, 0, 364, 369, 1, 0, 0, 0, 365, 366, 3, 74, 37, 0, 366, 367, 3, 72, 36, 0, 367, 369, 1, 0, 0, 0, 368, 362, 1, 0, 0, 0, 368, 365, 1, 0, 0, 0, 368, 369, 1, 0, 0, 0, 369, 376, 1, 0, 0, 0, 370, 372, 3, 8, 4, 0, 371, 370, 1, 0, 0, 0, 371, 372, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0, 373, 377, 5, 74, 0, 0, 374, 377, 3, 52, 26, 0, 375, 377, 3, 8, 4, 0, 376, 371, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 376, 375, 1, 0, 0, 0, 377, 410, 1, 0, 0, 0, 378, 383, 5, 61, 0, 0, 379, 380, 5, 24, 0, 0, 380, 381, 3, 6, 3, 0, 381, 382, 5, 25, 0, 0, 382, 384, 1, 0, 0, 0, 383, 379, 1, 0, 0, 0, 383, 384, 1, 0, 0, 0, 384, 385, 1, 0, 0, 0, 385, 386, 5, 20, 0, 0, 386, 387, 3, 6, 3, 0, 387, 388, 5, 21, 0, 0, 388, 410, 1, 0, 0, 0, 389, 390, 5, 62, 0, 0, 390, 391, 5, 20, 0, 0, 391, 392, 3, 6, 3, 0, 392, 393, 5, 21, 0, 0, 393, 410, 1, 0, 0, 0, 394, 401, 7, 8, 0, 0, 395, 396, 3, 76, 38, 0, 396, 397, 3, 74, 37, 0, 397, 402, 1, 0, 0, 0, 398, 399, 3, 74, 37, 0, 399, 400, 3, 76, 38, 0, 400, 402, 1, 0, 0, 0, 401, 395, 1, 0, 0, 0, 401, 398, 1, 0, 0, 0, 402, 403, 1, 0, 0, 0, 403, 404, 3, 10, 5, 0, 404, 410, 1, 0, 0, 0, 405, 406, 5, 31, 0, 0, 406, 407, 3, 66, 33, 0, 407, 408, 3, 10, 5, 0, 408, 410, 1, 0, 0, 0, 409, 331, 1, 0, 0, 0, 409, 353, 1, 0, 0, 0, 409, 361, 1, 0, 0, 0, 409, 378, 1, 0, 0, 0, 409, 389, 1, 0, 0, 0, 409, 394, 1, 0, 0, 0, 409, 405, 1, 0, 0, 0, 410, 63, 1, 0, 0, 0, 411, 412, 3, 6, 3, 0, 412, 413, 5, 1, 0, 0, 413, 414, 3, 64, 32, 0, 414, 417, 1, 0, 0, 0, 415, 417, 3, 6, 3, 0, 416, 411, 1, 0, 0, 0, 416, 415, 1, 0, 0, 0, 417, 65, 1, 0, 0, 0, 418, 419, 5, 71, 0, 0, 419, 420, 5, 20, 0, 0, 420, 421, 7, 3, 0, 0, 421, 422, 5, 32, 0, 0, 422, 427, 3, 6, 3, 0, 423, 424, 5, 72, 0, 0, 424, 425, 5, 20, 0, 0, 425, 426, 7, 1, 0, 0, 426, 428, 5, 21, 0, 0, 427, 423, 1, 0, 0, 0, 427, 428, 1, 0, 0, 0, 428, 429, 1, 0, 0, 0, 429, 430, 5, 21, 0, 0, 430, 67, 1, 0, 0, 0, 431, 437, 3, 6, 3, 0, 432, 433, 3, 6, 3, 0, 433, 434, 5, 1, 0, 0, 434, 435, 3, 68, 34, 0, 435, 437, 1, 0, 0, 0, 436, 431, 1, 0, 0, 0, 436, 432, 1, 0, 0, 0, 437, 69, 1, 0, 0, 0, 438, 439, 3, 12, 6, 0, 439, 71, 1, 0, 0, 0, 440, 446, 5, 71, 0, 0, 441, 447, 3, 42, 21, 0, 442, 443, 5, 20, 0, 0, 443, 444, 3, 6, 3, 0, 444, 445, 5, 21, 0, 0, 445, 447, 1, 0, 0, 0, 446, 441, 1, 0, 0, 0, 446, 442, 1, 0, 0, 0, 447, 73, 1, 0, 0, 0, 448, 454, 5, 72, 0, 0, 449, 455, 3, 42, 21, 0, 450, 451, 5, 20, 0, 0, 451, 452, 3, 6, 3, 0, 452, 453, 5, 21, 0, 0, 453, 455, 1, 0, 0, 0, 454, 449, 1, 0, 0, 0, 454, 450, 1, 0, 0, 0, 455, 75, 1, 0, 0, 0, 456, 457, 5, 71, 0, 0, 457, 458, 5, 20, 0, 0, 458, 459, 3, 4, 2, 0, 459, 460, 5, 21, 0, 0, 460, 77, 1, 0, 0, 0, 461, 462, 5, 71, 0, 0, 462, 463, 5, 20, 0, 0, 463, 464, 3, 4, 2, 0, 464, 465, 5, 21, 0, 0, 465, 79, 1, 0, 0, 0, 44, 90, 107, 118, 129, 137, 139, 147, 150, 156, 163, 168, 176, 182, 190, 204, 207, 211, 224, 227, 231, 242, 251, 269, 277, 284, 302, 333, 336, 339, 342, 344, 351, 355, 368, 371, 376, 383, 401, 409, 416, 427, 436, 446, 454]
\ No newline at end of file
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.tokens b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.tokens
new file mode 100644
index 0000000000..2196d34b30
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeX.tokens
@@ -0,0 +1,162 @@
+T__0=1
+WS=2
+THINSPACE=3
+MEDSPACE=4
+THICKSPACE=5
+QUAD=6
+QQUAD=7
+NEGTHINSPACE=8
+NEGMEDSPACE=9
+NEGTHICKSPACE=10
+CMD_LEFT=11
+CMD_RIGHT=12
+IGNORE=13
+ADD=14
+SUB=15
+MUL=16
+DIV=17
+L_PAREN=18
+R_PAREN=19
+L_BRACE=20
+R_BRACE=21
+L_BRACE_LITERAL=22
+R_BRACE_LITERAL=23
+L_BRACKET=24
+R_BRACKET=25
+BAR=26
+R_BAR=27
+L_BAR=28
+L_ANGLE=29
+R_ANGLE=30
+FUNC_LIM=31
+LIM_APPROACH_SYM=32
+FUNC_INT=33
+FUNC_SUM=34
+FUNC_PROD=35
+FUNC_EXP=36
+FUNC_LOG=37
+FUNC_LN=38
+FUNC_SIN=39
+FUNC_COS=40
+FUNC_TAN=41
+FUNC_CSC=42
+FUNC_SEC=43
+FUNC_COT=44
+FUNC_ARCSIN=45
+FUNC_ARCCOS=46
+FUNC_ARCTAN=47
+FUNC_ARCCSC=48
+FUNC_ARCSEC=49
+FUNC_ARCCOT=50
+FUNC_SINH=51
+FUNC_COSH=52
+FUNC_TANH=53
+FUNC_ARSINH=54
+FUNC_ARCOSH=55
+FUNC_ARTANH=56
+L_FLOOR=57
+R_FLOOR=58
+L_CEIL=59
+R_CEIL=60
+FUNC_SQRT=61
+FUNC_OVERLINE=62
+CMD_TIMES=63
+CMD_CDOT=64
+CMD_DIV=65
+CMD_FRAC=66
+CMD_BINOM=67
+CMD_DBINOM=68
+CMD_TBINOM=69
+CMD_MATHIT=70
+UNDERSCORE=71
+CARET=72
+COLON=73
+DIFFERENTIAL=74
+LETTER=75
+NUMBER=76
+EQUAL=77
+NEQ=78
+LT=79
+LTE=80
+LTE_Q=81
+LTE_S=82
+GT=83
+GTE=84
+GTE_Q=85
+GTE_S=86
+BANG=87
+SYMBOL=88
+','=1
+'\\quad'=6
+'\\qquad'=7
+'\\negmedspace'=9
+'\\negthickspace'=10
+'\\left'=11
+'\\right'=12
+'+'=14
+'-'=15
+'*'=16
+'/'=17
+'('=18
+')'=19
+'{'=20
+'}'=21
+'\\{'=22
+'\\}'=23
+'['=24
+']'=25
+'|'=26
+'\\right|'=27
+'\\left|'=28
+'\\langle'=29
+'\\rangle'=30
+'\\lim'=31
+'\\int'=33
+'\\sum'=34
+'\\prod'=35
+'\\exp'=36
+'\\log'=37
+'\\ln'=38
+'\\sin'=39
+'\\cos'=40
+'\\tan'=41
+'\\csc'=42
+'\\sec'=43
+'\\cot'=44
+'\\arcsin'=45
+'\\arccos'=46
+'\\arctan'=47
+'\\arccsc'=48
+'\\arcsec'=49
+'\\arccot'=50
+'\\sinh'=51
+'\\cosh'=52
+'\\tanh'=53
+'\\arsinh'=54
+'\\arcosh'=55
+'\\artanh'=56
+'\\lfloor'=57
+'\\rfloor'=58
+'\\lceil'=59
+'\\rceil'=60
+'\\sqrt'=61
+'\\overline'=62
+'\\times'=63
+'\\cdot'=64
+'\\div'=65
+'\\frac'=66
+'\\binom'=67
+'\\dbinom'=68
+'\\tbinom'=69
+'\\mathit'=70
+'_'=71
+'^'=72
+':'=73
+'\\neq'=78
+'<'=79
+'\\leqq'=81
+'\\leqslant'=82
+'>'=83
+'\\geqq'=85
+'\\geqslant'=86
+'!'=87
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.interp b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.interp
new file mode 100644
index 0000000000..1597964e10
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.interp
@@ -0,0 +1,283 @@
+token literal names:
+null
+','
+null
+null
+null
+null
+'\\quad'
+'\\qquad'
+null
+'\\negmedspace'
+'\\negthickspace'
+'\\left'
+'\\right'
+null
+'+'
+'-'
+'*'
+'/'
+'('
+')'
+'{'
+'}'
+'\\{'
+'\\}'
+'['
+']'
+'|'
+'\\right|'
+'\\left|'
+'\\langle'
+'\\rangle'
+'\\lim'
+null
+'\\int'
+'\\sum'
+'\\prod'
+'\\exp'
+'\\log'
+'\\ln'
+'\\sin'
+'\\cos'
+'\\tan'
+'\\csc'
+'\\sec'
+'\\cot'
+'\\arcsin'
+'\\arccos'
+'\\arctan'
+'\\arccsc'
+'\\arcsec'
+'\\arccot'
+'\\sinh'
+'\\cosh'
+'\\tanh'
+'\\arsinh'
+'\\arcosh'
+'\\artanh'
+'\\lfloor'
+'\\rfloor'
+'\\lceil'
+'\\rceil'
+'\\sqrt'
+'\\overline'
+'\\times'
+'\\cdot'
+'\\div'
+'\\frac'
+'\\binom'
+'\\dbinom'
+'\\tbinom'
+'\\mathit'
+'_'
+'^'
+':'
+null
+null
+null
+null
+'\\neq'
+'<'
+null
+'\\leqq'
+'\\leqslant'
+'>'
+null
+'\\geqq'
+'\\geqslant'
+'!'
+null
+
+token symbolic names:
+null
+null
+WS
+THINSPACE
+MEDSPACE
+THICKSPACE
+QUAD
+QQUAD
+NEGTHINSPACE
+NEGMEDSPACE
+NEGTHICKSPACE
+CMD_LEFT
+CMD_RIGHT
+IGNORE
+ADD
+SUB
+MUL
+DIV
+L_PAREN
+R_PAREN
+L_BRACE
+R_BRACE
+L_BRACE_LITERAL
+R_BRACE_LITERAL
+L_BRACKET
+R_BRACKET
+BAR
+R_BAR
+L_BAR
+L_ANGLE
+R_ANGLE
+FUNC_LIM
+LIM_APPROACH_SYM
+FUNC_INT
+FUNC_SUM
+FUNC_PROD
+FUNC_EXP
+FUNC_LOG
+FUNC_LN
+FUNC_SIN
+FUNC_COS
+FUNC_TAN
+FUNC_CSC
+FUNC_SEC
+FUNC_COT
+FUNC_ARCSIN
+FUNC_ARCCOS
+FUNC_ARCTAN
+FUNC_ARCCSC
+FUNC_ARCSEC
+FUNC_ARCCOT
+FUNC_SINH
+FUNC_COSH
+FUNC_TANH
+FUNC_ARSINH
+FUNC_ARCOSH
+FUNC_ARTANH
+L_FLOOR
+R_FLOOR
+L_CEIL
+R_CEIL
+FUNC_SQRT
+FUNC_OVERLINE
+CMD_TIMES
+CMD_CDOT
+CMD_DIV
+CMD_FRAC
+CMD_BINOM
+CMD_DBINOM
+CMD_TBINOM
+CMD_MATHIT
+UNDERSCORE
+CARET
+COLON
+DIFFERENTIAL
+LETTER
+NUMBER
+EQUAL
+NEQ
+LT
+LTE
+LTE_Q
+LTE_S
+GT
+GTE
+GTE_Q
+GTE_S
+BANG
+SYMBOL
+
+rule names:
+T__0
+WS
+THINSPACE
+MEDSPACE
+THICKSPACE
+QUAD
+QQUAD
+NEGTHINSPACE
+NEGMEDSPACE
+NEGTHICKSPACE
+CMD_LEFT
+CMD_RIGHT
+IGNORE
+ADD
+SUB
+MUL
+DIV
+L_PAREN
+R_PAREN
+L_BRACE
+R_BRACE
+L_BRACE_LITERAL
+R_BRACE_LITERAL
+L_BRACKET
+R_BRACKET
+BAR
+R_BAR
+L_BAR
+L_ANGLE
+R_ANGLE
+FUNC_LIM
+LIM_APPROACH_SYM
+FUNC_INT
+FUNC_SUM
+FUNC_PROD
+FUNC_EXP
+FUNC_LOG
+FUNC_LN
+FUNC_SIN
+FUNC_COS
+FUNC_TAN
+FUNC_CSC
+FUNC_SEC
+FUNC_COT
+FUNC_ARCSIN
+FUNC_ARCCOS
+FUNC_ARCTAN
+FUNC_ARCCSC
+FUNC_ARCSEC
+FUNC_ARCCOT
+FUNC_SINH
+FUNC_COSH
+FUNC_TANH
+FUNC_ARSINH
+FUNC_ARCOSH
+FUNC_ARTANH
+L_FLOOR
+R_FLOOR
+L_CEIL
+R_CEIL
+FUNC_SQRT
+FUNC_OVERLINE
+CMD_TIMES
+CMD_CDOT
+CMD_DIV
+CMD_FRAC
+CMD_BINOM
+CMD_DBINOM
+CMD_TBINOM
+CMD_MATHIT
+UNDERSCORE
+CARET
+COLON
+WS_CHAR
+DIFFERENTIAL
+LETTER
+DIGIT
+NUMBER
+EQUAL
+NEQ
+LT
+LTE
+LTE_Q
+LTE_S
+GT
+GTE
+GTE_Q
+GTE_S
+BANG
+SYMBOL
+
+channel names:
+DEFAULT_TOKEN_CHANNEL
+HIDDEN
+
+mode names:
+DEFAULT_MODE
+
+atn:
+[4, 0, 88, 910, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 1, 0, 1, 0, 1, 1, 4, 1, 185, 8, 1, 11, 1, 12, 1, 186, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 203, 8, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 218, 8, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 235, 8, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 271, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 375, 8, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 498, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 71, 1, 71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 74, 1, 74, 5, 74, 761, 8, 74, 10, 74, 12, 74, 764, 9, 74, 1, 74, 1, 74, 1, 74, 4, 74, 769, 8, 74, 11, 74, 12, 74, 770, 3, 74, 773, 8, 74, 1, 75, 1, 75, 1, 76, 1, 76, 1, 77, 4, 77, 780, 8, 77, 11, 77, 12, 77, 781, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 5, 77, 789, 8, 77, 10, 77, 12, 77, 792, 9, 77, 1, 77, 5, 77, 795, 8, 77, 10, 77, 12, 77, 798, 9, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 5, 77, 805, 8, 77, 10, 77, 12, 77, 808, 9, 77, 1, 77, 1, 77, 4, 77, 812, 8, 77, 11, 77, 12, 77, 813, 3, 77, 816, 8, 77, 1, 78, 1, 78, 5, 78, 820, 8, 78, 10, 78, 12, 78, 823, 9, 78, 3, 78, 825, 8, 78, 1, 78, 1, 78, 1, 78, 5, 78, 830, 8, 78, 10, 78, 12, 78, 833, 9, 78, 1, 78, 3, 78, 836, 8, 78, 3, 78, 838, 8, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 856, 8, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 3, 85, 885, 8, 85, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 89, 1, 89, 4, 89, 907, 8, 89, 11, 89, 12, 89, 908, 3, 762, 821, 831, 0, 90, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113, 57, 115, 58, 117, 59, 119, 60, 121, 61, 123, 62, 125, 63, 127, 64, 129, 65, 131, 66, 133, 67, 135, 68, 137, 69, 139, 70, 141, 71, 143, 72, 145, 73, 147, 0, 149, 74, 151, 75, 153, 0, 155, 76, 157, 77, 159, 78, 161, 79, 163, 80, 165, 81, 167, 82, 169, 83, 171, 84, 173, 85, 175, 86, 177, 87, 179, 88, 1, 0, 3, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 65, 90, 97, 122, 1, 0, 48, 57, 949, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0, 0, 0, 0, 127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 0, 131, 1, 0, 0, 0, 0, 133, 1, 0, 0, 0, 0, 135, 1, 0, 0, 0, 0, 137, 1, 0, 0, 0, 0, 139, 1, 0, 0, 0, 0, 141, 1, 0, 0, 0, 0, 143, 1, 0, 0, 0, 0, 145, 1, 0, 0, 0, 0, 149, 1, 0, 0, 0, 0, 151, 1, 0, 0, 0, 0, 155, 1, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 159, 1, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 163, 1, 0, 0, 0, 0, 165, 1, 0, 0, 0, 0, 167, 1, 0, 0, 0, 0, 169, 1, 0, 0, 0, 0, 171, 1, 0, 0, 0, 0, 173, 1, 0, 0, 0, 0, 175, 1, 0, 0, 0, 0, 177, 1, 0, 0, 0, 0, 179, 1, 0, 0, 0, 1, 181, 1, 0, 0, 0, 3, 184, 1, 0, 0, 0, 5, 202, 1, 0, 0, 0, 7, 217, 1, 0, 0, 0, 9, 234, 1, 0, 0, 0, 11, 238, 1, 0, 0, 0, 13, 246, 1, 0, 0, 0, 15, 270, 1, 0, 0, 0, 17, 274, 1, 0, 0, 0, 19, 289, 1, 0, 0, 0, 21, 306, 1, 0, 0, 0, 23, 314, 1, 0, 0, 0, 25, 374, 1, 0, 0, 0, 27, 378, 1, 0, 0, 0, 29, 380, 1, 0, 0, 0, 31, 382, 1, 0, 0, 0, 33, 384, 1, 0, 0, 0, 35, 386, 1, 0, 0, 0, 37, 388, 1, 0, 0, 0, 39, 390, 1, 0, 0, 0, 41, 392, 1, 0, 0, 0, 43, 394, 1, 0, 0, 0, 45, 397, 1, 0, 0, 0, 47, 400, 1, 0, 0, 0, 49, 402, 1, 0, 0, 0, 51, 404, 1, 0, 0, 0, 53, 406, 1, 0, 0, 0, 55, 414, 1, 0, 0, 0, 57, 421, 1, 0, 0, 0, 59, 429, 1, 0, 0, 0, 61, 437, 1, 0, 0, 0, 63, 497, 1, 0, 0, 0, 65, 499, 1, 0, 0, 0, 67, 504, 1, 0, 0, 0, 69, 509, 1, 0, 0, 0, 71, 515, 1, 0, 0, 0, 73, 520, 1, 0, 0, 0, 75, 525, 1, 0, 0, 0, 77, 529, 1, 0, 0, 0, 79, 534, 1, 0, 0, 0, 81, 539, 1, 0, 0, 0, 83, 544, 1, 0, 0, 0, 85, 549, 1, 0, 0, 0, 87, 554, 1, 0, 0, 0, 89, 559, 1, 0, 0, 0, 91, 567, 1, 0, 0, 0, 93, 575, 1, 0, 0, 0, 95, 583, 1, 0, 0, 0, 97, 591, 1, 0, 0, 0, 99, 599, 1, 0, 0, 0, 101, 607, 1, 0, 0, 0, 103, 613, 1, 0, 0, 0, 105, 619, 1, 0, 0, 0, 107, 625, 1, 0, 0, 0, 109, 633, 1, 0, 0, 0, 111, 641, 1, 0, 0, 0, 113, 649, 1, 0, 0, 0, 115, 657, 1, 0, 0, 0, 117, 665, 1, 0, 0, 0, 119, 672, 1, 0, 0, 0, 121, 679, 1, 0, 0, 0, 123, 685, 1, 0, 0, 0, 125, 695, 1, 0, 0, 0, 127, 702, 1, 0, 0, 0, 129, 708, 1, 0, 0, 0, 131, 713, 1, 0, 0, 0, 133, 719, 1, 0, 0, 0, 135, 726, 1, 0, 0, 0, 137, 734, 1, 0, 0, 0, 139, 742, 1, 0, 0, 0, 141, 750, 1, 0, 0, 0, 143, 752, 1, 0, 0, 0, 145, 754, 1, 0, 0, 0, 147, 756, 1, 0, 0, 0, 149, 758, 1, 0, 0, 0, 151, 774, 1, 0, 0, 0, 153, 776, 1, 0, 0, 0, 155, 815, 1, 0, 0, 0, 157, 837, 1, 0, 0, 0, 159, 839, 1, 0, 0, 0, 161, 844, 1, 0, 0, 0, 163, 855, 1, 0, 0, 0, 165, 857, 1, 0, 0, 0, 167, 863, 1, 0, 0, 0, 169, 873, 1, 0, 0, 0, 171, 884, 1, 0, 0, 0, 173, 886, 1, 0, 0, 0, 175, 892, 1, 0, 0, 0, 177, 902, 1, 0, 0, 0, 179, 904, 1, 0, 0, 0, 181, 182, 5, 44, 0, 0, 182, 2, 1, 0, 0, 0, 183, 185, 7, 0, 0, 0, 184, 183, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 184, 1, 0, 0, 0, 186, 187, 1, 0, 0, 0, 187, 188, 1, 0, 0, 0, 188, 189, 6, 1, 0, 0, 189, 4, 1, 0, 0, 0, 190, 191, 5, 92, 0, 0, 191, 203, 5, 44, 0, 0, 192, 193, 5, 92, 0, 0, 193, 194, 5, 116, 0, 0, 194, 195, 5, 104, 0, 0, 195, 196, 5, 105, 0, 0, 196, 197, 5, 110, 0, 0, 197, 198, 5, 115, 0, 0, 198, 199, 5, 112, 0, 0, 199, 200, 5, 97, 0, 0, 200, 201, 5, 99, 0, 0, 201, 203, 5, 101, 0, 0, 202, 190, 1, 0, 0, 0, 202, 192, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 205, 6, 2, 0, 0, 205, 6, 1, 0, 0, 0, 206, 207, 5, 92, 0, 0, 207, 218, 5, 58, 0, 0, 208, 209, 5, 92, 0, 0, 209, 210, 5, 109, 0, 0, 210, 211, 5, 101, 0, 0, 211, 212, 5, 100, 0, 0, 212, 213, 5, 115, 0, 0, 213, 214, 5, 112, 0, 0, 214, 215, 5, 97, 0, 0, 215, 216, 5, 99, 0, 0, 216, 218, 5, 101, 0, 0, 217, 206, 1, 0, 0, 0, 217, 208, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 219, 220, 6, 3, 0, 0, 220, 8, 1, 0, 0, 0, 221, 222, 5, 92, 0, 0, 222, 235, 5, 59, 0, 0, 223, 224, 5, 92, 0, 0, 224, 225, 5, 116, 0, 0, 225, 226, 5, 104, 0, 0, 226, 227, 5, 105, 0, 0, 227, 228, 5, 99, 0, 0, 228, 229, 5, 107, 0, 0, 229, 230, 5, 115, 0, 0, 230, 231, 5, 112, 0, 0, 231, 232, 5, 97, 0, 0, 232, 233, 5, 99, 0, 0, 233, 235, 5, 101, 0, 0, 234, 221, 1, 0, 0, 0, 234, 223, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0, 236, 237, 6, 4, 0, 0, 237, 10, 1, 0, 0, 0, 238, 239, 5, 92, 0, 0, 239, 240, 5, 113, 0, 0, 240, 241, 5, 117, 0, 0, 241, 242, 5, 97, 0, 0, 242, 243, 5, 100, 0, 0, 243, 244, 1, 0, 0, 0, 244, 245, 6, 5, 0, 0, 245, 12, 1, 0, 0, 0, 246, 247, 5, 92, 0, 0, 247, 248, 5, 113, 0, 0, 248, 249, 5, 113, 0, 0, 249, 250, 5, 117, 0, 0, 250, 251, 5, 97, 0, 0, 251, 252, 5, 100, 0, 0, 252, 253, 1, 0, 0, 0, 253, 254, 6, 6, 0, 0, 254, 14, 1, 0, 0, 0, 255, 256, 5, 92, 0, 0, 256, 271, 5, 33, 0, 0, 257, 258, 5, 92, 0, 0, 258, 259, 5, 110, 0, 0, 259, 260, 5, 101, 0, 0, 260, 261, 5, 103, 0, 0, 261, 262, 5, 116, 0, 0, 262, 263, 5, 104, 0, 0, 263, 264, 5, 105, 0, 0, 264, 265, 5, 110, 0, 0, 265, 266, 5, 115, 0, 0, 266, 267, 5, 112, 0, 0, 267, 268, 5, 97, 0, 0, 268, 269, 5, 99, 0, 0, 269, 271, 5, 101, 0, 0, 270, 255, 1, 0, 0, 0, 270, 257, 1, 0, 0, 0, 271, 272, 1, 0, 0, 0, 272, 273, 6, 7, 0, 0, 273, 16, 1, 0, 0, 0, 274, 275, 5, 92, 0, 0, 275, 276, 5, 110, 0, 0, 276, 277, 5, 101, 0, 0, 277, 278, 5, 103, 0, 0, 278, 279, 5, 109, 0, 0, 279, 280, 5, 101, 0, 0, 280, 281, 5, 100, 0, 0, 281, 282, 5, 115, 0, 0, 282, 283, 5, 112, 0, 0, 283, 284, 5, 97, 0, 0, 284, 285, 5, 99, 0, 0, 285, 286, 5, 101, 0, 0, 286, 287, 1, 0, 0, 0, 287, 288, 6, 8, 0, 0, 288, 18, 1, 0, 0, 0, 289, 290, 5, 92, 0, 0, 290, 291, 5, 110, 0, 0, 291, 292, 5, 101, 0, 0, 292, 293, 5, 103, 0, 0, 293, 294, 5, 116, 0, 0, 294, 295, 5, 104, 0, 0, 295, 296, 5, 105, 0, 0, 296, 297, 5, 99, 0, 0, 297, 298, 5, 107, 0, 0, 298, 299, 5, 115, 0, 0, 299, 300, 5, 112, 0, 0, 300, 301, 5, 97, 0, 0, 301, 302, 5, 99, 0, 0, 302, 303, 5, 101, 0, 0, 303, 304, 1, 0, 0, 0, 304, 305, 6, 9, 0, 0, 305, 20, 1, 0, 0, 0, 306, 307, 5, 92, 0, 0, 307, 308, 5, 108, 0, 0, 308, 309, 5, 101, 0, 0, 309, 310, 5, 102, 0, 0, 310, 311, 5, 116, 0, 0, 311, 312, 1, 0, 0, 0, 312, 313, 6, 10, 0, 0, 313, 22, 1, 0, 0, 0, 314, 315, 5, 92, 0, 0, 315, 316, 5, 114, 0, 0, 316, 317, 5, 105, 0, 0, 317, 318, 5, 103, 0, 0, 318, 319, 5, 104, 0, 0, 319, 320, 5, 116, 0, 0, 320, 321, 1, 0, 0, 0, 321, 322, 6, 11, 0, 0, 322, 24, 1, 0, 0, 0, 323, 324, 5, 92, 0, 0, 324, 325, 5, 118, 0, 0, 325, 326, 5, 114, 0, 0, 326, 327, 5, 117, 0, 0, 327, 328, 5, 108, 0, 0, 328, 375, 5, 101, 0, 0, 329, 330, 5, 92, 0, 0, 330, 331, 5, 118, 0, 0, 331, 332, 5, 99, 0, 0, 332, 333, 5, 101, 0, 0, 333, 334, 5, 110, 0, 0, 334, 335, 5, 116, 0, 0, 335, 336, 5, 101, 0, 0, 336, 375, 5, 114, 0, 0, 337, 338, 5, 92, 0, 0, 338, 339, 5, 118, 0, 0, 339, 340, 5, 98, 0, 0, 340, 341, 5, 111, 0, 0, 341, 375, 5, 120, 0, 0, 342, 343, 5, 92, 0, 0, 343, 344, 5, 118, 0, 0, 344, 345, 5, 115, 0, 0, 345, 346, 5, 107, 0, 0, 346, 347, 5, 105, 0, 0, 347, 375, 5, 112, 0, 0, 348, 349, 5, 92, 0, 0, 349, 350, 5, 118, 0, 0, 350, 351, 5, 115, 0, 0, 351, 352, 5, 112, 0, 0, 352, 353, 5, 97, 0, 0, 353, 354, 5, 99, 0, 0, 354, 375, 5, 101, 0, 0, 355, 356, 5, 92, 0, 0, 356, 357, 5, 104, 0, 0, 357, 358, 5, 102, 0, 0, 358, 359, 5, 105, 0, 0, 359, 375, 5, 108, 0, 0, 360, 361, 5, 92, 0, 0, 361, 375, 5, 42, 0, 0, 362, 363, 5, 92, 0, 0, 363, 375, 5, 45, 0, 0, 364, 365, 5, 92, 0, 0, 365, 375, 5, 46, 0, 0, 366, 367, 5, 92, 0, 0, 367, 375, 5, 47, 0, 0, 368, 369, 5, 92, 0, 0, 369, 375, 5, 34, 0, 0, 370, 371, 5, 92, 0, 0, 371, 375, 5, 40, 0, 0, 372, 373, 5, 92, 0, 0, 373, 375, 5, 61, 0, 0, 374, 323, 1, 0, 0, 0, 374, 329, 1, 0, 0, 0, 374, 337, 1, 0, 0, 0, 374, 342, 1, 0, 0, 0, 374, 348, 1, 0, 0, 0, 374, 355, 1, 0, 0, 0, 374, 360, 1, 0, 0, 0, 374, 362, 1, 0, 0, 0, 374, 364, 1, 0, 0, 0, 374, 366, 1, 0, 0, 0, 374, 368, 1, 0, 0, 0, 374, 370, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 375, 376, 1, 0, 0, 0, 376, 377, 6, 12, 0, 0, 377, 26, 1, 0, 0, 0, 378, 379, 5, 43, 0, 0, 379, 28, 1, 0, 0, 0, 380, 381, 5, 45, 0, 0, 381, 30, 1, 0, 0, 0, 382, 383, 5, 42, 0, 0, 383, 32, 1, 0, 0, 0, 384, 385, 5, 47, 0, 0, 385, 34, 1, 0, 0, 0, 386, 387, 5, 40, 0, 0, 387, 36, 1, 0, 0, 0, 388, 389, 5, 41, 0, 0, 389, 38, 1, 0, 0, 0, 390, 391, 5, 123, 0, 0, 391, 40, 1, 0, 0, 0, 392, 393, 5, 125, 0, 0, 393, 42, 1, 0, 0, 0, 394, 395, 5, 92, 0, 0, 395, 396, 5, 123, 0, 0, 396, 44, 1, 0, 0, 0, 397, 398, 5, 92, 0, 0, 398, 399, 5, 125, 0, 0, 399, 46, 1, 0, 0, 0, 400, 401, 5, 91, 0, 0, 401, 48, 1, 0, 0, 0, 402, 403, 5, 93, 0, 0, 403, 50, 1, 0, 0, 0, 404, 405, 5, 124, 0, 0, 405, 52, 1, 0, 0, 0, 406, 407, 5, 92, 0, 0, 407, 408, 5, 114, 0, 0, 408, 409, 5, 105, 0, 0, 409, 410, 5, 103, 0, 0, 410, 411, 5, 104, 0, 0, 411, 412, 5, 116, 0, 0, 412, 413, 5, 124, 0, 0, 413, 54, 1, 0, 0, 0, 414, 415, 5, 92, 0, 0, 415, 416, 5, 108, 0, 0, 416, 417, 5, 101, 0, 0, 417, 418, 5, 102, 0, 0, 418, 419, 5, 116, 0, 0, 419, 420, 5, 124, 0, 0, 420, 56, 1, 0, 0, 0, 421, 422, 5, 92, 0, 0, 422, 423, 5, 108, 0, 0, 423, 424, 5, 97, 0, 0, 424, 425, 5, 110, 0, 0, 425, 426, 5, 103, 0, 0, 426, 427, 5, 108, 0, 0, 427, 428, 5, 101, 0, 0, 428, 58, 1, 0, 0, 0, 429, 430, 5, 92, 0, 0, 430, 431, 5, 114, 0, 0, 431, 432, 5, 97, 0, 0, 432, 433, 5, 110, 0, 0, 433, 434, 5, 103, 0, 0, 434, 435, 5, 108, 0, 0, 435, 436, 5, 101, 0, 0, 436, 60, 1, 0, 0, 0, 437, 438, 5, 92, 0, 0, 438, 439, 5, 108, 0, 0, 439, 440, 5, 105, 0, 0, 440, 441, 5, 109, 0, 0, 441, 62, 1, 0, 0, 0, 442, 443, 5, 92, 0, 0, 443, 444, 5, 116, 0, 0, 444, 498, 5, 111, 0, 0, 445, 446, 5, 92, 0, 0, 446, 447, 5, 114, 0, 0, 447, 448, 5, 105, 0, 0, 448, 449, 5, 103, 0, 0, 449, 450, 5, 104, 0, 0, 450, 451, 5, 116, 0, 0, 451, 452, 5, 97, 0, 0, 452, 453, 5, 114, 0, 0, 453, 454, 5, 114, 0, 0, 454, 455, 5, 111, 0, 0, 455, 498, 5, 119, 0, 0, 456, 457, 5, 92, 0, 0, 457, 458, 5, 82, 0, 0, 458, 459, 5, 105, 0, 0, 459, 460, 5, 103, 0, 0, 460, 461, 5, 104, 0, 0, 461, 462, 5, 116, 0, 0, 462, 463, 5, 97, 0, 0, 463, 464, 5, 114, 0, 0, 464, 465, 5, 114, 0, 0, 465, 466, 5, 111, 0, 0, 466, 498, 5, 119, 0, 0, 467, 468, 5, 92, 0, 0, 468, 469, 5, 108, 0, 0, 469, 470, 5, 111, 0, 0, 470, 471, 5, 110, 0, 0, 471, 472, 5, 103, 0, 0, 472, 473, 5, 114, 0, 0, 473, 474, 5, 105, 0, 0, 474, 475, 5, 103, 0, 0, 475, 476, 5, 104, 0, 0, 476, 477, 5, 116, 0, 0, 477, 478, 5, 97, 0, 0, 478, 479, 5, 114, 0, 0, 479, 480, 5, 114, 0, 0, 480, 481, 5, 111, 0, 0, 481, 498, 5, 119, 0, 0, 482, 483, 5, 92, 0, 0, 483, 484, 5, 76, 0, 0, 484, 485, 5, 111, 0, 0, 485, 486, 5, 110, 0, 0, 486, 487, 5, 103, 0, 0, 487, 488, 5, 114, 0, 0, 488, 489, 5, 105, 0, 0, 489, 490, 5, 103, 0, 0, 490, 491, 5, 104, 0, 0, 491, 492, 5, 116, 0, 0, 492, 493, 5, 97, 0, 0, 493, 494, 5, 114, 0, 0, 494, 495, 5, 114, 0, 0, 495, 496, 5, 111, 0, 0, 496, 498, 5, 119, 0, 0, 497, 442, 1, 0, 0, 0, 497, 445, 1, 0, 0, 0, 497, 456, 1, 0, 0, 0, 497, 467, 1, 0, 0, 0, 497, 482, 1, 0, 0, 0, 498, 64, 1, 0, 0, 0, 499, 500, 5, 92, 0, 0, 500, 501, 5, 105, 0, 0, 501, 502, 5, 110, 0, 0, 502, 503, 5, 116, 0, 0, 503, 66, 1, 0, 0, 0, 504, 505, 5, 92, 0, 0, 505, 506, 5, 115, 0, 0, 506, 507, 5, 117, 0, 0, 507, 508, 5, 109, 0, 0, 508, 68, 1, 0, 0, 0, 509, 510, 5, 92, 0, 0, 510, 511, 5, 112, 0, 0, 511, 512, 5, 114, 0, 0, 512, 513, 5, 111, 0, 0, 513, 514, 5, 100, 0, 0, 514, 70, 1, 0, 0, 0, 515, 516, 5, 92, 0, 0, 516, 517, 5, 101, 0, 0, 517, 518, 5, 120, 0, 0, 518, 519, 5, 112, 0, 0, 519, 72, 1, 0, 0, 0, 520, 521, 5, 92, 0, 0, 521, 522, 5, 108, 0, 0, 522, 523, 5, 111, 0, 0, 523, 524, 5, 103, 0, 0, 524, 74, 1, 0, 0, 0, 525, 526, 5, 92, 0, 0, 526, 527, 5, 108, 0, 0, 527, 528, 5, 110, 0, 0, 528, 76, 1, 0, 0, 0, 529, 530, 5, 92, 0, 0, 530, 531, 5, 115, 0, 0, 531, 532, 5, 105, 0, 0, 532, 533, 5, 110, 0, 0, 533, 78, 1, 0, 0, 0, 534, 535, 5, 92, 0, 0, 535, 536, 5, 99, 0, 0, 536, 537, 5, 111, 0, 0, 537, 538, 5, 115, 0, 0, 538, 80, 1, 0, 0, 0, 539, 540, 5, 92, 0, 0, 540, 541, 5, 116, 0, 0, 541, 542, 5, 97, 0, 0, 542, 543, 5, 110, 0, 0, 543, 82, 1, 0, 0, 0, 544, 545, 5, 92, 0, 0, 545, 546, 5, 99, 0, 0, 546, 547, 5, 115, 0, 0, 547, 548, 5, 99, 0, 0, 548, 84, 1, 0, 0, 0, 549, 550, 5, 92, 0, 0, 550, 551, 5, 115, 0, 0, 551, 552, 5, 101, 0, 0, 552, 553, 5, 99, 0, 0, 553, 86, 1, 0, 0, 0, 554, 555, 5, 92, 0, 0, 555, 556, 5, 99, 0, 0, 556, 557, 5, 111, 0, 0, 557, 558, 5, 116, 0, 0, 558, 88, 1, 0, 0, 0, 559, 560, 5, 92, 0, 0, 560, 561, 5, 97, 0, 0, 561, 562, 5, 114, 0, 0, 562, 563, 5, 99, 0, 0, 563, 564, 5, 115, 0, 0, 564, 565, 5, 105, 0, 0, 565, 566, 5, 110, 0, 0, 566, 90, 1, 0, 0, 0, 567, 568, 5, 92, 0, 0, 568, 569, 5, 97, 0, 0, 569, 570, 5, 114, 0, 0, 570, 571, 5, 99, 0, 0, 571, 572, 5, 99, 0, 0, 572, 573, 5, 111, 0, 0, 573, 574, 5, 115, 0, 0, 574, 92, 1, 0, 0, 0, 575, 576, 5, 92, 0, 0, 576, 577, 5, 97, 0, 0, 577, 578, 5, 114, 0, 0, 578, 579, 5, 99, 0, 0, 579, 580, 5, 116, 0, 0, 580, 581, 5, 97, 0, 0, 581, 582, 5, 110, 0, 0, 582, 94, 1, 0, 0, 0, 583, 584, 5, 92, 0, 0, 584, 585, 5, 97, 0, 0, 585, 586, 5, 114, 0, 0, 586, 587, 5, 99, 0, 0, 587, 588, 5, 99, 0, 0, 588, 589, 5, 115, 0, 0, 589, 590, 5, 99, 0, 0, 590, 96, 1, 0, 0, 0, 591, 592, 5, 92, 0, 0, 592, 593, 5, 97, 0, 0, 593, 594, 5, 114, 0, 0, 594, 595, 5, 99, 0, 0, 595, 596, 5, 115, 0, 0, 596, 597, 5, 101, 0, 0, 597, 598, 5, 99, 0, 0, 598, 98, 1, 0, 0, 0, 599, 600, 5, 92, 0, 0, 600, 601, 5, 97, 0, 0, 601, 602, 5, 114, 0, 0, 602, 603, 5, 99, 0, 0, 603, 604, 5, 99, 0, 0, 604, 605, 5, 111, 0, 0, 605, 606, 5, 116, 0, 0, 606, 100, 1, 0, 0, 0, 607, 608, 5, 92, 0, 0, 608, 609, 5, 115, 0, 0, 609, 610, 5, 105, 0, 0, 610, 611, 5, 110, 0, 0, 611, 612, 5, 104, 0, 0, 612, 102, 1, 0, 0, 0, 613, 614, 5, 92, 0, 0, 614, 615, 5, 99, 0, 0, 615, 616, 5, 111, 0, 0, 616, 617, 5, 115, 0, 0, 617, 618, 5, 104, 0, 0, 618, 104, 1, 0, 0, 0, 619, 620, 5, 92, 0, 0, 620, 621, 5, 116, 0, 0, 621, 622, 5, 97, 0, 0, 622, 623, 5, 110, 0, 0, 623, 624, 5, 104, 0, 0, 624, 106, 1, 0, 0, 0, 625, 626, 5, 92, 0, 0, 626, 627, 5, 97, 0, 0, 627, 628, 5, 114, 0, 0, 628, 629, 5, 115, 0, 0, 629, 630, 5, 105, 0, 0, 630, 631, 5, 110, 0, 0, 631, 632, 5, 104, 0, 0, 632, 108, 1, 0, 0, 0, 633, 634, 5, 92, 0, 0, 634, 635, 5, 97, 0, 0, 635, 636, 5, 114, 0, 0, 636, 637, 5, 99, 0, 0, 637, 638, 5, 111, 0, 0, 638, 639, 5, 115, 0, 0, 639, 640, 5, 104, 0, 0, 640, 110, 1, 0, 0, 0, 641, 642, 5, 92, 0, 0, 642, 643, 5, 97, 0, 0, 643, 644, 5, 114, 0, 0, 644, 645, 5, 116, 0, 0, 645, 646, 5, 97, 0, 0, 646, 647, 5, 110, 0, 0, 647, 648, 5, 104, 0, 0, 648, 112, 1, 0, 0, 0, 649, 650, 5, 92, 0, 0, 650, 651, 5, 108, 0, 0, 651, 652, 5, 102, 0, 0, 652, 653, 5, 108, 0, 0, 653, 654, 5, 111, 0, 0, 654, 655, 5, 111, 0, 0, 655, 656, 5, 114, 0, 0, 656, 114, 1, 0, 0, 0, 657, 658, 5, 92, 0, 0, 658, 659, 5, 114, 0, 0, 659, 660, 5, 102, 0, 0, 660, 661, 5, 108, 0, 0, 661, 662, 5, 111, 0, 0, 662, 663, 5, 111, 0, 0, 663, 664, 5, 114, 0, 0, 664, 116, 1, 0, 0, 0, 665, 666, 5, 92, 0, 0, 666, 667, 5, 108, 0, 0, 667, 668, 5, 99, 0, 0, 668, 669, 5, 101, 0, 0, 669, 670, 5, 105, 0, 0, 670, 671, 5, 108, 0, 0, 671, 118, 1, 0, 0, 0, 672, 673, 5, 92, 0, 0, 673, 674, 5, 114, 0, 0, 674, 675, 5, 99, 0, 0, 675, 676, 5, 101, 0, 0, 676, 677, 5, 105, 0, 0, 677, 678, 5, 108, 0, 0, 678, 120, 1, 0, 0, 0, 679, 680, 5, 92, 0, 0, 680, 681, 5, 115, 0, 0, 681, 682, 5, 113, 0, 0, 682, 683, 5, 114, 0, 0, 683, 684, 5, 116, 0, 0, 684, 122, 1, 0, 0, 0, 685, 686, 5, 92, 0, 0, 686, 687, 5, 111, 0, 0, 687, 688, 5, 118, 0, 0, 688, 689, 5, 101, 0, 0, 689, 690, 5, 114, 0, 0, 690, 691, 5, 108, 0, 0, 691, 692, 5, 105, 0, 0, 692, 693, 5, 110, 0, 0, 693, 694, 5, 101, 0, 0, 694, 124, 1, 0, 0, 0, 695, 696, 5, 92, 0, 0, 696, 697, 5, 116, 0, 0, 697, 698, 5, 105, 0, 0, 698, 699, 5, 109, 0, 0, 699, 700, 5, 101, 0, 0, 700, 701, 5, 115, 0, 0, 701, 126, 1, 0, 0, 0, 702, 703, 5, 92, 0, 0, 703, 704, 5, 99, 0, 0, 704, 705, 5, 100, 0, 0, 705, 706, 5, 111, 0, 0, 706, 707, 5, 116, 0, 0, 707, 128, 1, 0, 0, 0, 708, 709, 5, 92, 0, 0, 709, 710, 5, 100, 0, 0, 710, 711, 5, 105, 0, 0, 711, 712, 5, 118, 0, 0, 712, 130, 1, 0, 0, 0, 713, 714, 5, 92, 0, 0, 714, 715, 5, 102, 0, 0, 715, 716, 5, 114, 0, 0, 716, 717, 5, 97, 0, 0, 717, 718, 5, 99, 0, 0, 718, 132, 1, 0, 0, 0, 719, 720, 5, 92, 0, 0, 720, 721, 5, 98, 0, 0, 721, 722, 5, 105, 0, 0, 722, 723, 5, 110, 0, 0, 723, 724, 5, 111, 0, 0, 724, 725, 5, 109, 0, 0, 725, 134, 1, 0, 0, 0, 726, 727, 5, 92, 0, 0, 727, 728, 5, 100, 0, 0, 728, 729, 5, 98, 0, 0, 729, 730, 5, 105, 0, 0, 730, 731, 5, 110, 0, 0, 731, 732, 5, 111, 0, 0, 732, 733, 5, 109, 0, 0, 733, 136, 1, 0, 0, 0, 734, 735, 5, 92, 0, 0, 735, 736, 5, 116, 0, 0, 736, 737, 5, 98, 0, 0, 737, 738, 5, 105, 0, 0, 738, 739, 5, 110, 0, 0, 739, 740, 5, 111, 0, 0, 740, 741, 5, 109, 0, 0, 741, 138, 1, 0, 0, 0, 742, 743, 5, 92, 0, 0, 743, 744, 5, 109, 0, 0, 744, 745, 5, 97, 0, 0, 745, 746, 5, 116, 0, 0, 746, 747, 5, 104, 0, 0, 747, 748, 5, 105, 0, 0, 748, 749, 5, 116, 0, 0, 749, 140, 1, 0, 0, 0, 750, 751, 5, 95, 0, 0, 751, 142, 1, 0, 0, 0, 752, 753, 5, 94, 0, 0, 753, 144, 1, 0, 0, 0, 754, 755, 5, 58, 0, 0, 755, 146, 1, 0, 0, 0, 756, 757, 7, 0, 0, 0, 757, 148, 1, 0, 0, 0, 758, 762, 5, 100, 0, 0, 759, 761, 3, 147, 73, 0, 760, 759, 1, 0, 0, 0, 761, 764, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0, 762, 760, 1, 0, 0, 0, 763, 772, 1, 0, 0, 0, 764, 762, 1, 0, 0, 0, 765, 773, 7, 1, 0, 0, 766, 768, 5, 92, 0, 0, 767, 769, 7, 1, 0, 0, 768, 767, 1, 0, 0, 0, 769, 770, 1, 0, 0, 0, 770, 768, 1, 0, 0, 0, 770, 771, 1, 0, 0, 0, 771, 773, 1, 0, 0, 0, 772, 765, 1, 0, 0, 0, 772, 766, 1, 0, 0, 0, 773, 150, 1, 0, 0, 0, 774, 775, 7, 1, 0, 0, 775, 152, 1, 0, 0, 0, 776, 777, 7, 2, 0, 0, 777, 154, 1, 0, 0, 0, 778, 780, 3, 153, 76, 0, 779, 778, 1, 0, 0, 0, 780, 781, 1, 0, 0, 0, 781, 779, 1, 0, 0, 0, 781, 782, 1, 0, 0, 0, 782, 790, 1, 0, 0, 0, 783, 784, 5, 44, 0, 0, 784, 785, 3, 153, 76, 0, 785, 786, 3, 153, 76, 0, 786, 787, 3, 153, 76, 0, 787, 789, 1, 0, 0, 0, 788, 783, 1, 0, 0, 0, 789, 792, 1, 0, 0, 0, 790, 788, 1, 0, 0, 0, 790, 791, 1, 0, 0, 0, 791, 816, 1, 0, 0, 0, 792, 790, 1, 0, 0, 0, 793, 795, 3, 153, 76, 0, 794, 793, 1, 0, 0, 0, 795, 798, 1, 0, 0, 0, 796, 794, 1, 0, 0, 0, 796, 797, 1, 0, 0, 0, 797, 806, 1, 0, 0, 0, 798, 796, 1, 0, 0, 0, 799, 800, 5, 44, 0, 0, 800, 801, 3, 153, 76, 0, 801, 802, 3, 153, 76, 0, 802, 803, 3, 153, 76, 0, 803, 805, 1, 0, 0, 0, 804, 799, 1, 0, 0, 0, 805, 808, 1, 0, 0, 0, 806, 804, 1, 0, 0, 0, 806, 807, 1, 0, 0, 0, 807, 809, 1, 0, 0, 0, 808, 806, 1, 0, 0, 0, 809, 811, 5, 46, 0, 0, 810, 812, 3, 153, 76, 0, 811, 810, 1, 0, 0, 0, 812, 813, 1, 0, 0, 0, 813, 811, 1, 0, 0, 0, 813, 814, 1, 0, 0, 0, 814, 816, 1, 0, 0, 0, 815, 779, 1, 0, 0, 0, 815, 796, 1, 0, 0, 0, 816, 156, 1, 0, 0, 0, 817, 821, 5, 38, 0, 0, 818, 820, 3, 147, 73, 0, 819, 818, 1, 0, 0, 0, 820, 823, 1, 0, 0, 0, 821, 822, 1, 0, 0, 0, 821, 819, 1, 0, 0, 0, 822, 825, 1, 0, 0, 0, 823, 821, 1, 0, 0, 0, 824, 817, 1, 0, 0, 0, 824, 825, 1, 0, 0, 0, 825, 826, 1, 0, 0, 0, 826, 838, 5, 61, 0, 0, 827, 835, 5, 61, 0, 0, 828, 830, 3, 147, 73, 0, 829, 828, 1, 0, 0, 0, 830, 833, 1, 0, 0, 0, 831, 832, 1, 0, 0, 0, 831, 829, 1, 0, 0, 0, 832, 834, 1, 0, 0, 0, 833, 831, 1, 0, 0, 0, 834, 836, 5, 38, 0, 0, 835, 831, 1, 0, 0, 0, 835, 836, 1, 0, 0, 0, 836, 838, 1, 0, 0, 0, 837, 824, 1, 0, 0, 0, 837, 827, 1, 0, 0, 0, 838, 158, 1, 0, 0, 0, 839, 840, 5, 92, 0, 0, 840, 841, 5, 110, 0, 0, 841, 842, 5, 101, 0, 0, 842, 843, 5, 113, 0, 0, 843, 160, 1, 0, 0, 0, 844, 845, 5, 60, 0, 0, 845, 162, 1, 0, 0, 0, 846, 847, 5, 92, 0, 0, 847, 848, 5, 108, 0, 0, 848, 849, 5, 101, 0, 0, 849, 856, 5, 113, 0, 0, 850, 851, 5, 92, 0, 0, 851, 852, 5, 108, 0, 0, 852, 856, 5, 101, 0, 0, 853, 856, 3, 165, 82, 0, 854, 856, 3, 167, 83, 0, 855, 846, 1, 0, 0, 0, 855, 850, 1, 0, 0, 0, 855, 853, 1, 0, 0, 0, 855, 854, 1, 0, 0, 0, 856, 164, 1, 0, 0, 0, 857, 858, 5, 92, 0, 0, 858, 859, 5, 108, 0, 0, 859, 860, 5, 101, 0, 0, 860, 861, 5, 113, 0, 0, 861, 862, 5, 113, 0, 0, 862, 166, 1, 0, 0, 0, 863, 864, 5, 92, 0, 0, 864, 865, 5, 108, 0, 0, 865, 866, 5, 101, 0, 0, 866, 867, 5, 113, 0, 0, 867, 868, 5, 115, 0, 0, 868, 869, 5, 108, 0, 0, 869, 870, 5, 97, 0, 0, 870, 871, 5, 110, 0, 0, 871, 872, 5, 116, 0, 0, 872, 168, 1, 0, 0, 0, 873, 874, 5, 62, 0, 0, 874, 170, 1, 0, 0, 0, 875, 876, 5, 92, 0, 0, 876, 877, 5, 103, 0, 0, 877, 878, 5, 101, 0, 0, 878, 885, 5, 113, 0, 0, 879, 880, 5, 92, 0, 0, 880, 881, 5, 103, 0, 0, 881, 885, 5, 101, 0, 0, 882, 885, 3, 173, 86, 0, 883, 885, 3, 175, 87, 0, 884, 875, 1, 0, 0, 0, 884, 879, 1, 0, 0, 0, 884, 882, 1, 0, 0, 0, 884, 883, 1, 0, 0, 0, 885, 172, 1, 0, 0, 0, 886, 887, 5, 92, 0, 0, 887, 888, 5, 103, 0, 0, 888, 889, 5, 101, 0, 0, 889, 890, 5, 113, 0, 0, 890, 891, 5, 113, 0, 0, 891, 174, 1, 0, 0, 0, 892, 893, 5, 92, 0, 0, 893, 894, 5, 103, 0, 0, 894, 895, 5, 101, 0, 0, 895, 896, 5, 113, 0, 0, 896, 897, 5, 115, 0, 0, 897, 898, 5, 108, 0, 0, 898, 899, 5, 97, 0, 0, 899, 900, 5, 110, 0, 0, 900, 901, 5, 116, 0, 0, 901, 176, 1, 0, 0, 0, 902, 903, 5, 33, 0, 0, 903, 178, 1, 0, 0, 0, 904, 906, 5, 92, 0, 0, 905, 907, 7, 1, 0, 0, 906, 905, 1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908, 906, 1, 0, 0, 0, 908, 909, 1, 0, 0, 0, 909, 180, 1, 0, 0, 0, 25, 0, 186, 202, 217, 234, 270, 374, 497, 762, 770, 772, 781, 790, 796, 806, 813, 815, 821, 824, 831, 835, 837, 855, 884, 908, 1, 6, 0, 0]
\ No newline at end of file
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.py b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.py
new file mode 100644
index 0000000000..8f0ad1f8d3
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.py
@@ -0,0 +1,500 @@
+# Generated from sympy/parsing/latex/LaTeX.g4 by ANTLR 4.13.1
+from antlr4 import *
+from io import StringIO
+import sys
+if sys.version_info[1] > 5:
+    from typing import TextIO
+else:
+    from typing.io import TextIO
+
+
+def serializedATN():
+    return [
+        4,0,88,910,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
+        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
+        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
+        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
+        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
+        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
+        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
+        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
+        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
+        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
+        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
+        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
+        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
+        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,1,0,1,0,1,1,
+        4,1,185,8,1,11,1,12,1,186,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
+        2,1,2,1,2,1,2,1,2,3,2,203,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
+        3,1,3,1,3,1,3,1,3,3,3,218,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
+        4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,235,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
+        5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
+        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,271,8,7,1,7,1,
+        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
+        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
+        9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
+        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
+        12,1,12,1,12,1,12,3,12,375,8,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
+        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
+        21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
+        26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
+        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
+        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,498,8,
+        31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,
+        34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
+        36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,
+        39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,
+        42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
+        44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,
+        46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,
+        47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,
+        49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
+        51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,
+        53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
+        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,
+        56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,
+        58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,
+        60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
+        61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,
+        63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,
+        66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,
+        67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,
+        69,1,69,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,
+        74,1,74,5,74,761,8,74,10,74,12,74,764,9,74,1,74,1,74,1,74,4,74,769,
+        8,74,11,74,12,74,770,3,74,773,8,74,1,75,1,75,1,76,1,76,1,77,4,77,
+        780,8,77,11,77,12,77,781,1,77,1,77,1,77,1,77,1,77,5,77,789,8,77,
+        10,77,12,77,792,9,77,1,77,5,77,795,8,77,10,77,12,77,798,9,77,1,77,
+        1,77,1,77,1,77,1,77,5,77,805,8,77,10,77,12,77,808,9,77,1,77,1,77,
+        4,77,812,8,77,11,77,12,77,813,3,77,816,8,77,1,78,1,78,5,78,820,8,
+        78,10,78,12,78,823,9,78,3,78,825,8,78,1,78,1,78,1,78,5,78,830,8,
+        78,10,78,12,78,833,9,78,1,78,3,78,836,8,78,3,78,838,8,78,1,79,1,
+        79,1,79,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
+        81,1,81,3,81,856,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,
+        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,85,1,85,1,85,1,
+        85,1,85,1,85,1,85,1,85,1,85,3,85,885,8,85,1,86,1,86,1,86,1,86,1,
+        86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,
+        88,1,89,1,89,4,89,907,8,89,11,89,12,89,908,3,762,821,831,0,90,1,
+        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
+        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
+        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
+        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
+        47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
+        57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,
+        133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,0,149,74,151,
+        75,153,0,155,76,157,77,159,78,161,79,163,80,165,81,167,82,169,83,
+        171,84,173,85,175,86,177,87,179,88,1,0,3,3,0,9,10,13,13,32,32,2,
+        0,65,90,97,122,1,0,48,57,949,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
+        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
+        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
+        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
+        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
+        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
+        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
+        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
+        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
+        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
+        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
+        0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
+        1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
+        0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,
+        0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,
+        143,1,0,0,0,0,145,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,155,1,0,
+        0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,
+        1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,
+        0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,1,181,1,0,0,0,3,184,1,
+        0,0,0,5,202,1,0,0,0,7,217,1,0,0,0,9,234,1,0,0,0,11,238,1,0,0,0,13,
+        246,1,0,0,0,15,270,1,0,0,0,17,274,1,0,0,0,19,289,1,0,0,0,21,306,
+        1,0,0,0,23,314,1,0,0,0,25,374,1,0,0,0,27,378,1,0,0,0,29,380,1,0,
+        0,0,31,382,1,0,0,0,33,384,1,0,0,0,35,386,1,0,0,0,37,388,1,0,0,0,
+        39,390,1,0,0,0,41,392,1,0,0,0,43,394,1,0,0,0,45,397,1,0,0,0,47,400,
+        1,0,0,0,49,402,1,0,0,0,51,404,1,0,0,0,53,406,1,0,0,0,55,414,1,0,
+        0,0,57,421,1,0,0,0,59,429,1,0,0,0,61,437,1,0,0,0,63,497,1,0,0,0,
+        65,499,1,0,0,0,67,504,1,0,0,0,69,509,1,0,0,0,71,515,1,0,0,0,73,520,
+        1,0,0,0,75,525,1,0,0,0,77,529,1,0,0,0,79,534,1,0,0,0,81,539,1,0,
+        0,0,83,544,1,0,0,0,85,549,1,0,0,0,87,554,1,0,0,0,89,559,1,0,0,0,
+        91,567,1,0,0,0,93,575,1,0,0,0,95,583,1,0,0,0,97,591,1,0,0,0,99,599,
+        1,0,0,0,101,607,1,0,0,0,103,613,1,0,0,0,105,619,1,0,0,0,107,625,
+        1,0,0,0,109,633,1,0,0,0,111,641,1,0,0,0,113,649,1,0,0,0,115,657,
+        1,0,0,0,117,665,1,0,0,0,119,672,1,0,0,0,121,679,1,0,0,0,123,685,
+        1,0,0,0,125,695,1,0,0,0,127,702,1,0,0,0,129,708,1,0,0,0,131,713,
+        1,0,0,0,133,719,1,0,0,0,135,726,1,0,0,0,137,734,1,0,0,0,139,742,
+        1,0,0,0,141,750,1,0,0,0,143,752,1,0,0,0,145,754,1,0,0,0,147,756,
+        1,0,0,0,149,758,1,0,0,0,151,774,1,0,0,0,153,776,1,0,0,0,155,815,
+        1,0,0,0,157,837,1,0,0,0,159,839,1,0,0,0,161,844,1,0,0,0,163,855,
+        1,0,0,0,165,857,1,0,0,0,167,863,1,0,0,0,169,873,1,0,0,0,171,884,
+        1,0,0,0,173,886,1,0,0,0,175,892,1,0,0,0,177,902,1,0,0,0,179,904,
+        1,0,0,0,181,182,5,44,0,0,182,2,1,0,0,0,183,185,7,0,0,0,184,183,1,
+        0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,188,1,
+        0,0,0,188,189,6,1,0,0,189,4,1,0,0,0,190,191,5,92,0,0,191,203,5,44,
+        0,0,192,193,5,92,0,0,193,194,5,116,0,0,194,195,5,104,0,0,195,196,
+        5,105,0,0,196,197,5,110,0,0,197,198,5,115,0,0,198,199,5,112,0,0,
+        199,200,5,97,0,0,200,201,5,99,0,0,201,203,5,101,0,0,202,190,1,0,
+        0,0,202,192,1,0,0,0,203,204,1,0,0,0,204,205,6,2,0,0,205,6,1,0,0,
+        0,206,207,5,92,0,0,207,218,5,58,0,0,208,209,5,92,0,0,209,210,5,109,
+        0,0,210,211,5,101,0,0,211,212,5,100,0,0,212,213,5,115,0,0,213,214,
+        5,112,0,0,214,215,5,97,0,0,215,216,5,99,0,0,216,218,5,101,0,0,217,
+        206,1,0,0,0,217,208,1,0,0,0,218,219,1,0,0,0,219,220,6,3,0,0,220,
+        8,1,0,0,0,221,222,5,92,0,0,222,235,5,59,0,0,223,224,5,92,0,0,224,
+        225,5,116,0,0,225,226,5,104,0,0,226,227,5,105,0,0,227,228,5,99,0,
+        0,228,229,5,107,0,0,229,230,5,115,0,0,230,231,5,112,0,0,231,232,
+        5,97,0,0,232,233,5,99,0,0,233,235,5,101,0,0,234,221,1,0,0,0,234,
+        223,1,0,0,0,235,236,1,0,0,0,236,237,6,4,0,0,237,10,1,0,0,0,238,239,
+        5,92,0,0,239,240,5,113,0,0,240,241,5,117,0,0,241,242,5,97,0,0,242,
+        243,5,100,0,0,243,244,1,0,0,0,244,245,6,5,0,0,245,12,1,0,0,0,246,
+        247,5,92,0,0,247,248,5,113,0,0,248,249,5,113,0,0,249,250,5,117,0,
+        0,250,251,5,97,0,0,251,252,5,100,0,0,252,253,1,0,0,0,253,254,6,6,
+        0,0,254,14,1,0,0,0,255,256,5,92,0,0,256,271,5,33,0,0,257,258,5,92,
+        0,0,258,259,5,110,0,0,259,260,5,101,0,0,260,261,5,103,0,0,261,262,
+        5,116,0,0,262,263,5,104,0,0,263,264,5,105,0,0,264,265,5,110,0,0,
+        265,266,5,115,0,0,266,267,5,112,0,0,267,268,5,97,0,0,268,269,5,99,
+        0,0,269,271,5,101,0,0,270,255,1,0,0,0,270,257,1,0,0,0,271,272,1,
+        0,0,0,272,273,6,7,0,0,273,16,1,0,0,0,274,275,5,92,0,0,275,276,5,
+        110,0,0,276,277,5,101,0,0,277,278,5,103,0,0,278,279,5,109,0,0,279,
+        280,5,101,0,0,280,281,5,100,0,0,281,282,5,115,0,0,282,283,5,112,
+        0,0,283,284,5,97,0,0,284,285,5,99,0,0,285,286,5,101,0,0,286,287,
+        1,0,0,0,287,288,6,8,0,0,288,18,1,0,0,0,289,290,5,92,0,0,290,291,
+        5,110,0,0,291,292,5,101,0,0,292,293,5,103,0,0,293,294,5,116,0,0,
+        294,295,5,104,0,0,295,296,5,105,0,0,296,297,5,99,0,0,297,298,5,107,
+        0,0,298,299,5,115,0,0,299,300,5,112,0,0,300,301,5,97,0,0,301,302,
+        5,99,0,0,302,303,5,101,0,0,303,304,1,0,0,0,304,305,6,9,0,0,305,20,
+        1,0,0,0,306,307,5,92,0,0,307,308,5,108,0,0,308,309,5,101,0,0,309,
+        310,5,102,0,0,310,311,5,116,0,0,311,312,1,0,0,0,312,313,6,10,0,0,
+        313,22,1,0,0,0,314,315,5,92,0,0,315,316,5,114,0,0,316,317,5,105,
+        0,0,317,318,5,103,0,0,318,319,5,104,0,0,319,320,5,116,0,0,320,321,
+        1,0,0,0,321,322,6,11,0,0,322,24,1,0,0,0,323,324,5,92,0,0,324,325,
+        5,118,0,0,325,326,5,114,0,0,326,327,5,117,0,0,327,328,5,108,0,0,
+        328,375,5,101,0,0,329,330,5,92,0,0,330,331,5,118,0,0,331,332,5,99,
+        0,0,332,333,5,101,0,0,333,334,5,110,0,0,334,335,5,116,0,0,335,336,
+        5,101,0,0,336,375,5,114,0,0,337,338,5,92,0,0,338,339,5,118,0,0,339,
+        340,5,98,0,0,340,341,5,111,0,0,341,375,5,120,0,0,342,343,5,92,0,
+        0,343,344,5,118,0,0,344,345,5,115,0,0,345,346,5,107,0,0,346,347,
+        5,105,0,0,347,375,5,112,0,0,348,349,5,92,0,0,349,350,5,118,0,0,350,
+        351,5,115,0,0,351,352,5,112,0,0,352,353,5,97,0,0,353,354,5,99,0,
+        0,354,375,5,101,0,0,355,356,5,92,0,0,356,357,5,104,0,0,357,358,5,
+        102,0,0,358,359,5,105,0,0,359,375,5,108,0,0,360,361,5,92,0,0,361,
+        375,5,42,0,0,362,363,5,92,0,0,363,375,5,45,0,0,364,365,5,92,0,0,
+        365,375,5,46,0,0,366,367,5,92,0,0,367,375,5,47,0,0,368,369,5,92,
+        0,0,369,375,5,34,0,0,370,371,5,92,0,0,371,375,5,40,0,0,372,373,5,
+        92,0,0,373,375,5,61,0,0,374,323,1,0,0,0,374,329,1,0,0,0,374,337,
+        1,0,0,0,374,342,1,0,0,0,374,348,1,0,0,0,374,355,1,0,0,0,374,360,
+        1,0,0,0,374,362,1,0,0,0,374,364,1,0,0,0,374,366,1,0,0,0,374,368,
+        1,0,0,0,374,370,1,0,0,0,374,372,1,0,0,0,375,376,1,0,0,0,376,377,
+        6,12,0,0,377,26,1,0,0,0,378,379,5,43,0,0,379,28,1,0,0,0,380,381,
+        5,45,0,0,381,30,1,0,0,0,382,383,5,42,0,0,383,32,1,0,0,0,384,385,
+        5,47,0,0,385,34,1,0,0,0,386,387,5,40,0,0,387,36,1,0,0,0,388,389,
+        5,41,0,0,389,38,1,0,0,0,390,391,5,123,0,0,391,40,1,0,0,0,392,393,
+        5,125,0,0,393,42,1,0,0,0,394,395,5,92,0,0,395,396,5,123,0,0,396,
+        44,1,0,0,0,397,398,5,92,0,0,398,399,5,125,0,0,399,46,1,0,0,0,400,
+        401,5,91,0,0,401,48,1,0,0,0,402,403,5,93,0,0,403,50,1,0,0,0,404,
+        405,5,124,0,0,405,52,1,0,0,0,406,407,5,92,0,0,407,408,5,114,0,0,
+        408,409,5,105,0,0,409,410,5,103,0,0,410,411,5,104,0,0,411,412,5,
+        116,0,0,412,413,5,124,0,0,413,54,1,0,0,0,414,415,5,92,0,0,415,416,
+        5,108,0,0,416,417,5,101,0,0,417,418,5,102,0,0,418,419,5,116,0,0,
+        419,420,5,124,0,0,420,56,1,0,0,0,421,422,5,92,0,0,422,423,5,108,
+        0,0,423,424,5,97,0,0,424,425,5,110,0,0,425,426,5,103,0,0,426,427,
+        5,108,0,0,427,428,5,101,0,0,428,58,1,0,0,0,429,430,5,92,0,0,430,
+        431,5,114,0,0,431,432,5,97,0,0,432,433,5,110,0,0,433,434,5,103,0,
+        0,434,435,5,108,0,0,435,436,5,101,0,0,436,60,1,0,0,0,437,438,5,92,
+        0,0,438,439,5,108,0,0,439,440,5,105,0,0,440,441,5,109,0,0,441,62,
+        1,0,0,0,442,443,5,92,0,0,443,444,5,116,0,0,444,498,5,111,0,0,445,
+        446,5,92,0,0,446,447,5,114,0,0,447,448,5,105,0,0,448,449,5,103,0,
+        0,449,450,5,104,0,0,450,451,5,116,0,0,451,452,5,97,0,0,452,453,5,
+        114,0,0,453,454,5,114,0,0,454,455,5,111,0,0,455,498,5,119,0,0,456,
+        457,5,92,0,0,457,458,5,82,0,0,458,459,5,105,0,0,459,460,5,103,0,
+        0,460,461,5,104,0,0,461,462,5,116,0,0,462,463,5,97,0,0,463,464,5,
+        114,0,0,464,465,5,114,0,0,465,466,5,111,0,0,466,498,5,119,0,0,467,
+        468,5,92,0,0,468,469,5,108,0,0,469,470,5,111,0,0,470,471,5,110,0,
+        0,471,472,5,103,0,0,472,473,5,114,0,0,473,474,5,105,0,0,474,475,
+        5,103,0,0,475,476,5,104,0,0,476,477,5,116,0,0,477,478,5,97,0,0,478,
+        479,5,114,0,0,479,480,5,114,0,0,480,481,5,111,0,0,481,498,5,119,
+        0,0,482,483,5,92,0,0,483,484,5,76,0,0,484,485,5,111,0,0,485,486,
+        5,110,0,0,486,487,5,103,0,0,487,488,5,114,0,0,488,489,5,105,0,0,
+        489,490,5,103,0,0,490,491,5,104,0,0,491,492,5,116,0,0,492,493,5,
+        97,0,0,493,494,5,114,0,0,494,495,5,114,0,0,495,496,5,111,0,0,496,
+        498,5,119,0,0,497,442,1,0,0,0,497,445,1,0,0,0,497,456,1,0,0,0,497,
+        467,1,0,0,0,497,482,1,0,0,0,498,64,1,0,0,0,499,500,5,92,0,0,500,
+        501,5,105,0,0,501,502,5,110,0,0,502,503,5,116,0,0,503,66,1,0,0,0,
+        504,505,5,92,0,0,505,506,5,115,0,0,506,507,5,117,0,0,507,508,5,109,
+        0,0,508,68,1,0,0,0,509,510,5,92,0,0,510,511,5,112,0,0,511,512,5,
+        114,0,0,512,513,5,111,0,0,513,514,5,100,0,0,514,70,1,0,0,0,515,516,
+        5,92,0,0,516,517,5,101,0,0,517,518,5,120,0,0,518,519,5,112,0,0,519,
+        72,1,0,0,0,520,521,5,92,0,0,521,522,5,108,0,0,522,523,5,111,0,0,
+        523,524,5,103,0,0,524,74,1,0,0,0,525,526,5,92,0,0,526,527,5,108,
+        0,0,527,528,5,110,0,0,528,76,1,0,0,0,529,530,5,92,0,0,530,531,5,
+        115,0,0,531,532,5,105,0,0,532,533,5,110,0,0,533,78,1,0,0,0,534,535,
+        5,92,0,0,535,536,5,99,0,0,536,537,5,111,0,0,537,538,5,115,0,0,538,
+        80,1,0,0,0,539,540,5,92,0,0,540,541,5,116,0,0,541,542,5,97,0,0,542,
+        543,5,110,0,0,543,82,1,0,0,0,544,545,5,92,0,0,545,546,5,99,0,0,546,
+        547,5,115,0,0,547,548,5,99,0,0,548,84,1,0,0,0,549,550,5,92,0,0,550,
+        551,5,115,0,0,551,552,5,101,0,0,552,553,5,99,0,0,553,86,1,0,0,0,
+        554,555,5,92,0,0,555,556,5,99,0,0,556,557,5,111,0,0,557,558,5,116,
+        0,0,558,88,1,0,0,0,559,560,5,92,0,0,560,561,5,97,0,0,561,562,5,114,
+        0,0,562,563,5,99,0,0,563,564,5,115,0,0,564,565,5,105,0,0,565,566,
+        5,110,0,0,566,90,1,0,0,0,567,568,5,92,0,0,568,569,5,97,0,0,569,570,
+        5,114,0,0,570,571,5,99,0,0,571,572,5,99,0,0,572,573,5,111,0,0,573,
+        574,5,115,0,0,574,92,1,0,0,0,575,576,5,92,0,0,576,577,5,97,0,0,577,
+        578,5,114,0,0,578,579,5,99,0,0,579,580,5,116,0,0,580,581,5,97,0,
+        0,581,582,5,110,0,0,582,94,1,0,0,0,583,584,5,92,0,0,584,585,5,97,
+        0,0,585,586,5,114,0,0,586,587,5,99,0,0,587,588,5,99,0,0,588,589,
+        5,115,0,0,589,590,5,99,0,0,590,96,1,0,0,0,591,592,5,92,0,0,592,593,
+        5,97,0,0,593,594,5,114,0,0,594,595,5,99,0,0,595,596,5,115,0,0,596,
+        597,5,101,0,0,597,598,5,99,0,0,598,98,1,0,0,0,599,600,5,92,0,0,600,
+        601,5,97,0,0,601,602,5,114,0,0,602,603,5,99,0,0,603,604,5,99,0,0,
+        604,605,5,111,0,0,605,606,5,116,0,0,606,100,1,0,0,0,607,608,5,92,
+        0,0,608,609,5,115,0,0,609,610,5,105,0,0,610,611,5,110,0,0,611,612,
+        5,104,0,0,612,102,1,0,0,0,613,614,5,92,0,0,614,615,5,99,0,0,615,
+        616,5,111,0,0,616,617,5,115,0,0,617,618,5,104,0,0,618,104,1,0,0,
+        0,619,620,5,92,0,0,620,621,5,116,0,0,621,622,5,97,0,0,622,623,5,
+        110,0,0,623,624,5,104,0,0,624,106,1,0,0,0,625,626,5,92,0,0,626,627,
+        5,97,0,0,627,628,5,114,0,0,628,629,5,115,0,0,629,630,5,105,0,0,630,
+        631,5,110,0,0,631,632,5,104,0,0,632,108,1,0,0,0,633,634,5,92,0,0,
+        634,635,5,97,0,0,635,636,5,114,0,0,636,637,5,99,0,0,637,638,5,111,
+        0,0,638,639,5,115,0,0,639,640,5,104,0,0,640,110,1,0,0,0,641,642,
+        5,92,0,0,642,643,5,97,0,0,643,644,5,114,0,0,644,645,5,116,0,0,645,
+        646,5,97,0,0,646,647,5,110,0,0,647,648,5,104,0,0,648,112,1,0,0,0,
+        649,650,5,92,0,0,650,651,5,108,0,0,651,652,5,102,0,0,652,653,5,108,
+        0,0,653,654,5,111,0,0,654,655,5,111,0,0,655,656,5,114,0,0,656,114,
+        1,0,0,0,657,658,5,92,0,0,658,659,5,114,0,0,659,660,5,102,0,0,660,
+        661,5,108,0,0,661,662,5,111,0,0,662,663,5,111,0,0,663,664,5,114,
+        0,0,664,116,1,0,0,0,665,666,5,92,0,0,666,667,5,108,0,0,667,668,5,
+        99,0,0,668,669,5,101,0,0,669,670,5,105,0,0,670,671,5,108,0,0,671,
+        118,1,0,0,0,672,673,5,92,0,0,673,674,5,114,0,0,674,675,5,99,0,0,
+        675,676,5,101,0,0,676,677,5,105,0,0,677,678,5,108,0,0,678,120,1,
+        0,0,0,679,680,5,92,0,0,680,681,5,115,0,0,681,682,5,113,0,0,682,683,
+        5,114,0,0,683,684,5,116,0,0,684,122,1,0,0,0,685,686,5,92,0,0,686,
+        687,5,111,0,0,687,688,5,118,0,0,688,689,5,101,0,0,689,690,5,114,
+        0,0,690,691,5,108,0,0,691,692,5,105,0,0,692,693,5,110,0,0,693,694,
+        5,101,0,0,694,124,1,0,0,0,695,696,5,92,0,0,696,697,5,116,0,0,697,
+        698,5,105,0,0,698,699,5,109,0,0,699,700,5,101,0,0,700,701,5,115,
+        0,0,701,126,1,0,0,0,702,703,5,92,0,0,703,704,5,99,0,0,704,705,5,
+        100,0,0,705,706,5,111,0,0,706,707,5,116,0,0,707,128,1,0,0,0,708,
+        709,5,92,0,0,709,710,5,100,0,0,710,711,5,105,0,0,711,712,5,118,0,
+        0,712,130,1,0,0,0,713,714,5,92,0,0,714,715,5,102,0,0,715,716,5,114,
+        0,0,716,717,5,97,0,0,717,718,5,99,0,0,718,132,1,0,0,0,719,720,5,
+        92,0,0,720,721,5,98,0,0,721,722,5,105,0,0,722,723,5,110,0,0,723,
+        724,5,111,0,0,724,725,5,109,0,0,725,134,1,0,0,0,726,727,5,92,0,0,
+        727,728,5,100,0,0,728,729,5,98,0,0,729,730,5,105,0,0,730,731,5,110,
+        0,0,731,732,5,111,0,0,732,733,5,109,0,0,733,136,1,0,0,0,734,735,
+        5,92,0,0,735,736,5,116,0,0,736,737,5,98,0,0,737,738,5,105,0,0,738,
+        739,5,110,0,0,739,740,5,111,0,0,740,741,5,109,0,0,741,138,1,0,0,
+        0,742,743,5,92,0,0,743,744,5,109,0,0,744,745,5,97,0,0,745,746,5,
+        116,0,0,746,747,5,104,0,0,747,748,5,105,0,0,748,749,5,116,0,0,749,
+        140,1,0,0,0,750,751,5,95,0,0,751,142,1,0,0,0,752,753,5,94,0,0,753,
+        144,1,0,0,0,754,755,5,58,0,0,755,146,1,0,0,0,756,757,7,0,0,0,757,
+        148,1,0,0,0,758,762,5,100,0,0,759,761,3,147,73,0,760,759,1,0,0,0,
+        761,764,1,0,0,0,762,763,1,0,0,0,762,760,1,0,0,0,763,772,1,0,0,0,
+        764,762,1,0,0,0,765,773,7,1,0,0,766,768,5,92,0,0,767,769,7,1,0,0,
+        768,767,1,0,0,0,769,770,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,
+        771,773,1,0,0,0,772,765,1,0,0,0,772,766,1,0,0,0,773,150,1,0,0,0,
+        774,775,7,1,0,0,775,152,1,0,0,0,776,777,7,2,0,0,777,154,1,0,0,0,
+        778,780,3,153,76,0,779,778,1,0,0,0,780,781,1,0,0,0,781,779,1,0,0,
+        0,781,782,1,0,0,0,782,790,1,0,0,0,783,784,5,44,0,0,784,785,3,153,
+        76,0,785,786,3,153,76,0,786,787,3,153,76,0,787,789,1,0,0,0,788,783,
+        1,0,0,0,789,792,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,816,
+        1,0,0,0,792,790,1,0,0,0,793,795,3,153,76,0,794,793,1,0,0,0,795,798,
+        1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,806,1,0,0,0,798,796,
+        1,0,0,0,799,800,5,44,0,0,800,801,3,153,76,0,801,802,3,153,76,0,802,
+        803,3,153,76,0,803,805,1,0,0,0,804,799,1,0,0,0,805,808,1,0,0,0,806,
+        804,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,806,1,0,0,0,809,
+        811,5,46,0,0,810,812,3,153,76,0,811,810,1,0,0,0,812,813,1,0,0,0,
+        813,811,1,0,0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,779,1,0,0,0,
+        815,796,1,0,0,0,816,156,1,0,0,0,817,821,5,38,0,0,818,820,3,147,73,
+        0,819,818,1,0,0,0,820,823,1,0,0,0,821,822,1,0,0,0,821,819,1,0,0,
+        0,822,825,1,0,0,0,823,821,1,0,0,0,824,817,1,0,0,0,824,825,1,0,0,
+        0,825,826,1,0,0,0,826,838,5,61,0,0,827,835,5,61,0,0,828,830,3,147,
+        73,0,829,828,1,0,0,0,830,833,1,0,0,0,831,832,1,0,0,0,831,829,1,0,
+        0,0,832,834,1,0,0,0,833,831,1,0,0,0,834,836,5,38,0,0,835,831,1,0,
+        0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,824,1,0,0,0,837,827,1,0,
+        0,0,838,158,1,0,0,0,839,840,5,92,0,0,840,841,5,110,0,0,841,842,5,
+        101,0,0,842,843,5,113,0,0,843,160,1,0,0,0,844,845,5,60,0,0,845,162,
+        1,0,0,0,846,847,5,92,0,0,847,848,5,108,0,0,848,849,5,101,0,0,849,
+        856,5,113,0,0,850,851,5,92,0,0,851,852,5,108,0,0,852,856,5,101,0,
+        0,853,856,3,165,82,0,854,856,3,167,83,0,855,846,1,0,0,0,855,850,
+        1,0,0,0,855,853,1,0,0,0,855,854,1,0,0,0,856,164,1,0,0,0,857,858,
+        5,92,0,0,858,859,5,108,0,0,859,860,5,101,0,0,860,861,5,113,0,0,861,
+        862,5,113,0,0,862,166,1,0,0,0,863,864,5,92,0,0,864,865,5,108,0,0,
+        865,866,5,101,0,0,866,867,5,113,0,0,867,868,5,115,0,0,868,869,5,
+        108,0,0,869,870,5,97,0,0,870,871,5,110,0,0,871,872,5,116,0,0,872,
+        168,1,0,0,0,873,874,5,62,0,0,874,170,1,0,0,0,875,876,5,92,0,0,876,
+        877,5,103,0,0,877,878,5,101,0,0,878,885,5,113,0,0,879,880,5,92,0,
+        0,880,881,5,103,0,0,881,885,5,101,0,0,882,885,3,173,86,0,883,885,
+        3,175,87,0,884,875,1,0,0,0,884,879,1,0,0,0,884,882,1,0,0,0,884,883,
+        1,0,0,0,885,172,1,0,0,0,886,887,5,92,0,0,887,888,5,103,0,0,888,889,
+        5,101,0,0,889,890,5,113,0,0,890,891,5,113,0,0,891,174,1,0,0,0,892,
+        893,5,92,0,0,893,894,5,103,0,0,894,895,5,101,0,0,895,896,5,113,0,
+        0,896,897,5,115,0,0,897,898,5,108,0,0,898,899,5,97,0,0,899,900,5,
+        110,0,0,900,901,5,116,0,0,901,176,1,0,0,0,902,903,5,33,0,0,903,178,
+        1,0,0,0,904,906,5,92,0,0,905,907,7,1,0,0,906,905,1,0,0,0,907,908,
+        1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,180,1,0,0,0,25,0,186,
+        202,217,234,270,374,497,762,770,772,781,790,796,806,813,815,821,
+        824,831,835,837,855,884,908,1,6,0,0
+    ]
+
+class LaTeXLexer(Lexer):
+
+    atn = ATNDeserializer().deserialize(serializedATN())
+
+    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
+
+    T__0 = 1
+    WS = 2
+    THINSPACE = 3
+    MEDSPACE = 4
+    THICKSPACE = 5
+    QUAD = 6
+    QQUAD = 7
+    NEGTHINSPACE = 8
+    NEGMEDSPACE = 9
+    NEGTHICKSPACE = 10
+    CMD_LEFT = 11
+    CMD_RIGHT = 12
+    IGNORE = 13
+    ADD = 14
+    SUB = 15
+    MUL = 16
+    DIV = 17
+    L_PAREN = 18
+    R_PAREN = 19
+    L_BRACE = 20
+    R_BRACE = 21
+    L_BRACE_LITERAL = 22
+    R_BRACE_LITERAL = 23
+    L_BRACKET = 24
+    R_BRACKET = 25
+    BAR = 26
+    R_BAR = 27
+    L_BAR = 28
+    L_ANGLE = 29
+    R_ANGLE = 30
+    FUNC_LIM = 31
+    LIM_APPROACH_SYM = 32
+    FUNC_INT = 33
+    FUNC_SUM = 34
+    FUNC_PROD = 35
+    FUNC_EXP = 36
+    FUNC_LOG = 37
+    FUNC_LN = 38
+    FUNC_SIN = 39
+    FUNC_COS = 40
+    FUNC_TAN = 41
+    FUNC_CSC = 42
+    FUNC_SEC = 43
+    FUNC_COT = 44
+    FUNC_ARCSIN = 45
+    FUNC_ARCCOS = 46
+    FUNC_ARCTAN = 47
+    FUNC_ARCCSC = 48
+    FUNC_ARCSEC = 49
+    FUNC_ARCCOT = 50
+    FUNC_SINH = 51
+    FUNC_COSH = 52
+    FUNC_TANH = 53
+    FUNC_ARSINH = 54
+    FUNC_ARCOSH = 55
+    FUNC_ARTANH = 56
+    L_FLOOR = 57
+    R_FLOOR = 58
+    L_CEIL = 59
+    R_CEIL = 60
+    FUNC_SQRT = 61
+    FUNC_OVERLINE = 62
+    CMD_TIMES = 63
+    CMD_CDOT = 64
+    CMD_DIV = 65
+    CMD_FRAC = 66
+    CMD_BINOM = 67
+    CMD_DBINOM = 68
+    CMD_TBINOM = 69
+    CMD_MATHIT = 70
+    UNDERSCORE = 71
+    CARET = 72
+    COLON = 73
+    DIFFERENTIAL = 74
+    LETTER = 75
+    NUMBER = 76
+    EQUAL = 77
+    NEQ = 78
+    LT = 79
+    LTE = 80
+    LTE_Q = 81
+    LTE_S = 82
+    GT = 83
+    GTE = 84
+    GTE_Q = 85
+    GTE_S = 86
+    BANG = 87
+    SYMBOL = 88
+
+    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]
+
+    modeNames = [ "DEFAULT_MODE" ]
+
+    literalNames = [ "<INVALID>",
+            "','", "'\\quad'", "'\\qquad'", "'\\negmedspace'", "'\\negthickspace'", 
+            "'\\left'", "'\\right'", "'+'", "'-'", "'*'", "'/'", "'('", 
+            "')'", "'{'", "'}'", "'\\{'", "'\\}'", "'['", "']'", "'|'", 
+            "'\\right|'", "'\\left|'", "'\\langle'", "'\\rangle'", "'\\lim'", 
+            "'\\int'", "'\\sum'", "'\\prod'", "'\\exp'", "'\\log'", "'\\ln'", 
+            "'\\sin'", "'\\cos'", "'\\tan'", "'\\csc'", "'\\sec'", "'\\cot'", 
+            "'\\arcsin'", "'\\arccos'", "'\\arctan'", "'\\arccsc'", "'\\arcsec'", 
+            "'\\arccot'", "'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\arsinh'", 
+            "'\\arcosh'", "'\\artanh'", "'\\lfloor'", "'\\rfloor'", "'\\lceil'", 
+            "'\\rceil'", "'\\sqrt'", "'\\overline'", "'\\times'", "'\\cdot'", 
+            "'\\div'", "'\\frac'", "'\\binom'", "'\\dbinom'", "'\\tbinom'", 
+            "'\\mathit'", "'_'", "'^'", "':'", "'\\neq'", "'<'", "'\\leqq'", 
+            "'\\leqslant'", "'>'", "'\\geqq'", "'\\geqslant'", "'!'" ]
+
+    symbolicNames = [ "<INVALID>",
+            "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", "QUAD", "QQUAD", 
+            "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE", "CMD_LEFT", 
+            "CMD_RIGHT", "IGNORE", "ADD", "SUB", "MUL", "DIV", "L_PAREN", 
+            "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL", 
+            "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", "L_BAR", "L_ANGLE", 
+            "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_SUM", 
+            "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", "FUNC_LN", "FUNC_SIN", 
+            "FUNC_COS", "FUNC_TAN", "FUNC_CSC", "FUNC_SEC", "FUNC_COT", 
+            "FUNC_ARCSIN", "FUNC_ARCCOS", "FUNC_ARCTAN", "FUNC_ARCCSC", 
+            "FUNC_ARCSEC", "FUNC_ARCCOT", "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", 
+            "FUNC_ARSINH", "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR", 
+            "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE", "CMD_TIMES", 
+            "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_DBINOM", 
+            "CMD_TBINOM", "CMD_MATHIT", "UNDERSCORE", "CARET", "COLON", 
+            "DIFFERENTIAL", "LETTER", "NUMBER", "EQUAL", "NEQ", "LT", "LTE", 
+            "LTE_Q", "LTE_S", "GT", "GTE", "GTE_Q", "GTE_S", "BANG", "SYMBOL" ]
+
+    ruleNames = [ "T__0", "WS", "THINSPACE", "MEDSPACE", "THICKSPACE", "QUAD", 
+                  "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE", "NEGTHICKSPACE", 
+                  "CMD_LEFT", "CMD_RIGHT", "IGNORE", "ADD", "SUB", "MUL", 
+                  "DIV", "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", 
+                  "R_BRACE_LITERAL", "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", 
+                  "L_BAR", "L_ANGLE", "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM", 
+                  "FUNC_INT", "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", 
+                  "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC", 
+                  "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS", 
+                  "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT", 
+                  "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", "FUNC_ARSINH", 
+                  "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR", "L_CEIL", 
+                  "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE", "CMD_TIMES", "CMD_CDOT", 
+                  "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_DBINOM", "CMD_TBINOM", 
+                  "CMD_MATHIT", "UNDERSCORE", "CARET", "COLON", "WS_CHAR", 
+                  "DIFFERENTIAL", "LETTER", "DIGIT", "NUMBER", "EQUAL", 
+                  "NEQ", "LT", "LTE", "LTE_Q", "LTE_S", "GT", "GTE", "GTE_Q", 
+                  "GTE_S", "BANG", "SYMBOL" ]
+
+    grammarFileName = "LaTeX.g4"
+
+    def __init__(self, input=None, output:TextIO = sys.stdout):
+        super().__init__(input, output)
+        self.checkVersion("4.13.1")
+        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
+        self._actions = None
+        self._predicates = None
+
+
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.tokens b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.tokens
new file mode 100644
index 0000000000..2196d34b30
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXLexer.tokens
@@ -0,0 +1,162 @@
+T__0=1
+WS=2
+THINSPACE=3
+MEDSPACE=4
+THICKSPACE=5
+QUAD=6
+QQUAD=7
+NEGTHINSPACE=8
+NEGMEDSPACE=9
+NEGTHICKSPACE=10
+CMD_LEFT=11
+CMD_RIGHT=12
+IGNORE=13
+ADD=14
+SUB=15
+MUL=16
+DIV=17
+L_PAREN=18
+R_PAREN=19
+L_BRACE=20
+R_BRACE=21
+L_BRACE_LITERAL=22
+R_BRACE_LITERAL=23
+L_BRACKET=24
+R_BRACKET=25
+BAR=26
+R_BAR=27
+L_BAR=28
+L_ANGLE=29
+R_ANGLE=30
+FUNC_LIM=31
+LIM_APPROACH_SYM=32
+FUNC_INT=33
+FUNC_SUM=34
+FUNC_PROD=35
+FUNC_EXP=36
+FUNC_LOG=37
+FUNC_LN=38
+FUNC_SIN=39
+FUNC_COS=40
+FUNC_TAN=41
+FUNC_CSC=42
+FUNC_SEC=43
+FUNC_COT=44
+FUNC_ARCSIN=45
+FUNC_ARCCOS=46
+FUNC_ARCTAN=47
+FUNC_ARCCSC=48
+FUNC_ARCSEC=49
+FUNC_ARCCOT=50
+FUNC_SINH=51
+FUNC_COSH=52
+FUNC_TANH=53
+FUNC_ARSINH=54
+FUNC_ARCOSH=55
+FUNC_ARTANH=56
+L_FLOOR=57
+R_FLOOR=58
+L_CEIL=59
+R_CEIL=60
+FUNC_SQRT=61
+FUNC_OVERLINE=62
+CMD_TIMES=63
+CMD_CDOT=64
+CMD_DIV=65
+CMD_FRAC=66
+CMD_BINOM=67
+CMD_DBINOM=68
+CMD_TBINOM=69
+CMD_MATHIT=70
+UNDERSCORE=71
+CARET=72
+COLON=73
+DIFFERENTIAL=74
+LETTER=75
+NUMBER=76
+EQUAL=77
+NEQ=78
+LT=79
+LTE=80
+LTE_Q=81
+LTE_S=82
+GT=83
+GTE=84
+GTE_Q=85
+GTE_S=86
+BANG=87
+SYMBOL=88
+','=1
+'\\quad'=6
+'\\qquad'=7
+'\\negmedspace'=9
+'\\negthickspace'=10
+'\\left'=11
+'\\right'=12
+'+'=14
+'-'=15
+'*'=16
+'/'=17
+'('=18
+')'=19
+'{'=20
+'}'=21
+'\\{'=22
+'\\}'=23
+'['=24
+']'=25
+'|'=26
+'\\right|'=27
+'\\left|'=28
+'\\langle'=29
+'\\rangle'=30
+'\\lim'=31
+'\\int'=33
+'\\sum'=34
+'\\prod'=35
+'\\exp'=36
+'\\log'=37
+'\\ln'=38
+'\\sin'=39
+'\\cos'=40
+'\\tan'=41
+'\\csc'=42
+'\\sec'=43
+'\\cot'=44
+'\\arcsin'=45
+'\\arccos'=46
+'\\arctan'=47
+'\\arccsc'=48
+'\\arcsec'=49
+'\\arccot'=50
+'\\sinh'=51
+'\\cosh'=52
+'\\tanh'=53
+'\\arsinh'=54
+'\\arcosh'=55
+'\\artanh'=56
+'\\lfloor'=57
+'\\rfloor'=58
+'\\lceil'=59
+'\\rceil'=60
+'\\sqrt'=61
+'\\overline'=62
+'\\times'=63
+'\\cdot'=64
+'\\div'=65
+'\\frac'=66
+'\\binom'=67
+'\\dbinom'=68
+'\\tbinom'=69
+'\\mathit'=70
+'_'=71
+'^'=72
+':'=73
+'\\neq'=78
+'<'=79
+'\\leqq'=81
+'\\leqslant'=82
+'>'=83
+'\\geqq'=85
+'\\geqslant'=86
+'!'=87
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXListener.py b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXListener.py
new file mode 100644
index 0000000000..f3663c9a65
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXListener.py
@@ -0,0 +1,372 @@
+# Generated from sympy/parsing/latex/LaTeX.g4 by ANTLR 4.13.1
+from antlr4 import *
+if "." in __name__:
+    from .LaTeXParser import LaTeXParser
+else:
+    from LaTeXParser import LaTeXParser
+
+# This class defines a complete listener for a parse tree produced by LaTeXParser.
+class LaTeXListener(ParseTreeListener):
+
+    # Enter a parse tree produced by LaTeXParser#math.
+    def enterMath(self, ctx:LaTeXParser.MathContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#math.
+    def exitMath(self, ctx:LaTeXParser.MathContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#relation.
+    def enterRelation(self, ctx:LaTeXParser.RelationContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#relation.
+    def exitRelation(self, ctx:LaTeXParser.RelationContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#equality.
+    def enterEquality(self, ctx:LaTeXParser.EqualityContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#equality.
+    def exitEquality(self, ctx:LaTeXParser.EqualityContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#expr.
+    def enterExpr(self, ctx:LaTeXParser.ExprContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#expr.
+    def exitExpr(self, ctx:LaTeXParser.ExprContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#additive.
+    def enterAdditive(self, ctx:LaTeXParser.AdditiveContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#additive.
+    def exitAdditive(self, ctx:LaTeXParser.AdditiveContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#mp.
+    def enterMp(self, ctx:LaTeXParser.MpContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#mp.
+    def exitMp(self, ctx:LaTeXParser.MpContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#mp_nofunc.
+    def enterMp_nofunc(self, ctx:LaTeXParser.Mp_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#mp_nofunc.
+    def exitMp_nofunc(self, ctx:LaTeXParser.Mp_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#unary.
+    def enterUnary(self, ctx:LaTeXParser.UnaryContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#unary.
+    def exitUnary(self, ctx:LaTeXParser.UnaryContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#unary_nofunc.
+    def enterUnary_nofunc(self, ctx:LaTeXParser.Unary_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#unary_nofunc.
+    def exitUnary_nofunc(self, ctx:LaTeXParser.Unary_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#postfix.
+    def enterPostfix(self, ctx:LaTeXParser.PostfixContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#postfix.
+    def exitPostfix(self, ctx:LaTeXParser.PostfixContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#postfix_nofunc.
+    def enterPostfix_nofunc(self, ctx:LaTeXParser.Postfix_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#postfix_nofunc.
+    def exitPostfix_nofunc(self, ctx:LaTeXParser.Postfix_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#postfix_op.
+    def enterPostfix_op(self, ctx:LaTeXParser.Postfix_opContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#postfix_op.
+    def exitPostfix_op(self, ctx:LaTeXParser.Postfix_opContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#eval_at.
+    def enterEval_at(self, ctx:LaTeXParser.Eval_atContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#eval_at.
+    def exitEval_at(self, ctx:LaTeXParser.Eval_atContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#eval_at_sub.
+    def enterEval_at_sub(self, ctx:LaTeXParser.Eval_at_subContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#eval_at_sub.
+    def exitEval_at_sub(self, ctx:LaTeXParser.Eval_at_subContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#eval_at_sup.
+    def enterEval_at_sup(self, ctx:LaTeXParser.Eval_at_supContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#eval_at_sup.
+    def exitEval_at_sup(self, ctx:LaTeXParser.Eval_at_supContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#exp.
+    def enterExp(self, ctx:LaTeXParser.ExpContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#exp.
+    def exitExp(self, ctx:LaTeXParser.ExpContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#exp_nofunc.
+    def enterExp_nofunc(self, ctx:LaTeXParser.Exp_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#exp_nofunc.
+    def exitExp_nofunc(self, ctx:LaTeXParser.Exp_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#comp.
+    def enterComp(self, ctx:LaTeXParser.CompContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#comp.
+    def exitComp(self, ctx:LaTeXParser.CompContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#comp_nofunc.
+    def enterComp_nofunc(self, ctx:LaTeXParser.Comp_nofuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#comp_nofunc.
+    def exitComp_nofunc(self, ctx:LaTeXParser.Comp_nofuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#group.
+    def enterGroup(self, ctx:LaTeXParser.GroupContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#group.
+    def exitGroup(self, ctx:LaTeXParser.GroupContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#abs_group.
+    def enterAbs_group(self, ctx:LaTeXParser.Abs_groupContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#abs_group.
+    def exitAbs_group(self, ctx:LaTeXParser.Abs_groupContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#atom.
+    def enterAtom(self, ctx:LaTeXParser.AtomContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#atom.
+    def exitAtom(self, ctx:LaTeXParser.AtomContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#bra.
+    def enterBra(self, ctx:LaTeXParser.BraContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#bra.
+    def exitBra(self, ctx:LaTeXParser.BraContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#ket.
+    def enterKet(self, ctx:LaTeXParser.KetContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#ket.
+    def exitKet(self, ctx:LaTeXParser.KetContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#mathit.
+    def enterMathit(self, ctx:LaTeXParser.MathitContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#mathit.
+    def exitMathit(self, ctx:LaTeXParser.MathitContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#mathit_text.
+    def enterMathit_text(self, ctx:LaTeXParser.Mathit_textContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#mathit_text.
+    def exitMathit_text(self, ctx:LaTeXParser.Mathit_textContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#frac.
+    def enterFrac(self, ctx:LaTeXParser.FracContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#frac.
+    def exitFrac(self, ctx:LaTeXParser.FracContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#binom.
+    def enterBinom(self, ctx:LaTeXParser.BinomContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#binom.
+    def exitBinom(self, ctx:LaTeXParser.BinomContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#floor.
+    def enterFloor(self, ctx:LaTeXParser.FloorContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#floor.
+    def exitFloor(self, ctx:LaTeXParser.FloorContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#ceil.
+    def enterCeil(self, ctx:LaTeXParser.CeilContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#ceil.
+    def exitCeil(self, ctx:LaTeXParser.CeilContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#func_normal.
+    def enterFunc_normal(self, ctx:LaTeXParser.Func_normalContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#func_normal.
+    def exitFunc_normal(self, ctx:LaTeXParser.Func_normalContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#func.
+    def enterFunc(self, ctx:LaTeXParser.FuncContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#func.
+    def exitFunc(self, ctx:LaTeXParser.FuncContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#args.
+    def enterArgs(self, ctx:LaTeXParser.ArgsContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#args.
+    def exitArgs(self, ctx:LaTeXParser.ArgsContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#limit_sub.
+    def enterLimit_sub(self, ctx:LaTeXParser.Limit_subContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#limit_sub.
+    def exitLimit_sub(self, ctx:LaTeXParser.Limit_subContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#func_arg.
+    def enterFunc_arg(self, ctx:LaTeXParser.Func_argContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#func_arg.
+    def exitFunc_arg(self, ctx:LaTeXParser.Func_argContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#func_arg_noparens.
+    def enterFunc_arg_noparens(self, ctx:LaTeXParser.Func_arg_noparensContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#func_arg_noparens.
+    def exitFunc_arg_noparens(self, ctx:LaTeXParser.Func_arg_noparensContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#subexpr.
+    def enterSubexpr(self, ctx:LaTeXParser.SubexprContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#subexpr.
+    def exitSubexpr(self, ctx:LaTeXParser.SubexprContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#supexpr.
+    def enterSupexpr(self, ctx:LaTeXParser.SupexprContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#supexpr.
+    def exitSupexpr(self, ctx:LaTeXParser.SupexprContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#subeq.
+    def enterSubeq(self, ctx:LaTeXParser.SubeqContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#subeq.
+    def exitSubeq(self, ctx:LaTeXParser.SubeqContext):
+        pass
+
+
+    # Enter a parse tree produced by LaTeXParser#supeq.
+    def enterSupeq(self, ctx:LaTeXParser.SupeqContext):
+        pass
+
+    # Exit a parse tree produced by LaTeXParser#supeq.
+    def exitSupeq(self, ctx:LaTeXParser.SupeqContext):
+        pass
+
+
+
+del LaTeXParser
\ No newline at end of file
diff --git a/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXParser.py b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXParser.py
new file mode 100644
index 0000000000..1ee0a2062f
--- /dev/null
+++ b/sympy/parsing/latex/_antlr/sympy/parsing/latex/LaTeXParser.py
@@ -0,0 +1,3746 @@
+# Generated from sympy/parsing/latex/LaTeX.g4 by ANTLR 4.13.1
+# encoding: utf-8
+from antlr4 import *
+from io import StringIO
+import sys
+if sys.version_info[1] > 5:
+	from typing import TextIO
+else:
+	from typing.io import TextIO
+
+def serializedATN():
+    return [
+        4,1,88,467,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
+        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
+        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
+        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
+        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
+        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
+        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,5,1,89,8,1,10,1,12,1,92,9,1,1,2,
+        1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,106,8,4,10,4,12,
+        4,109,9,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,117,8,5,10,5,12,5,120,9,5,
+        1,6,1,6,1,6,1,6,1,6,1,6,5,6,128,8,6,10,6,12,6,131,9,6,1,7,1,7,1,
+        7,4,7,136,8,7,11,7,12,7,137,3,7,140,8,7,1,8,1,8,1,8,1,8,5,8,146,
+        8,8,10,8,12,8,149,9,8,3,8,151,8,8,1,9,1,9,5,9,155,8,9,10,9,12,9,
+        158,9,9,1,10,1,10,5,10,162,8,10,10,10,12,10,165,9,10,1,11,1,11,3,
+        11,169,8,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,177,8,12,1,13,1,13,
+        1,13,1,13,3,13,183,8,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,191,8,
+        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
+        15,205,8,15,1,15,3,15,208,8,15,5,15,210,8,15,10,15,12,15,213,9,15,
+        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,225,8,16,
+        1,16,3,16,228,8,16,5,16,230,8,16,10,16,12,16,233,9,16,1,17,1,17,
+        1,17,1,17,1,17,1,17,1,17,1,17,3,17,243,8,17,1,18,1,18,1,18,1,18,
+        1,18,1,18,1,18,3,18,252,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
+        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,270,8,19,1,20,
+        1,20,1,20,1,20,1,21,1,21,3,21,278,8,21,1,21,1,21,1,21,1,21,1,21,
+        3,21,285,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,
+        1,24,1,24,1,24,1,25,5,25,301,8,25,10,25,12,25,304,9,25,1,26,1,26,
+        1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
+        1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
+        3,31,334,8,31,1,31,3,31,337,8,31,1,31,3,31,340,8,31,1,31,3,31,343,
+        8,31,3,31,345,8,31,1,31,1,31,1,31,1,31,1,31,3,31,352,8,31,1,31,1,
+        31,3,31,356,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
+        31,1,31,3,31,369,8,31,1,31,3,31,372,8,31,1,31,1,31,1,31,3,31,377,
+        8,31,1,31,1,31,1,31,1,31,1,31,3,31,384,8,31,1,31,1,31,1,31,1,31,
+        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
+        402,8,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,410,8,31,1,32,1,32,1,
+        32,1,32,1,32,3,32,417,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
+        33,1,33,3,33,428,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,437,
+        8,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,447,8,36,1,37,
+        1,37,1,37,1,37,1,37,1,37,3,37,455,8,37,1,38,1,38,1,38,1,38,1,38,
+        1,39,1,39,1,39,1,39,1,39,1,39,0,6,2,8,10,12,30,32,40,0,2,4,6,8,10,
+        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
+        56,58,60,62,64,66,68,70,72,74,76,78,0,9,2,0,77,80,83,84,1,0,14,15,
+        3,0,16,17,63,65,73,73,2,0,75,75,88,88,1,0,26,27,2,0,26,26,28,28,
+        1,0,67,69,1,0,36,56,1,0,34,35,495,0,80,1,0,0,0,2,82,1,0,0,0,4,93,
+        1,0,0,0,6,97,1,0,0,0,8,99,1,0,0,0,10,110,1,0,0,0,12,121,1,0,0,0,
+        14,139,1,0,0,0,16,150,1,0,0,0,18,152,1,0,0,0,20,159,1,0,0,0,22,168,
+        1,0,0,0,24,170,1,0,0,0,26,178,1,0,0,0,28,186,1,0,0,0,30,194,1,0,
+        0,0,32,214,1,0,0,0,34,242,1,0,0,0,36,251,1,0,0,0,38,269,1,0,0,0,
+        40,271,1,0,0,0,42,284,1,0,0,0,44,286,1,0,0,0,46,290,1,0,0,0,48,294,
+        1,0,0,0,50,302,1,0,0,0,52,305,1,0,0,0,54,313,1,0,0,0,56,321,1,0,
+        0,0,58,325,1,0,0,0,60,329,1,0,0,0,62,409,1,0,0,0,64,416,1,0,0,0,
+        66,418,1,0,0,0,68,436,1,0,0,0,70,438,1,0,0,0,72,440,1,0,0,0,74,448,
+        1,0,0,0,76,456,1,0,0,0,78,461,1,0,0,0,80,81,3,2,1,0,81,1,1,0,0,0,
+        82,83,6,1,-1,0,83,84,3,6,3,0,84,90,1,0,0,0,85,86,10,2,0,0,86,87,
+        7,0,0,0,87,89,3,2,1,3,88,85,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,
+        90,91,1,0,0,0,91,3,1,0,0,0,92,90,1,0,0,0,93,94,3,6,3,0,94,95,5,77,
+        0,0,95,96,3,6,3,0,96,5,1,0,0,0,97,98,3,8,4,0,98,7,1,0,0,0,99,100,
+        6,4,-1,0,100,101,3,10,5,0,101,107,1,0,0,0,102,103,10,2,0,0,103,104,
+        7,1,0,0,104,106,3,8,4,3,105,102,1,0,0,0,106,109,1,0,0,0,107,105,
+        1,0,0,0,107,108,1,0,0,0,108,9,1,0,0,0,109,107,1,0,0,0,110,111,6,
+        5,-1,0,111,112,3,14,7,0,112,118,1,0,0,0,113,114,10,2,0,0,114,115,
+        7,2,0,0,115,117,3,10,5,3,116,113,1,0,0,0,117,120,1,0,0,0,118,116,
+        1,0,0,0,118,119,1,0,0,0,119,11,1,0,0,0,120,118,1,0,0,0,121,122,6,
+        6,-1,0,122,123,3,16,8,0,123,129,1,0,0,0,124,125,10,2,0,0,125,126,
+        7,2,0,0,126,128,3,12,6,3,127,124,1,0,0,0,128,131,1,0,0,0,129,127,
+        1,0,0,0,129,130,1,0,0,0,130,13,1,0,0,0,131,129,1,0,0,0,132,133,7,
+        1,0,0,133,140,3,14,7,0,134,136,3,18,9,0,135,134,1,0,0,0,136,137,
+        1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,132,
+        1,0,0,0,139,135,1,0,0,0,140,15,1,0,0,0,141,142,7,1,0,0,142,151,3,
+        16,8,0,143,147,3,18,9,0,144,146,3,20,10,0,145,144,1,0,0,0,146,149,
+        1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,151,1,0,0,0,149,147,
+        1,0,0,0,150,141,1,0,0,0,150,143,1,0,0,0,151,17,1,0,0,0,152,156,3,
+        30,15,0,153,155,3,22,11,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,
+        1,0,0,0,156,157,1,0,0,0,157,19,1,0,0,0,158,156,1,0,0,0,159,163,3,
+        32,16,0,160,162,3,22,11,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,
+        1,0,0,0,163,164,1,0,0,0,164,21,1,0,0,0,165,163,1,0,0,0,166,169,5,
+        87,0,0,167,169,3,24,12,0,168,166,1,0,0,0,168,167,1,0,0,0,169,23,
+        1,0,0,0,170,176,5,26,0,0,171,177,3,28,14,0,172,177,3,26,13,0,173,
+        174,3,28,14,0,174,175,3,26,13,0,175,177,1,0,0,0,176,171,1,0,0,0,
+        176,172,1,0,0,0,176,173,1,0,0,0,177,25,1,0,0,0,178,179,5,71,0,0,
+        179,182,5,20,0,0,180,183,3,6,3,0,181,183,3,4,2,0,182,180,1,0,0,0,
+        182,181,1,0,0,0,183,184,1,0,0,0,184,185,5,21,0,0,185,27,1,0,0,0,
+        186,187,5,72,0,0,187,190,5,20,0,0,188,191,3,6,3,0,189,191,3,4,2,
+        0,190,188,1,0,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,193,5,21,0,
+        0,193,29,1,0,0,0,194,195,6,15,-1,0,195,196,3,34,17,0,196,211,1,0,
+        0,0,197,198,10,2,0,0,198,204,5,72,0,0,199,205,3,42,21,0,200,201,
+        5,20,0,0,201,202,3,6,3,0,202,203,5,21,0,0,203,205,1,0,0,0,204,199,
+        1,0,0,0,204,200,1,0,0,0,205,207,1,0,0,0,206,208,3,72,36,0,207,206,
+        1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,197,1,0,0,0,210,213,
+        1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,31,1,0,0,0,213,211,1,
+        0,0,0,214,215,6,16,-1,0,215,216,3,36,18,0,216,231,1,0,0,0,217,218,
+        10,2,0,0,218,224,5,72,0,0,219,225,3,42,21,0,220,221,5,20,0,0,221,
+        222,3,6,3,0,222,223,5,21,0,0,223,225,1,0,0,0,224,219,1,0,0,0,224,
+        220,1,0,0,0,225,227,1,0,0,0,226,228,3,72,36,0,227,226,1,0,0,0,227,
+        228,1,0,0,0,228,230,1,0,0,0,229,217,1,0,0,0,230,233,1,0,0,0,231,
+        229,1,0,0,0,231,232,1,0,0,0,232,33,1,0,0,0,233,231,1,0,0,0,234,243,
+        3,38,19,0,235,243,3,40,20,0,236,243,3,62,31,0,237,243,3,42,21,0,
+        238,243,3,52,26,0,239,243,3,54,27,0,240,243,3,56,28,0,241,243,3,
+        58,29,0,242,234,1,0,0,0,242,235,1,0,0,0,242,236,1,0,0,0,242,237,
+        1,0,0,0,242,238,1,0,0,0,242,239,1,0,0,0,242,240,1,0,0,0,242,241,
+        1,0,0,0,243,35,1,0,0,0,244,252,3,38,19,0,245,252,3,40,20,0,246,252,
+        3,42,21,0,247,252,3,52,26,0,248,252,3,54,27,0,249,252,3,56,28,0,
+        250,252,3,58,29,0,251,244,1,0,0,0,251,245,1,0,0,0,251,246,1,0,0,
+        0,251,247,1,0,0,0,251,248,1,0,0,0,251,249,1,0,0,0,251,250,1,0,0,
+        0,252,37,1,0,0,0,253,254,5,18,0,0,254,255,3,6,3,0,255,256,5,19,0,
+        0,256,270,1,0,0,0,257,258,5,24,0,0,258,259,3,6,3,0,259,260,5,25,
+        0,0,260,270,1,0,0,0,261,262,5,20,0,0,262,263,3,6,3,0,263,264,5,21,
+        0,0,264,270,1,0,0,0,265,266,5,22,0,0,266,267,3,6,3,0,267,268,5,23,
+        0,0,268,270,1,0,0,0,269,253,1,0,0,0,269,257,1,0,0,0,269,261,1,0,
+        0,0,269,265,1,0,0,0,270,39,1,0,0,0,271,272,5,26,0,0,272,273,3,6,
+        3,0,273,274,5,26,0,0,274,41,1,0,0,0,275,277,7,3,0,0,276,278,3,72,
+        36,0,277,276,1,0,0,0,277,278,1,0,0,0,278,285,1,0,0,0,279,285,5,76,
+        0,0,280,285,5,74,0,0,281,285,3,48,24,0,282,285,3,44,22,0,283,285,
+        3,46,23,0,284,275,1,0,0,0,284,279,1,0,0,0,284,280,1,0,0,0,284,281,
+        1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,43,1,0,0,0,286,287,5,
+        29,0,0,287,288,3,6,3,0,288,289,7,4,0,0,289,45,1,0,0,0,290,291,7,
+        5,0,0,291,292,3,6,3,0,292,293,5,30,0,0,293,47,1,0,0,0,294,295,5,
+        70,0,0,295,296,5,20,0,0,296,297,3,50,25,0,297,298,5,21,0,0,298,49,
+        1,0,0,0,299,301,5,75,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,
+        1,0,0,0,302,303,1,0,0,0,303,51,1,0,0,0,304,302,1,0,0,0,305,306,5,
+        66,0,0,306,307,5,20,0,0,307,308,3,6,3,0,308,309,5,21,0,0,309,310,
+        5,20,0,0,310,311,3,6,3,0,311,312,5,21,0,0,312,53,1,0,0,0,313,314,
+        7,6,0,0,314,315,5,20,0,0,315,316,3,6,3,0,316,317,5,21,0,0,317,318,
+        5,20,0,0,318,319,3,6,3,0,319,320,5,21,0,0,320,55,1,0,0,0,321,322,
+        5,57,0,0,322,323,3,6,3,0,323,324,5,58,0,0,324,57,1,0,0,0,325,326,
+        5,59,0,0,326,327,3,6,3,0,327,328,5,60,0,0,328,59,1,0,0,0,329,330,
+        7,7,0,0,330,61,1,0,0,0,331,344,3,60,30,0,332,334,3,72,36,0,333,332,
+        1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,3,74,37,0,336,335,
+        1,0,0,0,336,337,1,0,0,0,337,345,1,0,0,0,338,340,3,74,37,0,339,338,
+        1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,343,3,72,36,0,342,341,
+        1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,333,1,0,0,0,344,339,
+        1,0,0,0,345,351,1,0,0,0,346,347,5,18,0,0,347,348,3,68,34,0,348,349,
+        5,19,0,0,349,352,1,0,0,0,350,352,3,70,35,0,351,346,1,0,0,0,351,350,
+        1,0,0,0,352,410,1,0,0,0,353,355,7,3,0,0,354,356,3,72,36,0,355,354,
+        1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,5,18,0,0,358,359,
+        3,64,32,0,359,360,5,19,0,0,360,410,1,0,0,0,361,368,5,33,0,0,362,
+        363,3,72,36,0,363,364,3,74,37,0,364,369,1,0,0,0,365,366,3,74,37,
+        0,366,367,3,72,36,0,367,369,1,0,0,0,368,362,1,0,0,0,368,365,1,0,
+        0,0,368,369,1,0,0,0,369,376,1,0,0,0,370,372,3,8,4,0,371,370,1,0,
+        0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,377,5,74,0,0,374,377,3,52,
+        26,0,375,377,3,8,4,0,376,371,1,0,0,0,376,374,1,0,0,0,376,375,1,0,
+        0,0,377,410,1,0,0,0,378,383,5,61,0,0,379,380,5,24,0,0,380,381,3,
+        6,3,0,381,382,5,25,0,0,382,384,1,0,0,0,383,379,1,0,0,0,383,384,1,
+        0,0,0,384,385,1,0,0,0,385,386,5,20,0,0,386,387,3,6,3,0,387,388,5,
+        21,0,0,388,410,1,0,0,0,389,390,5,62,0,0,390,391,5,20,0,0,391,392,
+        3,6,3,0,392,393,5,21,0,0,393,410,1,0,0,0,394,401,7,8,0,0,395,396,
+        3,76,38,0,396,397,3,74,37,0,397,402,1,0,0,0,398,399,3,74,37,0,399,
+        400,3,76,38,0,400,402,1,0,0,0,401,395,1,0,0,0,401,398,1,0,0,0,402,
+        403,1,0,0,0,403,404,3,10,5,0,404,410,1,0,0,0,405,406,5,31,0,0,406,
+        407,3,66,33,0,407,408,3,10,5,0,408,410,1,0,0,0,409,331,1,0,0,0,409,
+        353,1,0,0,0,409,361,1,0,0,0,409,378,1,0,0,0,409,389,1,0,0,0,409,
+        394,1,0,0,0,409,405,1,0,0,0,410,63,1,0,0,0,411,412,3,6,3,0,412,413,
+        5,1,0,0,413,414,3,64,32,0,414,417,1,0,0,0,415,417,3,6,3,0,416,411,
+        1,0,0,0,416,415,1,0,0,0,417,65,1,0,0,0,418,419,5,71,0,0,419,420,
+        5,20,0,0,420,421,7,3,0,0,421,422,5,32,0,0,422,427,3,6,3,0,423,424,
+        5,72,0,0,424,425,5,20,0,0,425,426,7,1,0,0,426,428,5,21,0,0,427,423,
+        1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,430,5,21,0,0,430,67,
+        1,0,0,0,431,437,3,6,3,0,432,433,3,6,3,0,433,434,5,1,0,0,434,435,
+        3,68,34,0,435,437,1,0,0,0,436,431,1,0,0,0,436,432,1,0,0,0,437,69,
+        1,0,0,0,438,439,3,12,6,0,439,71,1,0,0,0,440,446,5,71,0,0,441,447,
+        3,42,21,0,442,443,5,20,0,0,443,444,3,6,3,0,444,445,5,21,0,0,445,
+        447,1,0,0,0,446,441,1,0,0,0,446,442,1,0,0,0,447,73,1,0,0,0,448,454,
+        5,72,0,0,449,455,3,42,21,0,450,451,5,20,0,0,451,452,3,6,3,0,452,
+        453,5,21,0,0,453,455,1,0,0,0,454,449,1,0,0,0,454,450,1,0,0,0,455,
+        75,1,0,0,0,456,457,5,71,0,0,457,458,5,20,0,0,458,459,3,4,2,0,459,
+        460,5,21,0,0,460,77,1,0,0,0,461,462,5,71,0,0,462,463,5,20,0,0,463,
+        464,3,4,2,0,464,465,5,21,0,0,465,79,1,0,0,0,44,90,107,118,129,137,
+        139,147,150,156,163,168,176,182,190,204,207,211,224,227,231,242,
+        251,269,277,284,302,333,336,339,342,344,351,355,368,371,376,383,
+        401,409,416,427,436,446,454
+    ]
+
+class LaTeXParser ( Parser ):
+
+    grammarFileName = "LaTeX.g4"
+
+    atn = ATNDeserializer().deserialize(serializedATN())
+
+    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]
+
+    sharedContextCache = PredictionContextCache()
+
+    literalNames = [ "<INVALID>", "','", "<INVALID>", "<INVALID>", "<INVALID>", 
+                     "<INVALID>", "'\\quad'", "'\\qquad'", "<INVALID>", 
+                     "'\\negmedspace'", "'\\negthickspace'", "'\\left'", 
+                     "'\\right'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", 
+                     "'('", "')'", "'{'", "'}'", "'\\{'", "'\\}'", "'['", 
+                     "']'", "'|'", "'\\right|'", "'\\left|'", "'\\langle'", 
+                     "'\\rangle'", "'\\lim'", "<INVALID>", "'\\int'", "'\\sum'", 
+                     "'\\prod'", "'\\exp'", "'\\log'", "'\\ln'", "'\\sin'", 
+                     "'\\cos'", "'\\tan'", "'\\csc'", "'\\sec'", "'\\cot'", 
+                     "'\\arcsin'", "'\\arccos'", "'\\arctan'", "'\\arccsc'", 
+                     "'\\arcsec'", "'\\arccot'", "'\\sinh'", "'\\cosh'", 
+                     "'\\tanh'", "'\\arsinh'", "'\\arcosh'", "'\\artanh'", 
+                     "'\\lfloor'", "'\\rfloor'", "'\\lceil'", "'\\rceil'", 
+                     "'\\sqrt'", "'\\overline'", "'\\times'", "'\\cdot'", 
+                     "'\\div'", "'\\frac'", "'\\binom'", "'\\dbinom'", "'\\tbinom'", 
+                     "'\\mathit'", "'_'", "'^'", "':'", "<INVALID>", "<INVALID>", 
+                     "<INVALID>", "<INVALID>", "'\\neq'", "'<'", "<INVALID>", 
+                     "'\\leqq'", "'\\leqslant'", "'>'", "<INVALID>", "'\\geqq'", 
+                     "'\\geqslant'", "'!'" ]
+
+    symbolicNames = [ "<INVALID>", "<INVALID>", "WS", "THINSPACE", "MEDSPACE", 
+                      "THICKSPACE", "QUAD", "QQUAD", "NEGTHINSPACE", "NEGMEDSPACE", 
+                      "NEGTHICKSPACE", "CMD_LEFT", "CMD_RIGHT", "IGNORE", 
+                      "ADD", "SUB", "MUL", "DIV", "L_PAREN", "R_PAREN", 
+                      "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL", 
+                      "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", "L_BAR", 
+                      "L_ANGLE", "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM", 
+                      "FUNC_INT", "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", 
+                      "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC", 
+                      "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS", 
+                      "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT", 
+                      "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", "FUNC_ARSINH", 
+                      "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR", "R_FLOOR", 
+                      "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE", 
+                      "CMD_TIMES", "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM", 
+                      "CMD_DBINOM", "CMD_TBINOM", "CMD_MATHIT", "UNDERSCORE", 
+                      "CARET", "COLON", "DIFFERENTIAL", "LETTER", "NUMBER", 
+                      "EQUAL", "NEQ", "LT", "LTE", "LTE_Q", "LTE_S", "GT", 
+                      "GTE", "GTE_Q", "GTE_S", "BANG", "SYMBOL" ]
+
+    RULE_math = 0
+    RULE_relation = 1
+    RULE_equality = 2
+    RULE_expr = 3
+    RULE_additive = 4
+    RULE_mp = 5
+    RULE_mp_nofunc = 6
+    RULE_unary = 7
+    RULE_unary_nofunc = 8
+    RULE_postfix = 9
+    RULE_postfix_nofunc = 10
+    RULE_postfix_op = 11
+    RULE_eval_at = 12
+    RULE_eval_at_sub = 13
+    RULE_eval_at_sup = 14
+    RULE_exp = 15
+    RULE_exp_nofunc = 16
+    RULE_comp = 17
+    RULE_comp_nofunc = 18
+    RULE_group = 19
+    RULE_abs_group = 20
+    RULE_atom = 21
+    RULE_bra = 22
+    RULE_ket = 23
+    RULE_mathit = 24
+    RULE_mathit_text = 25
+    RULE_frac = 26
+    RULE_binom = 27
+    RULE_floor = 28
+    RULE_ceil = 29
+    RULE_func_normal = 30
+    RULE_func = 31
+    RULE_args = 32
+    RULE_limit_sub = 33
+    RULE_func_arg = 34
+    RULE_func_arg_noparens = 35
+    RULE_subexpr = 36
+    RULE_supexpr = 37
+    RULE_subeq = 38
+    RULE_supeq = 39
+
+    ruleNames =  [ "math", "relation", "equality", "expr", "additive", "mp", 
+                   "mp_nofunc", "unary", "unary_nofunc", "postfix", "postfix_nofunc", 
+                   "postfix_op", "eval_at", "eval_at_sub", "eval_at_sup", 
+                   "exp", "exp_nofunc", "comp", "comp_nofunc", "group", 
+                   "abs_group", "atom", "bra", "ket", "mathit", "mathit_text", 
+                   "frac", "binom", "floor", "ceil", "func_normal", "func", 
+                   "args", "limit_sub", "func_arg", "func_arg_noparens", 
+                   "subexpr", "supexpr", "subeq", "supeq" ]
+
+    EOF = Token.EOF
+    T__0=1
+    WS=2
+    THINSPACE=3
+    MEDSPACE=4
+    THICKSPACE=5
+    QUAD=6
+    QQUAD=7
+    NEGTHINSPACE=8
+    NEGMEDSPACE=9
+    NEGTHICKSPACE=10
+    CMD_LEFT=11
+    CMD_RIGHT=12
+    IGNORE=13
+    ADD=14
+    SUB=15
+    MUL=16
+    DIV=17
+    L_PAREN=18
+    R_PAREN=19
+    L_BRACE=20
+    R_BRACE=21
+    L_BRACE_LITERAL=22
+    R_BRACE_LITERAL=23
+    L_BRACKET=24
+    R_BRACKET=25
+    BAR=26
+    R_BAR=27
+    L_BAR=28
+    L_ANGLE=29
+    R_ANGLE=30
+    FUNC_LIM=31
+    LIM_APPROACH_SYM=32
+    FUNC_INT=33
+    FUNC_SUM=34
+    FUNC_PROD=35
+    FUNC_EXP=36
+    FUNC_LOG=37
+    FUNC_LN=38
+    FUNC_SIN=39
+    FUNC_COS=40
+    FUNC_TAN=41
+    FUNC_CSC=42
+    FUNC_SEC=43
+    FUNC_COT=44
+    FUNC_ARCSIN=45
+    FUNC_ARCCOS=46
+    FUNC_ARCTAN=47
+    FUNC_ARCCSC=48
+    FUNC_ARCSEC=49
+    FUNC_ARCCOT=50
+    FUNC_SINH=51
+    FUNC_COSH=52
+    FUNC_TANH=53
+    FUNC_ARSINH=54
+    FUNC_ARCOSH=55
+    FUNC_ARTANH=56
+    L_FLOOR=57
+    R_FLOOR=58
+    L_CEIL=59
+    R_CEIL=60
+    FUNC_SQRT=61
+    FUNC_OVERLINE=62
+    CMD_TIMES=63
+    CMD_CDOT=64
+    CMD_DIV=65
+    CMD_FRAC=66
+    CMD_BINOM=67
+    CMD_DBINOM=68
+    CMD_TBINOM=69
+    CMD_MATHIT=70
+    UNDERSCORE=71
+    CARET=72
+    COLON=73
+    DIFFERENTIAL=74
+    LETTER=75
+    NUMBER=76
+    EQUAL=77
+    NEQ=78
+    LT=79
+    LTE=80
+    LTE_Q=81
+    LTE_S=82
+    GT=83
+    GTE=84
+    GTE_Q=85
+    GTE_S=86
+    BANG=87
+    SYMBOL=88
+
+    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
+        super().__init__(input, output)
+        self.checkVersion("4.13.1")
+        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
+        self._predicates = None
+
+
+
+
+    class MathContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def relation(self):
+            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_math
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMath" ):
+                listener.enterMath(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMath" ):
+                listener.exitMath(self)
+
+
+
+
+    def math(self):
+
+        localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 0, self.RULE_math)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 80
+            self.relation(0)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class RelationContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def relation(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)
+
+
+        def EQUAL(self):
+            return self.getToken(LaTeXParser.EQUAL, 0)
+
+        def LT(self):
+            return self.getToken(LaTeXParser.LT, 0)
+
+        def LTE(self):
+            return self.getToken(LaTeXParser.LTE, 0)
+
+        def GT(self):
+            return self.getToken(LaTeXParser.GT, 0)
+
+        def GTE(self):
+            return self.getToken(LaTeXParser.GTE, 0)
+
+        def NEQ(self):
+            return self.getToken(LaTeXParser.NEQ, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_relation
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterRelation" ):
+                listener.enterRelation(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitRelation" ):
+                listener.exitRelation(self)
+
+
+
+    def relation(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 2
+        self.enterRecursionRule(localctx, 2, self.RULE_relation, _p)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 83
+            self.expr()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 90
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
+                    self.state = 85
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 86
+                    _la = self._input.LA(1)
+                    if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 207) != 0)):
+                        self._errHandler.recoverInline(self)
+                    else:
+                        self._errHandler.reportMatch(self)
+                        self.consume()
+                    self.state = 87
+                    self.relation(3) 
+                self.state = 92
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class EqualityContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
+
+
+        def EQUAL(self):
+            return self.getToken(LaTeXParser.EQUAL, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_equality
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterEquality" ):
+                listener.enterEquality(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitEquality" ):
+                listener.exitEquality(self)
+
+
+
+
+    def equality(self):
+
+        localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 4, self.RULE_equality)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 93
+            self.expr()
+            self.state = 94
+            self.match(LaTeXParser.EQUAL)
+            self.state = 95
+            self.expr()
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class ExprContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def additive(self):
+            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_expr
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterExpr" ):
+                listener.enterExpr(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitExpr" ):
+                listener.exitExpr(self)
+
+
+
+
+    def expr(self):
+
+        localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 6, self.RULE_expr)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 97
+            self.additive(0)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class AdditiveContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def mp(self):
+            return self.getTypedRuleContext(LaTeXParser.MpContext,0)
+
+
+        def additive(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)
+
+
+        def ADD(self):
+            return self.getToken(LaTeXParser.ADD, 0)
+
+        def SUB(self):
+            return self.getToken(LaTeXParser.SUB, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_additive
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterAdditive" ):
+                listener.enterAdditive(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitAdditive" ):
+                listener.exitAdditive(self)
+
+
+
+    def additive(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 8
+        self.enterRecursionRule(localctx, 8, self.RULE_additive, _p)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 100
+            self.mp(0)
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 107
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
+                    self.state = 102
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 103
+                    _la = self._input.LA(1)
+                    if not(_la==14 or _la==15):
+                        self._errHandler.recoverInline(self)
+                    else:
+                        self._errHandler.reportMatch(self)
+                        self.consume()
+                    self.state = 104
+                    self.additive(3) 
+                self.state = 109
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class MpContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def unary(self):
+            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
+
+
+        def mp(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.MpContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.MpContext,i)
+
+
+        def MUL(self):
+            return self.getToken(LaTeXParser.MUL, 0)
+
+        def CMD_TIMES(self):
+            return self.getToken(LaTeXParser.CMD_TIMES, 0)
+
+        def CMD_CDOT(self):
+            return self.getToken(LaTeXParser.CMD_CDOT, 0)
+
+        def DIV(self):
+            return self.getToken(LaTeXParser.DIV, 0)
+
+        def CMD_DIV(self):
+            return self.getToken(LaTeXParser.CMD_DIV, 0)
+
+        def COLON(self):
+            return self.getToken(LaTeXParser.COLON, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_mp
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMp" ):
+                listener.enterMp(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMp" ):
+                listener.exitMp(self)
+
+
+
+    def mp(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 10
+        self.enterRecursionRule(localctx, 10, self.RULE_mp, _p)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 111
+            self.unary()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 118
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
+                    self.state = 113
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 114
+                    _la = self._input.LA(1)
+                    if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 145100350494343171) != 0)):
+                        self._errHandler.recoverInline(self)
+                    else:
+                        self._errHandler.reportMatch(self)
+                        self.consume()
+                    self.state = 115
+                    self.mp(3) 
+                self.state = 120
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class Mp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def unary_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
+
+
+        def mp_nofunc(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)
+
+
+        def MUL(self):
+            return self.getToken(LaTeXParser.MUL, 0)
+
+        def CMD_TIMES(self):
+            return self.getToken(LaTeXParser.CMD_TIMES, 0)
+
+        def CMD_CDOT(self):
+            return self.getToken(LaTeXParser.CMD_CDOT, 0)
+
+        def DIV(self):
+            return self.getToken(LaTeXParser.DIV, 0)
+
+        def CMD_DIV(self):
+            return self.getToken(LaTeXParser.CMD_DIV, 0)
+
+        def COLON(self):
+            return self.getToken(LaTeXParser.COLON, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_mp_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMp_nofunc" ):
+                listener.enterMp_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMp_nofunc" ):
+                listener.exitMp_nofunc(self)
+
+
+
+    def mp_nofunc(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 12
+        self.enterRecursionRule(localctx, 12, self.RULE_mp_nofunc, _p)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 122
+            self.unary_nofunc()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 129
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
+                    self.state = 124
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 125
+                    _la = self._input.LA(1)
+                    if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 145100350494343171) != 0)):
+                        self._errHandler.recoverInline(self)
+                    else:
+                        self._errHandler.reportMatch(self)
+                        self.consume()
+                    self.state = 126
+                    self.mp_nofunc(3) 
+                self.state = 131
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class UnaryContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def unary(self):
+            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)
+
+
+        def ADD(self):
+            return self.getToken(LaTeXParser.ADD, 0)
+
+        def SUB(self):
+            return self.getToken(LaTeXParser.SUB, 0)
+
+        def postfix(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_unary
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterUnary" ):
+                listener.enterUnary(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitUnary" ):
+                listener.exitUnary(self)
+
+
+
+
+    def unary(self):
+
+        localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 14, self.RULE_unary)
+        self._la = 0 # Token type
+        try:
+            self.state = 139
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [14, 15]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 132
+                _la = self._input.LA(1)
+                if not(_la==14 or _la==15):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 133
+                self.unary()
+                pass
+            elif token in [18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 135 
+                self._errHandler.sync(self)
+                _alt = 1
+                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                    if _alt == 1:
+                        self.state = 134
+                        self.postfix()
+
+                    else:
+                        raise NoViableAltException(self)
+                    self.state = 137 
+                    self._errHandler.sync(self)
+                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
+
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Unary_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def unary_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)
+
+
+        def ADD(self):
+            return self.getToken(LaTeXParser.ADD, 0)
+
+        def SUB(self):
+            return self.getToken(LaTeXParser.SUB, 0)
+
+        def postfix(self):
+            return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)
+
+
+        def postfix_nofunc(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_unary_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterUnary_nofunc" ):
+                listener.enterUnary_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitUnary_nofunc" ):
+                listener.exitUnary_nofunc(self)
+
+
+
+
+    def unary_nofunc(self):
+
+        localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 16, self.RULE_unary_nofunc)
+        self._la = 0 # Token type
+        try:
+            self.state = 150
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [14, 15]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 141
+                _la = self._input.LA(1)
+                if not(_la==14 or _la==15):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 142
+                self.unary_nofunc()
+                pass
+            elif token in [18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 143
+                self.postfix()
+                self.state = 147
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
+                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                    if _alt==1:
+                        self.state = 144
+                        self.postfix_nofunc() 
+                    self.state = 149
+                    self._errHandler.sync(self)
+                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
+
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class PostfixContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def exp(self):
+            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
+
+
+        def postfix_op(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_postfix
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterPostfix" ):
+                listener.enterPostfix(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitPostfix" ):
+                listener.exitPostfix(self)
+
+
+
+
+    def postfix(self):
+
+        localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 18, self.RULE_postfix)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 152
+            self.exp(0)
+            self.state = 156
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    self.state = 153
+                    self.postfix_op() 
+                self.state = 158
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Postfix_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def exp_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
+
+
+        def postfix_op(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_postfix_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterPostfix_nofunc" ):
+                listener.enterPostfix_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitPostfix_nofunc" ):
+                listener.exitPostfix_nofunc(self)
+
+
+
+
+    def postfix_nofunc(self):
+
+        localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 20, self.RULE_postfix_nofunc)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 159
+            self.exp_nofunc(0)
+            self.state = 163
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    self.state = 160
+                    self.postfix_op() 
+                self.state = 165
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Postfix_opContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def BANG(self):
+            return self.getToken(LaTeXParser.BANG, 0)
+
+        def eval_at(self):
+            return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_postfix_op
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterPostfix_op" ):
+                listener.enterPostfix_op(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitPostfix_op" ):
+                listener.exitPostfix_op(self)
+
+
+
+
+    def postfix_op(self):
+
+        localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 22, self.RULE_postfix_op)
+        try:
+            self.state = 168
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [87]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 166
+                self.match(LaTeXParser.BANG)
+                pass
+            elif token in [26]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 167
+                self.eval_at()
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Eval_atContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def BAR(self):
+            return self.getToken(LaTeXParser.BAR, 0)
+
+        def eval_at_sup(self):
+            return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)
+
+
+        def eval_at_sub(self):
+            return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_eval_at
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterEval_at" ):
+                listener.enterEval_at(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitEval_at" ):
+                listener.exitEval_at(self)
+
+
+
+
+    def eval_at(self):
+
+        localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 24, self.RULE_eval_at)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 170
+            self.match(LaTeXParser.BAR)
+            self.state = 176
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
+            if la_ == 1:
+                self.state = 171
+                self.eval_at_sup()
+                pass
+
+            elif la_ == 2:
+                self.state = 172
+                self.eval_at_sub()
+                pass
+
+            elif la_ == 3:
+                self.state = 173
+                self.eval_at_sup()
+                self.state = 174
+                self.eval_at_sub()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Eval_at_subContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def equality(self):
+            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_eval_at_sub
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterEval_at_sub" ):
+                listener.enterEval_at_sub(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitEval_at_sub" ):
+                listener.exitEval_at_sub(self)
+
+
+
+
+    def eval_at_sub(self):
+
+        localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 26, self.RULE_eval_at_sub)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 178
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 179
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 182
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
+            if la_ == 1:
+                self.state = 180
+                self.expr()
+                pass
+
+            elif la_ == 2:
+                self.state = 181
+                self.equality()
+                pass
+
+
+            self.state = 184
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Eval_at_supContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def equality(self):
+            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_eval_at_sup
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterEval_at_sup" ):
+                listener.enterEval_at_sup(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitEval_at_sup" ):
+                listener.exitEval_at_sup(self)
+
+
+
+
+    def eval_at_sup(self):
+
+        localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 28, self.RULE_eval_at_sup)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 186
+            self.match(LaTeXParser.CARET)
+            self.state = 187
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 190
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
+            if la_ == 1:
+                self.state = 188
+                self.expr()
+                pass
+
+            elif la_ == 2:
+                self.state = 189
+                self.equality()
+                pass
+
+
+            self.state = 192
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class ExpContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def comp(self):
+            return self.getTypedRuleContext(LaTeXParser.CompContext,0)
+
+
+        def exp(self):
+            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)
+
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def subexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_exp
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterExp" ):
+                listener.enterExp(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitExp" ):
+                listener.exitExp(self)
+
+
+
+    def exp(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 30
+        self.enterRecursionRule(localctx, 30, self.RULE_exp, _p)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 195
+            self.comp()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 211
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
+                    self.state = 197
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 198
+                    self.match(LaTeXParser.CARET)
+                    self.state = 204
+                    self._errHandler.sync(self)
+                    token = self._input.LA(1)
+                    if token in [26, 28, 29, 70, 74, 75, 76, 88]:
+                        self.state = 199
+                        self.atom()
+                        pass
+                    elif token in [20]:
+                        self.state = 200
+                        self.match(LaTeXParser.L_BRACE)
+                        self.state = 201
+                        self.expr()
+                        self.state = 202
+                        self.match(LaTeXParser.R_BRACE)
+                        pass
+                    else:
+                        raise NoViableAltException(self)
+
+                    self.state = 207
+                    self._errHandler.sync(self)
+                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
+                    if la_ == 1:
+                        self.state = 206
+                        self.subexpr()
+
+             
+                self.state = 213
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class Exp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def comp_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)
+
+
+        def exp_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)
+
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def subexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_exp_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterExp_nofunc" ):
+                listener.enterExp_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitExp_nofunc" ):
+                listener.exitExp_nofunc(self)
+
+
+
+    def exp_nofunc(self, _p:int=0):
+        _parentctx = self._ctx
+        _parentState = self.state
+        localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
+        _prevctx = localctx
+        _startState = 32
+        self.enterRecursionRule(localctx, 32, self.RULE_exp_nofunc, _p)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 215
+            self.comp_nofunc()
+            self._ctx.stop = self._input.LT(-1)
+            self.state = 231
+            self._errHandler.sync(self)
+            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
+            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
+                if _alt==1:
+                    if self._parseListeners is not None:
+                        self.triggerExitRuleEvent()
+                    _prevctx = localctx
+                    localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
+                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
+                    self.state = 217
+                    if not self.precpred(self._ctx, 2):
+                        from antlr4.error.Errors import FailedPredicateException
+                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
+                    self.state = 218
+                    self.match(LaTeXParser.CARET)
+                    self.state = 224
+                    self._errHandler.sync(self)
+                    token = self._input.LA(1)
+                    if token in [26, 28, 29, 70, 74, 75, 76, 88]:
+                        self.state = 219
+                        self.atom()
+                        pass
+                    elif token in [20]:
+                        self.state = 220
+                        self.match(LaTeXParser.L_BRACE)
+                        self.state = 221
+                        self.expr()
+                        self.state = 222
+                        self.match(LaTeXParser.R_BRACE)
+                        pass
+                    else:
+                        raise NoViableAltException(self)
+
+                    self.state = 227
+                    self._errHandler.sync(self)
+                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
+                    if la_ == 1:
+                        self.state = 226
+                        self.subexpr()
+
+             
+                self.state = 233
+                self._errHandler.sync(self)
+                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.unrollRecursionContexts(_parentctx)
+        return localctx
+
+
+    class CompContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def group(self):
+            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
+
+
+        def abs_group(self):
+            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
+
+
+        def func(self):
+            return self.getTypedRuleContext(LaTeXParser.FuncContext,0)
+
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def frac(self):
+            return self.getTypedRuleContext(LaTeXParser.FracContext,0)
+
+
+        def binom(self):
+            return self.getTypedRuleContext(LaTeXParser.BinomContext,0)
+
+
+        def floor(self):
+            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)
+
+
+        def ceil(self):
+            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_comp
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterComp" ):
+                listener.enterComp(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitComp" ):
+                listener.exitComp(self)
+
+
+
+
+    def comp(self):
+
+        localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 34, self.RULE_comp)
+        try:
+            self.state = 242
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
+            if la_ == 1:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 234
+                self.group()
+                pass
+
+            elif la_ == 2:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 235
+                self.abs_group()
+                pass
+
+            elif la_ == 3:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 236
+                self.func()
+                pass
+
+            elif la_ == 4:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 237
+                self.atom()
+                pass
+
+            elif la_ == 5:
+                self.enterOuterAlt(localctx, 5)
+                self.state = 238
+                self.frac()
+                pass
+
+            elif la_ == 6:
+                self.enterOuterAlt(localctx, 6)
+                self.state = 239
+                self.binom()
+                pass
+
+            elif la_ == 7:
+                self.enterOuterAlt(localctx, 7)
+                self.state = 240
+                self.floor()
+                pass
+
+            elif la_ == 8:
+                self.enterOuterAlt(localctx, 8)
+                self.state = 241
+                self.ceil()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Comp_nofuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def group(self):
+            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)
+
+
+        def abs_group(self):
+            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)
+
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def frac(self):
+            return self.getTypedRuleContext(LaTeXParser.FracContext,0)
+
+
+        def binom(self):
+            return self.getTypedRuleContext(LaTeXParser.BinomContext,0)
+
+
+        def floor(self):
+            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)
+
+
+        def ceil(self):
+            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_comp_nofunc
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterComp_nofunc" ):
+                listener.enterComp_nofunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitComp_nofunc" ):
+                listener.exitComp_nofunc(self)
+
+
+
+
+    def comp_nofunc(self):
+
+        localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 36, self.RULE_comp_nofunc)
+        try:
+            self.state = 251
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
+            if la_ == 1:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 244
+                self.group()
+                pass
+
+            elif la_ == 2:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 245
+                self.abs_group()
+                pass
+
+            elif la_ == 3:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 246
+                self.atom()
+                pass
+
+            elif la_ == 4:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 247
+                self.frac()
+                pass
+
+            elif la_ == 5:
+                self.enterOuterAlt(localctx, 5)
+                self.state = 248
+                self.binom()
+                pass
+
+            elif la_ == 6:
+                self.enterOuterAlt(localctx, 6)
+                self.state = 249
+                self.floor()
+                pass
+
+            elif la_ == 7:
+                self.enterOuterAlt(localctx, 7)
+                self.state = 250
+                self.ceil()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class GroupContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def L_PAREN(self):
+            return self.getToken(LaTeXParser.L_PAREN, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_PAREN(self):
+            return self.getToken(LaTeXParser.R_PAREN, 0)
+
+        def L_BRACKET(self):
+            return self.getToken(LaTeXParser.L_BRACKET, 0)
+
+        def R_BRACKET(self):
+            return self.getToken(LaTeXParser.R_BRACKET, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def L_BRACE_LITERAL(self):
+            return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)
+
+        def R_BRACE_LITERAL(self):
+            return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_group
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterGroup" ):
+                listener.enterGroup(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitGroup" ):
+                listener.exitGroup(self)
+
+
+
+
+    def group(self):
+
+        localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 38, self.RULE_group)
+        try:
+            self.state = 269
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [18]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 253
+                self.match(LaTeXParser.L_PAREN)
+                self.state = 254
+                self.expr()
+                self.state = 255
+                self.match(LaTeXParser.R_PAREN)
+                pass
+            elif token in [24]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 257
+                self.match(LaTeXParser.L_BRACKET)
+                self.state = 258
+                self.expr()
+                self.state = 259
+                self.match(LaTeXParser.R_BRACKET)
+                pass
+            elif token in [20]:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 261
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 262
+                self.expr()
+                self.state = 263
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            elif token in [22]:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 265
+                self.match(LaTeXParser.L_BRACE_LITERAL)
+                self.state = 266
+                self.expr()
+                self.state = 267
+                self.match(LaTeXParser.R_BRACE_LITERAL)
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Abs_groupContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def BAR(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.BAR)
+            else:
+                return self.getToken(LaTeXParser.BAR, i)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_abs_group
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterAbs_group" ):
+                listener.enterAbs_group(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitAbs_group" ):
+                listener.exitAbs_group(self)
+
+
+
+
+    def abs_group(self):
+
+        localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 40, self.RULE_abs_group)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 271
+            self.match(LaTeXParser.BAR)
+            self.state = 272
+            self.expr()
+            self.state = 273
+            self.match(LaTeXParser.BAR)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class AtomContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def LETTER(self):
+            return self.getToken(LaTeXParser.LETTER, 0)
+
+        def SYMBOL(self):
+            return self.getToken(LaTeXParser.SYMBOL, 0)
+
+        def subexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
+
+
+        def NUMBER(self):
+            return self.getToken(LaTeXParser.NUMBER, 0)
+
+        def DIFFERENTIAL(self):
+            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
+
+        def mathit(self):
+            return self.getTypedRuleContext(LaTeXParser.MathitContext,0)
+
+
+        def bra(self):
+            return self.getTypedRuleContext(LaTeXParser.BraContext,0)
+
+
+        def ket(self):
+            return self.getTypedRuleContext(LaTeXParser.KetContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_atom
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterAtom" ):
+                listener.enterAtom(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitAtom" ):
+                listener.exitAtom(self)
+
+
+
+
+    def atom(self):
+
+        localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 42, self.RULE_atom)
+        self._la = 0 # Token type
+        try:
+            self.state = 284
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [75, 88]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 275
+                _la = self._input.LA(1)
+                if not(_la==75 or _la==88):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 277
+                self._errHandler.sync(self)
+                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
+                if la_ == 1:
+                    self.state = 276
+                    self.subexpr()
+
+
+                pass
+            elif token in [76]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 279
+                self.match(LaTeXParser.NUMBER)
+                pass
+            elif token in [74]:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 280
+                self.match(LaTeXParser.DIFFERENTIAL)
+                pass
+            elif token in [70]:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 281
+                self.mathit()
+                pass
+            elif token in [29]:
+                self.enterOuterAlt(localctx, 5)
+                self.state = 282
+                self.bra()
+                pass
+            elif token in [26, 28]:
+                self.enterOuterAlt(localctx, 6)
+                self.state = 283
+                self.ket()
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class BraContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def L_ANGLE(self):
+            return self.getToken(LaTeXParser.L_ANGLE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BAR(self):
+            return self.getToken(LaTeXParser.R_BAR, 0)
+
+        def BAR(self):
+            return self.getToken(LaTeXParser.BAR, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_bra
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterBra" ):
+                listener.enterBra(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitBra" ):
+                listener.exitBra(self)
+
+
+
+
+    def bra(self):
+
+        localctx = LaTeXParser.BraContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 44, self.RULE_bra)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 286
+            self.match(LaTeXParser.L_ANGLE)
+            self.state = 287
+            self.expr()
+            self.state = 288
+            _la = self._input.LA(1)
+            if not(_la==26 or _la==27):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class KetContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_ANGLE(self):
+            return self.getToken(LaTeXParser.R_ANGLE, 0)
+
+        def L_BAR(self):
+            return self.getToken(LaTeXParser.L_BAR, 0)
+
+        def BAR(self):
+            return self.getToken(LaTeXParser.BAR, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_ket
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterKet" ):
+                listener.enterKet(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitKet" ):
+                listener.exitKet(self)
+
+
+
+
+    def ket(self):
+
+        localctx = LaTeXParser.KetContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 46, self.RULE_ket)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 290
+            _la = self._input.LA(1)
+            if not(_la==26 or _la==28):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+            self.state = 291
+            self.expr()
+            self.state = 292
+            self.match(LaTeXParser.R_ANGLE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class MathitContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def CMD_MATHIT(self):
+            return self.getToken(LaTeXParser.CMD_MATHIT, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def mathit_text(self):
+            return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_mathit
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMathit" ):
+                listener.enterMathit(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMathit" ):
+                listener.exitMathit(self)
+
+
+
+
+    def mathit(self):
+
+        localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 48, self.RULE_mathit)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 294
+            self.match(LaTeXParser.CMD_MATHIT)
+            self.state = 295
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 296
+            self.mathit_text()
+            self.state = 297
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Mathit_textContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def LETTER(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.LETTER)
+            else:
+                return self.getToken(LaTeXParser.LETTER, i)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_mathit_text
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterMathit_text" ):
+                listener.enterMathit_text(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitMathit_text" ):
+                listener.exitMathit_text(self)
+
+
+
+
+    def mathit_text(self):
+
+        localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 50, self.RULE_mathit_text)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 302
+            self._errHandler.sync(self)
+            _la = self._input.LA(1)
+            while _la==75:
+                self.state = 299
+                self.match(LaTeXParser.LETTER)
+                self.state = 304
+                self._errHandler.sync(self)
+                _la = self._input.LA(1)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class FracContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.upper = None # ExprContext
+            self.lower = None # ExprContext
+
+        def CMD_FRAC(self):
+            return self.getToken(LaTeXParser.CMD_FRAC, 0)
+
+        def L_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.L_BRACE)
+            else:
+                return self.getToken(LaTeXParser.L_BRACE, i)
+
+        def R_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.R_BRACE)
+            else:
+                return self.getToken(LaTeXParser.R_BRACE, i)
+
+        def expr(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_frac
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFrac" ):
+                listener.enterFrac(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFrac" ):
+                listener.exitFrac(self)
+
+
+
+
+    def frac(self):
+
+        localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 52, self.RULE_frac)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 305
+            self.match(LaTeXParser.CMD_FRAC)
+            self.state = 306
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 307
+            localctx.upper = self.expr()
+            self.state = 308
+            self.match(LaTeXParser.R_BRACE)
+            self.state = 309
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 310
+            localctx.lower = self.expr()
+            self.state = 311
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class BinomContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.n = None # ExprContext
+            self.k = None # ExprContext
+
+        def L_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.L_BRACE)
+            else:
+                return self.getToken(LaTeXParser.L_BRACE, i)
+
+        def R_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.R_BRACE)
+            else:
+                return self.getToken(LaTeXParser.R_BRACE, i)
+
+        def CMD_BINOM(self):
+            return self.getToken(LaTeXParser.CMD_BINOM, 0)
+
+        def CMD_DBINOM(self):
+            return self.getToken(LaTeXParser.CMD_DBINOM, 0)
+
+        def CMD_TBINOM(self):
+            return self.getToken(LaTeXParser.CMD_TBINOM, 0)
+
+        def expr(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_binom
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterBinom" ):
+                listener.enterBinom(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitBinom" ):
+                listener.exitBinom(self)
+
+
+
+
+    def binom(self):
+
+        localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 54, self.RULE_binom)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 313
+            _la = self._input.LA(1)
+            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 7) != 0)):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+            self.state = 314
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 315
+            localctx.n = self.expr()
+            self.state = 316
+            self.match(LaTeXParser.R_BRACE)
+            self.state = 317
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 318
+            localctx.k = self.expr()
+            self.state = 319
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class FloorContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.val = None # ExprContext
+
+        def L_FLOOR(self):
+            return self.getToken(LaTeXParser.L_FLOOR, 0)
+
+        def R_FLOOR(self):
+            return self.getToken(LaTeXParser.R_FLOOR, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_floor
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFloor" ):
+                listener.enterFloor(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFloor" ):
+                listener.exitFloor(self)
+
+
+
+
+    def floor(self):
+
+        localctx = LaTeXParser.FloorContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 56, self.RULE_floor)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 321
+            self.match(LaTeXParser.L_FLOOR)
+            self.state = 322
+            localctx.val = self.expr()
+            self.state = 323
+            self.match(LaTeXParser.R_FLOOR)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class CeilContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.val = None # ExprContext
+
+        def L_CEIL(self):
+            return self.getToken(LaTeXParser.L_CEIL, 0)
+
+        def R_CEIL(self):
+            return self.getToken(LaTeXParser.R_CEIL, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_ceil
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterCeil" ):
+                listener.enterCeil(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitCeil" ):
+                listener.exitCeil(self)
+
+
+
+
+    def ceil(self):
+
+        localctx = LaTeXParser.CeilContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 58, self.RULE_ceil)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 325
+            self.match(LaTeXParser.L_CEIL)
+            self.state = 326
+            localctx.val = self.expr()
+            self.state = 327
+            self.match(LaTeXParser.R_CEIL)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Func_normalContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def FUNC_EXP(self):
+            return self.getToken(LaTeXParser.FUNC_EXP, 0)
+
+        def FUNC_LOG(self):
+            return self.getToken(LaTeXParser.FUNC_LOG, 0)
+
+        def FUNC_LN(self):
+            return self.getToken(LaTeXParser.FUNC_LN, 0)
+
+        def FUNC_SIN(self):
+            return self.getToken(LaTeXParser.FUNC_SIN, 0)
+
+        def FUNC_COS(self):
+            return self.getToken(LaTeXParser.FUNC_COS, 0)
+
+        def FUNC_TAN(self):
+            return self.getToken(LaTeXParser.FUNC_TAN, 0)
+
+        def FUNC_CSC(self):
+            return self.getToken(LaTeXParser.FUNC_CSC, 0)
+
+        def FUNC_SEC(self):
+            return self.getToken(LaTeXParser.FUNC_SEC, 0)
+
+        def FUNC_COT(self):
+            return self.getToken(LaTeXParser.FUNC_COT, 0)
+
+        def FUNC_ARCSIN(self):
+            return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)
+
+        def FUNC_ARCCOS(self):
+            return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)
+
+        def FUNC_ARCTAN(self):
+            return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)
+
+        def FUNC_ARCCSC(self):
+            return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)
+
+        def FUNC_ARCSEC(self):
+            return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)
+
+        def FUNC_ARCCOT(self):
+            return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)
+
+        def FUNC_SINH(self):
+            return self.getToken(LaTeXParser.FUNC_SINH, 0)
+
+        def FUNC_COSH(self):
+            return self.getToken(LaTeXParser.FUNC_COSH, 0)
+
+        def FUNC_TANH(self):
+            return self.getToken(LaTeXParser.FUNC_TANH, 0)
+
+        def FUNC_ARSINH(self):
+            return self.getToken(LaTeXParser.FUNC_ARSINH, 0)
+
+        def FUNC_ARCOSH(self):
+            return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)
+
+        def FUNC_ARTANH(self):
+            return self.getToken(LaTeXParser.FUNC_ARTANH, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_func_normal
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFunc_normal" ):
+                listener.enterFunc_normal(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFunc_normal" ):
+                listener.exitFunc_normal(self)
+
+
+
+
+    def func_normal(self):
+
+        localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 60, self.RULE_func_normal)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 329
+            _la = self._input.LA(1)
+            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 144115119356379136) != 0)):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class FuncContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+            self.root = None # ExprContext
+            self.base = None # ExprContext
+
+        def func_normal(self):
+            return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)
+
+
+        def L_PAREN(self):
+            return self.getToken(LaTeXParser.L_PAREN, 0)
+
+        def func_arg(self):
+            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
+
+
+        def R_PAREN(self):
+            return self.getToken(LaTeXParser.R_PAREN, 0)
+
+        def func_arg_noparens(self):
+            return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)
+
+
+        def subexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)
+
+
+        def supexpr(self):
+            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)
+
+
+        def args(self):
+            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
+
+
+        def LETTER(self):
+            return self.getToken(LaTeXParser.LETTER, 0)
+
+        def SYMBOL(self):
+            return self.getToken(LaTeXParser.SYMBOL, 0)
+
+        def FUNC_INT(self):
+            return self.getToken(LaTeXParser.FUNC_INT, 0)
+
+        def DIFFERENTIAL(self):
+            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)
+
+        def frac(self):
+            return self.getTypedRuleContext(LaTeXParser.FracContext,0)
+
+
+        def additive(self):
+            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)
+
+
+        def FUNC_SQRT(self):
+            return self.getToken(LaTeXParser.FUNC_SQRT, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def expr(self, i:int=None):
+            if i is None:
+                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
+            else:
+                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)
+
+
+        def L_BRACKET(self):
+            return self.getToken(LaTeXParser.L_BRACKET, 0)
+
+        def R_BRACKET(self):
+            return self.getToken(LaTeXParser.R_BRACKET, 0)
+
+        def FUNC_OVERLINE(self):
+            return self.getToken(LaTeXParser.FUNC_OVERLINE, 0)
+
+        def mp(self):
+            return self.getTypedRuleContext(LaTeXParser.MpContext,0)
+
+
+        def FUNC_SUM(self):
+            return self.getToken(LaTeXParser.FUNC_SUM, 0)
+
+        def FUNC_PROD(self):
+            return self.getToken(LaTeXParser.FUNC_PROD, 0)
+
+        def subeq(self):
+            return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)
+
+
+        def FUNC_LIM(self):
+            return self.getToken(LaTeXParser.FUNC_LIM, 0)
+
+        def limit_sub(self):
+            return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_func
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFunc" ):
+                listener.enterFunc(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFunc" ):
+                listener.exitFunc(self)
+
+
+
+
+    def func(self):
+
+        localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 62, self.RULE_func)
+        self._la = 0 # Token type
+        try:
+            self.state = 409
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 331
+                self.func_normal()
+                self.state = 344
+                self._errHandler.sync(self)
+                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
+                if la_ == 1:
+                    self.state = 333
+                    self._errHandler.sync(self)
+                    _la = self._input.LA(1)
+                    if _la==71:
+                        self.state = 332
+                        self.subexpr()
+
+
+                    self.state = 336
+                    self._errHandler.sync(self)
+                    _la = self._input.LA(1)
+                    if _la==72:
+                        self.state = 335
+                        self.supexpr()
+
+
+                    pass
+
+                elif la_ == 2:
+                    self.state = 339
+                    self._errHandler.sync(self)
+                    _la = self._input.LA(1)
+                    if _la==72:
+                        self.state = 338
+                        self.supexpr()
+
+
+                    self.state = 342
+                    self._errHandler.sync(self)
+                    _la = self._input.LA(1)
+                    if _la==71:
+                        self.state = 341
+                        self.subexpr()
+
+
+                    pass
+
+
+                self.state = 351
+                self._errHandler.sync(self)
+                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
+                if la_ == 1:
+                    self.state = 346
+                    self.match(LaTeXParser.L_PAREN)
+                    self.state = 347
+                    self.func_arg()
+                    self.state = 348
+                    self.match(LaTeXParser.R_PAREN)
+                    pass
+
+                elif la_ == 2:
+                    self.state = 350
+                    self.func_arg_noparens()
+                    pass
+
+
+                pass
+            elif token in [75, 88]:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 353
+                _la = self._input.LA(1)
+                if not(_la==75 or _la==88):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 355
+                self._errHandler.sync(self)
+                _la = self._input.LA(1)
+                if _la==71:
+                    self.state = 354
+                    self.subexpr()
+
+
+                self.state = 357
+                self.match(LaTeXParser.L_PAREN)
+                self.state = 358
+                self.args()
+                self.state = 359
+                self.match(LaTeXParser.R_PAREN)
+                pass
+            elif token in [33]:
+                self.enterOuterAlt(localctx, 3)
+                self.state = 361
+                self.match(LaTeXParser.FUNC_INT)
+                self.state = 368
+                self._errHandler.sync(self)
+                token = self._input.LA(1)
+                if token in [71]:
+                    self.state = 362
+                    self.subexpr()
+                    self.state = 363
+                    self.supexpr()
+                    pass
+                elif token in [72]:
+                    self.state = 365
+                    self.supexpr()
+                    self.state = 366
+                    self.subexpr()
+                    pass
+                elif token in [14, 15, 18, 20, 22, 24, 26, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 88]:
+                    pass
+                else:
+                    pass
+                self.state = 376
+                self._errHandler.sync(self)
+                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
+                if la_ == 1:
+                    self.state = 371
+                    self._errHandler.sync(self)
+                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
+                    if la_ == 1:
+                        self.state = 370
+                        self.additive(0)
+
+
+                    self.state = 373
+                    self.match(LaTeXParser.DIFFERENTIAL)
+                    pass
+
+                elif la_ == 2:
+                    self.state = 374
+                    self.frac()
+                    pass
+
+                elif la_ == 3:
+                    self.state = 375
+                    self.additive(0)
+                    pass
+
+
+                pass
+            elif token in [61]:
+                self.enterOuterAlt(localctx, 4)
+                self.state = 378
+                self.match(LaTeXParser.FUNC_SQRT)
+                self.state = 383
+                self._errHandler.sync(self)
+                _la = self._input.LA(1)
+                if _la==24:
+                    self.state = 379
+                    self.match(LaTeXParser.L_BRACKET)
+                    self.state = 380
+                    localctx.root = self.expr()
+                    self.state = 381
+                    self.match(LaTeXParser.R_BRACKET)
+
+
+                self.state = 385
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 386
+                localctx.base = self.expr()
+                self.state = 387
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            elif token in [62]:
+                self.enterOuterAlt(localctx, 5)
+                self.state = 389
+                self.match(LaTeXParser.FUNC_OVERLINE)
+                self.state = 390
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 391
+                localctx.base = self.expr()
+                self.state = 392
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            elif token in [34, 35]:
+                self.enterOuterAlt(localctx, 6)
+                self.state = 394
+                _la = self._input.LA(1)
+                if not(_la==34 or _la==35):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 401
+                self._errHandler.sync(self)
+                token = self._input.LA(1)
+                if token in [71]:
+                    self.state = 395
+                    self.subeq()
+                    self.state = 396
+                    self.supexpr()
+                    pass
+                elif token in [72]:
+                    self.state = 398
+                    self.supexpr()
+                    self.state = 399
+                    self.subeq()
+                    pass
+                else:
+                    raise NoViableAltException(self)
+
+                self.state = 403
+                self.mp(0)
+                pass
+            elif token in [31]:
+                self.enterOuterAlt(localctx, 7)
+                self.state = 405
+                self.match(LaTeXParser.FUNC_LIM)
+                self.state = 406
+                self.limit_sub()
+                self.state = 407
+                self.mp(0)
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class ArgsContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def args(self):
+            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_args
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterArgs" ):
+                listener.enterArgs(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitArgs" ):
+                listener.exitArgs(self)
+
+
+
+
+    def args(self):
+
+        localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 64, self.RULE_args)
+        try:
+            self.state = 416
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
+            if la_ == 1:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 411
+                self.expr()
+                self.state = 412
+                self.match(LaTeXParser.T__0)
+                self.state = 413
+                self.args()
+                pass
+
+            elif la_ == 2:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 415
+                self.expr()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Limit_subContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def L_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.L_BRACE)
+            else:
+                return self.getToken(LaTeXParser.L_BRACE, i)
+
+        def LIM_APPROACH_SYM(self):
+            return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self, i:int=None):
+            if i is None:
+                return self.getTokens(LaTeXParser.R_BRACE)
+            else:
+                return self.getToken(LaTeXParser.R_BRACE, i)
+
+        def LETTER(self):
+            return self.getToken(LaTeXParser.LETTER, 0)
+
+        def SYMBOL(self):
+            return self.getToken(LaTeXParser.SYMBOL, 0)
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def ADD(self):
+            return self.getToken(LaTeXParser.ADD, 0)
+
+        def SUB(self):
+            return self.getToken(LaTeXParser.SUB, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_limit_sub
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterLimit_sub" ):
+                listener.enterLimit_sub(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitLimit_sub" ):
+                listener.exitLimit_sub(self)
+
+
+
+
+    def limit_sub(self):
+
+        localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 66, self.RULE_limit_sub)
+        self._la = 0 # Token type
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 418
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 419
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 420
+            _la = self._input.LA(1)
+            if not(_la==75 or _la==88):
+                self._errHandler.recoverInline(self)
+            else:
+                self._errHandler.reportMatch(self)
+                self.consume()
+            self.state = 421
+            self.match(LaTeXParser.LIM_APPROACH_SYM)
+            self.state = 422
+            self.expr()
+            self.state = 427
+            self._errHandler.sync(self)
+            _la = self._input.LA(1)
+            if _la==72:
+                self.state = 423
+                self.match(LaTeXParser.CARET)
+                self.state = 424
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 425
+                _la = self._input.LA(1)
+                if not(_la==14 or _la==15):
+                    self._errHandler.recoverInline(self)
+                else:
+                    self._errHandler.reportMatch(self)
+                    self.consume()
+                self.state = 426
+                self.match(LaTeXParser.R_BRACE)
+
+
+            self.state = 429
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Func_argContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def func_arg(self):
+            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_func_arg
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFunc_arg" ):
+                listener.enterFunc_arg(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFunc_arg" ):
+                listener.exitFunc_arg(self)
+
+
+
+
+    def func_arg(self):
+
+        localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 68, self.RULE_func_arg)
+        try:
+            self.state = 436
+            self._errHandler.sync(self)
+            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
+            if la_ == 1:
+                self.enterOuterAlt(localctx, 1)
+                self.state = 431
+                self.expr()
+                pass
+
+            elif la_ == 2:
+                self.enterOuterAlt(localctx, 2)
+                self.state = 432
+                self.expr()
+                self.state = 433
+                self.match(LaTeXParser.T__0)
+                self.state = 434
+                self.func_arg()
+                pass
+
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class Func_arg_noparensContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def mp_nofunc(self):
+            return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)
+
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_func_arg_noparens
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterFunc_arg_noparens" ):
+                listener.enterFunc_arg_noparens(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitFunc_arg_noparens" ):
+                listener.exitFunc_arg_noparens(self)
+
+
+
+
+    def func_arg_noparens(self):
+
+        localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 70, self.RULE_func_arg_noparens)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 438
+            self.mp_nofunc(0)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class SubexprContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_subexpr
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterSubexpr" ):
+                listener.enterSubexpr(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitSubexpr" ):
+                listener.exitSubexpr(self)
+
+
+
+
+    def subexpr(self):
+
+        localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 72, self.RULE_subexpr)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 440
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 446
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [26, 28, 29, 70, 74, 75, 76, 88]:
+                self.state = 441
+                self.atom()
+                pass
+            elif token in [20]:
+                self.state = 442
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 443
+                self.expr()
+                self.state = 444
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class SupexprContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def CARET(self):
+            return self.getToken(LaTeXParser.CARET, 0)
+
+        def atom(self):
+            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)
+
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def expr(self):
+            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_supexpr
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterSupexpr" ):
+                listener.enterSupexpr(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitSupexpr" ):
+                listener.exitSupexpr(self)
+
+
+
+
+    def supexpr(self):
+
+        localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 74, self.RULE_supexpr)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 448
+            self.match(LaTeXParser.CARET)
+            self.state = 454
+            self._errHandler.sync(self)
+            token = self._input.LA(1)
+            if token in [26, 28, 29, 70, 74, 75, 76, 88]:
+                self.state = 449
+                self.atom()
+                pass
+            elif token in [20]:
+                self.state = 450
+                self.match(LaTeXParser.L_BRACE)
+                self.state = 451
+                self.expr()
+                self.state = 452
+                self.match(LaTeXParser.R_BRACE)
+                pass
+            else:
+                raise NoViableAltException(self)
+
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class SubeqContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def equality(self):
+            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_subeq
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterSubeq" ):
+                listener.enterSubeq(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitSubeq" ):
+                listener.exitSubeq(self)
+
+
+
+
+    def subeq(self):
+
+        localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 76, self.RULE_subeq)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 456
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 457
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 458
+            self.equality()
+            self.state = 459
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+    class SupeqContext(ParserRuleContext):
+        __slots__ = 'parser'
+
+        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
+            super().__init__(parent, invokingState)
+            self.parser = parser
+
+        def UNDERSCORE(self):
+            return self.getToken(LaTeXParser.UNDERSCORE, 0)
+
+        def L_BRACE(self):
+            return self.getToken(LaTeXParser.L_BRACE, 0)
+
+        def equality(self):
+            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)
+
+
+        def R_BRACE(self):
+            return self.getToken(LaTeXParser.R_BRACE, 0)
+
+        def getRuleIndex(self):
+            return LaTeXParser.RULE_supeq
+
+        def enterRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "enterSupeq" ):
+                listener.enterSupeq(self)
+
+        def exitRule(self, listener:ParseTreeListener):
+            if hasattr( listener, "exitSupeq" ):
+                listener.exitSupeq(self)
+
+
+
+
+    def supeq(self):
+
+        localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
+        self.enterRule(localctx, 78, self.RULE_supeq)
+        try:
+            self.enterOuterAlt(localctx, 1)
+            self.state = 461
+            self.match(LaTeXParser.UNDERSCORE)
+            self.state = 462
+            self.match(LaTeXParser.L_BRACE)
+            self.state = 463
+            self.equality()
+            self.state = 464
+            self.match(LaTeXParser.R_BRACE)
+        except RecognitionException as re:
+            localctx.exception = re
+            self._errHandler.reportError(self, re)
+            self._errHandler.recover(self, re)
+        finally:
+            self.exitRule()
+        return localctx
+
+
+
+    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
+        if self._predicates == None:
+            self._predicates = dict()
+        self._predicates[1] = self.relation_sempred
+        self._predicates[4] = self.additive_sempred
+        self._predicates[5] = self.mp_sempred
+        self._predicates[6] = self.mp_nofunc_sempred
+        self._predicates[15] = self.exp_sempred
+        self._predicates[16] = self.exp_nofunc_sempred
+        pred = self._predicates.get(ruleIndex, None)
+        if pred is None:
+            raise Exception("No predicate with index:" + str(ruleIndex))
+        else:
+            return pred(localctx, predIndex)
+
+    def relation_sempred(self, localctx:RelationContext, predIndex:int):
+            if predIndex == 0:
+                return self.precpred(self._ctx, 2)
+         
+
+    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
+            if predIndex == 1:
+                return self.precpred(self._ctx, 2)
+         
+
+    def mp_sempred(self, localctx:MpContext, predIndex:int):
+            if predIndex == 2:
+                return self.precpred(self._ctx, 2)
+         
+
+    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
+            if predIndex == 3:
+                return self.precpred(self._ctx, 2)
+         
+
+    def exp_sempred(self, localctx:ExpContext, predIndex:int):
+            if predIndex == 4:
+                return self.precpred(self._ctx, 2)
+         
+
+    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
+            if predIndex == 5:
+                return self.precpred(self._ctx, 2)
+         
+
+
+
+
diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py
index 2e4a45ad20..f10327009b 100644
--- a/sympy/parsing/latex/_parse_latex_antlr.py
+++ b/sympy/parsing/latex/_parse_latex_antlr.py
@@ -382,6 +382,10 @@ def convert_frac(frac):
 
     expr_top = convert_expr(frac.upper)
     expr_bot = convert_expr(frac.lower)
+    # Wrap denominator in parentheses if it's a fraction or contains division
+    if (hasattr(frac.lower, 'frac') or 
+        any(op.DIV() or op.CMD_DIV() for op in frac.lower.getChildren() if hasattr(op, 'DIV'))):
+        expr_bot = sympy.Paren(expr_bot, evaluate=False)
     inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)
     if expr_top == 1:
         return inverse_denom
--------
2025-06-26 16:50:52,295 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-11451:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 16:50:52,295 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 16:50:52,296 - INFO - Logging LLM completions for instance django__django-11451 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-11451
