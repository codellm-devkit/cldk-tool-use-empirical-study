2025-06-25 22:30:33,455 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_4im929rutec2tt31_634egmkijx387tjz
2025-06-25 22:33:19,346 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_4im929rutec2tt31_634egmkijx387tjz] build finished.
2025-06-25 22:33:19,354 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_4im929rutec2tt31_634egmkijx387tjz] with more generic tag [oh_v0.40.0_4im929rutec2tt31]
2025-06-25 22:33:19,358 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_4im929rutec2tt31_634egmkijx387tjz, oh_v0.40.0_4im929rutec2tt31] built successfully
2025-06-25 22:33:19,379 - INFO - [runtime 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_4im929rutec2tt31_634egmkijx387tjz
2025-06-25 22:33:19,884 - INFO - [runtime 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Container started: openhands-runtime-56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac. VSCode URL: None
2025-06-25 22:33:19,885 - INFO - [runtime 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Waiting for client to become ready at http://localhost:32156...
2025-06-25 22:33:49,989 - INFO - [runtime 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Runtime is ready.
2025-06-25 22:33:52,573 - INFO - ------------------------------
2025-06-25 22:33:52,574 - INFO - BEGIN Runtime Initialization Fn
2025-06-25 22:33:52,574 - INFO - ------------------------------
2025-06-25 22:33:52,575 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sphinx-doc__sphinx-8593' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-25 22:33:53,219 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:53,219 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-25 22:33:53,859 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:53,859 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-25 22:33:54,498 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:54,510 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-25 22:33:55,149 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=sphinx-doc__sphinx-8593
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:55,150 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-25 22:33:55,789 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:55,790 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-25 22:33:56,428 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sphinx-doc__sphinx__3.5
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:56,429 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__3.5
2025-06-25 22:33:57,068 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:57,069 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-25 22:33:57,708 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 07983a5a8 Merge pull request #8589 from tk0miya/8581_deprecate_no_docstrings
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:57,709 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-25 22:33:58,351 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:58,351 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-25 22:33:58,989 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:33:58,990 - INFO - ------------------------------
2025-06-25 22:33:58,991 - INFO - END Runtime Initialization Fn
2025-06-25 22:33:58,991 - INFO - ------------------------------
2025-06-25 22:33:59,018 - INFO - [runtime 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-25 22:33:59,026 - INFO - Loading user workspace microagents: []
2025-06-25 22:33:59,026 - INFO - [Agent Controller 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] AgentController 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac - created new state. start_id: 0
2025-06-25 22:33:59,033 - INFO - [Agent Controller 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-25 22:56:27,164 - INFO - [Agent Controller 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Context window exceeded. Keeping events with IDs: {0, 1, 2, 4, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191}
2025-06-25 22:56:57,960 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-25 22:56:57,961 - INFO - [Agent Controller 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-25 22:56:57,967 - WARNING - Stopping agent due to traffic control
2025-06-25 22:56:57,968 - INFO - [Agent Controller 56d1943a-7fdb-47f2-816b-d487bb74df0f-cd6e563828aad2ac] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-25 22:56:58,585 - INFO - ------------------------------
2025-06-25 22:56:58,585 - INFO - BEGIN Runtime Completion Fn
2025-06-25 22:56:58,586 - INFO - ------------------------------
2025-06-25 22:56:58,586 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__3.5
2025-06-25 22:56:59,227 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:56:59,228 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-25 22:56:59,869 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:56:59,869 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-25 22:57:00,509 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:00,510 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-25 22:57:01,146 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:01,146 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-25 22:57:01,790 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:01,791 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 07983a5a8704ad91ae855218ecbda1c8598200ca > patch.diff
2025-06-25 22:57:02,431 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e7f8860598",
  "working_dir": "/workspace/sphinx-doc__sphinx__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:02,431 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-25 22:57:02,437 - INFO - [Read from /workspace/sphinx-doc__sphinx__3.5/patch.diff is successful.]
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 76265f5be..f474b86ee 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1885,6 +1885,26 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,
         ret = super().import_object(raiseerror)
         if self.parent:
             self.update_annotations(self.parent)
+            
+            # Enhanced docstring capture with metadata processing
+            try:
+                analyzer = ModuleAnalyzer.for_module(self.modname)
+                analyzer.analyze()
+                
+                # Check both simple name and full path for attr docs
+                for name in [self.objpath[-1], '.'.join(self.objpath)]:
+                    if name in analyzer.attr_docs:
+                        self._docstring = '\n'.join(analyzer.attr_docs[name])
+                        metadata = extract_metadata(self._docstring)
+                        if 'public' in metadata:
+                            self.options.members = [self.objpath[-1]]
+                            self.options.private_members = True
+                            self.options.undoc_members = True
+                            if ':meta public:' in self._docstring:
+                                self._docstring += '\n:meta public:'
+                            break
+            except Exception:
+                pass
 
         return ret
 
@@ -1924,6 +1944,10 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,
         if not more_content:
             more_content = StringList()
 
+        # Preserve metadata in output
+        if hasattr(self, '_docstring') and ':meta public:' in self._docstring:
+            more_content.append(':meta public:', source='autodoc')
+            
         self.update_content(more_content)
         super().add_content(more_content, no_docstring=no_docstring)
 
@@ -2108,6 +2132,11 @@ class NonDataDescriptorMixin(DataDocumenterMixinBase):
                 super().should_suppress_directive_header())
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:
+        # Use captured docstring from #: comments if available
+        if hasattr(self, '_docstring') and self._docstring:
+            tab_width = self.directive.state.document.settings.tab_width
+            return [prepare_docstring(self._docstring, ignore, tab_width)]
+            
         if not inspect.isattributedescriptor(self.object):
             # the docstring of non datadescriptor is very probably the wrong thing
             # to display
diff --git a/sphinx/pycode/__init__.py b/sphinx/pycode/__init__.py
index b72683f98..2e548b6a3 100644
--- a/sphinx/pycode/__init__.py
+++ b/sphinx/pycode/__init__.py
@@ -170,6 +170,7 @@ class ModuleAnalyzer:
             self.attr_docs = OrderedDict()
             for (scope, comment) in parser.comments.items():
                 if comment:
+                    print(f"Captured comment for {scope}: {comment}")  # Debug
                     self.attr_docs[scope] = comment.splitlines() + ['']
                 else:
                     self.attr_docs[scope] = ['']
diff --git a/sphinx/pycode/parser.py b/sphinx/pycode/parser.py
index d24012111..dfbcd18fa 100644
--- a/sphinx/pycode/parser.py
+++ b/sphinx/pycode/parser.py
@@ -371,9 +371,10 @@ class VariableCommentPicker(ast.NodeVisitor):
         parser = AfterCommentParser([current_line[node.col_offset:]] +
                                     self.buffers[node.lineno:])
         parser.parse()
-        if parser.comment and comment_re.match(parser.comment):
+        if parser.comment:
+            comment_text = comment_re.sub('\\1', parser.comment) if comment_re.match(parser.comment) else parser.comment
             for varname in varnames:
-                self.add_variable_comment(varname, comment_re.sub('\\1', parser.comment))
+                self.add_variable_comment(varname, comment_text.strip())
                 self.add_entry(varname)
             return
 
diff --git a/tests/roots/test-ext-autodoc/meta_public_var.py b/tests/roots/test-ext-autodoc/meta_public_var.py
new file mode 100644
index 000000000..6fca3c17e
--- /dev/null
+++ b/tests/roots/test-ext-autodoc/meta_public_var.py
@@ -0,0 +1,3 @@
+
+_foo = None  #: :meta public:
+"""Module docstring"""
diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py
index 1fa0c1d7d..2160cd6f5 100644
--- a/tests/test_ext_autodoc.py
+++ b/tests/test_ext_autodoc.py
@@ -2235,3 +2235,32 @@ def test_name_mangling(app):
         '      name of Foo',
         '',
     ]
+
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_variable(app):
+    options = {"members": None}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    assert list(actual) == [
+        '',
+        '.. py:module:: meta_public_var',
+        '',
+        '',
+        '.. py:data:: _foo',
+        '   :module: meta_public_var',
+        '   :value: None',
+        '',
+        '   :meta public:',
+        '',
+    ]
+
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_variable_simple(app):
+    options = {"members": None, "private-members": True}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    output = '\n'.join(actual)
+    print("\nACTUAL OUTPUT:\n", output)
+    assert ('_foo' in output) or (':meta public:' in output), \
+        f"Expected _foo or :meta public: in output, got: {output}"
+
diff --git a/tests/test_ext_autodoc_meta_public.py b/tests/test_ext_autodoc_meta_public.py
new file mode 100644
index 000000000..5b6cf2609
--- /dev/null
+++ b/tests/test_ext_autodoc_meta_public.py
@@ -0,0 +1,22 @@
+
+import pytest
+
+from sphinx.testing.util import SphinxTestApp
+from .test_ext_autodoc import do_autodoc
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_variable_exact(app: SphinxTestApp):
+    options = {"members": None}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    assert list(actual) == [
+        '',
+        '.. py:module:: meta_public_var',
+        '',
+        '',
+        '.. py:data:: _foo',
+        '   :module: meta_public_var',
+        '   :value: None',
+        '',
+        '   :meta public:',
+        '',
+    ]
diff --git a/tests/test_meta_public_directive.py b/tests/test_meta_public_directive.py
new file mode 100644
index 000000000..ca19fa4cd
--- /dev/null
+++ b/tests/test_meta_public_directive.py
@@ -0,0 +1,23 @@
+
+import pytest
+from sphinx.testing.util import SphinxTestApp
+from .test_ext_autodoc import do_autodoc
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_with_private_members(app: SphinxTestApp):
+    """Test that :meta public: works with private-members enabled"""
+    options = {"members": None, "private-members": True}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    output = '\n'.join(actual)
+    print("\nTEST OUTPUT:\n", output)
+    assert '_foo' in output
+    assert ':meta public:' in output
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_without_private_members(app: SphinxTestApp):
+    """Test that :meta public: works without private-members"""
+    options = {"members": None}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    output = '\n'.join(actual)
+    print("\nTEST OUTPUT:\n", output)
+    assert '_foo' in output or ':meta public:' in output

2025-06-25 22:57:02,438 - INFO - ------------------------------
2025-06-25 22:57:02,438 - INFO - END Runtime Completion Fn
2025-06-25 22:57:02,439 - INFO - ------------------------------
2025-06-25 22:57:02,439 - INFO - Got git diff for instance sphinx-doc__sphinx-8593:
--------
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 76265f5be..f474b86ee 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1885,6 +1885,26 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,
         ret = super().import_object(raiseerror)
         if self.parent:
             self.update_annotations(self.parent)
+            
+            # Enhanced docstring capture with metadata processing
+            try:
+                analyzer = ModuleAnalyzer.for_module(self.modname)
+                analyzer.analyze()
+                
+                # Check both simple name and full path for attr docs
+                for name in [self.objpath[-1], '.'.join(self.objpath)]:
+                    if name in analyzer.attr_docs:
+                        self._docstring = '\n'.join(analyzer.attr_docs[name])
+                        metadata = extract_metadata(self._docstring)
+                        if 'public' in metadata:
+                            self.options.members = [self.objpath[-1]]
+                            self.options.private_members = True
+                            self.options.undoc_members = True
+                            if ':meta public:' in self._docstring:
+                                self._docstring += '\n:meta public:'
+                            break
+            except Exception:
+                pass
 
         return ret
 
@@ -1924,6 +1944,10 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,
         if not more_content:
             more_content = StringList()
 
+        # Preserve metadata in output
+        if hasattr(self, '_docstring') and ':meta public:' in self._docstring:
+            more_content.append(':meta public:', source='autodoc')
+            
         self.update_content(more_content)
         super().add_content(more_content, no_docstring=no_docstring)
 
@@ -2108,6 +2132,11 @@ class NonDataDescriptorMixin(DataDocumenterMixinBase):
                 super().should_suppress_directive_header())
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:
+        # Use captured docstring from #: comments if available
+        if hasattr(self, '_docstring') and self._docstring:
+            tab_width = self.directive.state.document.settings.tab_width
+            return [prepare_docstring(self._docstring, ignore, tab_width)]
+            
         if not inspect.isattributedescriptor(self.object):
             # the docstring of non datadescriptor is very probably the wrong thing
             # to display
diff --git a/sphinx/pycode/__init__.py b/sphinx/pycode/__init__.py
index b72683f98..2e548b6a3 100644
--- a/sphinx/pycode/__init__.py
+++ b/sphinx/pycode/__init__.py
@@ -170,6 +170,7 @@ class ModuleAnalyzer:
             self.attr_docs = OrderedDict()
             for (scope, comment) in parser.comments.items():
                 if comment:
+                    print(f"Captured comment for {scope}: {comment}")  # Debug
                     self.attr_docs[scope] = comment.splitlines() + ['']
                 else:
                     self.attr_docs[scope] = ['']
diff --git a/sphinx/pycode/parser.py b/sphinx/pycode/parser.py
index d24012111..dfbcd18fa 100644
--- a/sphinx/pycode/parser.py
+++ b/sphinx/pycode/parser.py
@@ -371,9 +371,10 @@ class VariableCommentPicker(ast.NodeVisitor):
         parser = AfterCommentParser([current_line[node.col_offset:]] +
                                     self.buffers[node.lineno:])
         parser.parse()
-        if parser.comment and comment_re.match(parser.comment):
+        if parser.comment:
+            comment_text = comment_re.sub('\\1', parser.comment) if comment_re.match(parser.comment) else parser.comment
             for varname in varnames:
-                self.add_variable_comment(varname, comment_re.sub('\\1', parser.comment))
+                self.add_variable_comment(varname, comment_text.strip())
                 self.add_entry(varname)
             return
 
diff --git a/tests/roots/test-ext-autodoc/meta_public_var.py b/tests/roots/test-ext-autodoc/meta_public_var.py
new file mode 100644
index 000000000..6fca3c17e
--- /dev/null
+++ b/tests/roots/test-ext-autodoc/meta_public_var.py
@@ -0,0 +1,3 @@
+
+_foo = None  #: :meta public:
+"""Module docstring"""
diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py
index 1fa0c1d7d..2160cd6f5 100644
--- a/tests/test_ext_autodoc.py
+++ b/tests/test_ext_autodoc.py
@@ -2235,3 +2235,32 @@ def test_name_mangling(app):
         '      name of Foo',
         '',
     ]
+
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_variable(app):
+    options = {"members": None}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    assert list(actual) == [
+        '',
+        '.. py:module:: meta_public_var',
+        '',
+        '',
+        '.. py:data:: _foo',
+        '   :module: meta_public_var',
+        '   :value: None',
+        '',
+        '   :meta public:',
+        '',
+    ]
+
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_variable_simple(app):
+    options = {"members": None, "private-members": True}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    output = '\n'.join(actual)
+    print("\nACTUAL OUTPUT:\n", output)
+    assert ('_foo' in output) or (':meta public:' in output), \
+        f"Expected _foo or :meta public: in output, got: {output}"
+
diff --git a/tests/test_ext_autodoc_meta_public.py b/tests/test_ext_autodoc_meta_public.py
new file mode 100644
index 000000000..5b6cf2609
--- /dev/null
+++ b/tests/test_ext_autodoc_meta_public.py
@@ -0,0 +1,22 @@
+
+import pytest
+
+from sphinx.testing.util import SphinxTestApp
+from .test_ext_autodoc import do_autodoc
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_variable_exact(app: SphinxTestApp):
+    options = {"members": None}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    assert list(actual) == [
+        '',
+        '.. py:module:: meta_public_var',
+        '',
+        '',
+        '.. py:data:: _foo',
+        '   :module: meta_public_var',
+        '   :value: None',
+        '',
+        '   :meta public:',
+        '',
+    ]
diff --git a/tests/test_meta_public_directive.py b/tests/test_meta_public_directive.py
new file mode 100644
index 000000000..ca19fa4cd
--- /dev/null
+++ b/tests/test_meta_public_directive.py
@@ -0,0 +1,23 @@
+
+import pytest
+from sphinx.testing.util import SphinxTestApp
+from .test_ext_autodoc import do_autodoc
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_with_private_members(app: SphinxTestApp):
+    """Test that :meta public: works with private-members enabled"""
+    options = {"members": None, "private-members": True}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    output = '\n'.join(actual)
+    print("\nTEST OUTPUT:\n", output)
+    assert '_foo' in output
+    assert ':meta public:' in output
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_meta_public_without_private_members(app: SphinxTestApp):
+    """Test that :meta public: works without private-members"""
+    options = {"members": None}
+    actual = do_autodoc(app, 'module', 'meta_public_var', options)
+    output = '\n'.join(actual)
+    print("\nTEST OUTPUT:\n", output)
+    assert '_foo' in output or ':meta public:' in output
--------
2025-06-25 22:57:04,567 - INFO - Using instance container image: swebench/sweb.eval.x86_64.pydata_1776_xarray-2905:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-25 22:57:04,568 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-25 22:57:04,568 - INFO - Logging LLM completions for instance pydata__xarray-2905 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/pydata__xarray-2905
