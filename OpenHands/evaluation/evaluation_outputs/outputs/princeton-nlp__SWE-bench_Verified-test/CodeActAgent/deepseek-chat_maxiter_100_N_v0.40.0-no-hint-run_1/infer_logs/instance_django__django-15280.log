2025-06-26 09:50:49,633 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_p24ywcjc4j67phxu_634egmkijx387tjz
2025-06-26 09:53:45,103 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_p24ywcjc4j67phxu_634egmkijx387tjz] build finished.
2025-06-26 09:53:45,113 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_p24ywcjc4j67phxu_634egmkijx387tjz] with more generic tag [oh_v0.40.0_p24ywcjc4j67phxu]
2025-06-26 09:53:45,117 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_p24ywcjc4j67phxu_634egmkijx387tjz, oh_v0.40.0_p24ywcjc4j67phxu] built successfully
2025-06-26 09:53:45,140 - INFO - [runtime 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_p24ywcjc4j67phxu_634egmkijx387tjz
2025-06-26 09:53:45,633 - INFO - [runtime 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Container started: openhands-runtime-88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8. VSCode URL: None
2025-06-26 09:53:45,633 - INFO - [runtime 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Waiting for client to become ready at http://localhost:35122...
2025-06-26 09:54:15,751 - INFO - [runtime 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Runtime is ready.
2025-06-26 09:54:18,337 - INFO - ------------------------------
2025-06-26 09:54:18,337 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 09:54:18,337 - INFO - ------------------------------
2025-06-26 09:54:18,338 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-15280' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 09:54:18,975 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:18,975 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 09:54:19,615 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:19,616 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 09:54:20,254 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:20,267 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 09:54:20,903 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-15280
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:20,904 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 09:54:21,538 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:21,539 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 09:54:22,678 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__4.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:22,678 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.1
2025-06-26 09:54:23,310 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:23,311 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 09:54:24,447 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 973fa56652 Removed unused comment directive in CBV topic docs.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:24,448 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 09:54:25,080 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:25,081 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 09:54:25,717 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:54:25,718 - INFO - ------------------------------
2025-06-26 09:54:25,718 - INFO - END Runtime Initialization Fn
2025-06-26 09:54:25,719 - INFO - ------------------------------
2025-06-26 09:54:25,739 - INFO - [runtime 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 09:54:25,746 - INFO - Loading user workspace microagents: []
2025-06-26 09:54:25,746 - INFO - [Agent Controller 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] AgentController 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8 - created new state. start_id: 0
2025-06-26 09:54:25,754 - INFO - [Agent Controller 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 10:12:48,735 - INFO - [Agent Controller 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-26 10:12:48,738 - INFO - [Agent Controller 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-26 10:12:49,417 - INFO - [Agent Controller 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Context window exceeded. Keeping events with IDs: {0, 1, 2, 128, 4, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127}
2025-06-26 10:15:25,067 - INFO - [Agent Controller 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-26 10:15:25,071 - INFO - [Agent Controller 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-26 10:15:58,492 - INFO - [Agent Controller 88a24783-2a3c-4af7-ab7a-7ba6d0b2faff-3ba83c9dc6f7c6f8] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-26 10:15:59,580 - INFO - ------------------------------
2025-06-26 10:15:59,580 - INFO - BEGIN Runtime Completion Fn
2025-06-26 10:15:59,580 - INFO - ------------------------------
2025-06-26 10:15:59,580 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.1
2025-06-26 10:16:00,219 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:16:00,220 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 10:16:00,859 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:16:00,860 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 10:16:01,500 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:16:01,501 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 10:16:02,140 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:16:02,141 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 10:16:02,793 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:16:02,794 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 973fa566521037ac140dcece73fceae50ee522f1 > patch.diff
2025-06-26 10:16:03,435 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "aaf82ee66fb8",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 10:16:03,436 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 10:16:03,441 - INFO - [Read from /workspace/django__django__4.1/patch.diff is successful.]
diff --git a/django/db/models/query.py b/django/db/models/query.py
index fb6639793a..cf9c32ddbf 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1889,14 +1889,25 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
     # The 'values to be matched' must be hashable as they will be used
     # in a dictionary.
 
+    current_qs = lookup.get_current_queryset(level)
+    if current_qs is not None:
+        # Preserve original defer/only states and don't inherit parent's deferred fields
+        current_qs = current_qs._chain()
+        if hasattr(current_qs, '_deferred_filter'):
+            current_qs._deferred_filter = None
+        if hasattr(current_qs, '_fields'):
+            current_qs._fields = None
+        if level > 0 and hasattr(current_qs, '_original_only_fields'):
+            current_qs._original_only_fields = None
     rel_qs, rel_obj_attr, instance_attr, single, cache_name, is_descriptor = (
-        prefetcher.get_prefetch_queryset(instances, lookup.get_current_queryset(level)))
+        prefetcher.get_prefetch_queryset(instances, current_qs))
+    # Ensure prefetched queryset maintains its own deferred states
+    if hasattr(rel_qs, '_fields') and rel_qs._fields is not None:
+        rel_qs._fields = rel_qs._fields.copy()
     # We have to handle the possibility that the QuerySet we just got back
     # contains some prefetch_related lookups. We don't want to trigger the
     # prefetch_related functionality by evaluating the query. Rather, we need
-    # to merge in the prefetch_related lookups.
-    # Copy the lookups in case it is a Prefetch object which could be reused
-    # later (happens in nested prefetch_related).
+    # to merge in the prefetch_related lookups while preserving defer/only states
     additional_lookups = [
         copy.copy(additional_lookup) for additional_lookup
         in getattr(rel_qs, '_prefetch_related_lookups', ())
diff --git a/tests/prefetch_related/test_deferred.py b/tests/prefetch_related/test_deferred.py
new file mode 100644
index 0000000000..bf76827a1a
--- /dev/null
+++ b/tests/prefetch_related/test_deferred.py
@@ -0,0 +1,58 @@
+
+from django.db import models
+from django.test import TestCase
+from django.db.models import Prefetch
+
+class User(models.Model):
+    email = models.EmailField()
+    kind = models.CharField(
+        max_length=10, 
+        choices=[("ADMIN", "Admin"), ("REGULAR", "Regular")]
+    )
+
+class Profile(models.Model):
+    full_name = models.CharField(max_length=255)
+    user = models.OneToOneField(User, on_delete=models.CASCADE)
+
+class DeferredPrefetchTests(TestCase):
+    def test_only_related_queryset(self):
+        user = User.objects.create(
+            email="test@example.com",
+            kind="ADMIN",
+        )
+        Profile.objects.create(user=user, full_name="Test Tester")
+        
+        # Debugging setup
+        from django.db import connection
+        connection.queries_log.clear()
+        
+        queryset = User.objects.only("email").prefetch_related(
+            Prefetch(
+                "profile",
+                queryset=Profile.objects.prefetch_related(
+                    Prefetch("user", queryset=User.objects.only("kind"))
+                ),
+            )
+        )
+        
+        # First fetch - should make 3 queries
+        with self.assertNumQueries(3):
+            user = queryset.first()
+            print("Initial queries:")
+            for q in connection.queries[-3:]:
+                print(q['sql'])
+        
+        # Debug deferred fields
+        print(f"Deferred fields on user: {user.get_deferred_fields()}")
+        print(f"Deferred fields on profile.user: {user.profile.user.get_deferred_fields()}")
+        
+        # Access check - should make 0 queries
+        with self.assertNumQueries(0):
+            kind = user.profile.user.kind
+            self.assertEqual(kind, "ADMIN")
+        
+        # Print any additional queries
+        if len(connection.queries) > 3:
+            print("Unexpected queries:")
+            for q in connection.queries[3:]:
+                print(q['sql'])
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..2434f6a39b
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+SECRET_KEY = 'test'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.prefetch_related',
+]

2025-06-26 10:16:03,442 - INFO - ------------------------------
2025-06-26 10:16:03,442 - INFO - END Runtime Completion Fn
2025-06-26 10:16:03,443 - INFO - ------------------------------
2025-06-26 10:16:03,443 - INFO - Got git diff for instance django__django-15280:
--------
diff --git a/django/db/models/query.py b/django/db/models/query.py
index fb6639793a..cf9c32ddbf 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1889,14 +1889,25 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
     # The 'values to be matched' must be hashable as they will be used
     # in a dictionary.
 
+    current_qs = lookup.get_current_queryset(level)
+    if current_qs is not None:
+        # Preserve original defer/only states and don't inherit parent's deferred fields
+        current_qs = current_qs._chain()
+        if hasattr(current_qs, '_deferred_filter'):
+            current_qs._deferred_filter = None
+        if hasattr(current_qs, '_fields'):
+            current_qs._fields = None
+        if level > 0 and hasattr(current_qs, '_original_only_fields'):
+            current_qs._original_only_fields = None
     rel_qs, rel_obj_attr, instance_attr, single, cache_name, is_descriptor = (
-        prefetcher.get_prefetch_queryset(instances, lookup.get_current_queryset(level)))
+        prefetcher.get_prefetch_queryset(instances, current_qs))
+    # Ensure prefetched queryset maintains its own deferred states
+    if hasattr(rel_qs, '_fields') and rel_qs._fields is not None:
+        rel_qs._fields = rel_qs._fields.copy()
     # We have to handle the possibility that the QuerySet we just got back
     # contains some prefetch_related lookups. We don't want to trigger the
     # prefetch_related functionality by evaluating the query. Rather, we need
-    # to merge in the prefetch_related lookups.
-    # Copy the lookups in case it is a Prefetch object which could be reused
-    # later (happens in nested prefetch_related).
+    # to merge in the prefetch_related lookups while preserving defer/only states
     additional_lookups = [
         copy.copy(additional_lookup) for additional_lookup
         in getattr(rel_qs, '_prefetch_related_lookups', ())
diff --git a/tests/prefetch_related/test_deferred.py b/tests/prefetch_related/test_deferred.py
new file mode 100644
index 0000000000..bf76827a1a
--- /dev/null
+++ b/tests/prefetch_related/test_deferred.py
@@ -0,0 +1,58 @@
+
+from django.db import models
+from django.test import TestCase
+from django.db.models import Prefetch
+
+class User(models.Model):
+    email = models.EmailField()
+    kind = models.CharField(
+        max_length=10, 
+        choices=[("ADMIN", "Admin"), ("REGULAR", "Regular")]
+    )
+
+class Profile(models.Model):
+    full_name = models.CharField(max_length=255)
+    user = models.OneToOneField(User, on_delete=models.CASCADE)
+
+class DeferredPrefetchTests(TestCase):
+    def test_only_related_queryset(self):
+        user = User.objects.create(
+            email="test@example.com",
+            kind="ADMIN",
+        )
+        Profile.objects.create(user=user, full_name="Test Tester")
+        
+        # Debugging setup
+        from django.db import connection
+        connection.queries_log.clear()
+        
+        queryset = User.objects.only("email").prefetch_related(
+            Prefetch(
+                "profile",
+                queryset=Profile.objects.prefetch_related(
+                    Prefetch("user", queryset=User.objects.only("kind"))
+                ),
+            )
+        )
+        
+        # First fetch - should make 3 queries
+        with self.assertNumQueries(3):
+            user = queryset.first()
+            print("Initial queries:")
+            for q in connection.queries[-3:]:
+                print(q['sql'])
+        
+        # Debug deferred fields
+        print(f"Deferred fields on user: {user.get_deferred_fields()}")
+        print(f"Deferred fields on profile.user: {user.profile.user.get_deferred_fields()}")
+        
+        # Access check - should make 0 queries
+        with self.assertNumQueries(0):
+            kind = user.profile.user.kind
+            self.assertEqual(kind, "ADMIN")
+        
+        # Print any additional queries
+        if len(connection.queries) > 3:
+            print("Unexpected queries:")
+            for q in connection.queries[3:]:
+                print(q['sql'])
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..2434f6a39b
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+SECRET_KEY = 'test'
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.prefetch_related',
+]
--------
2025-06-26 10:16:05,320 - INFO - Using instance container image: swebench/sweb.eval.x86_64.astropy_1776_astropy-14508:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 10:16:05,320 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 10:16:05,321 - INFO - Logging LLM completions for instance astropy__astropy-14508 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/astropy__astropy-14508
