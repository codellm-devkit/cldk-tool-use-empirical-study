2025-06-26 17:32:14,846 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_2w80tsponzmp0dew_634egmkijx387tjz
2025-06-26 17:35:06,829 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_2w80tsponzmp0dew_634egmkijx387tjz] build finished.
2025-06-26 17:35:06,840 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_2w80tsponzmp0dew_634egmkijx387tjz] with more generic tag [oh_v0.40.0_2w80tsponzmp0dew]
2025-06-26 17:35:06,844 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_2w80tsponzmp0dew_634egmkijx387tjz, oh_v0.40.0_2w80tsponzmp0dew] built successfully
2025-06-26 17:35:06,866 - INFO - [runtime 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_2w80tsponzmp0dew_634egmkijx387tjz
2025-06-26 17:35:07,368 - INFO - [runtime 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496] Container started: openhands-runtime-866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496. VSCode URL: None
2025-06-26 17:35:07,368 - INFO - [runtime 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496] Waiting for client to become ready at http://localhost:33917...
2025-06-26 17:35:37,482 - INFO - [runtime 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496] Runtime is ready.
2025-06-26 17:35:40,066 - INFO - ------------------------------
2025-06-26 17:35:40,067 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 17:35:40,067 - INFO - ------------------------------
2025-06-26 17:35:40,068 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-7521' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 17:35:40,712 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:40,713 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 17:35:41,353 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:41,354 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 17:35:41,993 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:42,007 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 17:35:42,645 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=pytest-dev__pytest-7521
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:42,646 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 17:35:43,287 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:43,287 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 17:35:43,927 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__6.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:43,927 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pytest-dev__pytest__6.0
2025-06-26 17:35:44,567 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:44,567 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 17:35:45,206 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 41d211c24 testing: use a tighter check if `bash` is available (#7520)
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:45,207 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 17:35:45,849 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:45,849 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 17:35:46,489 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:46,489 - INFO - ------------------------------
2025-06-26 17:35:46,490 - INFO - END Runtime Initialization Fn
2025-06-26 17:35:46,490 - INFO - ------------------------------
2025-06-26 17:35:46,512 - INFO - [runtime 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 17:35:46,519 - INFO - Loading user workspace microagents: []
2025-06-26 17:35:46,519 - INFO - [Agent Controller 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496] AgentController 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496 - created new state. start_id: 0
2025-06-26 17:35:46,526 - INFO - [Agent Controller 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 17:44:25,847 - INFO - [Agent Controller 866aa847-722a-4389-9c8c-00cfc5be01aa-488f39c76d3d4496] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-26 17:44:26,118 - INFO - ------------------------------
2025-06-26 17:44:26,118 - INFO - BEGIN Runtime Completion Fn
2025-06-26 17:44:26,119 - INFO - ------------------------------
2025-06-26 17:44:26,119 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pytest-dev__pytest__6.0
2025-06-26 17:44:26,758 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:44:26,759 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 17:44:27,400 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:44:27,401 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 17:44:28,041 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:44:28,042 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 17:44:28,677 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:44:28,677 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 17:44:29,327 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:44:29,327 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 41d211c24a6781843b174379d6d6538f5c17adb9 > patch.diff
2025-06-26 17:44:29,966 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "80ed3ba63670",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:44:29,966 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 17:44:29,972 - INFO - [Read from /workspace/pytest-dev__pytest__6.0/patch.diff is successful.]
diff --git a/doc/en/capture.rst b/doc/en/capture.rst
index caaebdf81..7f7c583af 100644
--- a/doc/en/capture.rst
+++ b/doc/en/capture.rst
@@ -7,6 +7,12 @@ Capturing of the stdout/stderr output
 Default stdout/stderr/stdin capturing behaviour
 ---------------------------------------------------------
 
+.. note::
+   Python's print function and sys.stdout handling may convert line endings
+   (such as converting ``\r`` to ``\n``) before pytest captures the output.
+   To capture raw output including original line endings, consider writing
+   directly to the underlying file descriptor or using binary mode.
+
 During test execution any output sent to ``stdout`` and ``stderr`` is
 captured.  If a test or a setup method fails its according captured
 output will usually be shown along with the failure traceback. (this
diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py
index 3f9c60fb9..a7d6c2867 100644
--- a/src/_pytest/capture.py
+++ b/src/_pytest/capture.py
@@ -190,13 +190,26 @@ class EncodedFile(io.TextIOWrapper):
         return self.buffer.mode.replace("b", "")
 
 
-class CaptureIO(io.TextIOWrapper):
+class CaptureIO:
     def __init__(self) -> None:
-        super().__init__(io.BytesIO(), encoding="UTF-8", newline="", write_through=True)
-
+        self.buffer = io.BytesIO()
+        
+    def write(self, data):
+        if isinstance(data, str):
+            data = data.encode('utf-8', errors='replace')
+        self.buffer.write(data)
+        return len(data)
+        
     def getvalue(self) -> str:
-        assert isinstance(self.buffer, io.BytesIO)
-        return self.buffer.getvalue().decode("UTF-8")
+        return self.buffer.getvalue().decode('utf-8', errors='replace')
+
+    # Required file-like methods
+    def flush(self): pass
+    def close(self): pass
+    @property
+    def encoding(self): return 'utf-8'
+    @property
+    def errors(self): return 'replace'
 
 
 class TeeCaptureIO(CaptureIO):
@@ -335,15 +348,18 @@ class SysCapture(SysCaptureBinary):
     EMPTY_BUFFER = ""  # type: ignore[assignment]
 
     def snap(self):
-        res = self.tmpfile.getvalue()
+        self.tmpfile.seek(0)
+        res_bytes = self.tmpfile.buffer.getvalue()
         self.tmpfile.seek(0)
         self.tmpfile.truncate()
-        return res
+        return res_bytes.decode('utf-8', errors='replace')
 
     def writeorg(self, data):
         self._assert_state("writeorg", ("started", "suspended"))
-        self._old.write(data)
-        self._old.flush()
+        if isinstance(data, str):
+            data = data.encode('utf-8', errors='replace')
+        # Write raw bytes directly to avoid any text processing
+        os.write(self._old.fileno(), data)
 
 
 class FDCaptureBinary:
@@ -360,17 +376,6 @@ class FDCaptureBinary:
         try:
             os.fstat(targetfd)
         except OSError:
-            # FD capturing is conceptually simple -- create a temporary file,
-            # redirect the FD to it, redirect back when done. But when the
-            # target FD is invalid it throws a wrench into this loveley scheme.
-            #
-            # Tests themselves shouldn't care if the FD is valid, FD capturing
-            # should work regardless of external circumstances. So falling back
-            # to just sys capturing is not a good option.
-            #
-            # Further complications are the need to support suspend() and the
-            # possibility of FD reuse (e.g. the tmpfile getting the very same
-            # target FD). The following approach is robust, I believe.
             self.targetfd_invalid = os.open(
                 os.devnull, os.O_RDWR
             )  # type: Optional[int]
@@ -383,15 +388,10 @@ class FDCaptureBinary:
             self.tmpfile = open(os.devnull)
             self.syscapture = SysCapture(targetfd)
         else:
-            self.tmpfile = EncodedFile(
-                # TODO: Remove type ignore, fixed in next mypy release.
-                TemporaryFile(buffering=0),  # type: ignore[arg-type]
-                encoding="utf-8",
-                errors="replace",
-                write_through=True,
-            )
+            # Use binary mode temporary file to preserve line endings
+            self.tmpfile = TemporaryFile(buffering=0)  # type: ignore[arg-type]
             if targetfd in patchsysdict:
-                self.syscapture = SysCapture(targetfd, self.tmpfile)
+                self.syscapture = SysCapture(targetfd)
             else:
                 self.syscapture = NoCapture()
 
@@ -478,7 +478,10 @@ class FDCapture(FDCaptureBinary):
     def snap(self):
         self._assert_state("snap", ("started", "suspended"))
         self.tmpfile.seek(0)
-        res = self.tmpfile.read()
+        # Read raw bytes directly from binary file
+        res_bytes = self.tmpfile.read()
+        # Decode while preserving all control characters
+        res = res_bytes.decode('utf-8', errors='replace')
         self.tmpfile.seek(0)
         self.tmpfile.truncate()
         return res
diff --git a/testing/test_capfd_carriage_return.py b/testing/test_capfd_carriage_return.py
new file mode 100644
index 000000000..87481270b
--- /dev/null
+++ b/testing/test_capfd_carriage_return.py
@@ -0,0 +1,14 @@
+
+import pytest
+
+def test_capfd_preserves_carriage_return(capfd):
+    """Test that capfd preserves carriage returns in output."""
+    print('Test\r', end='')
+    out, err = capfd.readouterr()
+    assert out.endswith('\r'), f"Expected carriage return, got: {out!r}"
+
+def test_capfd_preserves_dos_line_endings(capfd):
+    """Test that DOS-style line endings are preserved."""
+    print('Line1\r\nLine2', end='')
+    out, err = capfd.readouterr()
+    assert '\r\n' in out, f"Expected CRLF, got: {out!r}"

2025-06-26 17:44:29,973 - INFO - ------------------------------
2025-06-26 17:44:29,973 - INFO - END Runtime Completion Fn
2025-06-26 17:44:29,973 - INFO - ------------------------------
2025-06-26 17:44:29,974 - INFO - Got git diff for instance pytest-dev__pytest-7521:
--------
diff --git a/doc/en/capture.rst b/doc/en/capture.rst
index caaebdf81..7f7c583af 100644
--- a/doc/en/capture.rst
+++ b/doc/en/capture.rst
@@ -7,6 +7,12 @@ Capturing of the stdout/stderr output
 Default stdout/stderr/stdin capturing behaviour
 ---------------------------------------------------------
 
+.. note::
+   Python's print function and sys.stdout handling may convert line endings
+   (such as converting ``\r`` to ``\n``) before pytest captures the output.
+   To capture raw output including original line endings, consider writing
+   directly to the underlying file descriptor or using binary mode.
+
 During test execution any output sent to ``stdout`` and ``stderr`` is
 captured.  If a test or a setup method fails its according captured
 output will usually be shown along with the failure traceback. (this
diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py
index 3f9c60fb9..a7d6c2867 100644
--- a/src/_pytest/capture.py
+++ b/src/_pytest/capture.py
@@ -190,13 +190,26 @@ class EncodedFile(io.TextIOWrapper):
         return self.buffer.mode.replace("b", "")
 
 
-class CaptureIO(io.TextIOWrapper):
+class CaptureIO:
     def __init__(self) -> None:
-        super().__init__(io.BytesIO(), encoding="UTF-8", newline="", write_through=True)
-
+        self.buffer = io.BytesIO()
+        
+    def write(self, data):
+        if isinstance(data, str):
+            data = data.encode('utf-8', errors='replace')
+        self.buffer.write(data)
+        return len(data)
+        
     def getvalue(self) -> str:
-        assert isinstance(self.buffer, io.BytesIO)
-        return self.buffer.getvalue().decode("UTF-8")
+        return self.buffer.getvalue().decode('utf-8', errors='replace')
+
+    # Required file-like methods
+    def flush(self): pass
+    def close(self): pass
+    @property
+    def encoding(self): return 'utf-8'
+    @property
+    def errors(self): return 'replace'
 
 
 class TeeCaptureIO(CaptureIO):
@@ -335,15 +348,18 @@ class SysCapture(SysCaptureBinary):
     EMPTY_BUFFER = ""  # type: ignore[assignment]
 
     def snap(self):
-        res = self.tmpfile.getvalue()
+        self.tmpfile.seek(0)
+        res_bytes = self.tmpfile.buffer.getvalue()
         self.tmpfile.seek(0)
         self.tmpfile.truncate()
-        return res
+        return res_bytes.decode('utf-8', errors='replace')
 
     def writeorg(self, data):
         self._assert_state("writeorg", ("started", "suspended"))
-        self._old.write(data)
-        self._old.flush()
+        if isinstance(data, str):
+            data = data.encode('utf-8', errors='replace')
+        # Write raw bytes directly to avoid any text processing
+        os.write(self._old.fileno(), data)
 
 
 class FDCaptureBinary:
@@ -360,17 +376,6 @@ class FDCaptureBinary:
         try:
             os.fstat(targetfd)
         except OSError:
-            # FD capturing is conceptually simple -- create a temporary file,
-            # redirect the FD to it, redirect back when done. But when the
-            # target FD is invalid it throws a wrench into this loveley scheme.
-            #
-            # Tests themselves shouldn't care if the FD is valid, FD capturing
-            # should work regardless of external circumstances. So falling back
-            # to just sys capturing is not a good option.
-            #
-            # Further complications are the need to support suspend() and the
-            # possibility of FD reuse (e.g. the tmpfile getting the very same
-            # target FD). The following approach is robust, I believe.
             self.targetfd_invalid = os.open(
                 os.devnull, os.O_RDWR
             )  # type: Optional[int]
@@ -383,15 +388,10 @@ class FDCaptureBinary:
             self.tmpfile = open(os.devnull)
             self.syscapture = SysCapture(targetfd)
         else:
-            self.tmpfile = EncodedFile(
-                # TODO: Remove type ignore, fixed in next mypy release.
-                TemporaryFile(buffering=0),  # type: ignore[arg-type]
-                encoding="utf-8",
-                errors="replace",
-                write_through=True,
-            )
+            # Use binary mode temporary file to preserve line endings
+            self.tmpfile = TemporaryFile(buffering=0)  # type: ignore[arg-type]
             if targetfd in patchsysdict:
-                self.syscapture = SysCapture(targetfd, self.tmpfile)
+                self.syscapture = SysCapture(targetfd)
             else:
                 self.syscapture = NoCapture()
 
@@ -478,7 +478,10 @@ class FDCapture(FDCaptureBinary):
     def snap(self):
         self._assert_state("snap", ("started", "suspended"))
         self.tmpfile.seek(0)
-        res = self.tmpfile.read()
+        # Read raw bytes directly from binary file
+        res_bytes = self.tmpfile.read()
+        # Decode while preserving all control characters
+        res = res_bytes.decode('utf-8', errors='replace')
         self.tmpfile.seek(0)
         self.tmpfile.truncate()
         return res
diff --git a/testing/test_capfd_carriage_return.py b/testing/test_capfd_carriage_return.py
new file mode 100644
index 000000000..87481270b
--- /dev/null
+++ b/testing/test_capfd_carriage_return.py
@@ -0,0 +1,14 @@
+
+import pytest
+
+def test_capfd_preserves_carriage_return(capfd):
+    """Test that capfd preserves carriage returns in output."""
+    print('Test\r', end='')
+    out, err = capfd.readouterr()
+    assert out.endswith('\r'), f"Expected carriage return, got: {out!r}"
+
+def test_capfd_preserves_dos_line_endings(capfd):
+    """Test that DOS-style line endings are preserved."""
+    print('Line1\r\nLine2', end='')
+    out, err = capfd.readouterr()
+    assert '\r\n' in out, f"Expected CRLF, got: {out!r}"
--------
2025-06-26 17:44:34,072 - INFO - Using instance container image: swebench/sweb.eval.x86_64.astropy_1776_astropy-14539:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 17:44:34,073 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 17:44:34,073 - INFO - Logging LLM completions for instance astropy__astropy-14539 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/astropy__astropy-14539
