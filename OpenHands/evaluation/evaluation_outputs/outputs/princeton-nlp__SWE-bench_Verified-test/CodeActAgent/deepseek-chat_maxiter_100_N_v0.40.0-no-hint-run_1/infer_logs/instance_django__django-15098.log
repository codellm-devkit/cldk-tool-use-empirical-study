2025-06-23 20:05:17,128 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_m5iafyzfubplmyar_634egmkijx387tjz
2025-06-23 20:08:22,502 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_m5iafyzfubplmyar_634egmkijx387tjz] build finished.
2025-06-23 20:08:22,512 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_m5iafyzfubplmyar_634egmkijx387tjz] with more generic tag [oh_v0.40.0_m5iafyzfubplmyar]
2025-06-23 20:08:22,516 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_m5iafyzfubplmyar_634egmkijx387tjz, oh_v0.40.0_m5iafyzfubplmyar] built successfully
2025-06-23 20:08:22,540 - INFO - [runtime c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_m5iafyzfubplmyar_634egmkijx387tjz
2025-06-23 20:08:22,993 - INFO - [runtime c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae] Container started: openhands-runtime-c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae. VSCode URL: None
2025-06-23 20:08:22,994 - INFO - [runtime c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae] Waiting for client to become ready at http://localhost:39017...
2025-06-23 20:08:55,138 - INFO - [runtime c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae] Runtime is ready.
2025-06-23 20:08:57,733 - INFO - ------------------------------
2025-06-23 20:08:57,734 - INFO - BEGIN Runtime Initialization Fn
2025-06-23 20:08:57,734 - INFO - ------------------------------
2025-06-23 20:08:57,734 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-15098' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-23 20:08:58,379 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:08:58,380 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-23 20:08:59,023 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:08:59,024 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-23 20:08:59,665 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:08:59,680 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-23 20:09:00,320 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-15098
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:09:00,321 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-23 20:09:00,961 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:09:00,962 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-23 20:09:02,105 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__4.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:09:02,106 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.1
2025-06-23 20:09:02,741 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:09:02,742 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-23 20:09:03,887 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 2c7846d992 Fixed #33333 -- Fixed setUpTestData() crash with models.BinaryField on PostgreSQL.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:09:03,888 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-23 20:09:04,529 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:09:04,529 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-23 20:09:05,169 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:09:05,169 - INFO - ------------------------------
2025-06-23 20:09:05,170 - INFO - END Runtime Initialization Fn
2025-06-23 20:09:05,170 - INFO - ------------------------------
2025-06-23 20:09:05,192 - INFO - [runtime c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-23 20:09:05,201 - INFO - Loading user workspace microagents: []
2025-06-23 20:09:05,202 - INFO - [Agent Controller c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae] AgentController c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae - created new state. start_id: 0
2025-06-23 20:09:05,210 - INFO - [Agent Controller c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-23 20:09:05,211 - INFO - Microagent 'gitlab' triggered by keyword 'git'
2025-06-23 20:09:05,213 - INFO - Microagent 'github' triggered by keyword 'git'
2025-06-23 20:21:18,564 - INFO - [Agent Controller c7baf770-fcbd-420b-bb31-53285b8b1c01-e6750dbcffe027ae] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-23 20:21:19,054 - INFO - ------------------------------
2025-06-23 20:21:19,054 - INFO - BEGIN Runtime Completion Fn
2025-06-23 20:21:19,055 - INFO - ------------------------------
2025-06-23 20:21:19,055 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.1
2025-06-23 20:21:19,695 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:21:19,696 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-23 20:21:20,335 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:21:20,336 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-23 20:21:20,975 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:21:20,976 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-23 20:21:21,613 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:21:21,613 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-23 20:21:22,263 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:21:22,264 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 2c7846d992ca512d36a73f518205015c88ed088c > patch.diff
2025-06-23 20:21:22,903 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "6dada9fd3920",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-23 20:21:22,904 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-23 20:21:22,909 - INFO - [Read from /workspace/django__django__4.1/patch.diff is successful.]
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 6ea18dd22f..a961782208 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -302,6 +302,9 @@ class RoutePattern(CheckURLMixin):
         return str(self._route)
 
 
+from django.utils.translation import to_language
+from django.utils.translation.trans_real import language_code_re
+
 class LocalePrefixPattern:
     def __init__(self, prefix_default_language=True):
         self.prefix_default_language = prefix_default_language
@@ -317,8 +320,29 @@ class LocalePrefixPattern:
         language_code = get_language() or settings.LANGUAGE_CODE
         if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:
             return ''
-        else:
+        
+        # Validate and normalize BCP 47 language code
+        if not language_code_re.match(language_code):
+            return '%s/' % language_code
+
+        # Check if code is already normalized (contains uppercase letters)
+        if any(c.isupper() for c in language_code):
             return '%s/' % language_code
+            
+        # Only normalize if code is all lowercase
+        parts = language_code.split('-')
+        parts[0] = parts[0].lower()  # Language code always lowercase
+        
+        for i in range(1, len(parts)):
+            part = parts[i]
+            if len(part) == 4 and part.isalpha():  # Script code
+                parts[i] = part.capitalize()
+            elif len(part) == 2 and (part.isalpha() or part.isdigit()):  # Region code
+                parts[i] = part.upper()
+            else:  # Variants/extensions
+                parts[i] = part.lower()
+                
+        return '%s/' % '-'.join(parts)
 
     def match(self, path):
         language_prefix = self.language_prefix
diff --git a/docs/topics/i18n/translation.txt b/docs/topics/i18n/translation.txt
index 99fc41ebb6..dc90c11585 100644
--- a/docs/topics/i18n/translation.txt
+++ b/docs/topics/i18n/translation.txt
@@ -36,6 +36,22 @@ make some optimizations so as not to load the internationalization machinery.
     :mod:`django.middleware.locale.LocaleMiddleware`). If you haven't yet,
     see :ref:`how-django-discovers-language-preference`.
 
+Language Code Format
+-------------------
+
+Django supports both simple language codes (e.g. ``de``, ``pt-br``) and BCP 47/RFC 5646
+format codes with script/region components (e.g. ``en-Latn-US``, ``zh-Hans-CN``).
+
+For BCP 47 format codes, Django preserves the exact case provided in settings.
+Follow these conventions for proper case handling:
+
+* Language codes: lowercase (``en``)
+* Script codes: Titlecase (``Latn``)
+* Country codes: UPPERCASE (``US``)
+* Variants: lowercase
+
+Example: ``zh-Hans-CN`` for Chinese in Simplified script as used in China.
+
 Internationalization: in Python code
 ====================================
 
diff --git a/tests/i18n/test_locale_prefix.py b/tests/i18n/test_locale_prefix.py
new file mode 100644
index 0000000000..c88b86c084
--- /dev/null
+++ b/tests/i18n/test_locale_prefix.py
@@ -0,0 +1,31 @@
+
+
+from django.test import SimpleTestCase
+from django.urls.resolvers import LocalePrefixPattern
+from django.conf import settings
+
+class LocalePrefixPatternTests(SimpleTestCase):
+    def test_language_prefix_normalization(self):
+        test_cases = [
+            ('en-us', 'en-us/'),  # Basic case
+            ('en-latn-us', 'en-latn-us/'),  # Script+region (preserve input case)
+            ('en-Latn-US', 'en-Latn-US/'),  # BCP 47 format (preserve input case)
+            ('sr-latn', 'sr-latn/'),  # Script only (preserve input case)
+            ('zh-hans-cn', 'zh-hans-cn/'),  # 3-part code (preserve input case)
+        ]
+        
+        pattern = LocalePrefixPattern(prefix_default_language=True)
+        
+        for input_code, expected_prefix in test_cases:
+            with self.settings(LANGUAGE_CODE=input_code):
+                print(f"\nTesting input: {input_code}")
+                print(f"Expected output: {expected_prefix}")
+                result = pattern.language_prefix
+                print(f"Actual output: {result}")
+                print(f"Parts: {input_code.split('-')}")
+                self.assertEqual(
+                    result,
+                    expected_prefix,
+                    f"Failed for {input_code}: expected {expected_prefix}, got {result}"
+                )
+

2025-06-23 20:21:22,910 - INFO - ------------------------------
2025-06-23 20:21:22,910 - INFO - END Runtime Completion Fn
2025-06-23 20:21:22,911 - INFO - ------------------------------
2025-06-23 20:21:22,911 - INFO - Got git diff for instance django__django-15098:
--------
diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 6ea18dd22f..a961782208 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -302,6 +302,9 @@ class RoutePattern(CheckURLMixin):
         return str(self._route)
 
 
+from django.utils.translation import to_language
+from django.utils.translation.trans_real import language_code_re
+
 class LocalePrefixPattern:
     def __init__(self, prefix_default_language=True):
         self.prefix_default_language = prefix_default_language
@@ -317,8 +320,29 @@ class LocalePrefixPattern:
         language_code = get_language() or settings.LANGUAGE_CODE
         if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:
             return ''
-        else:
+        
+        # Validate and normalize BCP 47 language code
+        if not language_code_re.match(language_code):
+            return '%s/' % language_code
+
+        # Check if code is already normalized (contains uppercase letters)
+        if any(c.isupper() for c in language_code):
             return '%s/' % language_code
+            
+        # Only normalize if code is all lowercase
+        parts = language_code.split('-')
+        parts[0] = parts[0].lower()  # Language code always lowercase
+        
+        for i in range(1, len(parts)):
+            part = parts[i]
+            if len(part) == 4 and part.isalpha():  # Script code
+                parts[i] = part.capitalize()
+            elif len(part) == 2 and (part.isalpha() or part.isdigit()):  # Region code
+                parts[i] = part.upper()
+            else:  # Variants/extensions
+                parts[i] = part.lower()
+                
+        return '%s/' % '-'.join(parts)
 
     def match(self, path):
         language_prefix = self.language_prefix
diff --git a/docs/topics/i18n/translation.txt b/docs/topics/i18n/translation.txt
index 99fc41ebb6..dc90c11585 100644
--- a/docs/topics/i18n/translation.txt
+++ b/docs/topics/i18n/translation.txt
@@ -36,6 +36,22 @@ make some optimizations so as not to load the internationalization machinery.
     :mod:`django.middleware.locale.LocaleMiddleware`). If you haven't yet,
     see :ref:`how-django-discovers-language-preference`.
 
+Language Code Format
+-------------------
+
+Django supports both simple language codes (e.g. ``de``, ``pt-br``) and BCP 47/RFC 5646
+format codes with script/region components (e.g. ``en-Latn-US``, ``zh-Hans-CN``).
+
+For BCP 47 format codes, Django preserves the exact case provided in settings.
+Follow these conventions for proper case handling:
+
+* Language codes: lowercase (``en``)
+* Script codes: Titlecase (``Latn``)
+* Country codes: UPPERCASE (``US``)
+* Variants: lowercase
+
+Example: ``zh-Hans-CN`` for Chinese in Simplified script as used in China.
+
 Internationalization: in Python code
 ====================================
 
diff --git a/tests/i18n/test_locale_prefix.py b/tests/i18n/test_locale_prefix.py
new file mode 100644
index 0000000000..c88b86c084
--- /dev/null
+++ b/tests/i18n/test_locale_prefix.py
@@ -0,0 +1,31 @@
+
+
+from django.test import SimpleTestCase
+from django.urls.resolvers import LocalePrefixPattern
+from django.conf import settings
+
+class LocalePrefixPatternTests(SimpleTestCase):
+    def test_language_prefix_normalization(self):
+        test_cases = [
+            ('en-us', 'en-us/'),  # Basic case
+            ('en-latn-us', 'en-latn-us/'),  # Script+region (preserve input case)
+            ('en-Latn-US', 'en-Latn-US/'),  # BCP 47 format (preserve input case)
+            ('sr-latn', 'sr-latn/'),  # Script only (preserve input case)
+            ('zh-hans-cn', 'zh-hans-cn/'),  # 3-part code (preserve input case)
+        ]
+        
+        pattern = LocalePrefixPattern(prefix_default_language=True)
+        
+        for input_code, expected_prefix in test_cases:
+            with self.settings(LANGUAGE_CODE=input_code):
+                print(f"\nTesting input: {input_code}")
+                print(f"Expected output: {expected_prefix}")
+                result = pattern.language_prefix
+                print(f"Actual output: {result}")
+                print(f"Parts: {input_code.split('-')}")
+                self.assertEqual(
+                    result,
+                    expected_prefix,
+                    f"Failed for {input_code}: expected {expected_prefix}, got {result}"
+                )
+
--------
2025-06-23 20:21:24,883 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-15731:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-23 20:21:24,884 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-23 20:21:24,884 - INFO - Logging LLM completions for instance django__django-15731 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-15731
