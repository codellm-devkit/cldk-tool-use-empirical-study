2025-06-26 14:11:36,992 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_edwjxa1t3xmx2sf9_634egmkijx387tjz
2025-06-26 14:14:44,616 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_edwjxa1t3xmx2sf9_634egmkijx387tjz] build finished.
2025-06-26 14:14:44,623 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_edwjxa1t3xmx2sf9_634egmkijx387tjz] with more generic tag [oh_v0.40.0_edwjxa1t3xmx2sf9]
2025-06-26 14:14:44,625 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_edwjxa1t3xmx2sf9_634egmkijx387tjz, oh_v0.40.0_edwjxa1t3xmx2sf9] built successfully
2025-06-26 14:14:44,637 - INFO - [runtime f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_edwjxa1t3xmx2sf9_634egmkijx387tjz
2025-06-26 14:14:45,285 - INFO - [runtime f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Container started: openhands-runtime-f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b. VSCode URL: None
2025-06-26 14:14:45,286 - INFO - [runtime f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Waiting for client to become ready at http://localhost:30294...
2025-06-26 14:15:19,399 - INFO - [runtime f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Runtime is ready.
2025-06-26 14:15:21,967 - INFO - ------------------------------
2025-06-26 14:15:21,968 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 14:15:21,968 - INFO - ------------------------------
2025-06-26 14:15:21,969 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-11211' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 14:15:22,614 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:22,615 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 14:15:23,256 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:23,257 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 14:15:23,893 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:23,908 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 14:15:24,549 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-11211
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:24,550 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 14:15:25,190 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:25,191 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 14:15:26,330 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:26,330 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.0
2025-06-26 14:15:26,968 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:26,969 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 14:15:28,110 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at ba72606760 Fixed #30347 -- Fixed typo in docs/topics/db/aggregation.txt.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:28,111 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 14:15:28,753 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:28,754 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 14:15:29,394 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:15:29,395 - INFO - ------------------------------
2025-06-26 14:15:29,396 - INFO - END Runtime Initialization Fn
2025-06-26 14:15:29,396 - INFO - ------------------------------
2025-06-26 14:15:29,410 - INFO - [runtime f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 14:15:29,417 - INFO - Loading user workspace microagents: []
2025-06-26 14:15:29,417 - INFO - [Agent Controller f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] AgentController f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b - created new state. start_id: 0
2025-06-26 14:15:29,423 - INFO - [Agent Controller f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 14:15:29,424 - INFO - Microagent 'gitlab' triggered by keyword 'git'
2025-06-26 14:15:29,425 - INFO - Microagent 'github' triggered by keyword 'github'
2025-06-26 14:31:17,463 - INFO - [Agent Controller f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Context window exceeded. Keeping events with IDs: {0, 1, 2, 4, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}
2025-06-26 14:37:05,100 - INFO - [Agent Controller f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Context window exceeded. Keeping events with IDs: {0, 1, 2, 128, 4, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127}
2025-06-26 14:41:15,906 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-26 14:41:15,907 - INFO - [Agent Controller f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-26 14:41:15,912 - WARNING - Stopping agent due to traffic control
2025-06-26 14:41:15,913 - INFO - [Agent Controller f8e1ccc5-5464-4c2c-bbc3-97e95c2c1906-07725245c56e862b] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-26 14:41:16,182 - INFO - ------------------------------
2025-06-26 14:41:16,183 - INFO - BEGIN Runtime Completion Fn
2025-06-26 14:41:16,183 - INFO - ------------------------------
2025-06-26 14:41:16,183 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.0
2025-06-26 14:41:16,819 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:41:16,820 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 14:41:17,459 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:41:17,460 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 14:41:18,099 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:41:18,101 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 14:41:18,739 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:41:18,740 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 14:41:19,392 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:41:19,393 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached ba726067604ce5a8ca3919edf653496722b433ab > patch.diff
2025-06-26 14:41:20,033 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "45ba5e7dd78e",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:41:20,034 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 14:41:20,039 - INFO - [Read from /workspace/django__django__3.0/patch.diff is successful.]
diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..2c7ae2a38f 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -184,14 +184,28 @@ class GenericForeignKey(FieldCacheMixin):
             if ct_id is not None:
                 fk_val = getattr(instance, self.fk_field)
                 if fk_val is not None:
-                    fk_dict[ct_id].add(fk_val)
+                    # Get the field to properly convert UUID strings if needed
+                    field = self.model._meta.get_field(self.fk_field)
+                    prepared_value = field.get_prep_value(fk_val)
+                    # Ensure UUID strings are properly converted
+                    if isinstance(prepared_value, str):
+                        try:
+                            import uuid
+                            prepared_value = uuid.UUID(prepared_value)
+                        except (ValueError, AttributeError):
+                            pass
+                    fk_dict[ct_id].add(prepared_value)
                     instance_dict[ct_id] = instance
 
         ret_val = []
         for ct_id, fkeys in fk_dict.items():
             instance = instance_dict[ct_id]
             ct = self.get_content_type(id=ct_id, using=instance._state.db)
-            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
+            try:
+                ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
+            except ValueError:
+                # Handle case where UUID conversion failed
+                ret_val.extend(ct.get_all_objects_for_this_type(pk__in=[str(fk) for fk in fkeys]))
 
         # For doing the join in Python, we have to match both the FK val and the
         # content type, so we use a callable that returns a (fk, class) pair.
@@ -201,8 +215,18 @@ class GenericForeignKey(FieldCacheMixin):
                 return None
             else:
                 model = self.get_content_type(id=ct_id,
-                                              using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
+                                            using=obj._state.db).model_class()
+                if model is None:
+                    return None
+                fk_value = getattr(obj, self.fk_field)
+                # Ensure UUID strings are properly converted for comparison
+                if isinstance(fk_value, str):
+                    try:
+                        import uuid
+                        fk_value = uuid.UUID(fk_value)
+                    except (ValueError, AttributeError):
+                        pass
+                return (model._meta.pk.get_prep_value(fk_value),
                         model)
 
         return (
diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py
index 091d600475..7ec9b81740 100644
--- a/tests/prefetch_related/models.py
+++ b/tests/prefetch_related/models.py
@@ -16,6 +16,7 @@ class Author(models.Model):
         'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
     def __str__(self):
@@ -295,3 +296,15 @@ class Flea(models.Model):
     current_room = models.ForeignKey(Room, models.SET_NULL, related_name='fleas', null=True)
     pets_visited = models.ManyToManyField(Pet, related_name='fleas_hosted')
     people_visited = models.ManyToManyField(Person, related_name='fleas_hosted')
+
+
+# Model for GenericForeignKey with UUID pk test
+class GFKWithUUID(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=20)
+    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
+    object_id = models.CharField(max_length=255)
+    content_object = GenericForeignKey('content_type', 'object_id')
+
+    class Meta:
+        app_label = 'prefetch_related'
diff --git a/tests/prefetch_related/test_uuid.py b/tests/prefetch_related/test_uuid.py
index 11a2474f4a..192dc0bb4d 100644
--- a/tests/prefetch_related/test_uuid.py
+++ b/tests/prefetch_related/test_uuid.py
@@ -1,6 +1,12 @@
-from django.test import TestCase
+from django.test import TestCase, override_settings
+from django.apps import apps
 
-from .models import Flea, House, Person, Pet, Room
+from django.contrib.contenttypes.models import ContentType
+
+# Ensure the prefetch_related app is loaded
+apps.get_app_config('prefetch_related')
+
+from .models import Flea, House, Person, Pet, Room, GFKWithUUID
 
 
 class UUIDPrefetchRelated(TestCase):
@@ -68,6 +74,30 @@ class UUIDPrefetchRelatedLookups(TestCase):
         person.pets.add(pet)
         person.fleas_hosted.add(*fleas)
 
+
+class UUIDGenericForeignKeyTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        # Create test objects with distinct names to avoid conflicts
+        cls.pet = Pet.objects.create(name='TestPet')
+        # Create GFK by directly assigning content_object
+        cls.gfk = GFKWithUUID.objects.create(
+            name='TestGFK',
+            content_object=cls.pet
+        )
+        # Verify the relationship was saved correctly
+        cls.gfk = GFKWithUUID.objects.get(pk=cls.gfk.pk)
+        print(f"GFK content_type: {cls.gfk.content_type}")  # Debug output
+        print(f"GFK object_id: {cls.gfk.object_id}")  # Debug output
+        print(f"GFK content_object: {cls.gfk.content_object}")  # Debug output
+
+    def test_prefetch_related_with_gfk_uuid_pk(self):
+        with self.assertNumQueries(2):
+            gfk = GFKWithUUID.objects.prefetch_related('content_object').get(name='TestGFK')
+        with self.assertNumQueries(0):
+            self.assertIsNotNone(gfk.content_object)
+            self.assertEqual(gfk.content_object.name, 'TestPet')
+
     def test_from_uuid_pk_lookup_uuid_pk_integer_pk(self):
         # From uuid-pk model, prefetch <uuid-pk model>.<integer-pk model>:
         with self.assertNumQueries(4):

2025-06-26 14:41:20,041 - INFO - ------------------------------
2025-06-26 14:41:20,041 - INFO - END Runtime Completion Fn
2025-06-26 14:41:20,041 - INFO - ------------------------------
2025-06-26 14:41:20,042 - INFO - Got git diff for instance django__django-11211:
--------
diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..2c7ae2a38f 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -184,14 +184,28 @@ class GenericForeignKey(FieldCacheMixin):
             if ct_id is not None:
                 fk_val = getattr(instance, self.fk_field)
                 if fk_val is not None:
-                    fk_dict[ct_id].add(fk_val)
+                    # Get the field to properly convert UUID strings if needed
+                    field = self.model._meta.get_field(self.fk_field)
+                    prepared_value = field.get_prep_value(fk_val)
+                    # Ensure UUID strings are properly converted
+                    if isinstance(prepared_value, str):
+                        try:
+                            import uuid
+                            prepared_value = uuid.UUID(prepared_value)
+                        except (ValueError, AttributeError):
+                            pass
+                    fk_dict[ct_id].add(prepared_value)
                     instance_dict[ct_id] = instance
 
         ret_val = []
         for ct_id, fkeys in fk_dict.items():
             instance = instance_dict[ct_id]
             ct = self.get_content_type(id=ct_id, using=instance._state.db)
-            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
+            try:
+                ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
+            except ValueError:
+                # Handle case where UUID conversion failed
+                ret_val.extend(ct.get_all_objects_for_this_type(pk__in=[str(fk) for fk in fkeys]))
 
         # For doing the join in Python, we have to match both the FK val and the
         # content type, so we use a callable that returns a (fk, class) pair.
@@ -201,8 +215,18 @@ class GenericForeignKey(FieldCacheMixin):
                 return None
             else:
                 model = self.get_content_type(id=ct_id,
-                                              using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
+                                            using=obj._state.db).model_class()
+                if model is None:
+                    return None
+                fk_value = getattr(obj, self.fk_field)
+                # Ensure UUID strings are properly converted for comparison
+                if isinstance(fk_value, str):
+                    try:
+                        import uuid
+                        fk_value = uuid.UUID(fk_value)
+                    except (ValueError, AttributeError):
+                        pass
+                return (model._meta.pk.get_prep_value(fk_value),
                         model)
 
         return (
diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py
index 091d600475..7ec9b81740 100644
--- a/tests/prefetch_related/models.py
+++ b/tests/prefetch_related/models.py
@@ -16,6 +16,7 @@ class Author(models.Model):
         'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')
 
     class Meta:
+        app_label = 'prefetch_related'
         ordering = ['id']
 
     def __str__(self):
@@ -295,3 +296,15 @@ class Flea(models.Model):
     current_room = models.ForeignKey(Room, models.SET_NULL, related_name='fleas', null=True)
     pets_visited = models.ManyToManyField(Pet, related_name='fleas_hosted')
     people_visited = models.ManyToManyField(Person, related_name='fleas_hosted')
+
+
+# Model for GenericForeignKey with UUID pk test
+class GFKWithUUID(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=20)
+    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
+    object_id = models.CharField(max_length=255)
+    content_object = GenericForeignKey('content_type', 'object_id')
+
+    class Meta:
+        app_label = 'prefetch_related'
diff --git a/tests/prefetch_related/test_uuid.py b/tests/prefetch_related/test_uuid.py
index 11a2474f4a..192dc0bb4d 100644
--- a/tests/prefetch_related/test_uuid.py
+++ b/tests/prefetch_related/test_uuid.py
@@ -1,6 +1,12 @@
-from django.test import TestCase
+from django.test import TestCase, override_settings
+from django.apps import apps
 
-from .models import Flea, House, Person, Pet, Room
+from django.contrib.contenttypes.models import ContentType
+
+# Ensure the prefetch_related app is loaded
+apps.get_app_config('prefetch_related')
+
+from .models import Flea, House, Person, Pet, Room, GFKWithUUID
 
 
 class UUIDPrefetchRelated(TestCase):
@@ -68,6 +74,30 @@ class UUIDPrefetchRelatedLookups(TestCase):
         person.pets.add(pet)
         person.fleas_hosted.add(*fleas)
 
+
+class UUIDGenericForeignKeyTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        # Create test objects with distinct names to avoid conflicts
+        cls.pet = Pet.objects.create(name='TestPet')
+        # Create GFK by directly assigning content_object
+        cls.gfk = GFKWithUUID.objects.create(
+            name='TestGFK',
+            content_object=cls.pet
+        )
+        # Verify the relationship was saved correctly
+        cls.gfk = GFKWithUUID.objects.get(pk=cls.gfk.pk)
+        print(f"GFK content_type: {cls.gfk.content_type}")  # Debug output
+        print(f"GFK object_id: {cls.gfk.object_id}")  # Debug output
+        print(f"GFK content_object: {cls.gfk.content_object}")  # Debug output
+
+    def test_prefetch_related_with_gfk_uuid_pk(self):
+        with self.assertNumQueries(2):
+            gfk = GFKWithUUID.objects.prefetch_related('content_object').get(name='TestGFK')
+        with self.assertNumQueries(0):
+            self.assertIsNotNone(gfk.content_object)
+            self.assertEqual(gfk.content_object.name, 'TestPet')
+
     def test_from_uuid_pk_lookup_uuid_pk_integer_pk(self):
         # From uuid-pk model, prefetch <uuid-pk model>.<integer-pk model>:
         with self.assertNumQueries(4):
--------
2025-06-26 14:41:22,097 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-16100:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 14:41:22,098 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 14:41:22,098 - INFO - Logging LLM completions for instance django__django-16100 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-16100
