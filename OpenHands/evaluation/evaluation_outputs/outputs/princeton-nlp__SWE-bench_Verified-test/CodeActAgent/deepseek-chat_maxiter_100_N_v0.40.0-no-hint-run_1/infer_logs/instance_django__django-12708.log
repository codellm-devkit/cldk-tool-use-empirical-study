2025-06-26 09:32:35,058 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_2j9k3uwbqqkrv831_634egmkijx387tjz
2025-06-26 09:35:14,870 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_2j9k3uwbqqkrv831_634egmkijx387tjz] build finished.
2025-06-26 09:35:14,881 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_2j9k3uwbqqkrv831_634egmkijx387tjz] with more generic tag [oh_v0.40.0_2j9k3uwbqqkrv831]
2025-06-26 09:35:14,886 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_2j9k3uwbqqkrv831_634egmkijx387tjz, oh_v0.40.0_2j9k3uwbqqkrv831] built successfully
2025-06-26 09:35:14,910 - INFO - [runtime 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_2j9k3uwbqqkrv831_634egmkijx387tjz
2025-06-26 09:35:15,304 - INFO - [runtime 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606] Container started: openhands-runtime-3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606. VSCode URL: None
2025-06-26 09:35:15,304 - INFO - [runtime 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606] Waiting for client to become ready at http://localhost:37408...
2025-06-26 09:35:49,425 - INFO - [runtime 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606] Runtime is ready.
2025-06-26 09:35:52,010 - INFO - ------------------------------
2025-06-26 09:35:52,010 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 09:35:52,011 - INFO - ------------------------------
2025-06-26 09:35:52,011 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-12708' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 09:35:52,656 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:52,657 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 09:35:53,295 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:53,296 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 09:35:53,935 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:53,951 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 09:35:54,587 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-12708
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:54,588 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 09:35:55,228 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:55,229 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 09:35:56,374 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:56,375 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.1
2025-06-26 09:35:57,015 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:57,016 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 09:35:58,164 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 447980e72a Fixed #31500 -- Fixed detecting of unique fields in QuerySet.in_bulk() when using Meta.constraints.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:58,165 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 09:35:58,805 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:58,806 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 09:35:59,446 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:35:59,446 - INFO - ------------------------------
2025-06-26 09:35:59,447 - INFO - END Runtime Initialization Fn
2025-06-26 09:35:59,447 - INFO - ------------------------------
2025-06-26 09:35:59,467 - INFO - [runtime 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 09:35:59,474 - INFO - Loading user workspace microagents: []
2025-06-26 09:35:59,475 - INFO - [Agent Controller 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606] AgentController 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606 - created new state. start_id: 0
2025-06-26 09:35:59,481 - INFO - [Agent Controller 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 09:50:43,284 - INFO - [Agent Controller 3e5a8afa-0c79-4d13-9de7-225260085b5e-969bb1d26477e606] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-26 09:50:43,483 - INFO - ------------------------------
2025-06-26 09:50:43,483 - INFO - BEGIN Runtime Completion Fn
2025-06-26 09:50:43,483 - INFO - ------------------------------
2025-06-26 09:50:43,483 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.1
2025-06-26 09:50:44,120 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:50:44,121 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 09:50:44,761 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:50:44,761 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 09:50:45,404 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:50:45,404 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 09:50:46,043 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:50:46,044 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 09:50:46,696 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:50:46,697 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 447980e72ac01da1594dd3373a03ba40b7ee6f80 > patch.diff
2025-06-26 09:50:47,337 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "69e9526b1661",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:50:47,338 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 09:50:47,344 - INFO - [Read from /workspace/django__django__3.1/patch.diff is successful.]
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..b2e74bc238 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -407,6 +407,19 @@ class BaseDatabaseSchemaEditor:
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
+        # Handle case where multiple constraints exist
+        if len(constraint_names) > 1:
+            # First try to find exact matches for our operation type
+            exact_matches = [
+                name for name in constraint_names
+                if len(self._constraint_names(model, columns, **constraint_kwargs)) == 1
+            ]
+            if exact_matches:
+                constraint_names = exact_matches
+            # If no exact matches, just use the first one
+            elif constraint_names:
+                constraint_names = [constraint_names[0]]
+                
         if len(constraint_names) != 1:
             raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
                 len(constraint_names),
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..aba4354d23
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.model_indexes',
+]
+SECRET_KEY = 'test-secret-key'
diff --git a/tests/model_indexes/models.py b/tests/model_indexes/models.py
index 42651cd868..65d0475182 100644
--- a/tests/model_indexes/models.py
+++ b/tests/model_indexes/models.py
@@ -35,3 +35,12 @@ class ChildModel1(AbstractModel):
 
 class ChildModel2(AbstractModel):
     pass
+
+
+class UniqueIndexModel(models.Model):
+    field1 = models.CharField(max_length=50)
+    field2 = models.CharField(max_length=50)
+
+    class Meta:
+        unique_together = [['field1', 'field2']]
+        index_together = [['field1', 'field2']]
diff --git a/tests/model_indexes/tests.py b/tests/model_indexes/tests.py
index 15ec702937..d88e524363 100644
--- a/tests/model_indexes/tests.py
+++ b/tests/model_indexes/tests.py
@@ -5,7 +5,7 @@ from django.db import connection, models
 from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature
 from django.test.utils import isolate_apps
 
-from .models import Book, ChildModel1, ChildModel2
+from .models import Book, ChildModel1, ChildModel2, UniqueIndexModel
 
 
 class SimpleIndexesTests(SimpleTestCase):
@@ -160,7 +160,60 @@ class SimpleIndexesTests(SimpleTestCase):
 
 class IndexesTests(TestCase):
 
-    @skipUnlessDBFeature('supports_tablespaces')
+    def test_unique_and_index_together(self):
+        """Test that index_together can be removed when unique_together exists."""
+        # Handle SQLite foreign key constraint requirement
+        if connection.vendor == 'sqlite':
+            test_connection = connection.copy()
+            test_connection.connect()
+            with test_connection.cursor() as cursor:
+                cursor.execute('PRAGMA foreign_keys=OFF')
+        else:
+            test_connection = connection
+        
+        try:
+            # First delete the table if it exists from previous runs
+            with test_connection.schema_editor() as editor:
+                editor.delete_model(UniqueIndexModel)
+            
+            # Create fresh table
+            with test_connection.schema_editor() as editor:
+                editor.create_model(UniqueIndexModel)
+            
+            # First verify constraints exist
+            initial_constraints = test_connection.introspection.get_constraints(
+                test_connection.cursor(),
+                UniqueIndexModel._meta.db_table
+            )
+            print("Initial constraints:", initial_constraints)
+            
+            # Remove index_together while keeping unique_together
+            UniqueIndexModel._meta.index_together = []
+            try:
+                with test_connection.schema_editor() as editor:
+                    editor.alter_index_together(UniqueIndexModel, [['field1', 'field2']], [])
+            except Exception as e:
+                print("Error during constraint removal:", str(e))
+                raise
+            
+            # Verify unique constraint still exists
+            constraints = test_connection.introspection.get_constraints(
+                test_connection.cursor(), 
+                UniqueIndexModel._meta.db_table
+            )
+            print("Post-removal constraints:", constraints)
+            unique_constraints = [
+                c for c in constraints.values() 
+                if c['unique'] and set(c['columns']) == {'field1', 'field2'}
+            ]
+            self.assertEqual(len(unique_constraints), 1, "Unique constraint should remain")
+        finally:
+            # Clean up
+            with test_connection.schema_editor() as editor:
+                editor.delete_model(UniqueIndexModel)
+            if connection.vendor == 'sqlite':
+                test_connection.close()
+
     def test_db_tablespace(self):
         editor = connection.schema_editor()
         # Index with db_tablespace attribute.

2025-06-26 09:50:47,345 - INFO - ------------------------------
2025-06-26 09:50:47,345 - INFO - END Runtime Completion Fn
2025-06-26 09:50:47,346 - INFO - ------------------------------
2025-06-26 09:50:47,346 - INFO - Got git diff for instance django__django-12708:
--------
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..b2e74bc238 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -407,6 +407,19 @@ class BaseDatabaseSchemaEditor:
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
+        # Handle case where multiple constraints exist
+        if len(constraint_names) > 1:
+            # First try to find exact matches for our operation type
+            exact_matches = [
+                name for name in constraint_names
+                if len(self._constraint_names(model, columns, **constraint_kwargs)) == 1
+            ]
+            if exact_matches:
+                constraint_names = exact_matches
+            # If no exact matches, just use the first one
+            elif constraint_names:
+                constraint_names = [constraint_names[0]]
+                
         if len(constraint_names) != 1:
             raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
                 len(constraint_names),
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..aba4354d23
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'tests.model_indexes',
+]
+SECRET_KEY = 'test-secret-key'
diff --git a/tests/model_indexes/models.py b/tests/model_indexes/models.py
index 42651cd868..65d0475182 100644
--- a/tests/model_indexes/models.py
+++ b/tests/model_indexes/models.py
@@ -35,3 +35,12 @@ class ChildModel1(AbstractModel):
 
 class ChildModel2(AbstractModel):
     pass
+
+
+class UniqueIndexModel(models.Model):
+    field1 = models.CharField(max_length=50)
+    field2 = models.CharField(max_length=50)
+
+    class Meta:
+        unique_together = [['field1', 'field2']]
+        index_together = [['field1', 'field2']]
diff --git a/tests/model_indexes/tests.py b/tests/model_indexes/tests.py
index 15ec702937..d88e524363 100644
--- a/tests/model_indexes/tests.py
+++ b/tests/model_indexes/tests.py
@@ -5,7 +5,7 @@ from django.db import connection, models
 from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature
 from django.test.utils import isolate_apps
 
-from .models import Book, ChildModel1, ChildModel2
+from .models import Book, ChildModel1, ChildModel2, UniqueIndexModel
 
 
 class SimpleIndexesTests(SimpleTestCase):
@@ -160,7 +160,60 @@ class SimpleIndexesTests(SimpleTestCase):
 
 class IndexesTests(TestCase):
 
-    @skipUnlessDBFeature('supports_tablespaces')
+    def test_unique_and_index_together(self):
+        """Test that index_together can be removed when unique_together exists."""
+        # Handle SQLite foreign key constraint requirement
+        if connection.vendor == 'sqlite':
+            test_connection = connection.copy()
+            test_connection.connect()
+            with test_connection.cursor() as cursor:
+                cursor.execute('PRAGMA foreign_keys=OFF')
+        else:
+            test_connection = connection
+        
+        try:
+            # First delete the table if it exists from previous runs
+            with test_connection.schema_editor() as editor:
+                editor.delete_model(UniqueIndexModel)
+            
+            # Create fresh table
+            with test_connection.schema_editor() as editor:
+                editor.create_model(UniqueIndexModel)
+            
+            # First verify constraints exist
+            initial_constraints = test_connection.introspection.get_constraints(
+                test_connection.cursor(),
+                UniqueIndexModel._meta.db_table
+            )
+            print("Initial constraints:", initial_constraints)
+            
+            # Remove index_together while keeping unique_together
+            UniqueIndexModel._meta.index_together = []
+            try:
+                with test_connection.schema_editor() as editor:
+                    editor.alter_index_together(UniqueIndexModel, [['field1', 'field2']], [])
+            except Exception as e:
+                print("Error during constraint removal:", str(e))
+                raise
+            
+            # Verify unique constraint still exists
+            constraints = test_connection.introspection.get_constraints(
+                test_connection.cursor(), 
+                UniqueIndexModel._meta.db_table
+            )
+            print("Post-removal constraints:", constraints)
+            unique_constraints = [
+                c for c in constraints.values() 
+                if c['unique'] and set(c['columns']) == {'field1', 'field2'}
+            ]
+            self.assertEqual(len(unique_constraints), 1, "Unique constraint should remain")
+        finally:
+            # Clean up
+            with test_connection.schema_editor() as editor:
+                editor.delete_model(UniqueIndexModel)
+            if connection.vendor == 'sqlite':
+                test_connection.close()
+
     def test_db_tablespace(self):
         editor = connection.schema_editor()
         # Index with db_tablespace attribute.
--------
2025-06-26 09:50:49,590 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-15280:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 09:50:49,590 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 09:50:49,590 - INFO - Logging LLM completions for instance django__django-15280 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-15280
