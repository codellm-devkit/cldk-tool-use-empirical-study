2025-06-26 12:24:15,314 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kecxwao5zyoxg55a_634egmkijx387tjz
2025-06-26 12:27:06,074 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kecxwao5zyoxg55a_634egmkijx387tjz] build finished.
2025-06-26 12:27:06,083 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kecxwao5zyoxg55a_634egmkijx387tjz] with more generic tag [oh_v0.40.0_kecxwao5zyoxg55a]
2025-06-26 12:27:06,087 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_kecxwao5zyoxg55a_634egmkijx387tjz, oh_v0.40.0_kecxwao5zyoxg55a] built successfully
2025-06-26 12:27:06,110 - INFO - [runtime 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kecxwao5zyoxg55a_634egmkijx387tjz
2025-06-26 12:27:06,526 - INFO - [runtime 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f] Container started: openhands-runtime-799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f. VSCode URL: None
2025-06-26 12:27:06,527 - INFO - [runtime 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f] Waiting for client to become ready at http://localhost:30980...
2025-06-26 12:27:38,641 - INFO - [runtime 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f] Runtime is ready.
2025-06-26 12:27:40,723 - INFO - ------------------------------
2025-06-26 12:27:40,724 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 12:27:40,724 - INFO - ------------------------------
2025-06-26 12:27:40,724 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-11815' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 12:27:41,369 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:41,370 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 12:27:42,013 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:42,013 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 12:27:42,655 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:42,670 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 12:27:43,308 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-11815
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:43,308 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 12:27:43,941 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:43,942 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 12:27:45,086 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:45,087 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.1
2025-06-26 12:27:45,724 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:45,724 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 12:27:46,855 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at e02f67ef2d Doc'd that migrate commmand accepts a unique migration name prefix.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:46,856 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 12:27:47,498 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:47,499 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 12:27:48,453 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:48,454 - INFO - ------------------------------
2025-06-26 12:27:48,454 - INFO - END Runtime Initialization Fn
2025-06-26 12:27:48,454 - INFO - ------------------------------
2025-06-26 12:27:48,474 - INFO - [runtime 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 12:27:48,482 - INFO - Loading user workspace microagents: []
2025-06-26 12:27:48,482 - INFO - [Agent Controller 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f] AgentController 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f - created new state. start_id: 0
2025-06-26 12:27:48,488 - INFO - [Agent Controller 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 12:33:34,374 - INFO - [Agent Controller 799124e9-7649-4581-85e0-33af2808b3c0-07aae5e6e148943f] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-26 12:33:34,884 - INFO - ------------------------------
2025-06-26 12:33:34,885 - INFO - BEGIN Runtime Completion Fn
2025-06-26 12:33:34,885 - INFO - ------------------------------
2025-06-26 12:33:34,885 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.1
2025-06-26 12:33:35,525 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:33:35,526 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 12:33:36,167 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:33:36,167 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 12:33:36,805 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:33:36,805 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 12:33:37,442 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:33:37,442 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 12:33:38,094 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:33:38,095 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached e02f67ef2d03d48128e7a118bf75f0418e24e8ac > patch.diff
2025-06-26 12:33:38,737 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c3189ab25285",
  "working_dir": "/workspace/django__django__3.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:33:38,737 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 12:33:38,744 - INFO - [Read from /workspace/django__django__3.1/patch.diff is successful.]
diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..1d8d143602 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        imports = {'import %s' % module}
+        # Force new implementation
+        return "%s.%s['%s']" % (module, enum_class.__name__, self.value.name), imports
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/tests/migrations/test_enum_serializer.py b/tests/migrations/test_enum_serializer.py
new file mode 100644
index 0000000000..e23b2ace4c
--- /dev/null
+++ b/tests/migrations/test_enum_serializer.py
@@ -0,0 +1,21 @@
+
+import enum
+import unittest
+from django.db.migrations.serializer import serializer_factory
+
+class Status(enum.Enum):
+    GOOD = 'Good'
+    BAD = 'Bad'
+
+class EnumSerializerTest(unittest.TestCase):
+    def test_enum_serialization(self):
+        """Enums should be serialized using their names, not values."""
+        from django.db.migrations.serializer import EnumSerializer
+        print("Using serializer:", serializer_factory(Status.GOOD).__class__.__name__)
+        serialized, imports = serializer_factory(Status.GOOD).serialize()
+        print("Serialized result:", serialized)
+        self.assertEqual(serialized, "%s.Status['GOOD']" % __name__)
+        self.assertEqual(imports, {'import %s' % __name__})
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py
index f97d76e9ad..b540102d27 100644
--- a/tests/migrations/test_writer.py
+++ b/tests/migrations/test_writer.py
@@ -8,9 +8,6 @@ import re
 import uuid
 from unittest import mock
 
-import custom_migration_operations.more_operations
-import custom_migration_operations.operations
-
 from django import get_version
 from django.conf import SettingsReference, settings
 from django.core.validators import EmailValidator, RegexValidator
@@ -41,8 +38,19 @@ class TestModel1:
     thing = models.FileField(upload_to=upload_to)
 
 
+class Status(enum.Enum):
+    GOOD = _('Good')
+    BAD = _('Bad')
+
 class OperationWriterTests(SimpleTestCase):
 
+    def test_enum_serialization(self):
+        """Enums should be serialized using their names, not values."""
+        from django.db.migrations.serializer import serializer_factory
+        serialized, imports = serializer_factory(self.Status.GOOD).serialize()
+        self.assertEqual(serialized, "%s.Status['GOOD']" % __name__)
+        self.assertEqual(imports, {'import %s' % __name__})
+
     def test_empty_signature(self):
         operation = custom_migration_operations.operations.TestOperation()
         buff, imports = OperationWriter(operation, indentation=0).serialize()

2025-06-26 12:33:38,745 - INFO - ------------------------------
2025-06-26 12:33:38,745 - INFO - END Runtime Completion Fn
2025-06-26 12:33:38,746 - INFO - ------------------------------
2025-06-26 12:33:38,746 - INFO - Got git diff for instance django__django-11815:
--------
diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 27b5cbd379..1d8d143602 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        v_string, v_imports = serializer_factory(self.value.value).serialize()
-        imports = {'import %s' % module, *v_imports}
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
+        imports = {'import %s' % module}
+        # Force new implementation
+        return "%s.%s['%s']" % (module, enum_class.__name__, self.value.name), imports
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/tests/migrations/test_enum_serializer.py b/tests/migrations/test_enum_serializer.py
new file mode 100644
index 0000000000..e23b2ace4c
--- /dev/null
+++ b/tests/migrations/test_enum_serializer.py
@@ -0,0 +1,21 @@
+
+import enum
+import unittest
+from django.db.migrations.serializer import serializer_factory
+
+class Status(enum.Enum):
+    GOOD = 'Good'
+    BAD = 'Bad'
+
+class EnumSerializerTest(unittest.TestCase):
+    def test_enum_serialization(self):
+        """Enums should be serialized using their names, not values."""
+        from django.db.migrations.serializer import EnumSerializer
+        print("Using serializer:", serializer_factory(Status.GOOD).__class__.__name__)
+        serialized, imports = serializer_factory(Status.GOOD).serialize()
+        print("Serialized result:", serialized)
+        self.assertEqual(serialized, "%s.Status['GOOD']" % __name__)
+        self.assertEqual(imports, {'import %s' % __name__})
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py
index f97d76e9ad..b540102d27 100644
--- a/tests/migrations/test_writer.py
+++ b/tests/migrations/test_writer.py
@@ -8,9 +8,6 @@ import re
 import uuid
 from unittest import mock
 
-import custom_migration_operations.more_operations
-import custom_migration_operations.operations
-
 from django import get_version
 from django.conf import SettingsReference, settings
 from django.core.validators import EmailValidator, RegexValidator
@@ -41,8 +38,19 @@ class TestModel1:
     thing = models.FileField(upload_to=upload_to)
 
 
+class Status(enum.Enum):
+    GOOD = _('Good')
+    BAD = _('Bad')
+
 class OperationWriterTests(SimpleTestCase):
 
+    def test_enum_serialization(self):
+        """Enums should be serialized using their names, not values."""
+        from django.db.migrations.serializer import serializer_factory
+        serialized, imports = serializer_factory(self.Status.GOOD).serialize()
+        self.assertEqual(serialized, "%s.Status['GOOD']" % __name__)
+        self.assertEqual(imports, {'import %s' % __name__})
+
     def test_empty_signature(self):
         operation = custom_migration_operations.operations.TestOperation()
         buff, imports = OperationWriter(operation, indentation=0).serialize()
--------
2025-06-26 12:33:40,982 - INFO - Using instance container image: swebench/sweb.eval.x86_64.pylint-dev_1776_pylint-7080:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 12:33:40,983 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 12:33:40,983 - INFO - Logging LLM completions for instance pylint-dev__pylint-7080 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/pylint-dev__pylint-7080
