2025-06-26 09:35:00,867 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_d7hermbiluihxxfq_634egmkijx387tjz
2025-06-26 09:37:56,792 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_d7hermbiluihxxfq_634egmkijx387tjz] build finished.
2025-06-26 09:37:56,800 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_d7hermbiluihxxfq_634egmkijx387tjz] with more generic tag [oh_v0.40.0_d7hermbiluihxxfq]
2025-06-26 09:37:56,803 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_d7hermbiluihxxfq_634egmkijx387tjz, oh_v0.40.0_d7hermbiluihxxfq] built successfully
2025-06-26 09:37:56,827 - INFO - [runtime e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_d7hermbiluihxxfq_634egmkijx387tjz
2025-06-26 09:37:57,297 - INFO - [runtime e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Container started: openhands-runtime-e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739. VSCode URL: None
2025-06-26 09:37:57,298 - INFO - [runtime e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Waiting for client to become ready at http://localhost:38673...
2025-06-26 09:38:27,411 - INFO - [runtime e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Runtime is ready.
2025-06-26 09:38:29,997 - INFO - ------------------------------
2025-06-26 09:38:29,997 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 09:38:29,998 - INFO - ------------------------------
2025-06-26 09:38:29,998 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-16819' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 09:38:30,644 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:30,645 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 09:38:31,286 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:31,287 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 09:38:31,926 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:31,939 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 09:38:32,579 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-16819
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:32,579 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 09:38:33,220 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:33,221 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 09:38:34,365 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__5.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:34,366 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__5.0
2025-06-26 09:38:35,004 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:35,005 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 09:38:35,642 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 0b0998dc15 Fixed #33759 -- Avoided unnecessary subquery in QuerySet.delete() with self-referential subqueries if supported.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:35,642 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 09:38:36,283 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:36,284 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 09:38:36,924 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:38:36,924 - INFO - ------------------------------
2025-06-26 09:38:36,925 - INFO - END Runtime Initialization Fn
2025-06-26 09:38:36,925 - INFO - ------------------------------
2025-06-26 09:38:36,948 - INFO - [runtime e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 09:38:36,955 - INFO - Loading user workspace microagents: []
2025-06-26 09:38:36,955 - INFO - [Agent Controller e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] AgentController e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739 - created new state. start_id: 0
2025-06-26 09:38:36,961 - INFO - [Agent Controller e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 09:51:21,916 - INFO - [Agent Controller e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-26 09:51:21,922 - INFO - [Agent Controller e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-26 09:51:43,272 - INFO - [Agent Controller e4bb2f9d-3de2-4566-91eb-94fd85b10564-07b2250669b8b739] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-26 09:51:43,888 - INFO - ------------------------------
2025-06-26 09:51:43,888 - INFO - BEGIN Runtime Completion Fn
2025-06-26 09:51:43,888 - INFO - ------------------------------
2025-06-26 09:51:43,889 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__5.0
2025-06-26 09:51:44,530 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:51:44,531 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 09:51:45,172 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:51:45,173 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 09:51:45,813 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:51:45,814 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 09:51:46,453 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:51:46,454 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 09:51:47,108 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:51:47,109 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 0b0998dc151feb77068e2387c34cc50ef6b356ae > patch.diff
2025-06-26 09:51:47,750 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "00f1cb0e1dfa",
  "working_dir": "/workspace/django__django__5.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__5.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 09:51:47,751 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 09:51:47,756 - INFO - [Read from /workspace/django__django__5.0/patch.diff is successful.]
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..22bceac930 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -861,6 +861,37 @@ class AddIndex(IndexOperation):
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
 
+    def reduce(self, operation, app_label):
+        """
+        Optimize with other index operations:
+        - AddIndex + RemoveIndex (same index) = nothing
+        - AddIndex + RenameIndex = AddIndex with new name
+        """
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.name
+        ):
+            return []
+        elif (
+            isinstance(operation, RenameIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.old_name
+        ):
+            index_kwargs = {
+                'name': operation.new_name,
+                'fields': self.index.fields,
+            }
+            if hasattr(self.index, 'expressions') and self.index.expressions:
+                index_kwargs['expressions'] = self.index.expressions
+            return [
+                AddIndex(
+                    model_name=self.model_name,
+                    index=models.Index(**index_kwargs),
+                ),
+            ]
+        return super().reduce(operation, app_label)
+
 
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""
@@ -904,6 +935,31 @@ class RemoveIndex(IndexOperation):
     def migration_name_fragment(self):
         return "remove_%s_%s" % (self.model_name_lower, self.name.lower())
 
+    def reduce(self, operation, app_label):
+        """
+        Optimize with other index operations:
+        - RemoveIndex + AddIndex (same index) = nothing
+        - RemoveIndex + RenameIndex = RemoveIndex with old name
+        """
+        if (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.index.name
+        ):
+            return []
+        elif (
+            isinstance(operation, RenameIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.new_name
+        ):
+            return [
+                RemoveIndex(
+                    model_name=self.model_name,
+                    name=operation.old_name,
+                ),
+            ]
+        return super().reduce(operation, app_label)
+
 
 class RenameIndex(IndexOperation):
     """Rename an index."""
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..29da9cd81f
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.migrations',
+]
+SECRET_KEY = 'test-key'
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 8cd4c67fbd..16cafa44ef 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -1,5 +1,6 @@
 from django.db import migrations, models
 from django.db.migrations import operations
+from django.db.models import Index
 from django.db.migrations.optimizer import MigrationOptimizer
 from django.db.migrations.serializer import serializer_factory
 from django.test import SimpleTestCase
@@ -1158,3 +1159,87 @@ class OptimizerTests(SimpleTestCase):
                 ),
             ]
         )
+
+    def test_add_remove_index(self):
+        """
+        AddIndex and RemoveIndex should collapse into nothing when for the same index.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.AddIndex(
+                    model_name="Pony",
+                    index=Index(fields=["pink"], name="test_index"),
+                ),
+                migrations.RemoveIndex(
+                    model_name="Pony",
+                    name="test_index",
+                ),
+            ],
+            [],
+        )
+
+    def test_remove_add_index(self):
+        """
+        RemoveIndex and AddIndex should collapse into nothing when for the same index.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.RemoveIndex(
+                    model_name="Pony",
+                    name="test_index",
+                ),
+                migrations.AddIndex(
+                    model_name="Pony",
+                    index=Index(fields=["pink"], name="test_index"),
+                ),
+            ],
+            [],
+        )
+
+    def test_add_rename_index(self):
+        """
+        AddIndex should absorb RenameIndex operations.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.AddIndex(
+                    model_name="Pony",
+                    index=Index(fields=["pink"], name="old_name"),
+                ),
+                migrations.RenameIndex(
+                    model_name="Pony",
+                    new_name="new_name",
+                    old_name="old_name",
+                ),
+            ],
+            [
+                migrations.AddIndex(
+                    model_name="Pony",
+                    index=Index(fields=["pink"], name="new_name"),
+                ),
+            ],
+        )
+
+    def test_remove_rename_index(self):
+        """
+        RemoveIndex should use old_name when followed by RenameIndex.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.RemoveIndex(
+                    model_name="Pony",
+                    name="new_name",
+                ),
+                migrations.RenameIndex(
+                    model_name="Pony",
+                    new_name="new_name",
+                    old_name="old_name",
+                ),
+            ],
+            [
+                migrations.RemoveIndex(
+                    model_name="Pony",
+                    name="old_name",
+                ),
+            ],
+        )

2025-06-26 09:51:47,757 - INFO - ------------------------------
2025-06-26 09:51:47,757 - INFO - END Runtime Completion Fn
2025-06-26 09:51:47,758 - INFO - ------------------------------
2025-06-26 09:51:47,758 - INFO - Got git diff for instance django__django-16819:
--------
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..22bceac930 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -861,6 +861,37 @@ class AddIndex(IndexOperation):
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
 
+    def reduce(self, operation, app_label):
+        """
+        Optimize with other index operations:
+        - AddIndex + RemoveIndex (same index) = nothing
+        - AddIndex + RenameIndex = AddIndex with new name
+        """
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.name
+        ):
+            return []
+        elif (
+            isinstance(operation, RenameIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.old_name
+        ):
+            index_kwargs = {
+                'name': operation.new_name,
+                'fields': self.index.fields,
+            }
+            if hasattr(self.index, 'expressions') and self.index.expressions:
+                index_kwargs['expressions'] = self.index.expressions
+            return [
+                AddIndex(
+                    model_name=self.model_name,
+                    index=models.Index(**index_kwargs),
+                ),
+            ]
+        return super().reduce(operation, app_label)
+
 
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""
@@ -904,6 +935,31 @@ class RemoveIndex(IndexOperation):
     def migration_name_fragment(self):
         return "remove_%s_%s" % (self.model_name_lower, self.name.lower())
 
+    def reduce(self, operation, app_label):
+        """
+        Optimize with other index operations:
+        - RemoveIndex + AddIndex (same index) = nothing
+        - RemoveIndex + RenameIndex = RemoveIndex with old name
+        """
+        if (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.index.name
+        ):
+            return []
+        elif (
+            isinstance(operation, RenameIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.new_name
+        ):
+            return [
+                RemoveIndex(
+                    model_name=self.model_name,
+                    name=operation.old_name,
+                ),
+            ]
+        return super().reduce(operation, app_label)
+
 
 class RenameIndex(IndexOperation):
     """Rename an index."""
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..29da9cd81f
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.migrations',
+]
+SECRET_KEY = 'test-key'
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 8cd4c67fbd..16cafa44ef 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -1,5 +1,6 @@
 from django.db import migrations, models
 from django.db.migrations import operations
+from django.db.models import Index
 from django.db.migrations.optimizer import MigrationOptimizer
 from django.db.migrations.serializer import serializer_factory
 from django.test import SimpleTestCase
@@ -1158,3 +1159,87 @@ class OptimizerTests(SimpleTestCase):
                 ),
             ]
         )
+
+    def test_add_remove_index(self):
+        """
+        AddIndex and RemoveIndex should collapse into nothing when for the same index.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.AddIndex(
+                    model_name="Pony",
+                    index=Index(fields=["pink"], name="test_index"),
+                ),
+                migrations.RemoveIndex(
+                    model_name="Pony",
+                    name="test_index",
+                ),
+            ],
+            [],
+        )
+
+    def test_remove_add_index(self):
+        """
+        RemoveIndex and AddIndex should collapse into nothing when for the same index.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.RemoveIndex(
+                    model_name="Pony",
+                    name="test_index",
+                ),
+                migrations.AddIndex(
+                    model_name="Pony",
+                    index=Index(fields=["pink"], name="test_index"),
+                ),
+            ],
+            [],
+        )
+
+    def test_add_rename_index(self):
+        """
+        AddIndex should absorb RenameIndex operations.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.AddIndex(
+                    model_name="Pony",
+                    index=Index(fields=["pink"], name="old_name"),
+                ),
+                migrations.RenameIndex(
+                    model_name="Pony",
+                    new_name="new_name",
+                    old_name="old_name",
+                ),
+            ],
+            [
+                migrations.AddIndex(
+                    model_name="Pony",
+                    index=Index(fields=["pink"], name="new_name"),
+                ),
+            ],
+        )
+
+    def test_remove_rename_index(self):
+        """
+        RemoveIndex should use old_name when followed by RenameIndex.
+        """
+        self.assertOptimizesTo(
+            [
+                migrations.RemoveIndex(
+                    model_name="Pony",
+                    name="new_name",
+                ),
+                migrations.RenameIndex(
+                    model_name="Pony",
+                    new_name="new_name",
+                    old_name="old_name",
+                ),
+            ],
+            [
+                migrations.RemoveIndex(
+                    model_name="Pony",
+                    name="old_name",
+                ),
+            ],
+        )
--------
2025-06-26 09:51:50,698 - INFO - Using instance container image: swebench/sweb.eval.x86_64.sphinx-doc_1776_sphinx-10449:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 09:51:50,698 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 09:51:50,698 - INFO - Logging LLM completions for instance sphinx-doc__sphinx-10449 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/sphinx-doc__sphinx-10449
