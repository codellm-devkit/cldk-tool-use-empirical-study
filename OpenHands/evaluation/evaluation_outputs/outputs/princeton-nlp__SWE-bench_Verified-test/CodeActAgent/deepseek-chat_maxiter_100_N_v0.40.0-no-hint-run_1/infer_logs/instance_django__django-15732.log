2025-06-20 17:19:57,651 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_0111rr98rk0e45ig_634egmkijx387tjz
2025-06-20 17:22:43,479 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_0111rr98rk0e45ig_634egmkijx387tjz] build finished.
2025-06-20 17:22:43,490 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_0111rr98rk0e45ig_634egmkijx387tjz] with more generic tag [oh_v0.40.0_0111rr98rk0e45ig]
2025-06-20 17:22:43,494 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_0111rr98rk0e45ig_634egmkijx387tjz, oh_v0.40.0_0111rr98rk0e45ig] built successfully
2025-06-20 17:22:43,517 - INFO - [runtime 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_0111rr98rk0e45ig_634egmkijx387tjz
2025-06-20 17:22:44,681 - INFO - [runtime 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Container started: openhands-runtime-31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4. VSCode URL: None
2025-06-20 17:22:44,682 - INFO - [runtime 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Waiting for client to become ready at http://localhost:33848...
2025-06-20 17:23:18,834 - INFO - [runtime 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Runtime is ready.
2025-06-20 17:23:21,411 - INFO - ------------------------------
2025-06-20 17:23:21,412 - INFO - BEGIN Runtime Initialization Fn
2025-06-20 17:23:21,412 - INFO - ------------------------------
2025-06-20 17:23:21,412 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-15732' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-20 17:23:22,056 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:22,057 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-20 17:23:22,697 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:22,697 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-20 17:23:23,337 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:23,352 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-20 17:23:23,993 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-15732
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:23,994 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-20 17:23:24,636 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:24,637 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-20 17:23:26,289 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__4.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:26,290 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.2
2025-06-20 17:23:26,932 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:26,933 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-20 17:23:28,078 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at ce69e34bd6 Unified AdminSite imports in docs.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:28,079 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-20 17:23:28,721 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:28,722 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-20 17:23:29,363 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:23:29,363 - INFO - ------------------------------
2025-06-20 17:23:29,364 - INFO - END Runtime Initialization Fn
2025-06-20 17:23:29,364 - INFO - ------------------------------
2025-06-20 17:23:29,390 - INFO - [runtime 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-20 17:23:29,398 - INFO - Loading user workspace microagents: []
2025-06-20 17:23:29,398 - INFO - [Agent Controller 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] AgentController 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4 - created new state. start_id: 0
2025-06-20 17:23:29,404 - INFO - [Agent Controller 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-20 17:30:05,440 - INFO - [Agent Controller 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-20 17:30:05,444 - INFO - [Agent Controller 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-20 17:30:21,934 - INFO - [Agent Controller 31294e18-9ebb-49f7-800a-29163cc7903f-ec83bd17055efbb4] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-20 17:30:22,861 - INFO - ------------------------------
2025-06-20 17:30:22,862 - INFO - BEGIN Runtime Completion Fn
2025-06-20 17:30:22,862 - INFO - ------------------------------
2025-06-20 17:30:22,862 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.2
2025-06-20 17:30:23,504 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:30:23,505 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-20 17:30:24,145 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:30:24,146 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-20 17:30:24,788 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:30:24,789 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-20 17:30:25,429 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:30:25,430 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-20 17:30:26,071 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:30:26,072 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached ce69e34bd646558bb44ea92cecfd98b345a0b3e0 > patch.diff
2025-06-20 17:30:26,714 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "3ac643925de8",
  "working_dir": "/workspace/django__django__4.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:30:26,715 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-20 17:30:26,719 - INFO - [Read from /workspace/django__django__4.2/patch.diff is successful.]
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index f2ca8c8df9..dc303661be 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -568,16 +568,22 @@ class BaseDatabaseSchemaEditor:
             exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs,
         )
-        if len(constraint_names) != 1:
-            raise ValueError(
-                "Found wrong number (%s) of constraints for %s(%s)"
-                % (
-                    len(constraint_names),
-                    model._meta.db_table,
-                    ", ".join(columns),
+        # When dropping unique_together constraints, we might have multiple constraints
+        # (e.g. primary key + unique_together). Filter to only non-primary unique constraints
+        if constraint_kwargs.get('unique'):
+            constraint_names = [
+                name for name in constraint_names
+                if not any(
+                    c.name == name and c.primary_key
+                    for c in model._meta.constraints
                 )
-            )
-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
+            ]
+        
+        if not constraint_names:
+            return  # No matching constraints to delete
+        
+        for constraint_name in constraint_names:
+            self.execute(self._delete_constraint_sql(sql, model, constraint_name))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..b1de131ca2
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,16 @@
+
+import unittest
+from django.db import connection
+from tests.schema.tests import SchemaTests
+
+class TestUniqueTogetherFix(SchemaTests):
+    def test_drop_unique_together_with_pk(self):
+        super().setUp()
+        try:
+            super().test_drop_unique_together_with_pk()
+        finally:
+            super().tearDown()
+
+if __name__ == '__main__':
+    unittest.main()
+
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..9ca93fe4ef
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes', 'tests.schema'],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    SECRET_KEY='test',
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index fe717f8841..c0a3d66b48 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -119,6 +119,7 @@ class SchemaTests(TransactionTestCase):
         TagUniqueRename,
         Thing,
         UniqueTest,
+        UniqueTogetherWithPK,
     ]
 
     # Utility functions
@@ -4736,3 +4737,45 @@ class SchemaTests(TransactionTestCase):
             if connection.vendor == "postgresql":
                 with connection.cursor() as cursor:
                     cursor.execute("DROP COLLATION IF EXISTS case_insensitive")
+
+    @isolate_apps("schema")
+    def test_drop_unique_together_with_pk(self):
+        """
+        Dropping unique_together constraint should work when primary key exists on same field.
+        """
+        class UniqueTogetherWithPK(Model):
+            id = AutoField(primary_key=True)
+            name = CharField(max_length=255)
+
+            class Meta:
+                app_label = "schema"
+                unique_together = [('id',)]
+
+        with connection.schema_editor() as editor:
+            editor.create_model(UniqueTogetherWithPK)
+        
+        # Verify constraints exist
+        constraints = connection.introspection.get_constraints(
+            connection.cursor(), 
+            UniqueTogetherWithPK._meta.db_table
+        )
+        self.assertTrue(any(c['unique'] and c['columns'] == ['id'] for c in constraints.values()))
+        
+        # Remove unique_together
+        UniqueTogetherWithPK._meta.unique_together = []
+        with connection.schema_editor() as editor:
+            editor.alter_unique_together(
+                UniqueTogetherWithPK,
+                [('id',)],
+                []
+            )
+        
+        # Verify only PK constraint remains
+        constraints = connection.introspection.get_constraints(
+            connection.cursor(), 
+            UniqueTogetherWithPK._meta.db_table
+        )
+        self.assertEqual(
+            sum(1 for c in constraints.values() if c['unique'] and c['columns'] == ['id']),
+            1  # Just the PK constraint
+        )
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..1ee21407cc
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,40 @@
+
+import os
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    SECRET_KEY='test'
+)
+import django
+django.setup()
+
+from django.db import models, connection
+
+class TestModel(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'verify_fix'
+        unique_together = [('id',)]
+
+# Create table
+with connection.schema_editor() as editor:
+    editor.create_model(TestModel)
+
+# Verify constraints
+cursor = connection.cursor()
+constraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')
+print('Initial constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])
+
+# Remove unique_together
+TestModel._meta.unique_together = []
+with connection.schema_editor() as editor:
+    editor.alter_unique_together(TestModel, [('id',)], [])
+
+# Verify remaining constraints
+constraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')
+print('Remaining constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])
+

2025-06-20 17:30:26,720 - INFO - ------------------------------
2025-06-20 17:30:26,720 - INFO - END Runtime Completion Fn
2025-06-20 17:30:26,720 - INFO - ------------------------------
2025-06-20 17:30:26,720 - INFO - Got git diff for instance django__django-15732:
--------
diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index f2ca8c8df9..dc303661be 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -568,16 +568,22 @@ class BaseDatabaseSchemaEditor:
             exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs,
         )
-        if len(constraint_names) != 1:
-            raise ValueError(
-                "Found wrong number (%s) of constraints for %s(%s)"
-                % (
-                    len(constraint_names),
-                    model._meta.db_table,
-                    ", ".join(columns),
+        # When dropping unique_together constraints, we might have multiple constraints
+        # (e.g. primary key + unique_together). Filter to only non-primary unique constraints
+        if constraint_kwargs.get('unique'):
+            constraint_names = [
+                name for name in constraint_names
+                if not any(
+                    c.name == name and c.primary_key
+                    for c in model._meta.constraints
                 )
-            )
-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
+            ]
+        
+        if not constraint_names:
+            return  # No matching constraints to delete
+        
+        for constraint_name in constraint_names:
+            self.execute(self._delete_constraint_sql(sql, model, constraint_name))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..b1de131ca2
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,16 @@
+
+import unittest
+from django.db import connection
+from tests.schema.tests import SchemaTests
+
+class TestUniqueTogetherFix(SchemaTests):
+    def test_drop_unique_together_with_pk(self):
+        super().setUp()
+        try:
+            super().test_drop_unique_together_with_pk()
+        finally:
+            super().tearDown()
+
+if __name__ == '__main__':
+    unittest.main()
+
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..9ca93fe4ef
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,14 @@
+
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes', 'tests.schema'],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    SECRET_KEY='test',
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index fe717f8841..c0a3d66b48 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -119,6 +119,7 @@ class SchemaTests(TransactionTestCase):
         TagUniqueRename,
         Thing,
         UniqueTest,
+        UniqueTogetherWithPK,
     ]
 
     # Utility functions
@@ -4736,3 +4737,45 @@ class SchemaTests(TransactionTestCase):
             if connection.vendor == "postgresql":
                 with connection.cursor() as cursor:
                     cursor.execute("DROP COLLATION IF EXISTS case_insensitive")
+
+    @isolate_apps("schema")
+    def test_drop_unique_together_with_pk(self):
+        """
+        Dropping unique_together constraint should work when primary key exists on same field.
+        """
+        class UniqueTogetherWithPK(Model):
+            id = AutoField(primary_key=True)
+            name = CharField(max_length=255)
+
+            class Meta:
+                app_label = "schema"
+                unique_together = [('id',)]
+
+        with connection.schema_editor() as editor:
+            editor.create_model(UniqueTogetherWithPK)
+        
+        # Verify constraints exist
+        constraints = connection.introspection.get_constraints(
+            connection.cursor(), 
+            UniqueTogetherWithPK._meta.db_table
+        )
+        self.assertTrue(any(c['unique'] and c['columns'] == ['id'] for c in constraints.values()))
+        
+        # Remove unique_together
+        UniqueTogetherWithPK._meta.unique_together = []
+        with connection.schema_editor() as editor:
+            editor.alter_unique_together(
+                UniqueTogetherWithPK,
+                [('id',)],
+                []
+            )
+        
+        # Verify only PK constraint remains
+        constraints = connection.introspection.get_constraints(
+            connection.cursor(), 
+            UniqueTogetherWithPK._meta.db_table
+        )
+        self.assertEqual(
+            sum(1 for c in constraints.values() if c['unique'] and c['columns'] == ['id']),
+            1  # Just the PK constraint
+        )
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..1ee21407cc
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,40 @@
+
+import os
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    SECRET_KEY='test'
+)
+import django
+django.setup()
+
+from django.db import models, connection
+
+class TestModel(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'verify_fix'
+        unique_together = [('id',)]
+
+# Create table
+with connection.schema_editor() as editor:
+    editor.create_model(TestModel)
+
+# Verify constraints
+cursor = connection.cursor()
+constraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')
+print('Initial constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])
+
+# Remove unique_together
+TestModel._meta.unique_together = []
+with connection.schema_editor() as editor:
+    editor.alter_unique_together(TestModel, [('id',)], [])
+
+# Verify remaining constraints
+constraints = connection.introspection.get_constraints(cursor, 'verify_fix_testmodel')
+print('Remaining constraints:', [c for c in constraints.values() if c['unique'] and 'id' in c['columns']])
+
--------
2025-06-20 17:30:30,422 - INFO - Using instance container image: swebench/sweb.eval.x86_64.pylint-dev_1776_pylint-4970:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-20 17:30:30,423 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-20 17:30:30,423 - INFO - Logging LLM completions for instance pylint-dev__pylint-4970 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/pylint-dev__pylint-4970
