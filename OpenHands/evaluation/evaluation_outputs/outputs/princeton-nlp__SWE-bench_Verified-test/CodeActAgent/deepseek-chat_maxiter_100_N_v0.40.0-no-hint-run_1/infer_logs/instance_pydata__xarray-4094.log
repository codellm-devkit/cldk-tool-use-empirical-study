2025-06-25 22:52:54,839 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_egsyhszhrp3xtdt1_634egmkijx387tjz
2025-06-25 22:56:57,856 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_egsyhszhrp3xtdt1_634egmkijx387tjz] build finished.
2025-06-25 22:56:57,864 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_egsyhszhrp3xtdt1_634egmkijx387tjz] with more generic tag [oh_v0.40.0_egsyhszhrp3xtdt1]
2025-06-25 22:56:57,869 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_egsyhszhrp3xtdt1_634egmkijx387tjz, oh_v0.40.0_egsyhszhrp3xtdt1] built successfully
2025-06-25 22:56:57,888 - INFO - [runtime 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_egsyhszhrp3xtdt1_634egmkijx387tjz
2025-06-25 22:56:58,318 - INFO - [runtime 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Container started: openhands-runtime-2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c. VSCode URL: None
2025-06-25 22:56:58,318 - INFO - [runtime 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Waiting for client to become ready at http://localhost:38404...
2025-06-25 22:57:32,448 - INFO - [runtime 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Runtime is ready.
2025-06-25 22:57:35,029 - INFO - ------------------------------
2025-06-25 22:57:35,030 - INFO - BEGIN Runtime Initialization Fn
2025-06-25 22:57:35,030 - INFO - ------------------------------
2025-06-25 22:57:35,031 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pydata__xarray-4094' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-25 22:57:35,677 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:35,678 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-25 22:57:36,320 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:36,320 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-25 22:57:36,961 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:36,976 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-25 22:57:37,616 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=pydata__xarray-4094
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:37,616 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-25 22:57:38,244 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:38,245 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-25 22:57:38,873 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pydata__xarray__0.12
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:38,874 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pydata__xarray__0.12
2025-06-25 22:57:39,514 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:39,514 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-25 22:57:40,153 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at a64cf2d5 Show data by default in HTML repr for DataArray (#4182)
[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:40,153 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-25 22:57:40,793 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:40,794 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-25 22:57:41,429 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:57:41,429 - INFO - ------------------------------
2025-06-25 22:57:41,430 - INFO - END Runtime Initialization Fn
2025-06-25 22:57:41,430 - INFO - ------------------------------
2025-06-25 22:57:41,454 - INFO - [runtime 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-25 22:57:41,461 - INFO - Loading user workspace microagents: []
2025-06-25 22:57:41,461 - INFO - [Agent Controller 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] AgentController 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c - created new state. start_id: 0
2025-06-25 22:57:41,469 - INFO - [Agent Controller 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-25 22:59:37,184 - INFO - [Agent Controller 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-25 22:59:37,190 - INFO - [Agent Controller 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-25 23:06:08,977 - INFO - [Agent Controller 2186dd74-2807-40a4-9aa2-b7e8fe3d23e5-97aedd628c07ce7c] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-25 23:06:09,056 - INFO - ------------------------------
2025-06-25 23:06:09,056 - INFO - BEGIN Runtime Completion Fn
2025-06-25 23:06:09,056 - INFO - ------------------------------
2025-06-25 23:06:09,057 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pydata__xarray__0.12
2025-06-25 23:06:09,697 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:06:09,697 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-25 23:06:10,339 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:06:10,339 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-25 23:06:10,981 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:06:10,981 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-25 23:06:11,621 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:06:11,622 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-25 23:06:12,275 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:06:12,276 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached a64cf2d5476e7bbda099b34c40b7be1880dbd39a > patch.diff
2025-06-25 23:06:12,917 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a07ca77c30df",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:06:12,918 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-25 23:06:12,923 - INFO - [Read from /workspace/pydata__xarray__0.12/patch.diff is successful.]
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index b0df8749..52b97ddb 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -1899,8 +1899,7 @@ class DataArray(AbstractArray, DataWithCoords):
         return self._from_temp_dataset(ds)
 
     def to_unstacked_dataset(self, dim, level=0):
-        """Unstack DataArray expanding to Dataset along a given level of a
-        stacked coordinate.
+        """Unstack DataArray expanding to Dataset along a given level of a stacked coordinate.
 
         This is the inverse operation of Dataset.to_stacked_array.
 
@@ -1911,9 +1910,6 @@ class DataArray(AbstractArray, DataWithCoords):
         level : int or str
             The MultiIndex level to expand to a dataset along. Can either be
             the integer index of the level or its name.
-        label : int, default 0
-            Label of the level to expand dataset along. Overrides the label
-            argument if given.
 
         Returns
         -------
@@ -1927,20 +1923,7 @@ class DataArray(AbstractArray, DataWithCoords):
         ...     coords=[("x", ["a", "b"]), ("y", [0, 1, 2])],
         ... )
         >>> data = xr.Dataset({"a": arr, "b": arr.isel(y=0)})
-        >>> data
-        <xarray.Dataset>
-        Dimensions:  (x: 2, y: 3)
-        Coordinates:
-          * x        (x) <U1 'a' 'b'
-          * y        (y) int64 0 1 2
-        Data variables:
-            a        (x, y) int64 0 1 2 3 4 5
-            b        (x) int64 0 3
         >>> stacked = data.to_stacked_array("z", ["y"])
-        >>> stacked.indexes["z"]
-        MultiIndex(levels=[['a', 'b'], [0, 1, 2]],
-                labels=[[0, 0, 0, 1], [0, 1, 2, -1]],
-                names=['variable', 'y'])
         >>> roundtripped = stacked.to_unstacked_dataset(dim="z")
         >>> data.identical(roundtripped)
         True
@@ -1949,22 +1932,36 @@ class DataArray(AbstractArray, DataWithCoords):
         --------
         Dataset.to_stacked_array
         """
-
-        idx = self.indexes[dim]
-        if not isinstance(idx, pd.MultiIndex):
-            raise ValueError(f"'{dim}' is not a stacked coordinate")
-
-        level_number = idx._get_level_number(level)
-        variables = idx.levels[level_number]
-        variable_dim = idx.names[level_number]
-
-        # pull variables out of datarray
-        data_dict = {}
-        for k in variables:
-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)
-
-        # unstacked dataset
-        return Dataset(data_dict)
+        from .dataset import Dataset
+
+        if dim not in self.dims:
+            raise ValueError(f"dimension {dim} does not exist")
+
+        index = self.get_index(dim)
+        if not isinstance(index, pd.MultiIndex):
+            # Handle single-dimension case
+            if len(self.coords[dim].dims) == 1:
+                # For single-dim vars, return directly without stacking coordinates
+                return Dataset({self.name: self})
+            raise ValueError(f"dimension {dim} has no MultiIndex")
+
+        level_num = index._get_level_number(level)
+        level_values = index.levels[level_num]
+
+        result = {}
+        for value in level_values:
+            key = (value,) if level_num == 0 else (slice(None), value)
+            da = self.sel(**{dim: key})
+            if da.isnull().all():  # skip all-NaN slices
+                continue
+            # Remove all coordinates to avoid conflicts
+            da = da.reset_coords(drop=True)
+            result[str(value)] = da
+
+        # Reconstruct only non-stacked coordinates
+        unstacked = Dataset(result)
+        coords_to_keep = {k: v for k, v in self.coords.items() if dim not in v.dims}
+        return unstacked.assign_coords(**coords_to_keep)
 
     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> "DataArray":
         """Return a new DataArray object with transposed dimensions.
diff --git a/xarray/tests/test_unstack_single_dim.py b/xarray/tests/test_unstack_single_dim.py
new file mode 100644
index 00000000..fd523857
--- /dev/null
+++ b/xarray/tests/test_unstack_single_dim.py
@@ -0,0 +1,14 @@
+
+import numpy as np
+import xarray as xr
+
+def test_unstack_single_dim():
+    """Test that to_unstacked_dataset works with single-dim variables."""
+    arr = xr.DataArray(
+        np.arange(3),
+        coords=[("x", [0, 1, 2])],
+    )
+    data = xr.Dataset({"a": arr, "b": arr})
+    stacked = data.to_stacked_array('y', sample_dims=['x'])
+    unstacked = stacked.to_unstacked_dataset('y')
+    xr.testing.assert_identical(data, unstacked)

2025-06-25 23:06:12,924 - INFO - ------------------------------
2025-06-25 23:06:12,925 - INFO - END Runtime Completion Fn
2025-06-25 23:06:12,925 - INFO - ------------------------------
2025-06-25 23:06:12,925 - INFO - Got git diff for instance pydata__xarray-4094:
--------
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index b0df8749..52b97ddb 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -1899,8 +1899,7 @@ class DataArray(AbstractArray, DataWithCoords):
         return self._from_temp_dataset(ds)
 
     def to_unstacked_dataset(self, dim, level=0):
-        """Unstack DataArray expanding to Dataset along a given level of a
-        stacked coordinate.
+        """Unstack DataArray expanding to Dataset along a given level of a stacked coordinate.
 
         This is the inverse operation of Dataset.to_stacked_array.
 
@@ -1911,9 +1910,6 @@ class DataArray(AbstractArray, DataWithCoords):
         level : int or str
             The MultiIndex level to expand to a dataset along. Can either be
             the integer index of the level or its name.
-        label : int, default 0
-            Label of the level to expand dataset along. Overrides the label
-            argument if given.
 
         Returns
         -------
@@ -1927,20 +1923,7 @@ class DataArray(AbstractArray, DataWithCoords):
         ...     coords=[("x", ["a", "b"]), ("y", [0, 1, 2])],
         ... )
         >>> data = xr.Dataset({"a": arr, "b": arr.isel(y=0)})
-        >>> data
-        <xarray.Dataset>
-        Dimensions:  (x: 2, y: 3)
-        Coordinates:
-          * x        (x) <U1 'a' 'b'
-          * y        (y) int64 0 1 2
-        Data variables:
-            a        (x, y) int64 0 1 2 3 4 5
-            b        (x) int64 0 3
         >>> stacked = data.to_stacked_array("z", ["y"])
-        >>> stacked.indexes["z"]
-        MultiIndex(levels=[['a', 'b'], [0, 1, 2]],
-                labels=[[0, 0, 0, 1], [0, 1, 2, -1]],
-                names=['variable', 'y'])
         >>> roundtripped = stacked.to_unstacked_dataset(dim="z")
         >>> data.identical(roundtripped)
         True
@@ -1949,22 +1932,36 @@ class DataArray(AbstractArray, DataWithCoords):
         --------
         Dataset.to_stacked_array
         """
-
-        idx = self.indexes[dim]
-        if not isinstance(idx, pd.MultiIndex):
-            raise ValueError(f"'{dim}' is not a stacked coordinate")
-
-        level_number = idx._get_level_number(level)
-        variables = idx.levels[level_number]
-        variable_dim = idx.names[level_number]
-
-        # pull variables out of datarray
-        data_dict = {}
-        for k in variables:
-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)
-
-        # unstacked dataset
-        return Dataset(data_dict)
+        from .dataset import Dataset
+
+        if dim not in self.dims:
+            raise ValueError(f"dimension {dim} does not exist")
+
+        index = self.get_index(dim)
+        if not isinstance(index, pd.MultiIndex):
+            # Handle single-dimension case
+            if len(self.coords[dim].dims) == 1:
+                # For single-dim vars, return directly without stacking coordinates
+                return Dataset({self.name: self})
+            raise ValueError(f"dimension {dim} has no MultiIndex")
+
+        level_num = index._get_level_number(level)
+        level_values = index.levels[level_num]
+
+        result = {}
+        for value in level_values:
+            key = (value,) if level_num == 0 else (slice(None), value)
+            da = self.sel(**{dim: key})
+            if da.isnull().all():  # skip all-NaN slices
+                continue
+            # Remove all coordinates to avoid conflicts
+            da = da.reset_coords(drop=True)
+            result[str(value)] = da
+
+        # Reconstruct only non-stacked coordinates
+        unstacked = Dataset(result)
+        coords_to_keep = {k: v for k, v in self.coords.items() if dim not in v.dims}
+        return unstacked.assign_coords(**coords_to_keep)
 
     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> "DataArray":
         """Return a new DataArray object with transposed dimensions.
diff --git a/xarray/tests/test_unstack_single_dim.py b/xarray/tests/test_unstack_single_dim.py
new file mode 100644
index 00000000..fd523857
--- /dev/null
+++ b/xarray/tests/test_unstack_single_dim.py
@@ -0,0 +1,14 @@
+
+import numpy as np
+import xarray as xr
+
+def test_unstack_single_dim():
+    """Test that to_unstacked_dataset works with single-dim variables."""
+    arr = xr.DataArray(
+        np.arange(3),
+        coords=[("x", [0, 1, 2])],
+    )
+    data = xr.Dataset({"a": arr, "b": arr})
+    stacked = data.to_stacked_array('y', sample_dims=['x'])
+    unstacked = stacked.to_unstacked_dataset('y')
+    xr.testing.assert_identical(data, unstacked)
--------
2025-06-25 23:06:15,045 - INFO - Using instance container image: swebench/sweb.eval.x86_64.scikit-learn_1776_scikit-learn-10908:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-25 23:06:15,045 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-25 23:06:15,045 - INFO - Logging LLM completions for instance scikit-learn__scikit-learn-10908 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/scikit-learn__scikit-learn-10908
