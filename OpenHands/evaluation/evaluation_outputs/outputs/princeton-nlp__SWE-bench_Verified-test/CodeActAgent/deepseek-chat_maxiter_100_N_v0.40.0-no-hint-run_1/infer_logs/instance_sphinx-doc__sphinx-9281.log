2025-06-20 16:53:43,860 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_zxvua4qo9ierhrqq_634egmkijx387tjz
2025-06-20 16:56:19,314 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_zxvua4qo9ierhrqq_634egmkijx387tjz] build finished.
2025-06-20 16:56:19,323 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_zxvua4qo9ierhrqq_634egmkijx387tjz] with more generic tag [oh_v0.40.0_zxvua4qo9ierhrqq]
2025-06-20 16:56:19,327 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_zxvua4qo9ierhrqq_634egmkijx387tjz, oh_v0.40.0_zxvua4qo9ierhrqq] built successfully
2025-06-20 16:56:19,349 - INFO - [runtime 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_zxvua4qo9ierhrqq_634egmkijx387tjz
2025-06-20 16:56:19,854 - INFO - [runtime 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] Container started: openhands-runtime-0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8. VSCode URL: None
2025-06-20 16:56:19,854 - INFO - [runtime 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] Waiting for client to become ready at http://localhost:36347...
2025-06-20 16:56:49,961 - INFO - [runtime 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] Runtime is ready.
2025-06-20 16:56:52,552 - INFO - ------------------------------
2025-06-20 16:56:52,552 - INFO - BEGIN Runtime Initialization Fn
2025-06-20 16:56:52,553 - INFO - ------------------------------
2025-06-20 16:56:52,553 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sphinx-doc__sphinx-9281' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-20 16:56:53,198 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:53,199 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-20 16:56:53,832 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:53,832 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-20 16:56:54,470 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:54,481 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-20 16:56:55,119 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=sphinx-doc__sphinx-9281
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:55,120 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-20 16:56:55,760 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:55,761 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-20 16:56:56,400 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sphinx-doc__sphinx__4.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:56,401 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__4.1
2025-06-20 16:56:57,039 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:57,040 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-20 16:56:57,678 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 8ec06e9a1 Merge pull request #9277 from greyli/fix-intl-docs
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:57,679 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-20 16:56:58,320 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:58,321 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-20 16:56:58,960 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 16:56:58,961 - INFO - ------------------------------
2025-06-20 16:56:58,961 - INFO - END Runtime Initialization Fn
2025-06-20 16:56:58,962 - INFO - ------------------------------
2025-06-20 16:56:58,982 - INFO - [runtime 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-20 16:56:58,991 - INFO - Loading user workspace microagents: []
2025-06-20 16:56:58,991 - INFO - [Agent Controller 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] AgentController 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8 - created new state. start_id: 0
2025-06-20 16:56:58,999 - INFO - [Agent Controller 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-20 16:56:59,000 - INFO - Microagent 'gitlab' triggered by keyword 'git'
2025-06-20 16:56:59,001 - INFO - Microagent 'github' triggered by keyword 'github'
2025-06-20 17:14:23,122 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-20 17:14:23,122 - INFO - [Agent Controller 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-20 17:14:23,129 - WARNING - Stopping agent due to traffic control
2025-06-20 17:14:23,130 - INFO - [Agent Controller 0cbce4d7-db5d-493f-958b-b0905bdfa031-4c18da269a741bd8] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-20 17:14:23,181 - INFO - ------------------------------
2025-06-20 17:14:23,182 - INFO - BEGIN Runtime Completion Fn
2025-06-20 17:14:23,182 - INFO - ------------------------------
2025-06-20 17:14:23,182 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/sphinx-doc__sphinx__4.1
2025-06-20 17:14:23,821 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:14:23,821 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-20 17:14:24,452 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:14:24,452 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-20 17:14:25,078 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:14:25,079 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-20 17:14:25,709 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:14:25,709 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-20 17:14:26,362 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:14:26,362 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 8ec06e9a1bd862cd713b9db748e039ccc7b3e15b > patch.diff
2025-06-20 17:14:27,001 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "b4ed3ca0241e",
  "working_dir": "/workspace/sphinx-doc__sphinx__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sphinx-doc__sphinx__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-20 17:14:27,002 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-20 17:14:27,007 - INFO - [Read from /workspace/sphinx-doc__sphinx__4.1/patch.diff is successful.]
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index ec1472e20..8de6b6d4a 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1291,6 +1291,15 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ
         try:
             self.env.app.emit('autodoc-before-process-signature', self.object, False)
             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)
+            
+            # Handle enum default values
+            new_params = []
+            for name, param in sig.parameters.items():
+                if param.default is not param.empty and hasattr(param.default, '__class__') and isinstance(param.default.__class__, enum.EnumMeta):
+                    param = param.replace(default=f"{param.default.__class__.__name__}.{param.default.name}")
+                new_params.append(param)
+            sig = sig.replace(parameters=new_params)
+            
             args = stringify_signature(sig, **kwargs)
         except TypeError as exc:
             logger.warning(__("Failed to get a function signature for %s: %s"),
diff --git a/sphinx/ext/autodoc/preserve_defaults.py b/sphinx/ext/autodoc/preserve_defaults.py
index 3d859fe8e..277610cac 100644
--- a/sphinx/ext/autodoc/preserve_defaults.py
+++ b/sphinx/ext/autodoc/preserve_defaults.py
@@ -27,6 +27,12 @@ class DefaultValue:
         self.name = name
 
     def __repr__(self) -> str:
+        try:
+            obj = eval(self.name)
+            if isinstance(obj, enum.Enum):
+                return f"{obj.__class__.__name__}.{obj.name}"
+        except (NameError, AttributeError):
+            pass
         return self.name
 
 
@@ -63,12 +69,14 @@ def update_defvalue(app: Sphinx, obj: Any, bound_method: bool) -> None:
             parameters = list(sig.parameters.values())
             for i, param in enumerate(parameters):
                 if param.default is not param.empty:
-                    if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):
-                        value = DefaultValue(ast_unparse(defaults.pop(0)))  # type: ignore
-                        parameters[i] = param.replace(default=value)
-                    else:
-                        value = DefaultValue(ast_unparse(kw_defaults.pop(0)))  # type: ignore
-                        parameters[i] = param.replace(default=value)
+                    default_expr = ast_unparse(defaults.pop(0) if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD) else kw_defaults.pop(0))  # type: ignore
+                    try:
+                        default_obj = eval(default_expr)
+                        if isinstance(default_obj, enum.Enum):
+                            default_expr = f"{default_obj.__class__.__name__}.{default_obj.name}"
+                    except (NameError, AttributeError):
+                        pass
+                    parameters[i] = param.replace(default=DefaultValue(default_expr))
             sig = sig.replace(parameters=parameters)
             obj.__signature__ = sig
     except (AttributeError, TypeError):
diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index a415a7074..a2c077a80 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -432,6 +432,18 @@ def safe_getattr(obj: Any, name: str, *defargs: Any) -> Any:
 
 def object_description(object: Any) -> str:
     """A repr() implementation that returns text safe to use in reST context."""
+    if isinstance(object, enum.Enum):
+        return f"{object.__class__.__name__}.{object.name}"
+    try:
+        # Handle both direct enum values and DefaultValue-wrapped enums
+        if hasattr(object, '__class__') and isinstance(object.__class__, enum.EnumMeta):
+            return f"{object.__class__.__name__}.{object.name}"
+        elif hasattr(object, 'name') and '.' in object.name:  # DefaultValue case
+            obj = eval(object.name)
+            if isinstance(obj, enum.Enum):
+                return f"{obj.__class__.__name__}.{obj.name}"
+    except (NameError, AttributeError):
+        pass
     if isinstance(object, dict):
         try:
             sorted_keys = sorted(object)
@@ -740,7 +752,14 @@ def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,
                 arg.write(' = ')
             else:
                 arg.write('=')
-            arg.write(object_description(param.default))
+            default = param.default
+            try:
+                if isinstance(default, enum.Enum) or (hasattr(default, '__class__') and isinstance(default.__class__, enum.EnumMeta)):
+                    arg.write(f"{default.__class__.__name__}.{default.name}")
+                else:
+                    arg.write(object_description(default))
+            except Exception:
+                arg.write(object_description(default))
 
         args.append(arg.getvalue())
         last_kind = param.kind
diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index af6edcae0..9bd260e60 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -8,6 +8,7 @@
     :license: BSD, see LICENSE for details.
 """
 
+import enum
 import sys
 import typing
 from struct import Struct
@@ -285,6 +286,8 @@ def stringify(annotation: Any) -> str:
     """Stringify type annotation object."""
     from sphinx.util import inspect  # lazy loading
 
+    if isinstance(annotation, enum.Enum):
+        return f"{annotation.__class__.__name__}.{annotation.name}"
     if isinstance(annotation, str):
         if annotation.startswith("'") and annotation.endswith("'"):
             # might be a double Forward-ref'ed type.  Go unquoting.

2025-06-20 17:14:27,008 - INFO - ------------------------------
2025-06-20 17:14:27,009 - INFO - END Runtime Completion Fn
2025-06-20 17:14:27,009 - INFO - ------------------------------
2025-06-20 17:14:27,009 - INFO - Got git diff for instance sphinx-doc__sphinx-9281:
--------
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index ec1472e20..8de6b6d4a 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1291,6 +1291,15 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ
         try:
             self.env.app.emit('autodoc-before-process-signature', self.object, False)
             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)
+            
+            # Handle enum default values
+            new_params = []
+            for name, param in sig.parameters.items():
+                if param.default is not param.empty and hasattr(param.default, '__class__') and isinstance(param.default.__class__, enum.EnumMeta):
+                    param = param.replace(default=f"{param.default.__class__.__name__}.{param.default.name}")
+                new_params.append(param)
+            sig = sig.replace(parameters=new_params)
+            
             args = stringify_signature(sig, **kwargs)
         except TypeError as exc:
             logger.warning(__("Failed to get a function signature for %s: %s"),
diff --git a/sphinx/ext/autodoc/preserve_defaults.py b/sphinx/ext/autodoc/preserve_defaults.py
index 3d859fe8e..277610cac 100644
--- a/sphinx/ext/autodoc/preserve_defaults.py
+++ b/sphinx/ext/autodoc/preserve_defaults.py
@@ -27,6 +27,12 @@ class DefaultValue:
         self.name = name
 
     def __repr__(self) -> str:
+        try:
+            obj = eval(self.name)
+            if isinstance(obj, enum.Enum):
+                return f"{obj.__class__.__name__}.{obj.name}"
+        except (NameError, AttributeError):
+            pass
         return self.name
 
 
@@ -63,12 +69,14 @@ def update_defvalue(app: Sphinx, obj: Any, bound_method: bool) -> None:
             parameters = list(sig.parameters.values())
             for i, param in enumerate(parameters):
                 if param.default is not param.empty:
-                    if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):
-                        value = DefaultValue(ast_unparse(defaults.pop(0)))  # type: ignore
-                        parameters[i] = param.replace(default=value)
-                    else:
-                        value = DefaultValue(ast_unparse(kw_defaults.pop(0)))  # type: ignore
-                        parameters[i] = param.replace(default=value)
+                    default_expr = ast_unparse(defaults.pop(0) if param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD) else kw_defaults.pop(0))  # type: ignore
+                    try:
+                        default_obj = eval(default_expr)
+                        if isinstance(default_obj, enum.Enum):
+                            default_expr = f"{default_obj.__class__.__name__}.{default_obj.name}"
+                    except (NameError, AttributeError):
+                        pass
+                    parameters[i] = param.replace(default=DefaultValue(default_expr))
             sig = sig.replace(parameters=parameters)
             obj.__signature__ = sig
     except (AttributeError, TypeError):
diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index a415a7074..a2c077a80 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -432,6 +432,18 @@ def safe_getattr(obj: Any, name: str, *defargs: Any) -> Any:
 
 def object_description(object: Any) -> str:
     """A repr() implementation that returns text safe to use in reST context."""
+    if isinstance(object, enum.Enum):
+        return f"{object.__class__.__name__}.{object.name}"
+    try:
+        # Handle both direct enum values and DefaultValue-wrapped enums
+        if hasattr(object, '__class__') and isinstance(object.__class__, enum.EnumMeta):
+            return f"{object.__class__.__name__}.{object.name}"
+        elif hasattr(object, 'name') and '.' in object.name:  # DefaultValue case
+            obj = eval(object.name)
+            if isinstance(obj, enum.Enum):
+                return f"{obj.__class__.__name__}.{obj.name}"
+    except (NameError, AttributeError):
+        pass
     if isinstance(object, dict):
         try:
             sorted_keys = sorted(object)
@@ -740,7 +752,14 @@ def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,
                 arg.write(' = ')
             else:
                 arg.write('=')
-            arg.write(object_description(param.default))
+            default = param.default
+            try:
+                if isinstance(default, enum.Enum) or (hasattr(default, '__class__') and isinstance(default.__class__, enum.EnumMeta)):
+                    arg.write(f"{default.__class__.__name__}.{default.name}")
+                else:
+                    arg.write(object_description(default))
+            except Exception:
+                arg.write(object_description(default))
 
         args.append(arg.getvalue())
         last_kind = param.kind
diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index af6edcae0..9bd260e60 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -8,6 +8,7 @@
     :license: BSD, see LICENSE for details.
 """
 
+import enum
 import sys
 import typing
 from struct import Struct
@@ -285,6 +286,8 @@ def stringify(annotation: Any) -> str:
     """Stringify type annotation object."""
     from sphinx.util import inspect  # lazy loading
 
+    if isinstance(annotation, enum.Enum):
+        return f"{annotation.__class__.__name__}.{annotation.name}"
     if isinstance(annotation, str):
         if annotation.startswith("'") and annotation.endswith("'"):
             # might be a double Forward-ref'ed type.  Go unquoting.
--------
2025-06-20 17:14:29,101 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-11603:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-20 17:14:29,102 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-20 17:14:29,103 - INFO - Logging LLM completions for instance django__django-11603 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-11603
