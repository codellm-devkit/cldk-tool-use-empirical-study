2025-06-25 20:26:33,614 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_q53ceqg6yhrikijs_634egmkijx387tjz
2025-06-25 20:29:42,036 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_q53ceqg6yhrikijs_634egmkijx387tjz] build finished.
2025-06-25 20:29:42,046 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_q53ceqg6yhrikijs_634egmkijx387tjz] with more generic tag [oh_v0.40.0_q53ceqg6yhrikijs]
2025-06-25 20:29:42,049 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_q53ceqg6yhrikijs_634egmkijx387tjz, oh_v0.40.0_q53ceqg6yhrikijs] built successfully
2025-06-25 20:29:42,071 - INFO - [runtime 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_q53ceqg6yhrikijs_634egmkijx387tjz
2025-06-25 20:29:42,517 - INFO - [runtime 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] Container started: openhands-runtime-1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69. VSCode URL: None
2025-06-25 20:29:42,517 - INFO - [runtime 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] Waiting for client to become ready at http://localhost:31554...
2025-06-25 20:30:18,651 - INFO - [runtime 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] Runtime is ready.
2025-06-25 20:30:20,729 - INFO - ------------------------------
2025-06-25 20:30:20,730 - INFO - BEGIN Runtime Initialization Fn
2025-06-25 20:30:20,731 - INFO - ------------------------------
2025-06-25 20:30:20,731 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=astropy__astropy-13977' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-25 20:30:21,376 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:21,377 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-25 20:30:22,018 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:22,019 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-25 20:30:22,657 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:22,668 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-25 20:30:23,306 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=astropy__astropy-13977
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:23,306 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-25 20:30:23,942 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:23,942 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-25 20:30:24,576 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: astropy__astropy__5.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:24,577 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/astropy__astropy__5.1
2025-06-25 20:30:25,213 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:25,214 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-25 20:30:25,848 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 5250b24425 Merge pull request #14164 from ayshih/grid_performance
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:25,849 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-25 20:30:26,491 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:26,491 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-25 20:30:27,129 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:30:27,129 - INFO - ------------------------------
2025-06-25 20:30:27,130 - INFO - END Runtime Initialization Fn
2025-06-25 20:30:27,130 - INFO - ------------------------------
2025-06-25 20:30:27,142 - INFO - [runtime 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-25 20:30:27,148 - INFO - Loading user workspace microagents: []
2025-06-25 20:30:27,148 - INFO - [Agent Controller 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] AgentController 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69 - created new state. start_id: 0
2025-06-25 20:30:27,152 - INFO - [Agent Controller 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-25 20:30:27,153 - INFO - Microagent 'gitlab' triggered by keyword 'git'
2025-06-25 20:30:27,154 - INFO - Microagent 'github' triggered by keyword 'github'
2025-06-25 20:51:17,155 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-25 20:51:17,155 - INFO - [Agent Controller 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-25 20:51:17,159 - WARNING - Stopping agent due to traffic control
2025-06-25 20:51:17,159 - INFO - [Agent Controller 1bae7ced-6075-4557-b026-aa8a069bfd63-1aaf79394642ca69] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-25 20:51:17,590 - INFO - ------------------------------
2025-06-25 20:51:17,591 - INFO - BEGIN Runtime Completion Fn
2025-06-25 20:51:17,591 - INFO - ------------------------------
2025-06-25 20:51:17,591 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/astropy__astropy__5.1
2025-06-25 20:51:18,228 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:51:18,229 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-25 20:51:18,868 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:51:18,868 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-25 20:51:19,508 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:51:19,509 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-25 20:51:20,148 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:51:20,149 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-25 20:51:20,801 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:51:20,802 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 5250b2442501e6c671c6b380536f1edb352602d1 > patch.diff
2025-06-25 20:51:21,441 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "c8ae2530692a",
  "working_dir": "/workspace/astropy__astropy__5.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/astropy__astropy__5.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:51:21,441 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-25 20:51:21,448 - INFO - [Read from /workspace/astropy__astropy__5.1/patch.diff is successful.]
diff --git a/astropy/units/core.py b/astropy/units/core.py
index 8c3204b8b0..337625daca 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -2601,6 +2601,8 @@ def def_unit(
     return result
 
 
+from .duckarray_handler import handle_duckarray
+
 def _condition_arg(value):
     """
     Validate value is acceptable for conversion purposes.
@@ -2621,8 +2623,17 @@ def _condition_arg(value):
     ValueError
         If value is not as expected
     """
+    # Handle DuckArray cases first
+    duckarray_result = handle_duckarray(value)
+    if duckarray_result is not None:
+        return duckarray_result
+
     if isinstance(value, (np.ndarray, float, int, complex, np.void)):
         return value
+        
+    # Handle other custom array types
+    if hasattr(value, '__array_ufunc__'):
+        return value
 
     avalue = np.array(value)
     if avalue.dtype.kind not in ["i", "f", "c"]:
diff --git a/astropy/units/duckarray_handler.py b/astropy/units/duckarray_handler.py
new file mode 100644
index 0000000000..cd501a4f95
--- /dev/null
+++ b/astropy/units/duckarray_handler.py
@@ -0,0 +1,19 @@
+
+"""Helper functions for handling DuckArray-like objects in astropy."""
+
+import numpy as np
+from astropy.units import Quantity
+
+def handle_duckarray(value):
+    """Process DuckArray-like objects for unit conversion.
+    
+    Args:
+        value: Input value to check
+        
+    Returns:
+        The underlying Quantity if DuckArray-like, otherwise None
+    """
+    if hasattr(value, '__array_ufunc__') and hasattr(value, 'ndarray'):
+        if isinstance(value.ndarray, Quantity):
+            return value.ndarray
+    return None
diff --git a/astropy/units/duckarray_utils.py b/astropy/units/duckarray_utils.py
new file mode 100644
index 0000000000..3040c67275
--- /dev/null
+++ b/astropy/units/duckarray_utils.py
@@ -0,0 +1,20 @@
+
+"""Utilities for handling DuckArray-like objects in astropy."""
+
+import numpy as np
+from astropy.units import Quantity
+
+def process_duckarray(input_):
+    """Process DuckArray-like objects for unit conversion.
+    
+    Args:
+        input_: Input value to check
+        
+    Returns:
+        Tuple of (processed_input, should_return_not_implemented)
+    """
+    if hasattr(input_, 'ndarray') and hasattr(input_, '__array_ufunc__'):
+        if isinstance(input_.ndarray, Quantity):
+            return input_.ndarray, False
+        return None, True
+    return input_, False
diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..3b8c004efd 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -605,6 +605,10 @@ class Quantity(np.ndarray):
         if "info" in obj.__dict__:
             self.info = obj.info
 
+    def _is_compatible_array(self, input_):
+        """Check if input is a compatible array type that we can handle."""
+        return isinstance(input_, (np.ndarray, float, int, complex, type(self)))
+
     def __array_wrap__(self, obj, context=None):
         if context is None:
             # Methods like .squeeze() created a new `ndarray` and then call
@@ -636,6 +640,12 @@ class Quantity(np.ndarray):
         result : `~astropy.units.Quantity`
             Results of the ufunc, with the unit set properly.
         """
+        # First check for custom array types in inputs
+        for input_ in inputs:
+            if (hasattr(input_, '__array_ufunc__') and 
+                not isinstance(input_, (np.ndarray, float, int, complex, type(self)))):
+                return NotImplemented
+
         # Determine required conversion functions -- to bring the unit of the
         # input to that expected (e.g., radian for np.sin), or to get
         # consistent units between two inputs (e.g., in np.add) --
@@ -666,8 +676,23 @@ class Quantity(np.ndarray):
         # Same for inputs, but here also convert if necessary.
         arrays = []
         for input_, converter in zip(inputs, converters):
+            # Handle custom array types before conversion
+            if hasattr(input_, '__array_ufunc__'):
+                if not isinstance(input_, (np.ndarray, float, int, complex, u.Quantity)):
+                    if not hasattr(input_, 'ndarray'):  # DuckArray check
+                        return NotImplemented
+                if isinstance(input_, u.Quantity) and not input_.unit.is_equivalent(self.unit):
+                    return NotImplemented
+            
+            # Skip conversion for custom array types
+            if hasattr(input_, '__array_ufunc__') and not isinstance(input_, (np.ndarray, float, int, complex)):
+                return NotImplemented
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+
+            try:
+                arrays.append(converter(input_) if converter else input_)
+            except ValueError:
+                return NotImplemented
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/astropy/units/quantity_helper/converters.py b/astropy/units/quantity_helper/converters.py
index 47b40c2072..0ccb5ff468 100644
--- a/astropy/units/quantity_helper/converters.py
+++ b/astropy/units/quantity_helper/converters.py
@@ -176,8 +176,14 @@ def converters_and_unit(function, method, *args):
         # Find out the units of the arguments passed to the ufunc; usually,
         # at least one is a quantity, but for two-argument ufuncs, the second
         # could also be a Numpy array, etc.  These are given unit=None.
+        
+        # Check for custom array types before processing units
+        if any(hasattr(arg, '__array_ufunc__') and not isinstance(arg, (np.ndarray, float, int, complex)) for arg in args):
+            return [None]*len(args), None
+            
         units = [getattr(arg, "unit", None) for arg in args]
 
+
         # Determine possible conversion functions, and the result unit.
         converters, result_unit = ufunc_helper(function, *units)
 

2025-06-25 20:51:21,449 - INFO - ------------------------------
2025-06-25 20:51:21,449 - INFO - END Runtime Completion Fn
2025-06-25 20:51:21,449 - INFO - ------------------------------
2025-06-25 20:51:21,450 - INFO - Got git diff for instance astropy__astropy-13977:
--------
diff --git a/astropy/units/core.py b/astropy/units/core.py
index 8c3204b8b0..337625daca 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -2601,6 +2601,8 @@ def def_unit(
     return result
 
 
+from .duckarray_handler import handle_duckarray
+
 def _condition_arg(value):
     """
     Validate value is acceptable for conversion purposes.
@@ -2621,8 +2623,17 @@ def _condition_arg(value):
     ValueError
         If value is not as expected
     """
+    # Handle DuckArray cases first
+    duckarray_result = handle_duckarray(value)
+    if duckarray_result is not None:
+        return duckarray_result
+
     if isinstance(value, (np.ndarray, float, int, complex, np.void)):
         return value
+        
+    # Handle other custom array types
+    if hasattr(value, '__array_ufunc__'):
+        return value
 
     avalue = np.array(value)
     if avalue.dtype.kind not in ["i", "f", "c"]:
diff --git a/astropy/units/duckarray_handler.py b/astropy/units/duckarray_handler.py
new file mode 100644
index 0000000000..cd501a4f95
--- /dev/null
+++ b/astropy/units/duckarray_handler.py
@@ -0,0 +1,19 @@
+
+"""Helper functions for handling DuckArray-like objects in astropy."""
+
+import numpy as np
+from astropy.units import Quantity
+
+def handle_duckarray(value):
+    """Process DuckArray-like objects for unit conversion.
+    
+    Args:
+        value: Input value to check
+        
+    Returns:
+        The underlying Quantity if DuckArray-like, otherwise None
+    """
+    if hasattr(value, '__array_ufunc__') and hasattr(value, 'ndarray'):
+        if isinstance(value.ndarray, Quantity):
+            return value.ndarray
+    return None
diff --git a/astropy/units/duckarray_utils.py b/astropy/units/duckarray_utils.py
new file mode 100644
index 0000000000..3040c67275
--- /dev/null
+++ b/astropy/units/duckarray_utils.py
@@ -0,0 +1,20 @@
+
+"""Utilities for handling DuckArray-like objects in astropy."""
+
+import numpy as np
+from astropy.units import Quantity
+
+def process_duckarray(input_):
+    """Process DuckArray-like objects for unit conversion.
+    
+    Args:
+        input_: Input value to check
+        
+    Returns:
+        Tuple of (processed_input, should_return_not_implemented)
+    """
+    if hasattr(input_, 'ndarray') and hasattr(input_, '__array_ufunc__'):
+        if isinstance(input_.ndarray, Quantity):
+            return input_.ndarray, False
+        return None, True
+    return input_, False
diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..3b8c004efd 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -605,6 +605,10 @@ class Quantity(np.ndarray):
         if "info" in obj.__dict__:
             self.info = obj.info
 
+    def _is_compatible_array(self, input_):
+        """Check if input is a compatible array type that we can handle."""
+        return isinstance(input_, (np.ndarray, float, int, complex, type(self)))
+
     def __array_wrap__(self, obj, context=None):
         if context is None:
             # Methods like .squeeze() created a new `ndarray` and then call
@@ -636,6 +640,12 @@ class Quantity(np.ndarray):
         result : `~astropy.units.Quantity`
             Results of the ufunc, with the unit set properly.
         """
+        # First check for custom array types in inputs
+        for input_ in inputs:
+            if (hasattr(input_, '__array_ufunc__') and 
+                not isinstance(input_, (np.ndarray, float, int, complex, type(self)))):
+                return NotImplemented
+
         # Determine required conversion functions -- to bring the unit of the
         # input to that expected (e.g., radian for np.sin), or to get
         # consistent units between two inputs (e.g., in np.add) --
@@ -666,8 +676,23 @@ class Quantity(np.ndarray):
         # Same for inputs, but here also convert if necessary.
         arrays = []
         for input_, converter in zip(inputs, converters):
+            # Handle custom array types before conversion
+            if hasattr(input_, '__array_ufunc__'):
+                if not isinstance(input_, (np.ndarray, float, int, complex, u.Quantity)):
+                    if not hasattr(input_, 'ndarray'):  # DuckArray check
+                        return NotImplemented
+                if isinstance(input_, u.Quantity) and not input_.unit.is_equivalent(self.unit):
+                    return NotImplemented
+            
+            # Skip conversion for custom array types
+            if hasattr(input_, '__array_ufunc__') and not isinstance(input_, (np.ndarray, float, int, complex)):
+                return NotImplemented
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+
+            try:
+                arrays.append(converter(input_) if converter else input_)
+            except ValueError:
+                return NotImplemented
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/astropy/units/quantity_helper/converters.py b/astropy/units/quantity_helper/converters.py
index 47b40c2072..0ccb5ff468 100644
--- a/astropy/units/quantity_helper/converters.py
+++ b/astropy/units/quantity_helper/converters.py
@@ -176,8 +176,14 @@ def converters_and_unit(function, method, *args):
         # Find out the units of the arguments passed to the ufunc; usually,
         # at least one is a quantity, but for two-argument ufuncs, the second
         # could also be a Numpy array, etc.  These are given unit=None.
+        
+        # Check for custom array types before processing units
+        if any(hasattr(arg, '__array_ufunc__') and not isinstance(arg, (np.ndarray, float, int, complex)) for arg in args):
+            return [None]*len(args), None
+            
         units = [getattr(arg, "unit", None) for arg in args]
 
+
         # Determine possible conversion functions, and the result unit.
         converters, result_unit = ufunc_helper(function, *units)
 
--------
2025-06-25 20:51:23,382 - INFO - Using instance container image: swebench/sweb.eval.x86_64.pytest-dev_1776_pytest-6197:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-25 20:51:23,382 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-25 20:51:23,383 - INFO - Logging LLM completions for instance pytest-dev__pytest-6197 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/pytest-dev__pytest-6197
