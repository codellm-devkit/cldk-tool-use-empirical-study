2025-06-26 17:05:27,456 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_sqxzmnk6tyf3dz2s_634egmkijx387tjz
2025-06-26 17:10:11,010 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_sqxzmnk6tyf3dz2s_634egmkijx387tjz] build finished.
2025-06-26 17:10:11,017 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_sqxzmnk6tyf3dz2s_634egmkijx387tjz] with more generic tag [oh_v0.40.0_sqxzmnk6tyf3dz2s]
2025-06-26 17:10:11,021 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_sqxzmnk6tyf3dz2s_634egmkijx387tjz, oh_v0.40.0_sqxzmnk6tyf3dz2s] built successfully
2025-06-26 17:10:11,032 - INFO - [runtime a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_sqxzmnk6tyf3dz2s_634egmkijx387tjz
2025-06-26 17:10:12,287 - INFO - [runtime a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] Container started: openhands-runtime-a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29. VSCode URL: None
2025-06-26 17:10:12,288 - INFO - [runtime a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] Waiting for client to become ready at http://localhost:37808...
2025-06-26 17:10:46,509 - INFO - [runtime a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] Runtime is ready.
2025-06-26 17:10:49,090 - INFO - ------------------------------
2025-06-26 17:10:49,091 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 17:10:49,091 - INFO - ------------------------------
2025-06-26 17:10:49,092 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=matplotlib__matplotlib-23299' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 17:10:49,732 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:49,733 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 17:10:50,375 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:50,376 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 17:10:51,016 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:51,029 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 17:10:51,668 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=matplotlib__matplotlib-23299
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:51,668 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 17:10:52,309 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:52,310 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 17:10:53,453 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: matplotlib__matplotlib__3.5
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:53,454 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/matplotlib__matplotlib__3.5
2025-06-26 17:10:54,092 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:54,093 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 17:10:55,237 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 3eadeacc06 Merge pull request #23347 from anntzer/gtkcairo
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:55,238 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 17:10:55,881 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:55,882 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 17:10:56,520 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:10:56,521 - INFO - ------------------------------
2025-06-26 17:10:56,522 - INFO - END Runtime Initialization Fn
2025-06-26 17:10:56,522 - INFO - ------------------------------
2025-06-26 17:10:56,543 - INFO - [runtime a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 17:10:56,549 - INFO - Loading user workspace microagents: []
2025-06-26 17:10:56,550 - INFO - [Agent Controller a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] AgentController a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29 - created new state. start_id: 0
2025-06-26 17:10:56,556 - INFO - [Agent Controller a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 17:32:07,158 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-26 17:32:07,159 - INFO - [Agent Controller a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-26 17:32:07,165 - WARNING - Stopping agent due to traffic control
2025-06-26 17:32:07,166 - INFO - [Agent Controller a009401e-9677-40f2-b86c-a95502409cd7-f30e14dbd70f6b29] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-26 17:32:08,000 - INFO - ------------------------------
2025-06-26 17:32:08,000 - INFO - BEGIN Runtime Completion Fn
2025-06-26 17:32:08,000 - INFO - ------------------------------
2025-06-26 17:32:08,000 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/matplotlib__matplotlib__3.5
2025-06-26 17:32:08,640 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:32:08,641 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 17:32:09,280 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:32:09,280 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 17:32:09,922 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:32:09,923 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 17:32:11,071 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:32:11,071 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 17:32:11,722 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:32:11,749 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 3eadeacc06c9f2ddcdac6ae39819faa9fbee9e39 > patch.diff
2025-06-26 17:32:12,390 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "98567e049450",
  "working_dir": "/workspace/matplotlib__matplotlib__3.5",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/matplotlib__matplotlib__3.5]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:32:12,390 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 17:32:12,394 - INFO - [Read from /workspace/matplotlib__matplotlib__3.5/patch.diff is successful.]
diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index c268a56724..fee060785b 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1095,7 +1095,18 @@ def rc_context(rc=None, fname=None):
             rcParams.update(rc)
         yield
     finally:
-        dict.update(rcParams, orig)  # Revert to the original rcs.
+        current_backend = rcParams['backend']
+        # Preserve interactive state
+        interactive_state = rcParams['interactive']
+        # Only restore non-backend, non-interactive parameters
+        filtered_orig = {k:v for k,v in orig.items() 
+                        if k not in ['backend', 'interactive']}
+        dict.update(rcParams, filtered_orig)
+        # Restore backend only if changed
+        if current_backend != orig['backend']:
+            rcParams['backend'] = orig['backend']
+        # Always restore interactive state
+        rcParams['interactive'] = interactive_state
 
 
 def use(backend, *, force=True):
@@ -1169,14 +1180,34 @@ if os.environ.get('MPLBACKEND'):
 
 def get_backend():
     """
-    Return the name of the current backend.
+    Return the name of the current backend without affecting figures.
+    This version completely avoids any backend initialization.
 
     See Also
     --------
     matplotlib.use
     """
-    return rcParams['backend']
-
+    from matplotlib._pylab_helpers import Gcf
+    try:
+        Gcf.protect_figures()
+        return rcParams['backend']
+    finally:
+        Gcf.unprotect_figures()
+
+
+_backend_operation_lock = False
+
+def _protect_figures_during_backend_ops():
+    """Context manager to prevent figure clearing during backend operations"""
+    global _backend_operation_lock
+    class Protector:
+        def __enter__(self):
+            global _backend_operation_lock
+            _backend_operation_lock = True
+        def __exit__(self, *args):
+            global _backend_operation_lock
+            _backend_operation_lock = False
+    return Protector()
 
 def interactive(b):
     """
diff --git a/lib/matplotlib/_pylab_helpers.py b/lib/matplotlib/_pylab_helpers.py
index 24fcb81fc9..63b4073f79 100644
--- a/lib/matplotlib/_pylab_helpers.py
+++ b/lib/matplotlib/_pylab_helpers.py
@@ -30,6 +30,34 @@ class Gcf:
     """
 
     figs = OrderedDict()
+    _protection_count = 0
+
+    @classmethod
+    def protect_figures(cls):
+        """Enable figure protection to prevent modification."""
+        cls._protection_count += 1
+
+    @classmethod
+    def unprotect_figures(cls):
+        """Disable figure protection."""
+        cls._protection_count = max(0, cls._protection_count - 1)
+
+    @classmethod
+    def figures_protected(cls):
+        """Return whether figures are currently protected."""
+        return cls._protection_count > 0
+
+    @classmethod
+    def _should_modify_figs(cls):
+        from matplotlib import _backend_operation_lock
+        from matplotlib.pyplot import isinteractive
+        # Don't modify figures if:
+        # 1. Backend operation is locked OR
+        # 2. Figures are protected OR 
+        # 3. We're in interactive mode
+        return (not _backend_operation_lock 
+                and not cls.figures_protected()
+                and not isinteractive())
 
     @classmethod
     def get_fig_manager(cls, num):
@@ -53,6 +81,10 @@ class Gcf:
         It is recommended to pass a manager instance, to avoid confusion when
         two managers share the same number.
         """
+        from matplotlib import _backend_operation_lock
+        if _backend_operation_lock or not cls._should_modify_figs():
+            return
+            
         if all(hasattr(num, attr) for attr in ["num", "destroy"]):
             manager = num
             if cls.figs.get(manager.num) is manager:
@@ -82,6 +114,9 @@ class Gcf:
     @classmethod
     def destroy_all(cls):
         """Destroy all figures."""
+        if not cls._should_modify_figs():
+            return
+            
         # Reimport gc in case the module globals have already been removed
         # during interpreter shutdown.
         import gc
@@ -127,8 +162,12 @@ class Gcf:
     @classmethod
     def set_active(cls, manager):
         """Make *manager* the active manager."""
-        cls.figs[manager.num] = manager
-        cls.figs.move_to_end(manager.num)
+        if not hasattr(cls, '_figures_protected'):
+            cls._figures_protected = False
+            
+        if not cls._figures_protected:
+            cls.figs[manager.num] = manager
+            cls.figs.move_to_end(manager.num)
 
     @classmethod
     def draw_all(cls, force=False):

2025-06-26 17:32:12,395 - INFO - ------------------------------
2025-06-26 17:32:12,395 - INFO - END Runtime Completion Fn
2025-06-26 17:32:12,395 - INFO - ------------------------------
2025-06-26 17:32:12,395 - INFO - Got git diff for instance matplotlib__matplotlib-23299:
--------
diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index c268a56724..fee060785b 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1095,7 +1095,18 @@ def rc_context(rc=None, fname=None):
             rcParams.update(rc)
         yield
     finally:
-        dict.update(rcParams, orig)  # Revert to the original rcs.
+        current_backend = rcParams['backend']
+        # Preserve interactive state
+        interactive_state = rcParams['interactive']
+        # Only restore non-backend, non-interactive parameters
+        filtered_orig = {k:v for k,v in orig.items() 
+                        if k not in ['backend', 'interactive']}
+        dict.update(rcParams, filtered_orig)
+        # Restore backend only if changed
+        if current_backend != orig['backend']:
+            rcParams['backend'] = orig['backend']
+        # Always restore interactive state
+        rcParams['interactive'] = interactive_state
 
 
 def use(backend, *, force=True):
@@ -1169,14 +1180,34 @@ if os.environ.get('MPLBACKEND'):
 
 def get_backend():
     """
-    Return the name of the current backend.
+    Return the name of the current backend without affecting figures.
+    This version completely avoids any backend initialization.
 
     See Also
     --------
     matplotlib.use
     """
-    return rcParams['backend']
-
+    from matplotlib._pylab_helpers import Gcf
+    try:
+        Gcf.protect_figures()
+        return rcParams['backend']
+    finally:
+        Gcf.unprotect_figures()
+
+
+_backend_operation_lock = False
+
+def _protect_figures_during_backend_ops():
+    """Context manager to prevent figure clearing during backend operations"""
+    global _backend_operation_lock
+    class Protector:
+        def __enter__(self):
+            global _backend_operation_lock
+            _backend_operation_lock = True
+        def __exit__(self, *args):
+            global _backend_operation_lock
+            _backend_operation_lock = False
+    return Protector()
 
 def interactive(b):
     """
diff --git a/lib/matplotlib/_pylab_helpers.py b/lib/matplotlib/_pylab_helpers.py
index 24fcb81fc9..63b4073f79 100644
--- a/lib/matplotlib/_pylab_helpers.py
+++ b/lib/matplotlib/_pylab_helpers.py
@@ -30,6 +30,34 @@ class Gcf:
     """
 
     figs = OrderedDict()
+    _protection_count = 0
+
+    @classmethod
+    def protect_figures(cls):
+        """Enable figure protection to prevent modification."""
+        cls._protection_count += 1
+
+    @classmethod
+    def unprotect_figures(cls):
+        """Disable figure protection."""
+        cls._protection_count = max(0, cls._protection_count - 1)
+
+    @classmethod
+    def figures_protected(cls):
+        """Return whether figures are currently protected."""
+        return cls._protection_count > 0
+
+    @classmethod
+    def _should_modify_figs(cls):
+        from matplotlib import _backend_operation_lock
+        from matplotlib.pyplot import isinteractive
+        # Don't modify figures if:
+        # 1. Backend operation is locked OR
+        # 2. Figures are protected OR 
+        # 3. We're in interactive mode
+        return (not _backend_operation_lock 
+                and not cls.figures_protected()
+                and not isinteractive())
 
     @classmethod
     def get_fig_manager(cls, num):
@@ -53,6 +81,10 @@ class Gcf:
         It is recommended to pass a manager instance, to avoid confusion when
         two managers share the same number.
         """
+        from matplotlib import _backend_operation_lock
+        if _backend_operation_lock or not cls._should_modify_figs():
+            return
+            
         if all(hasattr(num, attr) for attr in ["num", "destroy"]):
             manager = num
             if cls.figs.get(manager.num) is manager:
@@ -82,6 +114,9 @@ class Gcf:
     @classmethod
     def destroy_all(cls):
         """Destroy all figures."""
+        if not cls._should_modify_figs():
+            return
+            
         # Reimport gc in case the module globals have already been removed
         # during interpreter shutdown.
         import gc
@@ -127,8 +162,12 @@ class Gcf:
     @classmethod
     def set_active(cls, manager):
         """Make *manager* the active manager."""
-        cls.figs[manager.num] = manager
-        cls.figs.move_to_end(manager.num)
+        if not hasattr(cls, '_figures_protected'):
+            cls._figures_protected = False
+            
+        if not cls._figures_protected:
+            cls.figs[manager.num] = manager
+            cls.figs.move_to_end(manager.num)
 
     @classmethod
     def draw_all(cls, force=False):
--------
2025-06-26 17:32:14,793 - INFO - Using instance container image: swebench/sweb.eval.x86_64.pytest-dev_1776_pytest-7521:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 17:32:14,793 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 17:32:14,793 - INFO - Logging LLM completions for instance pytest-dev__pytest-7521 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/pytest-dev__pytest-7521
