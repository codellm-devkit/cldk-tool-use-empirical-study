2025-06-25 20:28:39,577 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7qoevmcr96jfp40t_634egmkijx387tjz
2025-06-25 20:31:37,586 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7qoevmcr96jfp40t_634egmkijx387tjz] build finished.
2025-06-25 20:31:37,596 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7qoevmcr96jfp40t_634egmkijx387tjz] with more generic tag [oh_v0.40.0_7qoevmcr96jfp40t]
2025-06-25 20:31:37,599 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_7qoevmcr96jfp40t_634egmkijx387tjz, oh_v0.40.0_7qoevmcr96jfp40t] built successfully
2025-06-25 20:31:37,619 - INFO - [runtime 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7qoevmcr96jfp40t_634egmkijx387tjz
2025-06-25 20:31:38,154 - INFO - [runtime 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Container started: openhands-runtime-0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977. VSCode URL: None
2025-06-25 20:31:38,155 - INFO - [runtime 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Waiting for client to become ready at http://localhost:35033...
2025-06-25 20:32:08,268 - INFO - [runtime 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Runtime is ready.
2025-06-25 20:32:10,852 - INFO - ------------------------------
2025-06-25 20:32:10,853 - INFO - BEGIN Runtime Initialization Fn
2025-06-25 20:32:10,853 - INFO - ------------------------------
2025-06-25 20:32:10,854 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pytest-dev__pytest-7571' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-25 20:32:11,499 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:11,499 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-25 20:32:12,140 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:12,141 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-25 20:32:12,780 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:12,793 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-25 20:32:13,431 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=pytest-dev__pytest-7571
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:13,432 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-25 20:32:14,075 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:14,076 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-25 20:32:14,715 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pytest-dev__pytest__6.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:14,716 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pytest-dev__pytest__6.0
2025-06-25 20:32:15,355 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:15,356 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-25 20:32:15,996 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 422685d0b Merge pull request #7567 from bluetech/pylint-callable-2-space
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:15,997 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-25 20:32:16,638 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:16,639 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-25 20:32:17,278 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:32:17,279 - INFO - ------------------------------
2025-06-25 20:32:17,279 - INFO - END Runtime Initialization Fn
2025-06-25 20:32:17,280 - INFO - ------------------------------
2025-06-25 20:32:17,300 - INFO - [runtime 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-25 20:32:17,308 - INFO - Loading user workspace microagents: []
2025-06-25 20:32:17,309 - INFO - [Agent Controller 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] AgentController 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977 - created new state. start_id: 0
2025-06-25 20:32:17,316 - INFO - [Agent Controller 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-25 20:33:53,979 - INFO - [Agent Controller 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-25 20:33:53,983 - INFO - [Agent Controller 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-25 20:56:10,825 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-25 20:56:10,825 - INFO - [Agent Controller 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-25 20:56:10,830 - WARNING - Stopping agent due to traffic control
2025-06-25 20:56:10,831 - INFO - [Agent Controller 0ceb8be0-4233-4853-be49-04bd83b8d8d7-cc72d6f22dcb8977] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-25 20:56:10,980 - INFO - ------------------------------
2025-06-25 20:56:10,980 - INFO - BEGIN Runtime Completion Fn
2025-06-25 20:56:10,980 - INFO - ------------------------------
2025-06-25 20:56:10,980 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pytest-dev__pytest__6.0
2025-06-25 20:56:11,618 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:56:11,619 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-25 20:56:12,258 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:56:12,259 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-25 20:56:12,899 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:56:12,900 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-25 20:56:13,539 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:56:13,540 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-25 20:56:14,193 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:56:14,194 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 422685d0bdc110547535036c1ff398b5e1c44145 > patch.diff
2025-06-25 20:56:14,834 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "94e494aa30ac",
  "working_dir": "/workspace/pytest-dev__pytest__6.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pytest-dev__pytest__6.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 20:56:14,834 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-25 20:56:14,840 - INFO - [Read from /workspace/pytest-dev__pytest__6.0/patch.diff is successful.]
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index 11031f2f2..0e955569d 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -319,6 +319,7 @@ class LogCaptureHandler(logging.StreamHandler):
         """Creates a new log handler."""
         super().__init__(StringIO())
         self.records = []  # type: List[logging.LogRecord]
+        self.setLevel(logging.NOTSET)  # Always start with NOTSET level
 
     def emit(self, record: logging.LogRecord) -> None:
         """Keep the log records in a list in addition to the log text."""
@@ -346,6 +347,8 @@ class LogCaptureFixture:
         self._item = item
         # dict of log name -> log level
         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]
+        # store original handler level
+        self._initial_handler_level = self.handler.level
 
     def _finalize(self) -> None:
         """Finalizes the fixture.
@@ -356,6 +359,10 @@ class LogCaptureFixture:
         for logger_name, level in self._initial_logger_levels.items():
             logger = logging.getLogger(logger_name)
             logger.setLevel(level)
+        # reset handler to NOTSET and clear records
+        self.handler.setLevel(logging.NOTSET)
+        self.handler.reset()
+        self._initial_logger_levels.clear()
 
     @property
     def handler(self) -> LogCaptureHandler:
@@ -434,6 +441,9 @@ class LogCaptureFixture:
         # save the original log-level to restore it during teardown
         self._initial_logger_levels.setdefault(logger, logger_obj.level)
         logger_obj.setLevel(level)
+        # Only store handler level if we haven't already
+        if not hasattr(self.handler, '_original_level'):
+            self.handler._original_level = self.handler.level
         self.handler.setLevel(level)
 
     @contextmanager
@@ -469,10 +479,25 @@ def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:
     * caplog.records         -> list of logging.LogRecord instances
     * caplog.record_tuples   -> list of (logger_name, level, message) tuples
     * caplog.clear()         -> clear captured records and formatted log output string
+
+    Each test gets a fresh handler instance to ensure isolation.
+    """
+    # Initialize fresh handler and records for this test
+    request.node._store[caplog_handler_key] = LogCaptureHandler()
+    request.node._store[caplog_records_key] = {"setup": [], "call": [], "teardown": []}
+
+    Each test gets a fresh handler instance to ensure isolation.
+    """
+    # Create new handler for this test
+    request.node._store[caplog_handler_key] = LogCaptureHandler()
+    request.node._store[caplog_records_key] = {"setup": [], "call": [], "teardown": []}
+    * caplog.clear()         -> clear captured records and formatted log output string
     """
     result = LogCaptureFixture(request.node)
-    yield result
-    result._finalize()
+    try:
+        yield result
+    finally:
+        result._finalize()
 
 
 def get_log_level_for_setting(config: Config, *setting_names: str) -> Optional[int]:
diff --git a/test_caplog_fix.py b/test_caplog_fix.py
new file mode 100644
index 000000000..bd49e1167
--- /dev/null
+++ b/test_caplog_fix.py
@@ -0,0 +1,9 @@
+
+import pytest
+
+def test_foo(caplog):
+    caplog.set_level(42)
+
+def test_bar(caplog):
+    assert caplog.handler.level == 0
+

2025-06-25 20:56:14,840 - INFO - ------------------------------
2025-06-25 20:56:14,841 - INFO - END Runtime Completion Fn
2025-06-25 20:56:14,841 - INFO - ------------------------------
2025-06-25 20:56:14,842 - INFO - Got git diff for instance pytest-dev__pytest-7571:
--------
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index 11031f2f2..0e955569d 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -319,6 +319,7 @@ class LogCaptureHandler(logging.StreamHandler):
         """Creates a new log handler."""
         super().__init__(StringIO())
         self.records = []  # type: List[logging.LogRecord]
+        self.setLevel(logging.NOTSET)  # Always start with NOTSET level
 
     def emit(self, record: logging.LogRecord) -> None:
         """Keep the log records in a list in addition to the log text."""
@@ -346,6 +347,8 @@ class LogCaptureFixture:
         self._item = item
         # dict of log name -> log level
         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]
+        # store original handler level
+        self._initial_handler_level = self.handler.level
 
     def _finalize(self) -> None:
         """Finalizes the fixture.
@@ -356,6 +359,10 @@ class LogCaptureFixture:
         for logger_name, level in self._initial_logger_levels.items():
             logger = logging.getLogger(logger_name)
             logger.setLevel(level)
+        # reset handler to NOTSET and clear records
+        self.handler.setLevel(logging.NOTSET)
+        self.handler.reset()
+        self._initial_logger_levels.clear()
 
     @property
     def handler(self) -> LogCaptureHandler:
@@ -434,6 +441,9 @@ class LogCaptureFixture:
         # save the original log-level to restore it during teardown
         self._initial_logger_levels.setdefault(logger, logger_obj.level)
         logger_obj.setLevel(level)
+        # Only store handler level if we haven't already
+        if not hasattr(self.handler, '_original_level'):
+            self.handler._original_level = self.handler.level
         self.handler.setLevel(level)
 
     @contextmanager
@@ -469,10 +479,25 @@ def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:
     * caplog.records         -> list of logging.LogRecord instances
     * caplog.record_tuples   -> list of (logger_name, level, message) tuples
     * caplog.clear()         -> clear captured records and formatted log output string
+
+    Each test gets a fresh handler instance to ensure isolation.
+    """
+    # Initialize fresh handler and records for this test
+    request.node._store[caplog_handler_key] = LogCaptureHandler()
+    request.node._store[caplog_records_key] = {"setup": [], "call": [], "teardown": []}
+
+    Each test gets a fresh handler instance to ensure isolation.
+    """
+    # Create new handler for this test
+    request.node._store[caplog_handler_key] = LogCaptureHandler()
+    request.node._store[caplog_records_key] = {"setup": [], "call": [], "teardown": []}
+    * caplog.clear()         -> clear captured records and formatted log output string
     """
     result = LogCaptureFixture(request.node)
-    yield result
-    result._finalize()
+    try:
+        yield result
+    finally:
+        result._finalize()
 
 
 def get_log_level_for_setting(config: Config, *setting_names: str) -> Optional[int]:
diff --git a/test_caplog_fix.py b/test_caplog_fix.py
new file mode 100644
index 000000000..bd49e1167
--- /dev/null
+++ b/test_caplog_fix.py
@@ -0,0 +1,9 @@
+
+import pytest
+
+def test_foo(caplog):
+    caplog.set_level(42)
+
+def test_bar(caplog):
+    assert caplog.handler.level == 0
+
--------
2025-06-25 20:56:16,949 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-14349:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-25 20:56:16,949 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-25 20:56:16,950 - INFO - Logging LLM completions for instance django__django-14349 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-14349
