2025-06-26 20:00:29,052 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kc1ygcfpsw9ilb22_634egmkijx387tjz
2025-06-26 20:03:20,489 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kc1ygcfpsw9ilb22_634egmkijx387tjz] build finished.
2025-06-26 20:03:20,493 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kc1ygcfpsw9ilb22_634egmkijx387tjz] with more generic tag [oh_v0.40.0_kc1ygcfpsw9ilb22]
2025-06-26 20:03:20,495 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_kc1ygcfpsw9ilb22_634egmkijx387tjz, oh_v0.40.0_kc1ygcfpsw9ilb22] built successfully
2025-06-26 20:03:20,504 - INFO - [runtime 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kc1ygcfpsw9ilb22_634egmkijx387tjz
2025-06-26 20:03:20,901 - INFO - [runtime 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] Container started: openhands-runtime-866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5. VSCode URL: None
2025-06-26 20:03:20,901 - INFO - [runtime 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] Waiting for client to become ready at http://localhost:32741...
2025-06-26 20:03:53,010 - INFO - [runtime 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] Runtime is ready.
2025-06-26 20:03:55,575 - INFO - ------------------------------
2025-06-26 20:03:55,575 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 20:03:55,576 - INFO - ------------------------------
2025-06-26 20:03:55,576 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=psf__requests-1921' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 20:03:56,220 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:03:56,221 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 20:03:56,861 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:03:56,862 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 20:03:57,501 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:03:57,515 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 20:03:58,154 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=psf__requests-1921
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:03:58,155 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 20:03:58,792 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:03:58,793 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 20:03:59,433 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: psf__requests__2.3
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:03:59,434 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/psf__requests__2.3
2025-06-26 20:04:00,073 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:04:00,074 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 20:04:00,712 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 3c88e520 Merge pull request #1918 from zackw/response-is-redirect
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:04:00,713 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 20:04:01,355 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:04:01,356 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 20:04:01,994 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:04:01,995 - INFO - ------------------------------
2025-06-26 20:04:01,995 - INFO - END Runtime Initialization Fn
2025-06-26 20:04:01,995 - INFO - ------------------------------
2025-06-26 20:04:02,017 - INFO - [runtime 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 20:04:02,021 - INFO - Loading user workspace microagents: []
2025-06-26 20:04:02,022 - INFO - [Agent Controller 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] AgentController 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5 - created new state. start_id: 0
2025-06-26 20:04:02,028 - INFO - [Agent Controller 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 20:24:00,761 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-26 20:24:00,761 - INFO - [Agent Controller 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-26 20:24:00,766 - WARNING - Stopping agent due to traffic control
2025-06-26 20:24:00,767 - INFO - [Agent Controller 866c6d27-3210-462e-9cd8-4aa81848026d-ac7c3879cacbdce5] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-26 20:24:01,358 - INFO - ------------------------------
2025-06-26 20:24:01,358 - INFO - BEGIN Runtime Completion Fn
2025-06-26 20:24:01,358 - INFO - ------------------------------
2025-06-26 20:24:01,359 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/psf__requests__2.3
2025-06-26 20:24:01,999 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:24:02,000 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 20:24:02,640 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:24:02,640 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 20:24:03,280 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:24:03,281 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 20:24:03,923 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:24:03,923 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 20:24:04,576 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:24:04,577 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 3c88e520da24ae6f736929a750876e7654accc3d > patch.diff
2025-06-26 20:24:05,220 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "984a22b6c72e",
  "working_dir": "/workspace/psf__requests__2.3",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/psf__requests__2.3]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 20:24:05,220 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 20:24:05,226 - INFO - [Read from /workspace/psf__requests__2.3/patch.diff is successful.]
diff --git a/requests/sessions.py b/requests/sessions.py
index a023e4ec..dd2aa466 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -51,10 +51,16 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
     ):
         return request_setting
 
-    merged_setting = dict_class(to_key_val_list(session_setting))
+    # Convert session headers to dict and remove any None values first
+    session_dict = dict_class(to_key_val_list(session_setting))
+    for k, v in list(session_dict.items()):
+        if v is None:
+            del session_dict[k]
+
+    merged_setting = dict_class(session_dict)
     merged_setting.update(to_key_val_list(request_setting))
 
-    # Remove keys that are set to None.
+    # Remove keys that are set to None in request
     for (k, v) in request_setting.items():
         if v is None:
             del merged_setting[k]
@@ -205,7 +211,9 @@ class Session(SessionRedirectMixin):
         #: A case-insensitive dictionary of headers to be sent on each
         #: :class:`Request <Request>` sent from this
         #: :class:`Session <Session>`.
-        self.headers = default_headers()
+        from .structures import SessionHeaders
+        self.headers = SessionHeaders()
+        self.headers.update(default_headers())
 
         #: Default Authentication tuple or object to attach to
         #: :class:`Request <Request>`.
diff --git a/requests/structures.py b/requests/structures.py
index a1759137..143c126a 100644
--- a/requests/structures.py
+++ b/requests/structures.py
@@ -71,19 +71,41 @@ class CaseInsensitiveDict(collections.MutableMapping):
     def __setitem__(self, key, value):
         # Use the lowercased key for lookups, but store the actual
         # key alongside the value.
-        self._store[key.lower()] = (key, value)
+        if value is None:
+            if key.lower() in self._store:
+                del self._store[key.lower()]
+        else:
+            self._store[key.lower()] = (key, value)
 
     def __getitem__(self, key):
-        return self._store[key.lower()][1]
+        if key.lower() not in self._store:
+            raise KeyError(key)
+        value = self._store[key.lower()][1]
+        if value is None:
+            raise KeyError(key)
+        return value
 
     def __delitem__(self, key):
         del self._store[key.lower()]
 
     def __iter__(self):
-        return (casedkey for casedkey, mappedvalue in self._store.values())
+        return (k for k, v in self._store.values() if v is not None)
 
     def __len__(self):
-        return len(self._store)
+        return sum(1 for v in self._store.values() if v[1] is not None)
+
+    def __contains__(self, key):
+        return (key.lower() in self._store and 
+                self._store[key.lower()][1] is not None)
+
+    def get(self, key, default=None):
+        try:
+            return self.__getitem__(key)
+        except KeyError:
+            return default
+
+    def items(self):
+        return [(k, v) for k, v in self._store.values() if v is not None]
 
     def lower_items(self):
         """Like iteritems(), but with all lowercase keys."""
@@ -109,6 +131,86 @@ class CaseInsensitiveDict(collections.MutableMapping):
         return '%s(%r)' % (self.__class__.__name__, dict(self.items()))
 
 
+class HeaderDict(CaseInsensitiveDict):
+    """Case-insensitive dictionary that removes headers when set to None."""
+    def __setitem__(self, key, value):
+        """Set header value, completely removing the key if value is None"""
+        key_lower = key.lower()
+        if value is None:
+            if key_lower in self._store:
+                del self._store[key_lower]
+        else:
+            self._store[key_lower] = (key, value)
+        
+        # Force update the dict representation
+        if hasattr(self, '_dict'):
+            delattr(self, '_dict')
+
+    def __contains__(self, key):
+        """Check if key exists and has a non-None value.
+        Returns False if key exists but has None value."""
+        if key.lower() not in self._store:
+            return False
+        return self._store[key.lower()][1] is not None
+
+    def __iter__(self):
+        """Iterate over keys with non-None values"""
+        return (k for k, v in self._store.values() if v is not None)
+
+    def keys(self):
+        """Return view of keys with non-None values"""
+        return [k for k, v in self._store.values() if v is not None]
+
+
+class SessionHeaders(CaseInsensitiveDict):
+    """Special dictionary for session headers that properly handles None values."""
+    def __setitem__(self, key, value):
+        """Set header value, removing key completely if value is None"""
+        key_lower = key.lower()
+        if value is None:
+            if key_lower in self._store:
+                del self._store[key_lower]
+        else:
+            self._store[key_lower] = (key, value)
+        
+        # Clear any cached dict representation
+        if hasattr(self, '_dict'):
+            delattr(self, '_dict')
+
+    def __contains__(self, key):
+        """Only return True if key exists and has non-None value.
+        Returns False if key exists but has None value or doesn't exist."""
+        key_lower = key.lower()
+        if key_lower not in self._store:
+            return False
+        value = self._store[key_lower][1]
+        print(f"Debug __contains__: key={key}, stored_value={value}")  # Debug output
+        return value is not None
+
+    def __iter__(self):
+        """Only iterate over keys with non-None values"""
+        return (k for k, v in self._store.values() if v is not None)
+
+    def get(self, key, default=None):
+        """Get header value, returning default if key doesn't exist or is None"""
+        key_lower = key.lower()
+        if key_lower not in self._store:
+            return default
+        value = self._store[key_lower][1]
+        return default if value is None else value
+
+    def __iter__(self):
+        """Iterate over keys with non-None values"""
+        return (k for k, v in self._store.values() if v is not None)
+
+    def items(self):
+        """Return items with non-None values"""
+        return [(k, v) for k, v in self._store.values() if v is not None]
+
+    def __repr__(self):
+        return {k:v for k,v in self._store.values() if v is not None}.__repr__()
+
+
 class LookupDict(dict):
     """Dictionary lookup object."""
 

2025-06-26 20:24:05,227 - INFO - ------------------------------
2025-06-26 20:24:05,227 - INFO - END Runtime Completion Fn
2025-06-26 20:24:05,227 - INFO - ------------------------------
2025-06-26 20:24:05,228 - INFO - Got git diff for instance psf__requests-1921:
--------
diff --git a/requests/sessions.py b/requests/sessions.py
index a023e4ec..dd2aa466 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -51,10 +51,16 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):
     ):
         return request_setting
 
-    merged_setting = dict_class(to_key_val_list(session_setting))
+    # Convert session headers to dict and remove any None values first
+    session_dict = dict_class(to_key_val_list(session_setting))
+    for k, v in list(session_dict.items()):
+        if v is None:
+            del session_dict[k]
+
+    merged_setting = dict_class(session_dict)
     merged_setting.update(to_key_val_list(request_setting))
 
-    # Remove keys that are set to None.
+    # Remove keys that are set to None in request
     for (k, v) in request_setting.items():
         if v is None:
             del merged_setting[k]
@@ -205,7 +211,9 @@ class Session(SessionRedirectMixin):
         #: A case-insensitive dictionary of headers to be sent on each
         #: :class:`Request <Request>` sent from this
         #: :class:`Session <Session>`.
-        self.headers = default_headers()
+        from .structures import SessionHeaders
+        self.headers = SessionHeaders()
+        self.headers.update(default_headers())
 
         #: Default Authentication tuple or object to attach to
         #: :class:`Request <Request>`.
diff --git a/requests/structures.py b/requests/structures.py
index a1759137..143c126a 100644
--- a/requests/structures.py
+++ b/requests/structures.py
@@ -71,19 +71,41 @@ class CaseInsensitiveDict(collections.MutableMapping):
     def __setitem__(self, key, value):
         # Use the lowercased key for lookups, but store the actual
         # key alongside the value.
-        self._store[key.lower()] = (key, value)
+        if value is None:
+            if key.lower() in self._store:
+                del self._store[key.lower()]
+        else:
+            self._store[key.lower()] = (key, value)
 
     def __getitem__(self, key):
-        return self._store[key.lower()][1]
+        if key.lower() not in self._store:
+            raise KeyError(key)
+        value = self._store[key.lower()][1]
+        if value is None:
+            raise KeyError(key)
+        return value
 
     def __delitem__(self, key):
         del self._store[key.lower()]
 
     def __iter__(self):
-        return (casedkey for casedkey, mappedvalue in self._store.values())
+        return (k for k, v in self._store.values() if v is not None)
 
     def __len__(self):
-        return len(self._store)
+        return sum(1 for v in self._store.values() if v[1] is not None)
+
+    def __contains__(self, key):
+        return (key.lower() in self._store and 
+                self._store[key.lower()][1] is not None)
+
+    def get(self, key, default=None):
+        try:
+            return self.__getitem__(key)
+        except KeyError:
+            return default
+
+    def items(self):
+        return [(k, v) for k, v in self._store.values() if v is not None]
 
     def lower_items(self):
         """Like iteritems(), but with all lowercase keys."""
@@ -109,6 +131,86 @@ class CaseInsensitiveDict(collections.MutableMapping):
         return '%s(%r)' % (self.__class__.__name__, dict(self.items()))
 
 
+class HeaderDict(CaseInsensitiveDict):
+    """Case-insensitive dictionary that removes headers when set to None."""
+    def __setitem__(self, key, value):
+        """Set header value, completely removing the key if value is None"""
+        key_lower = key.lower()
+        if value is None:
+            if key_lower in self._store:
+                del self._store[key_lower]
+        else:
+            self._store[key_lower] = (key, value)
+        
+        # Force update the dict representation
+        if hasattr(self, '_dict'):
+            delattr(self, '_dict')
+
+    def __contains__(self, key):
+        """Check if key exists and has a non-None value.
+        Returns False if key exists but has None value."""
+        if key.lower() not in self._store:
+            return False
+        return self._store[key.lower()][1] is not None
+
+    def __iter__(self):
+        """Iterate over keys with non-None values"""
+        return (k for k, v in self._store.values() if v is not None)
+
+    def keys(self):
+        """Return view of keys with non-None values"""
+        return [k for k, v in self._store.values() if v is not None]
+
+
+class SessionHeaders(CaseInsensitiveDict):
+    """Special dictionary for session headers that properly handles None values."""
+    def __setitem__(self, key, value):
+        """Set header value, removing key completely if value is None"""
+        key_lower = key.lower()
+        if value is None:
+            if key_lower in self._store:
+                del self._store[key_lower]
+        else:
+            self._store[key_lower] = (key, value)
+        
+        # Clear any cached dict representation
+        if hasattr(self, '_dict'):
+            delattr(self, '_dict')
+
+    def __contains__(self, key):
+        """Only return True if key exists and has non-None value.
+        Returns False if key exists but has None value or doesn't exist."""
+        key_lower = key.lower()
+        if key_lower not in self._store:
+            return False
+        value = self._store[key_lower][1]
+        print(f"Debug __contains__: key={key}, stored_value={value}")  # Debug output
+        return value is not None
+
+    def __iter__(self):
+        """Only iterate over keys with non-None values"""
+        return (k for k, v in self._store.values() if v is not None)
+
+    def get(self, key, default=None):
+        """Get header value, returning default if key doesn't exist or is None"""
+        key_lower = key.lower()
+        if key_lower not in self._store:
+            return default
+        value = self._store[key_lower][1]
+        return default if value is None else value
+
+    def __iter__(self):
+        """Iterate over keys with non-None values"""
+        return (k for k, v in self._store.values() if v is not None)
+
+    def items(self):
+        """Return items with non-None values"""
+        return [(k, v) for k, v in self._store.values() if v is not None]
+
+    def __repr__(self):
+        return {k:v for k,v in self._store.values() if v is not None}.__repr__()
+
+
 class LookupDict(dict):
     """Dictionary lookup object."""
 
--------
2025-06-26 20:24:07,423 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-14315:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 20:24:07,423 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 20:24:07,424 - INFO - Logging LLM completions for instance django__django-14315 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-14315
