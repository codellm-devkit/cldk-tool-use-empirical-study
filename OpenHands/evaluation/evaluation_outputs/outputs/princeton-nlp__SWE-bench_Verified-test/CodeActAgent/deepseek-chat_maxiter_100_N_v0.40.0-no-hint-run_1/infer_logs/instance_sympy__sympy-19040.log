2025-06-26 14:14:11,912 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kf8f1swk0upxzesn_634egmkijx387tjz
2025-06-26 14:16:49,389 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kf8f1swk0upxzesn_634egmkijx387tjz] build finished.
2025-06-26 14:16:49,397 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kf8f1swk0upxzesn_634egmkijx387tjz] with more generic tag [oh_v0.40.0_kf8f1swk0upxzesn]
2025-06-26 14:16:49,400 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_kf8f1swk0upxzesn_634egmkijx387tjz, oh_v0.40.0_kf8f1swk0upxzesn] built successfully
2025-06-26 14:16:49,408 - INFO - [runtime 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_kf8f1swk0upxzesn_634egmkijx387tjz
2025-06-26 14:16:49,865 - INFO - [runtime 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Container started: openhands-runtime-5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736. VSCode URL: None
2025-06-26 14:16:49,866 - INFO - [runtime 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Waiting for client to become ready at http://localhost:37281...
2025-06-26 14:17:19,973 - INFO - [runtime 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Runtime is ready.
2025-06-26 14:17:22,558 - INFO - ------------------------------
2025-06-26 14:17:22,558 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 14:17:22,558 - INFO - ------------------------------
2025-06-26 14:17:22,559 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=sympy__sympy-19040' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 14:17:23,204 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:23,205 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 14:17:23,845 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:23,846 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 14:17:24,484 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:24,498 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 14:17:25,136 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=sympy__sympy-19040
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:25,137 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 14:17:25,776 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:25,777 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 14:17:26,414 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: sympy__sympy__1.6
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:26,414 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/sympy__sympy__1.6
2025-06-26 14:17:27,053 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:27,054 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 14:17:27,693 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at b9179e80d2 Merge pull request #18881 from Mohitbalwani26/refactoring_tests
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:27,694 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 14:17:28,337 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:28,338 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 14:17:28,977 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:17:28,977 - INFO - ------------------------------
2025-06-26 14:17:28,978 - INFO - END Runtime Initialization Fn
2025-06-26 14:17:28,978 - INFO - ------------------------------
2025-06-26 14:17:29,000 - INFO - [runtime 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 14:17:29,007 - INFO - Loading user workspace microagents: []
2025-06-26 14:17:29,008 - INFO - [Agent Controller 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] AgentController 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736 - created new state. start_id: 0
2025-06-26 14:17:29,014 - INFO - [Agent Controller 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 14:17:29,015 - INFO - Microagent 'gitlab' triggered by keyword 'git'
2025-06-26 14:17:29,017 - INFO - Microagent 'github' triggered by keyword 'github'
2025-06-26 14:36:44,866 - INFO - [Agent Controller 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Context window exceeded. Keeping events with IDs: {0, 1, 2, 4, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155}
2025-06-26 14:43:57,403 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-26 14:43:57,403 - INFO - [Agent Controller 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-26 14:43:57,409 - WARNING - Stopping agent due to traffic control
2025-06-26 14:43:57,410 - INFO - [Agent Controller 5e269db4-34b0-49fd-8398-2cf9f1348fd2-f014296f43a2d736] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-26 14:43:57,845 - INFO - ------------------------------
2025-06-26 14:43:57,845 - INFO - BEGIN Runtime Completion Fn
2025-06-26 14:43:57,845 - INFO - ------------------------------
2025-06-26 14:43:57,845 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/sympy__sympy__1.6
2025-06-26 14:43:58,483 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:43:58,484 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 14:43:59,120 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:43:59,121 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 14:43:59,762 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:43:59,763 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 14:44:00,394 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:44:00,395 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 14:44:01,030 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:44:01,031 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9 > patch.diff
2025-06-26 14:44:01,669 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "fc38d0d76027",
  "working_dir": "/workspace/sympy__sympy__1.6",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/sympy__sympy__1.6]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 14:44:01,669 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 14:44:01,675 - INFO - [Read from /workspace/sympy__sympy__1.6/patch.diff is successful.]
diff --git a/sympy/polys/constructor.py b/sympy/polys/constructor.py
index 12d9de96e9..eb81c39039 100644
--- a/sympy/polys/constructor.py
+++ b/sympy/polys/constructor.py
@@ -16,6 +16,13 @@ def _construct_simple(coeffs, opt):
 
     if opt.extension is True:
         is_algebraic = lambda coeff: coeff.is_number and coeff.is_algebraic
+    elif opt.extension:
+        # Handle explicit extensions including complex numbers
+        if not isinstance(opt.extension, (list, tuple)):
+            opt.extension = [opt.extension]
+        if any(ext.has(I) for ext in opt.extension) and I not in opt.extension:
+            opt.extension = list(opt.extension) + [I]
+        is_algebraic = lambda coeff: coeff.is_number and coeff.is_algebraic
     else:
         is_algebraic = lambda coeff: False
 
diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py
index c6a5f9f063..1b9cca9b00 100644
--- a/sympy/polys/factortools.py
+++ b/sympy/polys/factortools.py
@@ -291,7 +291,9 @@ def dup_zz_zassenhaus(f, K):
         if not gf_sqf_p(F, px, K):
             continue
         fsqfx = gf_factor_sqf(F, px, K)[1]
-        a.append((px, fsqfx))
+        # For extension fields, ensure we keep all factors
+        if K.is_Extension or len(fsqfx) == len(f_list) if hasattr(f, 'extension') else True:
+            a.append((px, fsqfx))
         if len(fsqfx) < 15 or len(a) > 4:
             break
     p, fsqf = min(a, key=lambda x: len(x[1]))
@@ -348,7 +350,8 @@ def dup_zz_zassenhaus(f, K):
             G_norm = dup_l1_norm(G, K)
             H_norm = dup_l1_norm(H, K)
 
-            if G_norm*H_norm <= B:
+            # For extension fields, accept the combination if norms are reasonable
+            if (K.is_Extension and G_norm*H_norm <= 2*B) or G_norm*H_norm <= B:
                 T = T_S
                 sorted_T = [i for i in sorted_T if i not in S]
 
@@ -362,6 +365,14 @@ def dup_zz_zassenhaus(f, K):
         else:
             s += 1
 
+    # Final validation for extension fields
+    if hasattr(K, 'ext') and K.ext:
+        expected_degree = sum(dup_degree(factor) for factor in factors) + dup_degree(f)
+        if expected_degree != dup_degree(original_f):
+            from sympy.polys.factortools import dup_factor_list
+            factors = dup_factor_list(original_f, K)[1]
+            f = [K.one]
+    
     return factors + [f]
 
 
@@ -545,11 +556,27 @@ def dup_zz_factor_sqf(f, K):
 
     factors = None
 
-    if query('USE_CYCLOTOMIC_FACTOR'):
-        factors = dup_zz_cyclotomic_factor(g, K)
+    # Special handling for extension fields
+    if hasattr(K, 'ext') and K.ext:
+        from sympy.polys.numberfields import minimal_polynomial
+        try:
+            factors = dup_zz_zassenhaus(g, K)
+            # For complex extensions, ensure we get all factors
+            if any(ext.has(I) for ext in K.ext) and len(factors) < len(g.coeffs())-1:
+                # Try with higher precision or alternative method
+                from sympy.polys.factortools import dup_factor_list
+                factors = dup_factor_list(g, K)[1]
+            elif len(factors) < len(g.coeffs())-1:
+                factors = None
+        except:
+            factors = None
 
     if factors is None:
-        factors = dup_zz_zassenhaus(g, K)
+        if query('USE_CYCLOTOMIC_FACTOR'):
+            factors = dup_zz_cyclotomic_factor(g, K)
+
+        if factors is None:
+            factors = dup_zz_zassenhaus(g, K)
 
     return cont, _sort_factors(factors, multiple=False)
 
@@ -1364,3 +1391,22 @@ def dmp_irreducible_p(f, u, K):
     else:
         _, k = factors[0]
         return k == 1
+
+
+def dup_zz_zassenhaus_ext(f, K):
+    """Enhanced factorization for extension fields that preserves all factors."""
+    if hasattr(K, 'ext') and K.ext:
+        # For extension fields, use complete factorization
+        from sympy.polys.factortools import dup_factor_list
+        factors = dup_factor_list(f, K)[1]
+        
+        # Verify we have all factors
+        expected_degree = sum(dup_degree(factor) for factor in factors)
+        if expected_degree != dup_degree(f):
+            factors = dup_factor_list(f, K)[1]  # Fallback if degree mismatch
+            
+        return factors
+    
+    # Default to original algorithm for non-extension fields
+    from sympy.polys.factortools import dup_zz_zassenhaus
+    return dup_zz_zassenhaus(f, K)
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index 68b69d1a24..f4266f015d 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5918,6 +5918,11 @@ def _symbolic_factor_list(expr, opt, method):
             base, exp = arg, S.One
 
         try:
+            # Ensure complex extension is included if needed
+            if hasattr(opt, 'extension') and opt.extension:
+                if any(ext.has(I) for ext in opt.extension) and I not in opt.extension:
+                    opt = opt.clone()
+                    opt.extension = list(opt.extension) + [I]
             poly, _ = _poly_from_expr(base, opt)
         except PolificationFailed as exc:
             factors.append((exc.expr, exp))
@@ -6779,6 +6784,24 @@ def groebner(F, *gens, **args):
     return GroebnerBasis(F, *gens, **args)
 
 
+@public
+def factor_with_extension(f, *gens, **args):
+    """Factor polynomials with proper handling of extension fields."""
+    from sympy.polys.domains import QQ, AlgebraicExtension
+    from sympy.polys.factortools import dup_zz_zassenhaus_ext
+    
+    extension = args.get('extension')
+    gaussian = args.get('gaussian', False)
+    
+    if gaussian:
+        return _symbolic_factor(f, gens, args, GaussianExtension(QQ))
+    elif extension is not None:
+        K = AlgebraicExtension(QQ, *extension)
+        return _symbolic_factor(f, gens, args, K, factormethod=dup_zz_zassenhaus_ext)
+    else:
+        return _symbolic_factor(f, gens, args)
+
+
 @public
 def is_zero_dimensional(F, *gens, **args):
     """

2025-06-26 14:44:01,676 - INFO - ------------------------------
2025-06-26 14:44:01,677 - INFO - END Runtime Completion Fn
2025-06-26 14:44:01,677 - INFO - ------------------------------
2025-06-26 14:44:01,677 - INFO - Got git diff for instance sympy__sympy-19040:
--------
diff --git a/sympy/polys/constructor.py b/sympy/polys/constructor.py
index 12d9de96e9..eb81c39039 100644
--- a/sympy/polys/constructor.py
+++ b/sympy/polys/constructor.py
@@ -16,6 +16,13 @@ def _construct_simple(coeffs, opt):
 
     if opt.extension is True:
         is_algebraic = lambda coeff: coeff.is_number and coeff.is_algebraic
+    elif opt.extension:
+        # Handle explicit extensions including complex numbers
+        if not isinstance(opt.extension, (list, tuple)):
+            opt.extension = [opt.extension]
+        if any(ext.has(I) for ext in opt.extension) and I not in opt.extension:
+            opt.extension = list(opt.extension) + [I]
+        is_algebraic = lambda coeff: coeff.is_number and coeff.is_algebraic
     else:
         is_algebraic = lambda coeff: False
 
diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py
index c6a5f9f063..1b9cca9b00 100644
--- a/sympy/polys/factortools.py
+++ b/sympy/polys/factortools.py
@@ -291,7 +291,9 @@ def dup_zz_zassenhaus(f, K):
         if not gf_sqf_p(F, px, K):
             continue
         fsqfx = gf_factor_sqf(F, px, K)[1]
-        a.append((px, fsqfx))
+        # For extension fields, ensure we keep all factors
+        if K.is_Extension or len(fsqfx) == len(f_list) if hasattr(f, 'extension') else True:
+            a.append((px, fsqfx))
         if len(fsqfx) < 15 or len(a) > 4:
             break
     p, fsqf = min(a, key=lambda x: len(x[1]))
@@ -348,7 +350,8 @@ def dup_zz_zassenhaus(f, K):
             G_norm = dup_l1_norm(G, K)
             H_norm = dup_l1_norm(H, K)
 
-            if G_norm*H_norm <= B:
+            # For extension fields, accept the combination if norms are reasonable
+            if (K.is_Extension and G_norm*H_norm <= 2*B) or G_norm*H_norm <= B:
                 T = T_S
                 sorted_T = [i for i in sorted_T if i not in S]
 
@@ -362,6 +365,14 @@ def dup_zz_zassenhaus(f, K):
         else:
             s += 1
 
+    # Final validation for extension fields
+    if hasattr(K, 'ext') and K.ext:
+        expected_degree = sum(dup_degree(factor) for factor in factors) + dup_degree(f)
+        if expected_degree != dup_degree(original_f):
+            from sympy.polys.factortools import dup_factor_list
+            factors = dup_factor_list(original_f, K)[1]
+            f = [K.one]
+    
     return factors + [f]
 
 
@@ -545,11 +556,27 @@ def dup_zz_factor_sqf(f, K):
 
     factors = None
 
-    if query('USE_CYCLOTOMIC_FACTOR'):
-        factors = dup_zz_cyclotomic_factor(g, K)
+    # Special handling for extension fields
+    if hasattr(K, 'ext') and K.ext:
+        from sympy.polys.numberfields import minimal_polynomial
+        try:
+            factors = dup_zz_zassenhaus(g, K)
+            # For complex extensions, ensure we get all factors
+            if any(ext.has(I) for ext in K.ext) and len(factors) < len(g.coeffs())-1:
+                # Try with higher precision or alternative method
+                from sympy.polys.factortools import dup_factor_list
+                factors = dup_factor_list(g, K)[1]
+            elif len(factors) < len(g.coeffs())-1:
+                factors = None
+        except:
+            factors = None
 
     if factors is None:
-        factors = dup_zz_zassenhaus(g, K)
+        if query('USE_CYCLOTOMIC_FACTOR'):
+            factors = dup_zz_cyclotomic_factor(g, K)
+
+        if factors is None:
+            factors = dup_zz_zassenhaus(g, K)
 
     return cont, _sort_factors(factors, multiple=False)
 
@@ -1364,3 +1391,22 @@ def dmp_irreducible_p(f, u, K):
     else:
         _, k = factors[0]
         return k == 1
+
+
+def dup_zz_zassenhaus_ext(f, K):
+    """Enhanced factorization for extension fields that preserves all factors."""
+    if hasattr(K, 'ext') and K.ext:
+        # For extension fields, use complete factorization
+        from sympy.polys.factortools import dup_factor_list
+        factors = dup_factor_list(f, K)[1]
+        
+        # Verify we have all factors
+        expected_degree = sum(dup_degree(factor) for factor in factors)
+        if expected_degree != dup_degree(f):
+            factors = dup_factor_list(f, K)[1]  # Fallback if degree mismatch
+            
+        return factors
+    
+    # Default to original algorithm for non-extension fields
+    from sympy.polys.factortools import dup_zz_zassenhaus
+    return dup_zz_zassenhaus(f, K)
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index 68b69d1a24..f4266f015d 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5918,6 +5918,11 @@ def _symbolic_factor_list(expr, opt, method):
             base, exp = arg, S.One
 
         try:
+            # Ensure complex extension is included if needed
+            if hasattr(opt, 'extension') and opt.extension:
+                if any(ext.has(I) for ext in opt.extension) and I not in opt.extension:
+                    opt = opt.clone()
+                    opt.extension = list(opt.extension) + [I]
             poly, _ = _poly_from_expr(base, opt)
         except PolificationFailed as exc:
             factors.append((exc.expr, exp))
@@ -6779,6 +6784,24 @@ def groebner(F, *gens, **args):
     return GroebnerBasis(F, *gens, **args)
 
 
+@public
+def factor_with_extension(f, *gens, **args):
+    """Factor polynomials with proper handling of extension fields."""
+    from sympy.polys.domains import QQ, AlgebraicExtension
+    from sympy.polys.factortools import dup_zz_zassenhaus_ext
+    
+    extension = args.get('extension')
+    gaussian = args.get('gaussian', False)
+    
+    if gaussian:
+        return _symbolic_factor(f, gens, args, GaussianExtension(QQ))
+    elif extension is not None:
+        K = AlgebraicExtension(QQ, *extension)
+        return _symbolic_factor(f, gens, args, K, factormethod=dup_zz_zassenhaus_ext)
+    else:
+        return _symbolic_factor(f, gens, args)
+
+
 @public
 def is_zero_dimensional(F, *gens, **args):
     """
--------
2025-06-26 14:44:03,699 - INFO - Using instance container image: swebench/sweb.eval.x86_64.matplotlib_1776_matplotlib-25479:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 14:44:03,700 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 14:44:03,700 - INFO - Logging LLM completions for instance matplotlib__matplotlib-25479 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/matplotlib__matplotlib-25479
