2025-06-25 21:42:38,531 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_lyyngjqtubwst5fw_634egmkijx387tjz
2025-06-25 21:45:23,847 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_lyyngjqtubwst5fw_634egmkijx387tjz] build finished.
2025-06-25 21:45:23,855 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_lyyngjqtubwst5fw_634egmkijx387tjz] with more generic tag [oh_v0.40.0_lyyngjqtubwst5fw]
2025-06-25 21:45:23,859 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_lyyngjqtubwst5fw_634egmkijx387tjz, oh_v0.40.0_lyyngjqtubwst5fw] built successfully
2025-06-25 21:45:23,880 - INFO - [runtime ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_lyyngjqtubwst5fw_634egmkijx387tjz
2025-06-25 21:45:24,551 - INFO - [runtime ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] Container started: openhands-runtime-ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea. VSCode URL: None
2025-06-25 21:45:24,552 - INFO - [runtime ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] Waiting for client to become ready at http://localhost:34546...
2025-06-25 21:45:54,648 - INFO - [runtime ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] Runtime is ready.
2025-06-25 21:45:57,233 - INFO - ------------------------------
2025-06-25 21:45:57,233 - INFO - BEGIN Runtime Initialization Fn
2025-06-25 21:45:57,233 - INFO - ------------------------------
2025-06-25 21:45:57,234 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-15563' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-25 21:45:57,877 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:45:57,878 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-25 21:45:58,518 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:45:58,519 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-25 21:45:59,158 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:45:59,173 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-25 21:45:59,811 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-15563
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:45:59,812 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-25 21:46:00,447 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:46:00,448 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-25 21:46:01,593 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__4.1
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:46:01,594 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.1
2025-06-25 21:46:02,233 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:46:02,234 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-25 21:46:03,378 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 9ffd4eae2c Fixed #33611 -- Allowed View subclasses to define async method handlers.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:46:03,379 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-25 21:46:04,021 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:46:04,022 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-25 21:46:04,659 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 21:46:04,660 - INFO - ------------------------------
2025-06-25 21:46:04,660 - INFO - END Runtime Initialization Fn
2025-06-25 21:46:04,661 - INFO - ------------------------------
2025-06-25 21:46:04,678 - INFO - [runtime ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-25 21:46:04,685 - INFO - Loading user workspace microagents: []
2025-06-25 21:46:04,685 - INFO - [Agent Controller ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] AgentController ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea - created new state. start_id: 0
2025-06-25 21:46:04,693 - INFO - [Agent Controller ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-25 22:06:11,228 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-25 22:06:11,229 - INFO - [Agent Controller ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-25 22:06:11,234 - WARNING - Stopping agent due to traffic control
2025-06-25 22:06:11,235 - INFO - [Agent Controller ce5ab351-5c83-47c6-bd4e-e15df72ee989-9b5cee5e59d090ea] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-25 22:06:12,041 - INFO - ------------------------------
2025-06-25 22:06:12,041 - INFO - BEGIN Runtime Completion Fn
2025-06-25 22:06:12,042 - INFO - ------------------------------
2025-06-25 22:06:12,042 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__4.1
2025-06-25 22:06:12,681 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:06:12,682 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-25 22:06:13,323 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:06:13,326 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-25 22:06:13,968 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:06:13,968 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-25 22:06:14,610 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:06:14,610 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-25 22:06:15,263 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:06:15,264 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 9ffd4eae2ce7a7100c98f681e2b6ab818df384a4 > patch.diff
2025-06-25 22:06:15,901 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "5303242a71e5",
  "working_dir": "/workspace/django__django__4.1",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__4.1]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 22:06:15,902 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-25 22:06:15,908 - INFO - [Read from /workspace/django__django__4.1/patch.diff is successful.]
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..f45e427c4e 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -95,8 +95,13 @@ class UpdateQuery(Query):
                     "Cannot update model field %r (only non-relations and "
                     "foreign keys permitted)." % field
                 )
+            # For multiple inheritance, use the field's actual model table
             if model is not self.get_meta().concrete_model:
-                self.add_related_update(model, field, val)
+                if field.model._meta.parents and not field.model._meta.proxy:
+                    # Field comes from a concrete parent model
+                    values_seq.append((field, field.model._meta.concrete_model, val))
+                else:
+                    self.add_related_update(model, field, val)
                 continue
             values_seq.append((field, model, val))
         return self.add_update_fields(values_seq)
diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py
index a479faeda5..636f2d7dd5 100644
--- a/tests/model_inheritance/models.py
+++ b/tests/model_inheritance/models.py
@@ -182,3 +182,16 @@ class Child(Parent):
 
 class GrandChild(Child):
     pass
+
+
+# Models for testing multiple inheritance updates
+class Base(models.Model):
+    base_id = models.AutoField(primary_key=True)
+    field_base = models.IntegerField(default=0)
+
+class OtherBase(models.Model):
+    otherbase_id = models.AutoField(primary_key=True)
+    field_otherbase = models.IntegerField(default=0)
+
+class ChildMultiInherit(Base, OtherBase):
+    pass
diff --git a/tests/model_inheritance/test_multiple_inheritance_update.py b/tests/model_inheritance/test_multiple_inheritance_update.py
new file mode 100644
index 0000000000..c16a64d127
--- /dev/null
+++ b/tests/model_inheritance/test_multiple_inheritance_update.py
@@ -0,0 +1,25 @@
+
+from django.test import TestCase
+from .models import Base, OtherBase, ChildMultiInherit as Child
+
+class MultipleInheritanceUpdateTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.obj1 = Child.objects.create(field_base=1, field_otherbase=10)
+        cls.obj2 = Child.objects.create(field_base=2, field_otherbase=20)
+
+    def test_update_secondary_parent_field(self):
+        # Update field from secondary parent
+        Child.objects.update(field_otherbase=55)
+        
+        # Verify update affected Child instances
+        obj1 = Child.objects.get(pk=self.obj1.pk)
+        obj2 = Child.objects.get(pk=self.obj2.pk)
+        self.assertEqual(obj1.field_otherbase, 55)
+        self.assertEqual(obj2.field_otherbase, 55)
+        
+        # Verify OtherBase table wasn't directly updated
+        otherbase1 = OtherBase.objects.get(pk=self.obj1.otherbase_id)
+        otherbase2 = OtherBase.objects.get(pk=self.obj2.otherbase_id)
+        self.assertEqual(otherbase1.field_otherbase, 10)
+        self.assertEqual(otherbase2.field_otherbase, 20)

2025-06-25 22:06:15,909 - INFO - ------------------------------
2025-06-25 22:06:15,909 - INFO - END Runtime Completion Fn
2025-06-25 22:06:15,929 - INFO - ------------------------------
2025-06-25 22:06:15,930 - INFO - Got git diff for instance django__django-15563:
--------
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..f45e427c4e 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -95,8 +95,13 @@ class UpdateQuery(Query):
                     "Cannot update model field %r (only non-relations and "
                     "foreign keys permitted)." % field
                 )
+            # For multiple inheritance, use the field's actual model table
             if model is not self.get_meta().concrete_model:
-                self.add_related_update(model, field, val)
+                if field.model._meta.parents and not field.model._meta.proxy:
+                    # Field comes from a concrete parent model
+                    values_seq.append((field, field.model._meta.concrete_model, val))
+                else:
+                    self.add_related_update(model, field, val)
                 continue
             values_seq.append((field, model, val))
         return self.add_update_fields(values_seq)
diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py
index a479faeda5..636f2d7dd5 100644
--- a/tests/model_inheritance/models.py
+++ b/tests/model_inheritance/models.py
@@ -182,3 +182,16 @@ class Child(Parent):
 
 class GrandChild(Child):
     pass
+
+
+# Models for testing multiple inheritance updates
+class Base(models.Model):
+    base_id = models.AutoField(primary_key=True)
+    field_base = models.IntegerField(default=0)
+
+class OtherBase(models.Model):
+    otherbase_id = models.AutoField(primary_key=True)
+    field_otherbase = models.IntegerField(default=0)
+
+class ChildMultiInherit(Base, OtherBase):
+    pass
diff --git a/tests/model_inheritance/test_multiple_inheritance_update.py b/tests/model_inheritance/test_multiple_inheritance_update.py
new file mode 100644
index 0000000000..c16a64d127
--- /dev/null
+++ b/tests/model_inheritance/test_multiple_inheritance_update.py
@@ -0,0 +1,25 @@
+
+from django.test import TestCase
+from .models import Base, OtherBase, ChildMultiInherit as Child
+
+class MultipleInheritanceUpdateTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.obj1 = Child.objects.create(field_base=1, field_otherbase=10)
+        cls.obj2 = Child.objects.create(field_base=2, field_otherbase=20)
+
+    def test_update_secondary_parent_field(self):
+        # Update field from secondary parent
+        Child.objects.update(field_otherbase=55)
+        
+        # Verify update affected Child instances
+        obj1 = Child.objects.get(pk=self.obj1.pk)
+        obj2 = Child.objects.get(pk=self.obj2.pk)
+        self.assertEqual(obj1.field_otherbase, 55)
+        self.assertEqual(obj2.field_otherbase, 55)
+        
+        # Verify OtherBase table wasn't directly updated
+        otherbase1 = OtherBase.objects.get(pk=self.obj1.otherbase_id)
+        otherbase2 = OtherBase.objects.get(pk=self.obj2.otherbase_id)
+        self.assertEqual(otherbase1.field_otherbase, 10)
+        self.assertEqual(otherbase2.field_otherbase, 20)
--------
2025-06-25 22:06:18,414 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-13658:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-25 22:06:18,415 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-25 22:06:18,415 - INFO - Logging LLM completions for instance django__django-13658 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-13658
