2025-06-26 12:15:20,357 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_ifyqq0seem4ad1uy_634egmkijx387tjz
2025-06-26 12:18:39,816 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_ifyqq0seem4ad1uy_634egmkijx387tjz] build finished.
2025-06-26 12:18:39,827 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_ifyqq0seem4ad1uy_634egmkijx387tjz] with more generic tag [oh_v0.40.0_ifyqq0seem4ad1uy]
2025-06-26 12:18:39,831 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_ifyqq0seem4ad1uy_634egmkijx387tjz, oh_v0.40.0_ifyqq0seem4ad1uy] built successfully
2025-06-26 12:18:39,859 - INFO - [runtime 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_ifyqq0seem4ad1uy_634egmkijx387tjz
2025-06-26 12:18:41,050 - INFO - [runtime 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Container started: openhands-runtime-281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee. VSCode URL: None
2025-06-26 12:18:41,051 - INFO - [runtime 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Waiting for client to become ready at http://localhost:37568...
2025-06-26 12:19:11,176 - INFO - [runtime 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Runtime is ready.
2025-06-26 12:19:13,758 - INFO - ------------------------------
2025-06-26 12:19:13,758 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 12:19:13,759 - INFO - ------------------------------
2025-06-26 12:19:13,760 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-13112' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 12:19:14,405 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:14,406 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 12:19:15,045 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:15,046 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 12:19:15,676 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:15,689 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 12:19:16,327 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-13112
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:16,328 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 12:19:16,967 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:16,968 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 12:19:18,111 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.2
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:18,112 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.2
2025-06-26 12:19:18,741 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:18,741 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 12:19:19,884 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at 09914ccf68 Fixed test_clean_does_deduplicate_values on Oracle after e13cfc6dfd4212ef7a40db1a41d3ae6ac4b97de0.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:19,885 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 12:19:20,529 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:20,529 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 12:19:21,167 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:19:21,168 - INFO - ------------------------------
2025-06-26 12:19:21,168 - INFO - END Runtime Initialization Fn
2025-06-26 12:19:21,169 - INFO - ------------------------------
2025-06-26 12:19:21,179 - INFO - [runtime 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 12:19:21,183 - INFO - Loading user workspace microagents: []
2025-06-26 12:19:21,183 - INFO - [Agent Controller 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] AgentController 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee - created new state. start_id: 0
2025-06-26 12:19:21,191 - INFO - [Agent Controller 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 12:26:52,085 - INFO - [Agent Controller 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-26 12:26:52,088 - INFO - [Agent Controller 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-26 12:27:15,692 - INFO - [Agent Controller 281e1f08-a7b7-471f-a673-852bb54b5e77-84e566fb33df45ee] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-26 12:27:16,708 - INFO - ------------------------------
2025-06-26 12:27:16,708 - INFO - BEGIN Runtime Completion Fn
2025-06-26 12:27:16,709 - INFO - ------------------------------
2025-06-26 12:27:16,709 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.2
2025-06-26 12:27:17,348 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:17,349 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 12:27:17,987 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:17,988 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 12:27:18,628 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:18,629 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 12:27:19,262 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:19,262 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 12:27:19,911 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:19,912 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached 09914ccf688974e068941f55412b930729bafa06 > patch.diff
2025-06-26 12:27:20,555 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "1aad373b3e46",
  "working_dir": "/workspace/django__django__3.2",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.2]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 12:27:20,556 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 12:27:20,563 - INFO - [Read from /workspace/django__django__3.2/patch.diff is successful.]
diff --git a/django/db/migrations/operations/utils.py b/django/db/migrations/operations/utils.py
index 6e2bacd549..fc42db1d8a 100644
--- a/django/db/migrations/operations/utils.py
+++ b/django/db/migrations/operations/utils.py
@@ -8,7 +8,8 @@ def resolve_relation(model, app_label=None, model_name=None):
     Turn a model class or model reference string and return a model tuple.
 
     app_label and model_name are used to resolve the scope of recursive and
-    unscoped model relationship.
+    unscoped model relationship. App labels are normalized to lowercase while
+    model names preserve their original case.
     """
     if isinstance(model, str):
         if model == RECURSIVE_RELATIONSHIP_CONSTANT:
@@ -19,13 +20,14 @@ def resolve_relation(model, app_label=None, model_name=None):
                 )
             return app_label, model_name
         if '.' in model:
-            return tuple(model.lower().split('.', 1))
+            app_label, model_name = model.split('.', 1)
+            return app_label.lower(), model_name
         if app_label is None:
             raise TypeError(
                 'app_label must be provided to resolve unscoped model '
                 'relationships.'
             )
-        return app_label, model.lower()
+        return app_label.lower(), model.lower()
     return model._meta.app_label, model._meta.model_name
 
 
diff --git a/tests/migrations/test_app_label_case.py b/tests/migrations/test_app_label_case.py
new file mode 100644
index 0000000000..42e8f0e86a
--- /dev/null
+++ b/tests/migrations/test_app_label_case.py
@@ -0,0 +1,39 @@
+
+from django.db.migrations.operations.utils import resolve_relation
+from unittest import TestCase
+
+class AppLabelCaseTests(TestCase):
+    def test_mixed_case_app_label(self):
+        # Test that mixed case app labels are resolved case-insensitively
+        self.assertEqual(
+            resolve_relation('DJ_RegLogin.Category'),
+            ('dj_reglogin', 'Category')
+        )
+        
+    def test_uppercase_app_label_with_model(self):
+        # Test with explicitly provided uppercase app label
+        self.assertEqual(
+            resolve_relation('Category', app_label='DJ_RegLogin'),
+            ('dj_reglogin', 'category')
+        )
+        
+    def test_lowercase_app_label_with_model(self):
+        # Test with lowercase app label for consistency
+        self.assertEqual(
+            resolve_relation('Category', app_label='dj_reglogin'),
+            ('dj_reglogin', 'category')
+        )
+        
+    def test_model_case_preserved(self):
+        # Verify model name case is preserved
+        self.assertEqual(
+            resolve_relation('DJ_RegLogin.MixedCaseModel'),
+            ('dj_reglogin', 'MixedCaseModel')
+        )
+        
+    def test_non_ascii_app_label(self):
+        # Test with non-ASCII app label
+        self.assertEqual(
+            resolve_relation('MýApp.ModelName'),
+            ('mýapp', 'ModelName')
+        )

2025-06-26 12:27:20,564 - INFO - ------------------------------
2025-06-26 12:27:20,564 - INFO - END Runtime Completion Fn
2025-06-26 12:27:20,565 - INFO - ------------------------------
2025-06-26 12:27:20,565 - INFO - Got git diff for instance django__django-13112:
--------
diff --git a/django/db/migrations/operations/utils.py b/django/db/migrations/operations/utils.py
index 6e2bacd549..fc42db1d8a 100644
--- a/django/db/migrations/operations/utils.py
+++ b/django/db/migrations/operations/utils.py
@@ -8,7 +8,8 @@ def resolve_relation(model, app_label=None, model_name=None):
     Turn a model class or model reference string and return a model tuple.
 
     app_label and model_name are used to resolve the scope of recursive and
-    unscoped model relationship.
+    unscoped model relationship. App labels are normalized to lowercase while
+    model names preserve their original case.
     """
     if isinstance(model, str):
         if model == RECURSIVE_RELATIONSHIP_CONSTANT:
@@ -19,13 +20,14 @@ def resolve_relation(model, app_label=None, model_name=None):
                 )
             return app_label, model_name
         if '.' in model:
-            return tuple(model.lower().split('.', 1))
+            app_label, model_name = model.split('.', 1)
+            return app_label.lower(), model_name
         if app_label is None:
             raise TypeError(
                 'app_label must be provided to resolve unscoped model '
                 'relationships.'
             )
-        return app_label, model.lower()
+        return app_label.lower(), model.lower()
     return model._meta.app_label, model._meta.model_name
 
 
diff --git a/tests/migrations/test_app_label_case.py b/tests/migrations/test_app_label_case.py
new file mode 100644
index 0000000000..42e8f0e86a
--- /dev/null
+++ b/tests/migrations/test_app_label_case.py
@@ -0,0 +1,39 @@
+
+from django.db.migrations.operations.utils import resolve_relation
+from unittest import TestCase
+
+class AppLabelCaseTests(TestCase):
+    def test_mixed_case_app_label(self):
+        # Test that mixed case app labels are resolved case-insensitively
+        self.assertEqual(
+            resolve_relation('DJ_RegLogin.Category'),
+            ('dj_reglogin', 'Category')
+        )
+        
+    def test_uppercase_app_label_with_model(self):
+        # Test with explicitly provided uppercase app label
+        self.assertEqual(
+            resolve_relation('Category', app_label='DJ_RegLogin'),
+            ('dj_reglogin', 'category')
+        )
+        
+    def test_lowercase_app_label_with_model(self):
+        # Test with lowercase app label for consistency
+        self.assertEqual(
+            resolve_relation('Category', app_label='dj_reglogin'),
+            ('dj_reglogin', 'category')
+        )
+        
+    def test_model_case_preserved(self):
+        # Verify model name case is preserved
+        self.assertEqual(
+            resolve_relation('DJ_RegLogin.MixedCaseModel'),
+            ('dj_reglogin', 'MixedCaseModel')
+        )
+        
+    def test_non_ascii_app_label(self):
+        # Test with non-ASCII app label
+        self.assertEqual(
+            resolve_relation('MýApp.ModelName'),
+            ('mýapp', 'ModelName')
+        )
--------
2025-06-26 12:27:23,044 - INFO - Using instance container image: swebench/sweb.eval.x86_64.django_1776_django-11119:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 12:27:23,044 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 12:27:23,045 - INFO - Logging LLM completions for instance django__django-11119 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/django__django-11119
