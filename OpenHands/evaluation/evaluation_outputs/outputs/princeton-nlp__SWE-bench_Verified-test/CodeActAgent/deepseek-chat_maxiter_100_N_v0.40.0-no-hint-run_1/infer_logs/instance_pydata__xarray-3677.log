2025-06-25 23:17:17,203 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7vwhne9mo3vl1n9a_634egmkijx387tjz
2025-06-25 23:19:55,148 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7vwhne9mo3vl1n9a_634egmkijx387tjz] build finished.
2025-06-25 23:19:55,157 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7vwhne9mo3vl1n9a_634egmkijx387tjz] with more generic tag [oh_v0.40.0_7vwhne9mo3vl1n9a]
2025-06-25 23:19:55,160 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_7vwhne9mo3vl1n9a_634egmkijx387tjz, oh_v0.40.0_7vwhne9mo3vl1n9a] built successfully
2025-06-25 23:19:55,177 - INFO - [runtime 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_7vwhne9mo3vl1n9a_634egmkijx387tjz
2025-06-25 23:19:56,603 - INFO - [runtime 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Container started: openhands-runtime-4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd. VSCode URL: None
2025-06-25 23:19:56,603 - INFO - [runtime 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Waiting for client to become ready at http://localhost:38529...
2025-06-25 23:20:28,725 - INFO - [runtime 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Runtime is ready.
2025-06-25 23:20:31,299 - INFO - ------------------------------
2025-06-25 23:20:31,300 - INFO - BEGIN Runtime Initialization Fn
2025-06-25 23:20:31,300 - INFO - ------------------------------
2025-06-25 23:20:31,301 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=pydata__xarray-3677' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-25 23:20:31,944 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:31,944 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-25 23:20:32,585 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:32,586 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-25 23:20:33,225 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:33,235 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-25 23:20:33,870 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=pydata__xarray-3677
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:33,871 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-25 23:20:34,512 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:34,513 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-25 23:20:35,149 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: pydata__xarray__0.12
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:35,150 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pydata__xarray__0.12
2025-06-25 23:20:35,789 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:35,790 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-25 23:20:36,431 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at ef6e6a7b raise an error when renaming dimensions to existing names (#3645)
[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:36,432 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-25 23:20:37,073 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:37,073 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-25 23:20:37,712 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:20:37,712 - INFO - ------------------------------
2025-06-25 23:20:37,712 - INFO - END Runtime Initialization Fn
2025-06-25 23:20:37,712 - INFO - ------------------------------
2025-06-25 23:20:37,721 - INFO - [runtime 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-25 23:20:37,727 - INFO - Loading user workspace microagents: []
2025-06-25 23:20:37,727 - INFO - [Agent Controller 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] AgentController 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd - created new state. start_id: 0
2025-06-25 23:20:37,733 - INFO - [Agent Controller 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-25 23:32:26,148 - INFO - [Agent Controller 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-25 23:32:26,152 - INFO - [Agent Controller 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-25 23:32:43,861 - INFO - [Agent Controller 4b670781-82c0-4a8e-920b-4a703e634a62-f3871153351453dd] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.FINISHED
2025-06-25 23:32:44,526 - INFO - ------------------------------
2025-06-25 23:32:44,527 - INFO - BEGIN Runtime Completion Fn
2025-06-25 23:32:44,527 - INFO - ------------------------------
2025-06-25 23:32:44,527 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/pydata__xarray__0.12
2025-06-25 23:32:45,166 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/tmp/xarray_test/venv/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /tmp/xarray_test/venv/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:32:45,167 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-25 23:32:45,799 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/tmp/xarray_test/venv/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /tmp/xarray_test/venv/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:32:45,802 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-25 23:32:46,432 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/tmp/xarray_test/venv/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /tmp/xarray_test/venv/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:32:46,432 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-25 23:32:47,066 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/tmp/xarray_test/venv/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /tmp/xarray_test/venv/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:32:47,066 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-25 23:32:47,703 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/tmp/xarray_test/venv/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /tmp/xarray_test/venv/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:32:47,704 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached ef6e6a7b86f8479b9a1fecf15ad5b88a2326b31e > patch.diff
2025-06-25 23:32:48,334 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "a056b50dffd6",
  "working_dir": "/workspace/pydata__xarray__0.12",
  "py_interpreter_path": "/tmp/xarray_test/venv/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/pydata__xarray__0.12]
[Python interpreter: /tmp/xarray_test/venv/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-25 23:32:48,335 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-25 23:32:48,339 - INFO - [Read from /workspace/pydata__xarray__0.12/patch.diff is successful.]
diff --git a/merge_utils.py b/merge_utils.py
new file mode 100644
index 00000000..27c228d5
--- /dev/null
+++ b/merge_utils.py
@@ -0,0 +1,16 @@
+
+
+"""Standalone utilities for merging xarray objects."""
+
+def safe_merge(dataset, other):
+    """
+    Safely merge a Dataset with either a Dataset or DataArray.
+    Works around xarray's circular import issues.
+    """
+    try:
+        # Duck typing approach
+        other_ds = other.to_dataset() if hasattr(other, 'to_dataset') else other
+        return dataset.merge(other_ds)
+    except Exception as e:
+        raise ValueError(f"Failed to merge objects: {e}")
+
diff --git a/minimal_merge_test.py b/minimal_merge_test.py
new file mode 100644
index 00000000..5cb71975
--- /dev/null
+++ b/minimal_merge_test.py
@@ -0,0 +1,30 @@
+
+
+
+"""Minimal test for DataArray-Dataset merging without full xarray imports."""
+import sys
+from xarray.core.dataset import Dataset
+from xarray.core.dataarray import DataArray
+
+def test_merge():
+    ds = Dataset({'a': 0})
+    da = DataArray(1, name='b')
+    
+    # Convert DataArray to Dataset
+    da_as_ds = da.to_dataset()
+    
+    # Simple merge implementation
+    merged_vars = {**ds.variables, **da_as_ds.variables}
+    return Dataset(merged_vars)
+
+if __name__ == "__main__":
+    try:
+        result = test_merge()
+        print("Merge successful:")
+        print(result)
+        sys.exit(0)
+    except Exception as e:
+        print(f"Merge failed: {e}")
+        sys.exit(1)
+
+
diff --git a/standalone_merge_test.py b/standalone_merge_test.py
new file mode 100644
index 00000000..53f5fa70
--- /dev/null
+++ b/standalone_merge_test.py
@@ -0,0 +1,27 @@
+
+
+"""Standalone test for DataArray-Dataset merging."""
+import sys
+from merge_utils import safe_merge
+
+def main():
+    try:
+        import xarray as xr
+    except ImportError:
+        print("xarray not installed")
+        return 1
+
+    print("Creating test objects...")
+    ds = xr.Dataset({'a': 0})
+    da = xr.DataArray(1, name='b')
+
+    print("\nTesting top-level merge:")
+    print(xr.merge([ds, da]))
+
+    print("\nTesting safe_merge:")
+    print(safe_merge(ds, da))
+    return 0
+
+if __name__ == "__main__":
+    sys.exit(main())
+
diff --git a/test_merge_fix.py b/test_merge_fix.py
new file mode 100644
index 00000000..af12c17c
--- /dev/null
+++ b/test_merge_fix.py
@@ -0,0 +1,16 @@
+
+import xarray as xr
+from merge_utils import safe_merge
+
+ds = xr.Dataset({'a': 0})
+da = xr.DataArray(1, name='b')
+
+# Test top-level merge
+expected = xr.merge([ds, da])
+print("Top-level merge works:")
+print(expected)
+
+# Test safe_merge function
+print("\nSafe merge method:")
+result = safe_merge(ds, da)
+print(result)
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index ac0a923d..8d20e8aa 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -3604,9 +3604,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
             If any variables conflict (see ``compat``).
         """
         _check_inplace(inplace)
+        other_converted = other.to_dataset() if hasattr(other, 'to_dataset') else other
         merge_result = dataset_merge_method(
             self,
-            other,
+            other_converted,
             overwrite_vars=overwrite_vars,
             compat=compat,
             join=join,
diff --git a/xarray/core/merge.py b/xarray/core/merge.py
index 10c7804d..6ab7f1fe 100644
--- a/xarray/core/merge.py
+++ b/xarray/core/merge.py
@@ -19,13 +19,13 @@ import pandas as pd
 
 from . import dtypes, pdcompat
 from .alignment import deep_align
+from .dataarray import DataArray
 from .duck_array_ops import lazy_array_equiv
 from .utils import Frozen, dict_equiv
 from .variable import Variable, as_variable, assert_unique_multiindex_level_names
 
 if TYPE_CHECKING:
     from .coordinates import Coordinates
-    from .dataarray import DataArray
     from .dataset import Dataset
 
     DimsLike = Union[Hashable, Sequence[Hashable]]
@@ -814,16 +814,20 @@ def dataset_merge_method(
     else:
         overwrite_vars = {overwrite_vars}
 
+    try:
+        other_dataset = other.to_dataset() if hasattr(other, 'to_dataset') else other
+    except Exception:
+        other_dataset = other
     if not overwrite_vars:
-        objs = [dataset, other]
+        objs = [dataset, other_dataset]
         priority_arg = None
-    elif overwrite_vars == set(other):
-        objs = [dataset, other]
+    elif overwrite_vars == set(other_dataset):
+        objs = [dataset, other_dataset]
         priority_arg = 1
     else:
         other_overwrite: Dict[Hashable, CoercibleValue] = {}
         other_no_overwrite: Dict[Hashable, CoercibleValue] = {}
-        for k, v in other.items():
+        for k, v in other_dataset.items():
             if k in overwrite_vars:
                 other_overwrite[k] = v
             else:
diff --git a/xarray/utils/merge_utils.py b/xarray/utils/merge_utils.py
new file mode 100644
index 00000000..62c59021
--- /dev/null
+++ b/xarray/utils/merge_utils.py
@@ -0,0 +1,12 @@
+
+
+"""Utilities for merging DataArrays with Datasets."""
+from typing import Union
+from ..dataset import Dataset
+from ..dataarray import DataArray
+
+def safe_merge(dataset: Dataset, other: Union[Dataset, DataArray]):
+    """Merge a Dataset with either a Dataset or DataArray."""
+    other_ds = other.to_dataset() if isinstance(other, DataArray) else other
+    return dataset.merge(other_ds)
+

2025-06-25 23:32:48,340 - INFO - ------------------------------
2025-06-25 23:32:48,340 - INFO - END Runtime Completion Fn
2025-06-25 23:32:48,341 - INFO - ------------------------------
2025-06-25 23:32:48,341 - INFO - Got git diff for instance pydata__xarray-3677:
--------
diff --git a/merge_utils.py b/merge_utils.py
new file mode 100644
index 00000000..27c228d5
--- /dev/null
+++ b/merge_utils.py
@@ -0,0 +1,16 @@
+
+
+"""Standalone utilities for merging xarray objects."""
+
+def safe_merge(dataset, other):
+    """
+    Safely merge a Dataset with either a Dataset or DataArray.
+    Works around xarray's circular import issues.
+    """
+    try:
+        # Duck typing approach
+        other_ds = other.to_dataset() if hasattr(other, 'to_dataset') else other
+        return dataset.merge(other_ds)
+    except Exception as e:
+        raise ValueError(f"Failed to merge objects: {e}")
+
diff --git a/minimal_merge_test.py b/minimal_merge_test.py
new file mode 100644
index 00000000..5cb71975
--- /dev/null
+++ b/minimal_merge_test.py
@@ -0,0 +1,30 @@
+
+
+
+"""Minimal test for DataArray-Dataset merging without full xarray imports."""
+import sys
+from xarray.core.dataset import Dataset
+from xarray.core.dataarray import DataArray
+
+def test_merge():
+    ds = Dataset({'a': 0})
+    da = DataArray(1, name='b')
+    
+    # Convert DataArray to Dataset
+    da_as_ds = da.to_dataset()
+    
+    # Simple merge implementation
+    merged_vars = {**ds.variables, **da_as_ds.variables}
+    return Dataset(merged_vars)
+
+if __name__ == "__main__":
+    try:
+        result = test_merge()
+        print("Merge successful:")
+        print(result)
+        sys.exit(0)
+    except Exception as e:
+        print(f"Merge failed: {e}")
+        sys.exit(1)
+
+
diff --git a/standalone_merge_test.py b/standalone_merge_test.py
new file mode 100644
index 00000000..53f5fa70
--- /dev/null
+++ b/standalone_merge_test.py
@@ -0,0 +1,27 @@
+
+
+"""Standalone test for DataArray-Dataset merging."""
+import sys
+from merge_utils import safe_merge
+
+def main():
+    try:
+        import xarray as xr
+    except ImportError:
+        print("xarray not installed")
+        return 1
+
+    print("Creating test objects...")
+    ds = xr.Dataset({'a': 0})
+    da = xr.DataArray(1, name='b')
+
+    print("\nTesting top-level merge:")
+    print(xr.merge([ds, da]))
+
+    print("\nTesting safe_merge:")
+    print(safe_merge(ds, da))
+    return 0
+
+if __name__ == "__main__":
+    sys.exit(main())
+
diff --git a/test_merge_fix.py b/test_merge_fix.py
new file mode 100644
index 00000000..af12c17c
--- /dev/null
+++ b/test_merge_fix.py
@@ -0,0 +1,16 @@
+
+import xarray as xr
+from merge_utils import safe_merge
+
+ds = xr.Dataset({'a': 0})
+da = xr.DataArray(1, name='b')
+
+# Test top-level merge
+expected = xr.merge([ds, da])
+print("Top-level merge works:")
+print(expected)
+
+# Test safe_merge function
+print("\nSafe merge method:")
+result = safe_merge(ds, da)
+print(result)
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index ac0a923d..8d20e8aa 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -3604,9 +3604,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
             If any variables conflict (see ``compat``).
         """
         _check_inplace(inplace)
+        other_converted = other.to_dataset() if hasattr(other, 'to_dataset') else other
         merge_result = dataset_merge_method(
             self,
-            other,
+            other_converted,
             overwrite_vars=overwrite_vars,
             compat=compat,
             join=join,
diff --git a/xarray/core/merge.py b/xarray/core/merge.py
index 10c7804d..6ab7f1fe 100644
--- a/xarray/core/merge.py
+++ b/xarray/core/merge.py
@@ -19,13 +19,13 @@ import pandas as pd
 
 from . import dtypes, pdcompat
 from .alignment import deep_align
+from .dataarray import DataArray
 from .duck_array_ops import lazy_array_equiv
 from .utils import Frozen, dict_equiv
 from .variable import Variable, as_variable, assert_unique_multiindex_level_names
 
 if TYPE_CHECKING:
     from .coordinates import Coordinates
-    from .dataarray import DataArray
     from .dataset import Dataset
 
     DimsLike = Union[Hashable, Sequence[Hashable]]
@@ -814,16 +814,20 @@ def dataset_merge_method(
     else:
         overwrite_vars = {overwrite_vars}
 
+    try:
+        other_dataset = other.to_dataset() if hasattr(other, 'to_dataset') else other
+    except Exception:
+        other_dataset = other
     if not overwrite_vars:
-        objs = [dataset, other]
+        objs = [dataset, other_dataset]
         priority_arg = None
-    elif overwrite_vars == set(other):
-        objs = [dataset, other]
+    elif overwrite_vars == set(other_dataset):
+        objs = [dataset, other_dataset]
         priority_arg = 1
     else:
         other_overwrite: Dict[Hashable, CoercibleValue] = {}
         other_no_overwrite: Dict[Hashable, CoercibleValue] = {}
-        for k, v in other.items():
+        for k, v in other_dataset.items():
             if k in overwrite_vars:
                 other_overwrite[k] = v
             else:
diff --git a/xarray/utils/merge_utils.py b/xarray/utils/merge_utils.py
new file mode 100644
index 00000000..62c59021
--- /dev/null
+++ b/xarray/utils/merge_utils.py
@@ -0,0 +1,12 @@
+
+
+"""Utilities for merging DataArrays with Datasets."""
+from typing import Union
+from ..dataset import Dataset
+from ..dataarray import DataArray
+
+def safe_merge(dataset: Dataset, other: Union[Dataset, DataArray]):
+    """Merge a Dataset with either a Dataset or DataArray."""
+    other_ds = other.to_dataset() if isinstance(other, DataArray) else other
+    return dataset.merge(other_ds)
+
--------
2025-06-25 23:32:50,880 - INFO - Using instance container image: swebench/sweb.eval.x86_64.sphinx-doc_1776_sphinx-9602:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-25 23:32:50,880 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-25 23:32:50,880 - INFO - Logging LLM completions for instance sphinx-doc__sphinx-9602 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/sphinx-doc__sphinx-9602
