2025-06-26 17:31:52,186 - INFO - Building image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_3r8gn92n62un2dq8_634egmkijx387tjz
2025-06-26 17:34:34,039 - INFO - Image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_3r8gn92n62un2dq8_634egmkijx387tjz] build finished.
2025-06-26 17:34:34,049 - INFO - Re-tagged image [ghcr.io/all-hands-ai/runtime:oh_v0.40.0_3r8gn92n62un2dq8_634egmkijx387tjz] with more generic tag [oh_v0.40.0_3r8gn92n62un2dq8]
2025-06-26 17:34:34,053 - INFO - Image ghcr.io/all-hands-ai/runtime with tags [oh_v0.40.0_3r8gn92n62un2dq8_634egmkijx387tjz, oh_v0.40.0_3r8gn92n62un2dq8] built successfully
2025-06-26 17:34:34,085 - INFO - [runtime 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Starting runtime with image: ghcr.io/all-hands-ai/runtime:oh_v0.40.0_3r8gn92n62un2dq8_634egmkijx387tjz
2025-06-26 17:34:34,547 - INFO - [runtime 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Container started: openhands-runtime-7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552. VSCode URL: None
2025-06-26 17:34:34,548 - INFO - [runtime 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Waiting for client to become ready at http://localhost:36926...
2025-06-26 17:35:06,642 - INFO - [runtime 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Runtime is ready.
2025-06-26 17:35:09,218 - INFO - ------------------------------
2025-06-26 17:35:09,219 - INFO - BEGIN Runtime Initialization Fn
2025-06-26 17:35:09,219 - INFO - ------------------------------
2025-06-26 17:35:09,220 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
echo 'export SWE_INSTANCE_ID=django__django-11532' >> ~/.bashrc && echo 'export PIP_CACHE_DIR=~/.cache/pip' >> ~/.bashrc && echo "alias git='git --no-pager'" >> ~/.bashrc && git config --global core.pager "" && git config --global diff.binary false
2025-06-26 17:35:09,865 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:09,865 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
export USER=$(whoami); echo USER=${USER} 
2025-06-26 17:35:10,505 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
USER=root
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:10,506 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
mkdir -p /swe_util/eval_data/instances
2025-06-26 17:35:11,145 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:11,159 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cat ~/.bashrc
2025-06-26 17:35:11,797 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
source /opt/miniconda3/etc/profile.d/conda.sh && conda activate testbed

. "/openhands/bin/env"
export ENABLE_AUTO_LINT=true
export NO_CHANGE_TIMEOUT_SECONDS=30
export SWE_INSTANCE_ID=django__django-11532
export PIP_CACHE_DIR=~/.cache/pip
alias git='git --no-pager'
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:11,798 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source ~/.bashrc
2025-06-26 17:35:12,436 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:12,436 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
source /swe_util/instance_swe_entry.sh
2025-06-26 17:35:13,575 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
WORKSPACE_NAME: django__django__3.0
[The command completed with exit code 0.]
[Current working directory: /workspace]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:13,575 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.0
2025-06-26 17:35:14,213 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:14,214 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git reset --hard
2025-06-26 17:35:15,357 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
HEAD is now at a5308514fb Fixed #27801 -- Made createsuperuser fall back to environment variables for password and required fields.
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:15,358 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for remote_name in $(git remote); do git remote remove "${remote_name}"; done
2025-06-26 17:35:15,993 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:15,994 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
which python
2025-06-26 17:35:16,630 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
/opt/miniconda3/envs/testbed/bin/python
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:35:16,631 - INFO - ------------------------------
2025-06-26 17:35:16,631 - INFO - END Runtime Initialization Fn
2025-06-26 17:35:16,631 - INFO - ------------------------------
2025-06-26 17:35:16,650 - INFO - [runtime 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Selected repo: None, loading microagents from /workspace/.openhands/microagents (inside runtime)
2025-06-26 17:35:16,656 - INFO - Loading user workspace microagents: []
2025-06-26 17:35:16,656 - INFO - [Agent Controller 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] AgentController 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552 - created new state. start_id: 0
2025-06-26 17:35:16,662 - INFO - [Agent Controller 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Setting agent(CodeActAgent) state from AgentState.LOADING to AgentState.RUNNING
2025-06-26 17:35:16,664 - INFO - Microagent 'gitlab' triggered by keyword 'git'
2025-06-26 17:35:16,665 - INFO - Microagent 'github' triggered by keyword 'github'
2025-06-26 17:59:19,607 - INFO - [Agent Controller 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.AWAITING_USER_INPUT
2025-06-26 17:59:19,611 - INFO - [Agent Controller 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Setting agent(CodeActAgent) state from AgentState.AWAITING_USER_INPUT to AgentState.RUNNING
2025-06-26 17:59:19,612 - ERROR - RuntimeError: Agent reached maximum iteration in headless mode. Current iteration: 100, max iteration: 100
2025-06-26 17:59:19,613 - INFO - [Agent Controller 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Setting agent(CodeActAgent) state from AgentState.RUNNING to AgentState.ERROR
2025-06-26 17:59:19,614 - WARNING - Stopping agent due to traffic control
2025-06-26 17:59:19,615 - INFO - [Agent Controller 7eba535e-44d1-4bb6-85e7-e3748003dbb0-f09c416de859e552] Setting agent(CodeActAgent) state from AgentState.ERROR to AgentState.ERROR
2025-06-26 17:59:20,294 - INFO - ------------------------------
2025-06-26 17:59:20,294 - INFO - BEGIN Runtime Completion Fn
2025-06-26 17:59:20,294 - INFO - ------------------------------
2025-06-26 17:59:20,294 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
cd /workspace/django__django__3.0
2025-06-26 17:59:20,931 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:59:20,932 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git config --global core.pager ""
2025-06-26 17:59:21,572 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:59:21,573 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
find . -type d -name .git -not -path "./.git"
2025-06-26 17:59:22,213 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:59:22,214 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git add -A
2025-06-26 17:59:22,851 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:59:22,852 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
for file in $(git status --porcelain | grep -E "^(M| M|\?\?|A| A)" | cut -c4-); do
        if [ -f "$file" ] && (file "$file" | grep -q "executable" || git check-attr binary "$file" | grep -q "binary: set"); then
            git rm -f "$file" 2>/dev/null || rm -f "$file"
            echo "Removed: $file"
        fi
    done
2025-06-26 17:59:23,503 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--
bash: file: command not found
bash: file: command not found
[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:59:23,504 - INFO - **CmdRunAction (source=None, is_input=False)**
COMMAND:
git diff --no-color --cached a5308514fb4bc5086c9a16a8a24a945eeebb073c > patch.diff
2025-06-26 17:59:24,142 - INFO - **CmdOutputObservation (source=None, exit code=0, metadata={
  "exit_code": 0,
  "pid": -1,
  "username": "root",
  "hostname": "59a14c8660be",
  "working_dir": "/workspace/django__django__3.0",
  "py_interpreter_path": "/opt/miniconda3/envs/testbed/bin/python",
  "prefix": "",
  "suffix": "\n[The command completed with exit code 0.]"
})**
--BEGIN AGENT OBSERVATION--

[The command completed with exit code 0.]
[Current working directory: /workspace/django__django__3.0]
[Python interpreter: /opt/miniconda3/envs/testbed/bin/python]
[Command finished with exit code 0]
--END AGENT OBSERVATION--
2025-06-26 17:59:24,143 - INFO - FileReadAction(path='patch.diff', start=0, end=-1, thought='', action=<ActionType.READ: 'read'>, security_risk=None, impl_source=<FileReadSource.DEFAULT: 'default'>, view_range=None)
2025-06-26 17:59:24,149 - INFO - [Read from /workspace/django__django__3.0/patch.diff is successful.]
diff --git a/django/core/mail/message.py b/django/core/mail/message.py
index e393b4cf5c..c560118f74 100644
--- a/django/core/mail/message.py
+++ b/django/core/mail/message.py
@@ -63,6 +63,13 @@ def forbid_multi_line_headers(name, val, encoding):
     except UnicodeEncodeError:
         if name.lower() in ADDRESS_HEADERS:
             val = ', '.join(sanitize_address(addr, encoding) for addr in getaddresses((val,)))
+        elif name.lower() == 'message-id' and '@' in val:
+            # Handle Message-ID domain encoding
+            local, domain = val.split('@', 1)
+            try:
+                domain.encode('ascii')
+            except UnicodeEncodeError:
+                val = f"{local}@{domain.encode('idna').decode('ascii')}"
         else:
             val = Header(val, encoding).encode()
     else:
@@ -154,6 +161,18 @@ class SafeMIMEText(MIMEMixin, MIMEText):
         MIMEText.__init__(self, _text, _subtype=_subtype, _charset=_charset)
 
     def __setitem__(self, name, val):
+        if name.lower() == 'message-id' and isinstance(val, str):
+            try:
+                val.encode('ascii')
+            except UnicodeEncodeError:
+                # Convert domain part to punycode
+                domain_start = val.find('@') + 1
+                if domain_start > 0:
+                    domain = val[domain_start:]
+                    try:
+                        domain.encode('ascii')
+                    except UnicodeEncodeError:
+                        val = val[:domain_start] + domain.encode('idna').decode('ascii')
         name, val = forbid_multi_line_headers(name, val, self.encoding)
         MIMEText.__setitem__(self, name, val)
 
@@ -256,8 +275,8 @@ class EmailMessage:
             # will get picked up by formatdate().
             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)
         if 'message-id' not in header_names:
-            # Use cached DNS_NAME for performance
-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)
+            # DNS_NAME is now guaranteed to be ASCII compatible
+            msg['Message-ID'] = make_msgid(domain=str(DNS_NAME))
         for name, value in self.extra_headers.items():
             if name.lower() != 'from':  # From is already handled
                 msg[name] = value
diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py
index d18dfe4667..1905110d5d 100644
--- a/django/core/mail/utils.py
+++ b/django/core/mail/utils.py
@@ -13,7 +13,23 @@ class CachedDnsName:
 
     def get_fqdn(self):
         if not hasattr(self, '_fqdn'):
-            self._fqdn = socket.getfqdn()
+            try:
+                fqdn = socket.getfqdn()
+                # First try ASCII encoding
+                try:
+                    fqdn.encode('ascii')
+                except UnicodeEncodeError:
+                    # If fails, convert to punycode
+                    try:
+                        fqdn = fqdn.encode('idna').decode('ascii')
+                        # Verify punycode conversion
+                        fqdn.encode('ascii')
+                    except (UnicodeError, AttributeError):
+                        # If all fails, use localhost
+                        fqdn = 'localhost'
+                self._fqdn = fqdn
+            except (socket.error, UnicodeError):
+                self._fqdn = 'localhost'
         return self._fqdn
 
 

2025-06-26 17:59:24,150 - INFO - ------------------------------
2025-06-26 17:59:24,151 - INFO - END Runtime Completion Fn
2025-06-26 17:59:24,151 - INFO - ------------------------------
2025-06-26 17:59:24,151 - INFO - Got git diff for instance django__django-11532:
--------
diff --git a/django/core/mail/message.py b/django/core/mail/message.py
index e393b4cf5c..c560118f74 100644
--- a/django/core/mail/message.py
+++ b/django/core/mail/message.py
@@ -63,6 +63,13 @@ def forbid_multi_line_headers(name, val, encoding):
     except UnicodeEncodeError:
         if name.lower() in ADDRESS_HEADERS:
             val = ', '.join(sanitize_address(addr, encoding) for addr in getaddresses((val,)))
+        elif name.lower() == 'message-id' and '@' in val:
+            # Handle Message-ID domain encoding
+            local, domain = val.split('@', 1)
+            try:
+                domain.encode('ascii')
+            except UnicodeEncodeError:
+                val = f"{local}@{domain.encode('idna').decode('ascii')}"
         else:
             val = Header(val, encoding).encode()
     else:
@@ -154,6 +161,18 @@ class SafeMIMEText(MIMEMixin, MIMEText):
         MIMEText.__init__(self, _text, _subtype=_subtype, _charset=_charset)
 
     def __setitem__(self, name, val):
+        if name.lower() == 'message-id' and isinstance(val, str):
+            try:
+                val.encode('ascii')
+            except UnicodeEncodeError:
+                # Convert domain part to punycode
+                domain_start = val.find('@') + 1
+                if domain_start > 0:
+                    domain = val[domain_start:]
+                    try:
+                        domain.encode('ascii')
+                    except UnicodeEncodeError:
+                        val = val[:domain_start] + domain.encode('idna').decode('ascii')
         name, val = forbid_multi_line_headers(name, val, self.encoding)
         MIMEText.__setitem__(self, name, val)
 
@@ -256,8 +275,8 @@ class EmailMessage:
             # will get picked up by formatdate().
             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)
         if 'message-id' not in header_names:
-            # Use cached DNS_NAME for performance
-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)
+            # DNS_NAME is now guaranteed to be ASCII compatible
+            msg['Message-ID'] = make_msgid(domain=str(DNS_NAME))
         for name, value in self.extra_headers.items():
             if name.lower() != 'from':  # From is already handled
                 msg[name] = value
diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py
index d18dfe4667..1905110d5d 100644
--- a/django/core/mail/utils.py
+++ b/django/core/mail/utils.py
@@ -13,7 +13,23 @@ class CachedDnsName:
 
     def get_fqdn(self):
         if not hasattr(self, '_fqdn'):
-            self._fqdn = socket.getfqdn()
+            try:
+                fqdn = socket.getfqdn()
+                # First try ASCII encoding
+                try:
+                    fqdn.encode('ascii')
+                except UnicodeEncodeError:
+                    # If fails, convert to punycode
+                    try:
+                        fqdn = fqdn.encode('idna').decode('ascii')
+                        # Verify punycode conversion
+                        fqdn.encode('ascii')
+                    except (UnicodeError, AttributeError):
+                        # If all fails, use localhost
+                        fqdn = 'localhost'
+                self._fqdn = fqdn
+            except (socket.error, UnicodeError):
+                self._fqdn = 'localhost'
         return self._fqdn
 
 
--------
2025-06-26 17:59:26,698 - INFO - Using instance container image: swebench/sweb.eval.x86_64.sphinx-doc_1776_sphinx-11445:latest. Please make sure this image exists. Submit an issue on https://github.com/All-Hands-AI/OpenHands if you run into any issues.
2025-06-26 17:59:26,698 - INFO - Resource mapping for princeton-nlp__SWE-bench_Verified-test not found.
2025-06-26 17:59:26,698 - INFO - Logging LLM completions for instance sphinx-doc__sphinx-11445 to evaluation/evaluation_outputs/outputs/princeton-nlp__SWE-bench_Verified-test/CodeActAgent/deepseek-chat_maxiter_100_N_v0.40.0-no-hint-run_1/llm_completions/sphinx-doc__sphinx-11445
