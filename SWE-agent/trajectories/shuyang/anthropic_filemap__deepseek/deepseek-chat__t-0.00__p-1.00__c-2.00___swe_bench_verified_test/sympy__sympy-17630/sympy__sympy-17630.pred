{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..cff0ac70d7 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,7 +164,31 @@ def structurally_equal(self, other):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            # Convert Zero blocks to ZeroMatrix with correct dimensions\n+            def ensure_matrix(block, rows, cols):\n+                from sympy.core.numbers import Zero\n+                if isinstance(block, Zero):\n+                    return ZeroMatrix(rows, cols)\n+                return block\n+\n+            # Ensure all blocks are matrices\n+            blocks = self.blocks\n+            other_blocks = other.blocks\n+            result_blocks = []\n+            for i in range(blocks.shape[0]):\n+                row = []\n+                for j in range(other_blocks.shape[1]):\n+                    # Initialize the block as ZeroMatrix with correct dimensions\n+                    block = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])\n+                    for k in range(blocks.shape[1]):\n+                        # Multiply blocks[i, k] and other_blocks[k, j]\n+                        A = ensure_matrix(blocks[i, k], blocks[i, k].rows if hasattr(blocks[i, k], 'rows') else self.rowblocksizes[i], blocks[i, k].cols if hasattr(blocks[i, k], 'cols') else self.colblocksizes[k])\n+                        B = ensure_matrix(other_blocks[k, j], other_blocks[k, j].rows if hasattr(other_blocks[k, j], 'rows') else other.rowblocksizes[k], other_blocks[k, j].cols if hasattr(other_blocks[k, j], 'cols') else other.colblocksizes[j])\n+                        block += A * B\n+                    row.append(block)\n+                result_blocks.append(row)\n+\n+            return BlockMatrix(result_blocks)\n \n         return self * other\n \n"}