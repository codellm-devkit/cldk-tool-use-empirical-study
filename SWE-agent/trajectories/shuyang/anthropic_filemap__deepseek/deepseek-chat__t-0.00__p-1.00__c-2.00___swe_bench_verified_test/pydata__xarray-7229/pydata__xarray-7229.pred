{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-7229", "model_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..fa3dffae 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1789,7 +1789,7 @@ def where(cond, x, y, keep_attrs=None):\n     y : scalar, array, Variable, DataArray or Dataset\n         values to choose from where `cond` is False\n     keep_attrs : bool or str or callable, optional\n-        How to treat attrs. If True, keep the attrs of `x`.\n+        How to treat attrs. If True, keep the attrs of `x` but preserve coordinate attributes.\n \n     Returns\n     -------\n@@ -1858,9 +1858,14 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n     if keep_attrs is True:\n-        # keep the attributes of x, the second parameter, by default to\n-        # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        # Preserve coordinate attributes and merge variable attributes from x\n+        def keep_attrs(attrs, context=None):\n+            if context is not None and context.get(\"variable\", False):\n+                return dict(getattr(x, \"attrs\", {}))\n+            # If attrs is a list of dictionaries (for coordinates), return the first one\n+            if isinstance(attrs, list) and all(isinstance(a, dict) for a in attrs):\n+                return dict(attrs[0])\n+            return dict(attrs) if isinstance(attrs, dict) else {}\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n"}