diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..fcf6c8d807 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -667,7 +667,10 @@ class Quantity(np.ndarray):
         arrays = []
         for input_, converter in zip(inputs, converters):
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+            try:
+                arrays.append(converter(input_) if converter else input_)
+            except ValueError:
+                return NotImplemented
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/pyproject.toml b/pyproject.toml
index 486d6b9b3b..1c5f74f3a1 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/test_duck_array.py b/test_duck_array.py
new file mode 100644
index 0000000000..ad4a9826c2
--- /dev/null
+++ b/test_duck_array.py
@@ -0,0 +1,26 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+# Test case from PR description
+result = (1 * u.m) + DuckArray(1 * u.mm)
+print(result)
diff --git a/test_duck_array_extended.py b/test_duck_array_extended.py
new file mode 100644
index 0000000000..bdc72d547f
--- /dev/null
+++ b/test_duck_array_extended.py
@@ -0,0 +1,34 @@
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+# Test case from PR description
+result1 = (1 * u.m) + DuckArray(1 * u.mm)
+print("Test 1 (m + mm):", result1)
+
+# Test with non-scalar input
+result2 = (np.array([1, 2]) * u.m) + DuckArray(np.array([1, 2]) * u.mm)
+print("Test 2 (non-scalar):", result2)
+
+# Test with incompatible units (should return NotImplemented)
+result3 = (1 * u.m) + DuckArray(1 * u.s)
+print("Test 3 (incompatible units):", result3)
