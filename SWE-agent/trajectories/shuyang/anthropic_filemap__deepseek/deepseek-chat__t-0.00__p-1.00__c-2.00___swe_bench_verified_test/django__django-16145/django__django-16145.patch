diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 822968ef56..b614992bfe 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1258,8 +1258,6 @@ class When(Expression):
                 "When() supports a Q object, a boolean expression, or lookups "
                 "as a condition."
             )
-        if isinstance(condition, Q) and not condition:
-            raise ValueError("An empty Q() can't be used as a When() condition.")
         super().__init__(output_field=None)
         self.condition = condition
         self.result = self._parse_expressions(then)[0]
@@ -1298,9 +1296,27 @@ class When(Expression):
         connection.ops.check_expression_support(self)
         template_params = extra_context
         sql_params = []
-        condition_sql, condition_params = compiler.compile(self.condition)
-        template_params["condition"] = condition_sql
-        sql_params.extend(condition_params)
+        if isinstance(self.condition, Q):
+            try:
+                condition_sql, condition_params = compiler.compile(self.condition)
+                if not condition_sql or not condition_sql.strip():
+                    # Replace empty conditions with "1=1" (always true)
+                    template_params["condition"] = "1=1"
+                else:
+                    template_params["condition"] = condition_sql
+                    sql_params.extend(condition_params)
+            except EmptyResultSet:
+                # Replace conditions that can't match anything with "1=1" (always true)
+                template_params["condition"] = "1=1"
+        else:
+            condition_sql, condition_params = compiler.compile(self.condition)
+            template_params["condition"] = condition_sql
+            sql_params.extend(condition_params)
+        
+        # Ensure the condition is not empty
+        if "condition" not in template_params or not template_params["condition"]:
+            template_params["condition"] = "1=1"
+            
         result_sql, result_params = compiler.compile(self.result)
         template_params["result"] = result_sql
         sql_params.extend(result_params)
