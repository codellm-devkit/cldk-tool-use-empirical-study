{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pytest-dev__pytest-5631", "model_patch": "diff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..6b652bb17\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,19 @@\n+import numpy as np\n+from unittest.mock import patch\n+\n+class DummyClass:\n+    pass\n+\n+def test_function():\n+    @patch(target='__main__.DummyClass', new=np.array([-5.5, 3.0]))\n+    def inner_function():\n+        pass\n+    return inner_function\n+\n+# Simulate pytest collection\n+def pytest_pycollect_makeitem(collector, name, obj):\n+    if name == \"test_function\":\n+        return obj\n+\n+if __name__ == \"__main__\":\n+    test_function()\n\\ No newline at end of file\ndiff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex d238061b4..c23e70869 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -68,7 +68,10 @@ def num_mock_patch_args(function):\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n         return len(\n-            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n+            [p for p in patchings if not p.attribute_name and (\n+                (hasattr(p.new, \"__array__\") and False) or  # Skip array-like objects\n+                (p.new in sentinels if not hasattr(p.new, \"__array__\") else False)\n+            )]\n         )\n     return len(patchings)\n \ndiff --git a/test_patch_array.py b/test_patch_array.py\nnew file mode 100644\nindex 000000000..9cbc3c977\n--- /dev/null\n+++ b/test_patch_array.py\n@@ -0,0 +1,11 @@\n+import numpy as np\n+from unittest.mock import patch\n+\n+class DummyClass:\n+    pass\n+\n+def test_patch_array():\n+    @patch(target='__main__.DummyClass', new=np.array([-5.5, 3.0]))\n+    def inner_function():\n+        pass\n+    assert True\n\\ No newline at end of file\n"}