{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 90d90119d0..9824c7ec0b 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -7,6 +7,7 @@ from uuid import UUID\n \n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import NotSupportedError, connection\n+from django.db import models\n from django.db.models import fields\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.query_utils import Q\n@@ -1327,10 +1328,15 @@ class Window(Expression):\n         params.extend(window_params)\n         template = template or self.template\n \n-        return template % {\n+        sql = template % {\n             'expression': expr_sql,\n             'window': ''.join(window_sql).strip()\n-        }, params\n+        }\n+\n+        if connection.vendor == 'sqlite' and isinstance(self.source_expression.output_field, models.DecimalField):\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n+\n+        return sql, params\n \n     def __str__(self):\n         return '{} OVER ({}{}{})'.format(\n@@ -1340,6 +1346,12 @@ class Window(Expression):\n             str(self.frame or ''),\n         )\n \n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        if isinstance(self.source_expression.output_field, models.DecimalField):\n+            sql, params = self.as_sql(compiler, connection)\n+            return 'CAST(%s AS NUMERIC)' % sql, params\n+        return self.as_sql(compiler, connection)\n+\n     def __repr__(self):\n         return '<%s: %s>' % (self.__class__.__name__, self)\n \ndiff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 84b2b24ffa..4d86da16ef 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -1,3 +1,4 @@\n+from django.db import models\n from django.db.models.expressions import Func\n from django.db.models.fields import FloatField, IntegerField\n \n@@ -52,6 +53,15 @@ class LagLeadFunction(Func):\n class Lag(LagLeadFunction):\n     function = 'LAG'\n \n+    def as_sql(self, compiler, connection, **extra_context):\n+        if connection.vendor == 'sqlite' and isinstance(self.output_field, models.DecimalField):\n+            # Generate the SQL for the window function\n+            sql, params = super().as_sql(compiler, connection, **extra_context)\n+            # Ensure the CAST wraps the entire expression\n+            if 'OVER' in sql:\n+                return 'CAST(%s AS NUMERIC)' % sql, params\n+        return super().as_sql(compiler, connection, **extra_context)\n+\n \n class LastValue(Func):\n     arity = 1\n"}