diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..4e037e4be5 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1225,6 +1225,9 @@ class QuerySet:
         if self.query.extra_order_by or self.query.order_by:
             return True
         elif self.query.default_ordering and self.query.get_meta().ordering:
+            # Check if GROUP BY is present, which removes default ordering
+            if self.query.group_by:
+                return False
             return True
         else:
             return False
diff --git a/scripts/reproduce_ordered_issue.py b/scripts/reproduce_ordered_issue.py
new file mode 100644
index 0000000000..d76353ab88
--- /dev/null
+++ b/scripts/reproduce_ordered_issue.py
@@ -0,0 +1,42 @@
+from django.db import models
+from django.db.models.sql.query import Query
+
+# Mock the QuerySet and Query classes to reproduce the issue
+class MockQuery(Query):
+    def __init__(self, model):
+        super().__init__(model)
+        self.default_ordering = True
+
+    def get_compiler(self, *args, **kwargs):
+        class MockCompiler:
+            def as_sql(self):
+                return "SELECT ...", ()
+        return MockCompiler()
+
+class MockQuerySet:
+    def __init__(self, model):
+        self.model = model
+        self.query = MockQuery(model)
+        self._result_cache = None
+
+    @property
+    def ordered(self):
+        return self.query.default_ordering
+
+    def all(self):
+        return self
+
+    def annotate(self, *args, **kwargs):
+        self.query.default_ordering = False  # Simulate GROUP BY removing ordering
+        return self
+
+# Test the issue
+qs = MockQuerySet(None)
+print("QuerySet without annotate:")
+print(f"Ordered: {qs.ordered}")
+print(f"Default ordering: {qs.query.default_ordering}")
+
+qs2 = MockQuerySet(None).annotate("pk")
+print("\nQuerySet with annotate:")
+print(f"Ordered: {qs2.ordered}")
+print(f"Default ordering: {qs2.query.default_ordering}")
\ No newline at end of file
