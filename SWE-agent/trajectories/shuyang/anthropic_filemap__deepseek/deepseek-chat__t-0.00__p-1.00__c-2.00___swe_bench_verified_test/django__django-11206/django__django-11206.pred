{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-11206", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc435..716c1f964c 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -27,8 +27,14 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n     # sign\n     sign = ''\n     if isinstance(number, Decimal):\n+        # If decimal_pos is specified and the number is smaller than what can be represented,\n+        # return a string of zeros.\n+        if decimal_pos is not None:\n+            min_value = Decimal('1') / (Decimal('10') ** decimal_pos)\n+            if abs(number) < min_value:\n+                return sign + '0' + decimal_sep + '0' * decimal_pos\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n-        # scientific notation to avoid high memory usage in {:f}'.format().\n+        # scientific notation to avoid high memory usage in '{:f}'.format().\n         _, digits, exponent = number.as_tuple()\n         if abs(exponent) + len(digits) > 200:\n             number = '{:e}'.format(number)\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..915b5e742c\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,18 @@\n+from decimal import Decimal\n+from django.utils.numberformat import format as nformat\n+\n+# Mock Django settings\n+class MockSettings:\n+    USE_L10N = False\n+    USE_THOUSAND_SEPARATOR = False\n+\n+import django.conf\n+original_settings = django.conf.settings\n+django.conf.settings = MockSettings()\n+\n+# Test cases from the PR description\n+print(nformat(Decimal('1e-199'), '.', decimal_pos=2))  # Expected: '0.00'\n+print(nformat(Decimal('1e-200'), '.', decimal_pos=2))  # Expected: '0.00' (currently '1.00e-200')\n+\n+# Restore original settings\n+django.conf.settings = original_settings\n\\ No newline at end of file\n"}