diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bdfd659439
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,4 @@
+import sympy as smp
+
+q, u = smp.symbols(('q:2', 'u:2'), cls=smp.Function)
+print(type(q[0]))
\ No newline at end of file
diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py
index f4a555c13f..a54ef4696e 100644
--- a/sympy/core/symbol.py
+++ b/sympy/core/symbol.py
@@ -5,7 +5,7 @@
 from .cache import cacheit
 from .containers import Tuple
 from .expr import Expr, AtomicExpr
-from .function import AppliedUndef, FunctionClass
+from .function import AppliedUndef, FunctionClass, Function
 from .kind import NumberKind, UndefinedKind
 from .logic import fuzzy_bool
 from .singleton import S
@@ -747,13 +747,15 @@ def literal(s):
 
             split: list[str] = _range.split(name)
             split_list: list[list[str]] = []
-            # remove 1 layer of bounding parentheses around ranges
-            for i in range(len(split) - 1):
-                if i and ':' in split[i] and split[i] != ':' and \
-                        split[i - 1].endswith('(') and \
-                        split[i + 1].startswith(')'):
-                    split[i - 1] = split[i - 1][:-1]
-                    split[i + 1] = split[i + 1][1:]
+            # remove 1 layer of bounding parentheses around ranges, unless cls is Function
+            from .function import FunctionClass
+            if not isinstance(cls, FunctionClass):
+                for i in range(len(split) - 1):
+                    if i and ':' in split[i] and split[i] != ':' and \
+                            split[i - 1].endswith('(') and \
+                            split[i + 1].startswith(')'):
+                        split[i - 1] = split[i - 1][:-1]
+                        split[i + 1] = split[i + 1][1:]
             for s in split:
                 if ':' in s:
                     if s.endswith(':'):
