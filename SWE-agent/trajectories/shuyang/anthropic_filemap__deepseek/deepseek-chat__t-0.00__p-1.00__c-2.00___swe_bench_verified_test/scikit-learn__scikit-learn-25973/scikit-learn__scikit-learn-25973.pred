{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "scikit-learn__scikit-learn-25973", "model_patch": "diff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..422b77a1a\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,13 @@\n+from sklearn.datasets import make_classification\n+from sklearn.feature_selection import SequentialFeatureSelector\n+from sklearn.neighbors import KNeighborsClassifier\n+from sklearn.model_selection import LeaveOneGroupOut\n+import numpy as np\n+X, y = make_classification()\n+groups = np.zeros_like(y, dtype=int)\n+groups[y.size//2:] = 1\n+cv = LeaveOneGroupOut()\n+splits = list(cv.split(X, y, groups=groups))\n+clf = KNeighborsClassifier(n_neighbors=5)\n+seq = SequentialFeatureSelector(clf, n_features_to_select=5, scoring='accuracy', cv=splits)\n+seq.fit(X, y)\ndiff --git a/sklearn/feature_selection/_sequential.py b/sklearn/feature_selection/_sequential.py\nindex e983c55de..e9134adf3 100644\n--- a/sklearn/feature_selection/_sequential.py\n+++ b/sklearn/feature_selection/_sequential.py\n@@ -305,11 +305,18 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator\n             if self.direction == \"backward\":\n                 candidate_mask = ~candidate_mask\n             X_new = X[:, candidate_mask]\n+            # Ensure cv is properly consumed if it's an iterable or generator\n+            if hasattr(self.cv, 'split'):\n+                cv_splits = list(self.cv.split(X_new, y))\n+            elif hasattr(self.cv, '__iter__') and not isinstance(self.cv, (list, tuple, np.ndarray)):\n+                cv_splits = list(self.cv)\n+            else:\n+                cv_splits = self.cv\n             scores[feature_idx] = cross_val_score(\n                 estimator,\n                 X_new,\n                 y,\n-                cv=self.cv,\n+                cv=cv_splits,\n                 scoring=self.scoring,\n                 n_jobs=self.n_jobs,\n             ).mean()\n"}