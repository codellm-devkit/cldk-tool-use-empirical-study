{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-16502", "model_patch": "diff --git a/django/core/handlers/wsgi.py b/django/core/handlers/wsgi.py\nindex c2b7cc2b6f..312f9e084e 100644\n--- a/django/core/handlers/wsgi.py\n+++ b/django/core/handlers/wsgi.py\n@@ -141,6 +141,10 @@ class WSGIHandler(base.BaseHandler):\n             *((\"Set-Cookie\", c.output(header=\"\")) for c in response.cookies.values()),\n         ]\n         start_response(status, response_headers)\n+        if environ.get(\"REQUEST_METHOD\") == \"HEAD\":\n+            # Ensure no response body is returned for HEAD requests.\n+            response.content = b\"\"\n+            response[\"Content-Length\"] = \"0\"\n         if getattr(response, \"file_to_stream\", None) is not None and environ.get(\n             \"wsgi.file_wrapper\"\n         ):\ndiff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex fef5532e58..a34afdf623 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -127,6 +127,15 @@ class ServerHandler(simple_server.ServerHandler):\n         super().__init__(\n             LimitedStream(stdin, content_length), stdout, stderr, environ, **kwargs\n         )\n+        self._environ = environ\n+\n+    @property\n+    def environ(self):\n+        return self._environ\n+\n+    @environ.setter\n+    def environ(self, value):\n+        self._environ = value\n \n     def cleanup_headers(self):\n         super().cleanup_headers()\n@@ -145,7 +154,20 @@ class ServerHandler(simple_server.ServerHandler):\n \n     def close(self):\n         self.get_stdin().read()\n+        # Prevent the parent class from setting self.environ = None\n+        environ = self._environ\n         super().close()\n+        self._environ = environ\n+\n+    def run(self, application):\n+        \"\"\"Override to strip response body for HEAD requests.\"\"\"\n+        if self.environ.get(\"REQUEST_METHOD\") == \"HEAD\":\n+            # Ensure no response body is returned for HEAD requests.\n+            self.result = []\n+            if hasattr(self, \"headers\") and self.headers is not None:\n+                self.headers[\"Content-Length\"] = \"0\"\n+            return []\n+        return super().run(application)\n \n \n class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n@@ -226,6 +248,12 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         handler.request_handler = self  # backpointer for logging & connection closing\n         handler.run(self.server.get_app())\n \n+        # Strip response body for HEAD requests\n+        if self.command == \"HEAD\":\n+            handler.result = []\n+            if hasattr(handler, \"headers\") and handler.headers is not None:\n+                handler.headers[\"Content-Length\"] = \"0\"\n+\n \n def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer):\n     server_address = (addr, port)\ndiff --git a/django_test/__init__.py b/django_test/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/django_test/settings.py b/django_test/settings.py\nnew file mode 100644\nindex 0000000000..1281861315\n--- /dev/null\n+++ b/django_test/settings.py\n@@ -0,0 +1,15 @@\n+DEBUG = True\n+\n+INSTALLED_APPS = [\n+    'django.contrib.staticfiles',\n+]\n+\n+STATIC_URL = '/static/'\n+\n+SECRET_KEY = 'django-insecure-test-key'\n+\n+ROOT_URLCONF = 'django_test.urls'\n+\n+MIDDLEWARE = [\n+    'django.middleware.common.CommonMiddleware',\n+]\n\\ No newline at end of file\ndiff --git a/django_test/urls.py b/django_test/urls.py\nnew file mode 100644\nindex 0000000000..2dc7ce6854\n--- /dev/null\n+++ b/django_test/urls.py\n@@ -0,0 +1,9 @@\n+from django.urls import path\n+from django.http import HttpResponse\n+\n+def home(request):\n+    return HttpResponse(\"Welcome to Django\")\n+\n+urlpatterns = [\n+    path('', home),\n+]\n\\ No newline at end of file\ndiff --git a/manage.py b/manage.py\nnew file mode 100644\nindex 0000000000..b9456c5210\n--- /dev/null\n+++ b/manage.py\n@@ -0,0 +1,8 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+\n+if __name__ == \"__main__\":\n+    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django_test.settings\")\n+    from django.core.management import execute_from_command_line\n+    execute_from_command_line(sys.argv)\n\\ No newline at end of file\n"}