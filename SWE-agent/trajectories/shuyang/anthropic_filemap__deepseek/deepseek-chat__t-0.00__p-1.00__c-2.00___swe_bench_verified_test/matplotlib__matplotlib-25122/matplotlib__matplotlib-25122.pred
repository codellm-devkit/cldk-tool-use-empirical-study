{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-25122", "model_patch": "diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py\nindex 3552904c3d..2eec639960 100644\n--- a/lib/matplotlib/mlab.py\n+++ b/lib/matplotlib/mlab.py\n@@ -424,10 +424,10 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n             result /= Fs\n             # Scale the spectrum by the norm of the window to compensate for\n             # windowing loss; see Bendat & Piersol Sec 11.5.2.\n-            result /= (np.abs(window)**2).sum()\n+            result /= (window**2).sum()\n         else:\n             # In this case, preserve power in the segment, not amplitude\n-            result /= np.abs(window).sum()**2\n+            result /= window.sum()**2\n \n     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs\n \ndiff --git a/reproduce_bug.py b/reproduce_bug.py\nnew file mode 100644\nindex 0000000000..3f8a1d6d09\n--- /dev/null\n+++ b/reproduce_bug.py\n@@ -0,0 +1,21 @@\n+import numpy as np\n+from scipy import signal\n+import sys\n+sys.path.append('/testbed/lib/matplotlib')\n+from mlab import _spectral_helper\n+\n+# Generate a test signal\n+np.random.seed(0)\n+x = np.random.randn(512)\n+window = signal.windows.flattop(512)\n+\n+# Ensure the window length matches the data length\n+assert len(window) == len(x)\n+\n+# Compute the PSD using the corrected _spectral_helper\n+result, _, _ = _spectral_helper(\n+    x, x, mode='psd', NFFT=len(window), window=window, scale_by_freq=True\n+)\n+\n+# The corrected behavior should avoid the np.abs issue\n+print(\"PSD computation completed with corrected window correction.\")\n\\ No newline at end of file\n"}