{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..80e334864a 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1035,18 +1035,17 @@ class MultiValueField(Field):\n             except IndexError:\n                 field_value = None\n             if field_value in self.empty_values:\n-                if self.require_all_fields:\n+                if field.required:\n+                    # Raise a 'required' error if the sub-field is required and empty.\n+                    raise ValidationError(field.error_messages['required'], code='required')\n+                elif self.require_all_fields and self.required:\n                     # Raise a 'required' error if the MultiValueField is\n                     # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+                    raise ValidationError(self.error_messages['required'], code='required')\n+                elif not any(v not in self.empty_values for v in value) and not self.required:\n+                    # If all fields are empty and the MultiValueField is not required,\n+                    # skip validation for optional fields.\n+                    return self.compress([])\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\ndiff --git a/test_multivaluefield.py b/test_multivaluefield.py\nnew file mode 100644\nindex 0000000000..7377877a11\n--- /dev/null\n+++ b/test_multivaluefield.py\n@@ -0,0 +1,60 @@\n+from django.core.exceptions import ValidationError\n+from django.forms.fields import CharField, MultiValueField\n+from django.forms.widgets import MultiWidget, TextInput\n+\n+class CustomMultiWidget(MultiWidget):\n+    def __init__(self, widgets, attrs=None):\n+        super().__init__(widgets, attrs)\n+    def decompress(self, value):\n+        if value is None:\n+            return ['', '']  # Simulate empty fields\n+        return value\n+\n+class MF(MultiValueField):\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False, widget=TextInput),\n+            CharField(required=True, widget=TextInput),\n+        ]\n+        widget = CustomMultiWidget(widgets=[f.widget for f in fields])\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+    def compress(self, value):\n+        return []\n+\n+# Test case 1: Both sub-fields empty (should raise ValidationError)\n+try:\n+    mf = MF()\n+    # Simulate form data\n+    data = {'mf_0': '', 'mf_1': ''}\n+    value = [data['mf_0'], data['mf_1']]\n+    mf.clean(value)\n+    print(\"Test case 1 failed: No ValidationError raised when required sub-field is empty.\")\n+except ValidationError:\n+    print(\"Test case 1 passed: ValidationError raised as expected.\")\n+\n+# Test case 2: One sub-field non-empty, one empty (should raise ValidationError)\n+try:\n+    mf = MF()\n+    # Simulate form data\n+    data = {'mf_0': 'xxx', 'mf_1': ''}\n+    value = [data['mf_0'], data['mf_1']]\n+    mf.clean(value)\n+    print(\"Test case 2 failed: No ValidationError raised when required sub-field is empty.\")\n+except ValidationError:\n+    print(\"Test case 2 passed: ValidationError raised as expected.\")\n+\n+# Test case 3: Both sub-fields non-empty (should be valid)\n+try:\n+    mf = MF()\n+    # Simulate form data\n+    data = {'mf_0': 'xxx', 'mf_1': 'yyy'}\n+    value = [data['mf_0'], data['mf_1']]\n+    mf.clean(value)\n+    print(\"Test case 3 passed: No ValidationError raised when all required sub-fields are non-empty.\")\n+except ValidationError:\n+    print(\"Test case 3 failed: ValidationError raised unexpectedly.\")\n\\ No newline at end of file\n"}