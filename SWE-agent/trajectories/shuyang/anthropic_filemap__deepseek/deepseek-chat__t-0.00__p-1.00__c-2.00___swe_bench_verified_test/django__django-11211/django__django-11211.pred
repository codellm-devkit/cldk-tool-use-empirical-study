{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ed98ecb48c..907964a966 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -202,7 +202,14 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n+                fk_val = getattr(obj, self.fk_field)\n+                if isinstance(model._meta.pk, models.UUIDField):\n+                    fk_val = str(fk_val)  # Ensure it's a string before UUID conversion\n+                    try:\n+                        fk_val = uuid.UUID(fk_val)\n+                    except (AttributeError, ValueError):\n+                        return None\n+                return (model._meta.pk.get_prep_value(fk_val),\n                         model)\n \n         return (\ndiff --git a/test_prefetch_uuid.py b/test_prefetch_uuid.py\nnew file mode 100644\nindex 0000000000..cebefb7fb7\n--- /dev/null\n+++ b/test_prefetch_uuid.py\n@@ -0,0 +1,91 @@\n+import os\n+import uuid\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+    )\n+    django.setup()\n+\n+from django.db import models\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from django.contrib.contenttypes.models import ContentType\n+\n+# Dynamically create models without requiring a module\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Register models with the app registry\n+from django.apps import apps\n+from django.apps.config import AppConfig\n+\n+class TempAppConfig(AppConfig):\n+    name = 'test_app'\n+    verbose_name = 'Test App'\n+    path = os.path.dirname(os.path.abspath(__file__))\n+\n+app_config = TempAppConfig('test_app', __name__)\n+app_config.models = {\n+    'foo': Foo,\n+    'bar': Bar,\n+}\n+apps.app_configs['test_app'] = app_config\n+apps.all_models['test_app'] = app_config.models\n+\n+# Create database tables for Django's built-in apps\n+from django.contrib.auth.models import User, Group, Permission\n+from django.contrib.contenttypes.models import ContentType\n+\n+# Create all tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    # Create tables for built-in apps\n+    schema_editor.create_model(ContentType)\n+    schema_editor.create_model(Permission)\n+    schema_editor.create_model(Group)\n+    schema_editor.create_model(User)\n+    \n+    # Create tables for our models\n+    schema_editor.create_model(Foo)\n+    schema_editor.create_model(Bar)\n+\n+# Manually sync ContentType with our models\n+from django.core.management import call_command\n+call_command('migrate', 'contenttypes', verbosity=0)\n+\n+# Create test data\n+foo = Foo.objects.create(name=\"Test Foo\")\n+bar = Bar.objects.create(foo_content_type=ContentType.objects.get_for_model(foo), foo_object_id=str(foo.id), name=\"Test Bar\")\n+\n+# Test prefetch_related\n+bars = Bar.objects.all().prefetch_related('foo')\n+for bar in bars:\n+    print(f\"Bar: {bar.name}, Foo: {bar.foo.name if bar.foo else 'None'}\")\ndiff --git a/tests/prefetch_related/test_uuid.py b/tests/prefetch_related/test_uuid.py\nindex 11a2474f4a..6d4b6b620f 100644\n--- a/tests/prefetch_related/test_uuid.py\n+++ b/tests/prefetch_related/test_uuid.py\n@@ -1,6 +1,7 @@\n from django.test import TestCase\n+from django.contrib.contenttypes.models import ContentType\n \n-from .models import Flea, House, Person, Pet, Room\n+from .models import Flea, House, Person, Pet, Room, Bar, Foo\n \n \n class UUIDPrefetchRelated(TestCase):\n@@ -53,6 +54,18 @@ class UUIDPrefetchRelated(TestCase):\n             [pet.id]\n         )\n \n+    def test_prefetch_related_generic_foreign_key_with_uuid(self):\n+        foo = Foo.objects.create(name=\"Test Foo\")\n+        bar = Bar.objects.create(\n+            foo_content_type=ContentType.objects.get_for_model(foo),\n+            foo_object_id=str(foo.id),\n+            name=\"Test Bar\"\n+        )\n+        with self.assertNumQueries(2):\n+            bar = Bar.objects.prefetch_related('foo').get(name=\"Test Bar\")\n+        with self.assertNumQueries(0):\n+            self.assertEqual(bar.foo.name, \"Test Foo\")\n+\n \n class UUIDPrefetchRelatedLookups(TestCase):\n \n"}