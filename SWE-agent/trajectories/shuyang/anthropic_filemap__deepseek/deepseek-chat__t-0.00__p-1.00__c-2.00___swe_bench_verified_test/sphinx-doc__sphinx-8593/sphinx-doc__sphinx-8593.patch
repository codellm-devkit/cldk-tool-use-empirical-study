diff --git a/custom_types.py b/custom_types.py
new file mode 100644
index 000000000..32de31082
--- /dev/null
+++ b/custom_types.py
@@ -0,0 +1,17 @@
+from __future__ import annotations
+
+from typing import Any, Dict
+
+JSONObject = Dict[str, Any]
+
+
+def sphinx_doc(data: JSONObject) -> JSONObject:
+    """Does it work.
+
+    Args:
+        data: Does it args.
+
+    Returns:
+        Does it work in return.
+    """
+    return {}
\ No newline at end of file
diff --git a/doc/conf.py b/doc/conf.py
index 80ee2b01c..97a72f264 100644
--- a/doc/conf.py
+++ b/doc/conf.py
@@ -84,6 +84,12 @@ latex_use_xindy = True
 
 autodoc_member_order = 'groupwise'
 todo_include_todos = True
+
+# Configure type hints and aliases
+autodoc_typehints = 'description'
+autodoc_type_aliases = {
+    'JSONObject': 'custom_types.JSONObject',
+}
 extlinks = {'duref': ('http://docutils.sourceforge.net/docs/ref/rst/'
                       'restructuredtext.html#%s', ''),
             'durole': ('http://docutils.sourceforge.net/docs/ref/rst/'
diff --git a/doc/contents.rst b/doc/contents.rst
index eb6946292..b105d6f9e 100644
--- a/doc/contents.rst
+++ b/doc/contents.rst
@@ -20,6 +20,7 @@ Sphinx documentation contents
    glossary
    changes
    examples
+   types
 
 
 Indices and tables
diff --git a/doc/types.rst b/doc/types.rst
new file mode 100644
index 000000000..1205e4a5e
--- /dev/null
+++ b/doc/types.rst
@@ -0,0 +1,7 @@
+Custom Types Module
+===================
+
+.. automodule:: custom_types
+   :members:
+   :undoc-members:
+   :show-inheritance:
\ No newline at end of file
diff --git a/setup.py b/setup.py
index ca08a6d4a..21cb67b8f 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 70cbc3ba1..7c7695c01 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -30,9 +30,34 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             sig = inspect.signature(obj)
             for param in sig.parameters.values():
                 if param.annotation is not param.empty:
-                    annotation[param.name] = typing.stringify(param.annotation)
+                    # Substitute type aliases if configured
+                    if hasattr(app.config, 'autodoc_type_aliases') and app.config.autodoc_type_aliases:
+                        alias = typing.stringify(param.annotation)
+                        print(f"Original alias: {alias}")  # Debug
+                        for key, value in app.config.autodoc_type_aliases.items():
+                            # Dynamically import the module and resolve the alias
+                            module_name, attr_name = value.split('.')
+                            module = __import__(module_name)
+                            resolved_value = typing.stringify(getattr(module, attr_name))
+                            print(f"Comparing alias: {alias} with resolved value: {resolved_value}")  # Debug
+                            if alias == resolved_value:
+                                alias = key
+                                print(f"Substituted alias: {alias}")  # Debug
+                                break
+                        annotation[param.name] = alias
+                    else:
+                        annotation[param.name] = typing.stringify(param.annotation)
             if sig.return_annotation is not sig.empty:
-                annotation['return'] = typing.stringify(sig.return_annotation)
+                # Substitute type aliases for return annotation
+                if hasattr(app.config, 'autodoc_type_aliases') and app.config.autodoc_type_aliases:
+                    alias = typing.stringify(sig.return_annotation)
+                    for key, value in app.config.autodoc_type_aliases.items():
+                        if alias == value:
+                            alias = key
+                            break
+                    annotation['return'] = alias
+                else:
+                    annotation['return'] = typing.stringify(sig.return_annotation)
     except (TypeError, ValueError):
         pass
 
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
