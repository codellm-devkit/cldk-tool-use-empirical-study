{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1beee8..d880606754 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -479,6 +479,23 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n     pass\n \n \n+class KeyTransformIn(lookups.In):\n+    def as_sql(self, compiler, connection):\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        rhs, rhs_params = self.process_rhs(compiler, connection)\n+        if connection.vendor in ('mysql', 'sqlite'):\n+            # MySQL and SQLite use JSON_EXTRACT for key transforms\n+            json_path = compile_json_path([self.lhs.key_name])\n+            placeholders = ', '.join(['%s'] * len(rhs_params))\n+            return f\"JSON_EXTRACT({lhs}, %s) IN ({placeholders})\", tuple([json_path] + list(rhs_params))\n+        elif connection.vendor == 'oracle':\n+            # Oracle uses JSON_EXISTS for key transforms\n+            json_path = compile_json_path([self.lhs.key_name])\n+            return \"JSON_EXISTS(%s, '%%s')\" % lhs, (json_path,)\n+        else:\n+            return super().as_sql(compiler, connection)\n+\n+\n KeyTransform.register_lookup(KeyTransformExact)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\n@@ -494,6 +511,7 @@ KeyTransform.register_lookup(KeyTransformLt)\n KeyTransform.register_lookup(KeyTransformLte)\n KeyTransform.register_lookup(KeyTransformGt)\n KeyTransform.register_lookup(KeyTransformGte)\n+KeyTransform.register_lookup(KeyTransformIn)\n \n \n class KeyTransformFactory:\ndiff --git a/reproduce_json_in_lookup.py b/reproduce_json_in_lookup.py\nnew file mode 100644\nindex 0000000000..909d23622e\n--- /dev/null\n+++ b/reproduce_json_in_lookup.py\n@@ -0,0 +1,46 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+\n+# Configure minimal Django settings\n+settings.configure(\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+)\n+\n+django.setup()\n+\n+# Define a model with a JSONField\n+class OurModel(models.Model):\n+    our_field = models.JSONField()\n+\n+    class Meta:\n+        app_label = 'test'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as editor:\n+    editor.create_model(OurModel)\n+\n+# Create test data\n+OurModel.objects.create(our_field={'key': 0})\n+OurModel.objects.create(our_field={'key': 1})\n+\n+# Test the __in lookup\n+first_filter = {'our_field__key__in': [0]}\n+first_items = OurModel.objects.filter(**first_filter)\n+print(f\"__in lookup: {len(first_items)} items\")\n+\n+# Test the direct equality lookup\n+second_filter = {'our_field__key': 0}\n+second_items = OurModel.objects.filter(**second_filter)\n+print(f\"Direct equality lookup: {len(second_items)} items\")\n\\ No newline at end of file\n"}