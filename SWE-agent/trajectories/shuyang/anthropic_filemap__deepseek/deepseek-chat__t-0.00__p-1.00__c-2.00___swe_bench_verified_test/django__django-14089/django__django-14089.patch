diff --git a/__init__.py b/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..2e7d9c2530
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 387deca527..7b7d30efa7 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -451,6 +451,10 @@ class QuerySet:
         obj = self.model(**kwargs)
         self._for_write = True
         obj.save(force_insert=True, using=self.db)
+        # Ensure the primary key is passed through from_db_value
+        pk_field = obj._meta.pk
+        if hasattr(pk_field, 'from_db_value') and obj.pk is not None:
+            obj.pk = pk_field.from_db_value(obj.pk, None, connections[self.db])
         return obj
 
     def _prepare_for_bulk_create(self, objs):
@@ -518,6 +522,8 @@ class QuerySet:
                     assert len(returned_columns) == len(objs_without_pk)
                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
+                        if hasattr(field, 'from_db_value') and result is not None:
+                            result = field.from_db_value(result, None, connections[self.db])
                         setattr(obj_without_pk, field.attname, result)
                     obj_without_pk._state.adding = False
                     obj_without_pk._state.db = self.db
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..7c557501d2
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,51 @@
+import os
+import sys
+import django
+from django.db import models
+
+# Add the parent directory of /testbed to the Python path
+sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
+
+# Minimal Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')
+django.setup()
+
+class MyIntWrapper:
+    def __init__(self, value):
+        self.value = value
+    def __repr__(self):
+        return f"<MyIntWrapper: {self.value}>"
+
+class MyAutoField(models.BigAutoField):
+    def from_db_value(self, value, expression, connection):
+        if value is None:
+            return None
+        return MyIntWrapper(value)
+    def get_prep_value(self, value):
+        if value is None:
+            return None
+        return int(value)
+
+class AutoModel(models.Model):
+    id = MyAutoField(primary_key=True)
+
+    class Meta:
+        app_label = 'testbed'
+
+# Drop and recreate the database table (for testing)
+from django.db import connection
+with connection.schema_editor() as editor:
+    editor.delete_model(AutoModel)
+    editor.create_model(AutoModel)
+
+# Test create
+am2 = AutoModel.objects.create()
+print("After create:", am2.id)  # Expected: <MyIntWrapper: 2>, Actual: 2
+
+# Skip bulk_create test for SQLite
+if not connection.vendor == 'sqlite':
+    ams = [AutoModel()]
+    AutoModel.objects.bulk_create(ams)
+    print("After bulk_create:", ams[0].id)  # Expected: <MyIntWrapper: 2>, Actual: ?
+else:
+    print("Skipping bulk_create test for SQLite (not supported)")
\ No newline at end of file
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..11d47358b2
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,8 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'db.sqlite3',
+    }
+}
+INSTALLED_APPS = ['testbed']
+SECRET_KEY = 'dummy-key'
\ No newline at end of file
