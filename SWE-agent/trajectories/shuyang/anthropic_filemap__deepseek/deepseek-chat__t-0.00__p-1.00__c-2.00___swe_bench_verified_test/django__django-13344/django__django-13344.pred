{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13344", "model_patch": "diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\nindex 7fbabe4510..64a39194ab 100644\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -1,3 +1,4 @@\n+import asyncio\n import logging\n import sys\n import tempfile\n@@ -159,6 +160,8 @@ class ASGIHandler(base.BaseHandler):\n             return\n         # Get the response, using the async mode of BaseHandler.\n         response = await self.get_response_async(request)\n+        if asyncio.iscoroutine(response):\n+            response = await response\n         response._handler_class = self.__class__\n         # Increase chunk size on file responses (ASGI servers handles low-level\n         # chunking).\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 0000000000..54d5d7f20f\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,40 @@\n+import asyncio\n+import os\n+import django\n+from django.core.handlers.asgi import ASGIHandler\n+from django.http import HttpResponse\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+django.setup()\n+\n+class DummyMiddleware:\n+    def __init__(self, get_response):\n+        self.get_response = get_response\n+\n+    async def __call__(self, request):\n+        response = await self.get_response(request)\n+        print(f\"Middleware received response type: {type(response)}\")\n+        return response\n+\n+async def test():\n+    handler = ASGIHandler()\n+    # Simulate an ASGI request\n+    scope = {\n+        'type': 'http',\n+        'method': 'GET',\n+        'path': '/',\n+        'headers': [],\n+    }\n+    async def receive():\n+        return {'type': 'http.request', 'body': b'', 'more_body': False}\n+    async def send(message):\n+        pass\n+\n+    # Replace the middleware chain with our dummy middleware\n+    handler._middleware_chain = DummyMiddleware(handler._middleware_chain)\n+    await handler(scope, receive, send)\n+\n+loop = asyncio.get_event_loop()\n+loop.run_until_complete(test())\n+loop.close()\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..ab6d756dc9\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,3 @@\n+SECRET_KEY = 'dummy'\n+MIDDLEWARE = []\n+ROOT_URLCONF = 'django.urls'\n"}