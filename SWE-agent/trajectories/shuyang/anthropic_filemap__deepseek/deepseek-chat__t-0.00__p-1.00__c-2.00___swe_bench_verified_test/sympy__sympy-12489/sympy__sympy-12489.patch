diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 4ac1c2ef3b..5a9f4182db 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -924,13 +924,13 @@ def __new__(cls, *args, **kwargs):
         obj._size = size
         return obj
 
-    @staticmethod
-    def _af_new(perm):
+    @classmethod
+    def _af_new(cls, perm):
         """A method to produce a Permutation object from a list;
         the list is bound to the _array_form attribute, so it must
         not be modified; this method is meant for internal use only;
         the list ``a`` is supposed to be generated as a temporary value
-        in a method, so p = Perm._af_new(a) is the only object
+        in a method, so p = cls._af_new(a) is the only object
         to hold a reference to ``a``::
 
         Examples
@@ -944,7 +944,7 @@ def _af_new(perm):
         Permutation([2, 1, 3, 0])
 
         """
-        p = Basic.__new__(Perm, perm)
+        p = Basic.__new__(cls, perm)
         p._array_form = perm
         p._size = len(perm)
         return p
diff --git a/test_subclass.py b/test_subclass.py
new file mode 100644
index 0000000000..6d2b07b7ad
--- /dev/null
+++ b/test_subclass.py
@@ -0,0 +1,17 @@
+from sympy.combinatorics.permutations import Permutation
+
+class SubPermutation(Permutation):
+    def custom_method(self):
+        return "Custom method called"
+
+# Test subclassing
+p = SubPermutation([0, 2, 1])
+print(f"Type of p: {type(p)}")
+print(f"Is instance of SubPermutation: {isinstance(p, SubPermutation)}")
+print(f"Is instance of Permutation: {isinstance(p, Permutation)}")
+print(f"Custom method output: {p.custom_method()}")
+
+# Test using in existing code
+from sympy.combinatorics import PermutationGroup
+group = PermutationGroup(p)
+print(f"Group element type: {type(group[0])}")
\ No newline at end of file
