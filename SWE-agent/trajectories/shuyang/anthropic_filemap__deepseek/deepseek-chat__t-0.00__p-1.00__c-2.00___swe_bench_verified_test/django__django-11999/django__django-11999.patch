diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index ae82d26340..c95a850abb 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -310,9 +310,27 @@ class Collector:
                     )
 
             # fast deletes
-            for qs in self.fast_deletes:
-                count = qs._raw_delete(using=self.using)
-                deleted_counter[qs.model._meta.label] += count
+            from django.db.models import Q
+            from itertools import groupby
+            from operator import attrgetter
+
+            # Group fast_deletes by model
+            fast_deletes_sorted = sorted(self.fast_deletes, key=attrgetter('model'))
+            for model, group in groupby(fast_deletes_sorted, key=attrgetter('model')):
+                group = list(group)
+                if len(group) == 1:
+                    # No need to combine if only one query
+                    count = group[0]._raw_delete(using=self.using)
+                    deleted_counter[model._meta.label] += count
+                else:
+                    # Combine conditions for the same model
+                    combined_conditions = Q()
+                    for qs in group:
+                        combined_conditions |= qs.query.where
+                    # Create a new queryset with combined conditions
+                    combined_qs = model._default_manager.filter(combined_conditions)
+                    count = combined_qs._raw_delete(using=self.using)
+                    deleted_counter[model._meta.label] += count
 
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
diff --git a/test_delete.py b/test_delete.py
new file mode 100644
index 0000000000..86a25c547b
--- /dev/null
+++ b/test_delete.py
@@ -0,0 +1,88 @@
+import os
+import django
+from django.conf import settings
+import logging
+
+# Configure logging to show SQL queries
+logging.basicConfig(level=logging.DEBUG)
+logger = logging.getLogger('django.db.backends')
+logger.setLevel(logging.DEBUG)
+logger.addHandler(logging.StreamHandler())
+
+# Minimal Django settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    DEBUG=True,
+    LOGGING={
+        'version': 1,
+        'disable_existing_loggers': False,
+        'handlers': {
+            'console': {
+                'level': 'DEBUG',
+                'class': 'logging.StreamHandler',
+            },
+        },
+        'loggers': {
+            'django.db.backends': {
+                'handlers': ['console'],
+                'level': 'DEBUG',
+            },
+        },
+    },
+)
+
+django.setup()
+
+from django.db import models
+
+# Use contenttypes as the app_label for simplicity
+class Person(models.Model):
+    friends = models.ManyToManyField('self')
+
+    class Meta:
+        app_label = 'contenttypes'
+
+class User(models.Model):
+    class Meta:
+        app_label = 'contenttypes'
+
+class Entry(models.Model):
+    created_by = models.ForeignKey(User, on_delete=models.CASCADE)
+    updated_by = models.ForeignKey(User, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'contenttypes'
+
+# Create tables
+from django.db import connection
+from django.core.management import call_command
+
+# Ensure tables are created
+call_command('migrate', 'contenttypes', interactive=False)
+call_command('migrate', 'auth', interactive=False)
+
+# Manually create the tables for our models
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Person)
+    schema_editor.create_model(User)
+    schema_editor.create_model(Entry)
+
+# Simulate deletion
+person = Person.objects.create()
+user = User.objects.create()
+Entry.objects.create(created_by=user, updated_by=user)
+
+# Delete and observe queries
+print("Deleting person...")
+person.delete()
+print("Deleting user...")
+user.delete()
\ No newline at end of file
