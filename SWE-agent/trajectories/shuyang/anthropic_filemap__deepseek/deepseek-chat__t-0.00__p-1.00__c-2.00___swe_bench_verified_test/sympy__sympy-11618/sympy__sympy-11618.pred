{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-11618", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 593048464b..8d6b9eb3ef 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -266,8 +266,12 @@ def distance(self, p):\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n-        return sqrt(sum([(a - b)**2 for a, b in zip(\n-            self.args, p.args if isinstance(p, Point) else p)]))\n+        p = Point(p) if not isinstance(p, Point) else p\n+        # Pad the shorter point with zeros to match dimensions\n+        max_dim = max(len(self), len(p))\n+        self_padded = list(self.args) + [0] * (max_dim - len(self))\n+        p_padded = list(p.args) + [0] * (max_dim - len(p))\n+        return sqrt(sum((a - b)**2 for a, b in zip(self_padded, p_padded)))\n \n     def taxicab_distance(self, p):\n         \"\"\"The Taxicab Distance from self to point p.\ndiff --git a/test_distance.py b/test_distance.py\nnew file mode 100644\nindex 0000000000..daa0c63f5d\n--- /dev/null\n+++ b/test_distance.py\n@@ -0,0 +1,5 @@\n+from sympy.geometry import Point\n+\n+p1 = Point(2, 0)\n+p2 = Point(1, 0, 2)\n+print(p1.distance(p2))\ndiff --git a/test_distance_extended.py b/test_distance_extended.py\nnew file mode 100644\nindex 0000000000..7fae8869a5\n--- /dev/null\n+++ b/test_distance_extended.py\n@@ -0,0 +1,27 @@\n+from sympy.geometry import Point\n+from sympy.abc import x, y, z\n+\n+# Case 1: Same dimensions (2D)\n+p1 = Point(1, 2)\n+p2 = Point(4, 6)\n+print(p1.distance(p2))  # Expected: 5\n+\n+# Case 2: Same dimensions (3D)\n+p3 = Point(1, 2, 3)\n+p4 = Point(4, 6, 8)\n+print(p3.distance(p4))  # Expected: sqrt(50) \u2248 7.071\n+\n+# Case 3: Negative coordinates\n+p5 = Point(-1, -2)\n+p6 = Point(-4, -6)\n+print(p5.distance(p6))  # Expected: 5\n+\n+# Case 4: Symbolic coordinates\n+p7 = Point(x, y)\n+p8 = Point(0, 0)\n+print(p7.distance(p8))  # Expected: sqrt(x**2 + y**2)\n+\n+# Case 5: Mixed dimensions (2D and 3D)\n+p9 = Point(1, 0)\n+p10 = Point(0, 0, 1)\n+print(p9.distance(p10))  # Expected: sqrt(2) \u2248 1.414\n"}