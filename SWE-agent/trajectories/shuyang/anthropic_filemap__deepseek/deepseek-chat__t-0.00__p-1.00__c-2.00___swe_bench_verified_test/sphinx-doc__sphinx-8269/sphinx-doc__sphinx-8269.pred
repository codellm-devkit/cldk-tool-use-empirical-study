{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-8269", "model_patch": "diff --git a/make.bat b/make.bat\nnew file mode 100644\nindex 000000000..6247f7e23\n--- /dev/null\n+++ b/make.bat\n@@ -0,0 +1,35 @@\n+@ECHO OFF\n+\n+pushd %~dp0\n+\n+REM Command file for Sphinx documentation\n+\n+if \"%SPHINXBUILD%\" == \"\" (\n+\tset SPHINXBUILD=sphinx-build\n+)\n+set SOURCEDIR=source\n+set BUILDDIR=build\n+\n+if \"%1\" == \"\" goto help\n+\n+%SPHINXBUILD% >NUL 2>NUL\n+if errorlevel 9009 (\n+\techo.\n+\techo.The 'sphinx-build' command was not found. Make sure you have Sphinx\n+\techo.installed, then set the SPHINXBUILD environment variable to point\n+\techo.to the full path of the 'sphinx-build' executable. Alternatively you\n+\techo.may add the Sphinx directory to PATH.\n+\techo.\n+\techo.If you don't have Sphinx installed, grab it from\n+\techo.http://sphinx-doc.org/\n+\texit /b 1\n+)\n+\n+%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\n+goto end\n+\n+:help\n+%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\n+\n+:end\n+popd\ndiff --git a/source/conf.py b/source/conf.py\nnew file mode 100644\nindex 000000000..ada28baa4\n--- /dev/null\n+++ b/source/conf.py\n@@ -0,0 +1,62 @@\n+# Configuration file for the Sphinx documentation builder.\n+#\n+# This file only contains a selection of the most common options. For a full\n+# list see the documentation:\n+# https://www.sphinx-doc.org/en/master/usage/configuration.html\n+\n+# -- Path setup --------------------------------------------------------------\n+\n+# If extensions (or modules to document with autodoc) are in another directory,\n+# add these directories to sys.path here. If the directory is relative to the\n+# documentation root, use os.path.abspath to make it absolute, like shown here.\n+#\n+# import os\n+# import sys\n+# sys.path.insert(0, os.path.abspath('.'))\n+\n+\n+# -- Project information -----------------------------------------------------\n+\n+project = 'proj'\n+copyright = '2025, me'\n+author = 'me'\n+\n+# The full version, including alpha/beta/rc tags\n+release = '1.0'\n+\n+\n+# -- General configuration ---------------------------------------------------\n+\n+# Add any Sphinx extension module names here, as strings. They can be\n+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n+# ones.\n+extensions = [\n+]\n+\n+# Add any paths that contain templates here, relative to this directory.\n+templates_path = ['_templates']\n+\n+# The language for content autogenerated by Sphinx. Refer to documentation\n+# for a list of supported languages.\n+#\n+# This is also used if you do content translation via gettext catalogs.\n+# Usually you set \"language\" from the command line for these cases.\n+language = 'en'\n+\n+# List of patterns, relative to source directory, that match files and\n+# directories to ignore when looking for source files.\n+# This pattern also affects html_static_path and html_extra_path.\n+exclude_patterns = []\n+\n+\n+# -- Options for HTML output -------------------------------------------------\n+\n+# The theme to use for HTML and HTML Help pages.  See the documentation for\n+# a list of builtin themes.\n+#\n+html_theme = 'alabaster'\n+\n+# Add any paths that contain custom static files (such as style sheets) here,\n+# relative to this directory. They are copied after the builtin static files,\n+# so a file named \"default.css\" will overwrite the builtin \"default.css\".\n+html_static_path = ['_static']\n\\ No newline at end of file\ndiff --git a/source/index.rst b/source/index.rst\nnew file mode 100644\nindex 000000000..4d1ebdfec\n--- /dev/null\n+++ b/source/index.rst\n@@ -0,0 +1,21 @@\n+.. proj documentation master file, created by\n+   sphinx-quickstart on Thu May 22 07:10:26 2025.\n+   You can adapt this file completely to your liking, but it should at least\n+   contain the root `toctree` directive.\n+\n+Welcome to proj's documentation!\n+================================\n+\n+.. toctree::\n+   :maxdepth: 2\n+   :caption: Contents:\n+\n+\n+\n+Indices and tables\n+==================\n+\n+* :ref:`genindex`\n+* :ref:`modindex`\n+* :ref:`search`\n+\\n`foo <https://google.com/test.txt#test>`_\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 9b54afc7c..65003d52c 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -162,27 +162,26 @@ class CheckExternalLinksBuilder(Builder):\n             kwargs['headers'] = get_request_headers()\n \n             try:\n-                if anchor and self.app.config.linkcheck_anchors:\n-                    # Read the whole document and see if #anchor exists\n+                # First, check for HTTP errors\n+                try:\n+                    # try a HEAD request first, which should be easier on\n+                    # the server and the network\n+                    response = requests.head(req_url, config=self.app.config,\n+                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n+                except HTTPError:\n+                    # retry with GET request if that fails, some servers\n+                    # don't like HEAD requests.\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n-                    found = check_anchor(response, unquote(anchor))\n+                    response.raise_for_status()\n \n+                # Only proceed with anchor check if no HTTP error and anchor is enabled\n+                if anchor and self.app.config.linkcheck_anchors:\n+                    # Read the whole document and see if #anchor exists\n+                    found = check_anchor(response, unquote(anchor))\n                     if not found:\n                         raise Exception(__(\"Anchor '%s' not found\") % anchor)\n-                else:\n-                    try:\n-                        # try a HEAD request first, which should be easier on\n-                        # the server and the network\n-                        response = requests.head(req_url, config=self.app.config,\n-                                                 auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n-                    except HTTPError:\n-                        # retry with GET request if that fails, some servers\n-                        # don't like HEAD requests.\n-                        response = requests.get(req_url, stream=True, config=self.app.config,\n-                                                auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n             except HTTPError as err:\n                 if err.response.status_code == 401:\n                     # We'll take \"Unauthorized\" as working.\n"}