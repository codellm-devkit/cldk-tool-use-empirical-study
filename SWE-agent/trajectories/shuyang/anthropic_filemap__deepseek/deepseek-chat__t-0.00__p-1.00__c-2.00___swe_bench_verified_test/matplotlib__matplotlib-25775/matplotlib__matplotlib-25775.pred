{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py\nindex 7d038a998f..40ceab6b0e 100644\n--- a/lib/matplotlib/backends/backend_agg.py\n+++ b/lib/matplotlib/backends/backend_agg.py\n@@ -197,7 +197,7 @@ class RendererAgg(RendererBase):\n         y = round(y - oy + yd)\n         self._renderer.draw_text_image(font_image, x, y + 1, angle, gc)\n \n-    def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):\n+    def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None, antialiased=None):\n         # docstring inherited\n         if ismath:\n             return self.draw_mathtext(gc, x, y, s, prop, angle)\n@@ -206,7 +206,7 @@ class RendererAgg(RendererBase):\n         # space) in the following call to draw_text_image).\n         font.set_text(s, 0, flags=get_hinting_flag())\n         font.draw_glyphs_to_bitmap(\n-            antialiased=mpl.rcParams['text.antialiased'])\n+            antialiased=antialiased if antialiased is not None else mpl.rcParams['text.antialiased'])\n         d = font.get_descent() / 64.0\n         # The descent needs to be adjusted for the angle.\n         xo, yo = font.get_bitmap_offset()\n@@ -239,7 +239,7 @@ class RendererAgg(RendererBase):\n         d /= 64.0\n         return w, h, d\n \n-    def draw_tex(self, gc, x, y, s, prop, angle, *, mtext=None):\n+    def draw_tex(self, gc, x, y, s, prop, angle, *, mtext=None, antialiased=None):\n         # docstring inherited\n         # todo, handle props, angle, origins\n         size = prop.get_size_in_points()\n@@ -248,6 +248,8 @@ class RendererAgg(RendererBase):\n \n         Z = texmanager.get_grey(s, size, self.dpi)\n         Z = np.array(Z * 255.0, np.uint8)\n+        # Note: TeX rendering is inherently antialiased, so the `antialiased` parameter\n+        # may not have an effect here. However, we include it for consistency.\n \n         w, h, d = self.get_text_width_height_descent(s, prop, ismath=\"TeX\")\n         xd = d * sin(radians(angle))\ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 4591316cf9..02044e4136 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -757,14 +757,16 @@ class Text(Artist):\n                 else:\n                     textrenderer = renderer\n \n+                antialiased = self.get_antialiased()\n                 if self.get_usetex():\n                     textrenderer.draw_tex(gc, x, y, clean_line,\n                                           self._fontproperties, angle,\n-                                          mtext=mtext)\n+                                          mtext=mtext, antialiased=antialiased)\n                 else:\n                     textrenderer.draw_text(gc, x, y, clean_line,\n                                            self._fontproperties, angle,\n-                                           ismath=ismath, mtext=mtext)\n+                                           ismath=ismath, mtext=mtext,\n+                                           antialiased=antialiased)\n \n         gc.restore()\n         renderer.close_group('text')\n@@ -798,6 +800,22 @@ class Text(Artist):\n         \"\"\"\n         return self._fontproperties.get_name()\n \n+    def get_antialiased(self):\n+        \"\"\"Return whether the text is antialiased.\"\"\"\n+        return getattr(self, '_antialiased', None)\n+\n+    def set_antialiased(self, aa):\n+        \"\"\"Set whether the text is antialiased.\n+\n+        Parameters\n+        ----------\n+        aa : bool or None\n+            Whether to use antialiasing. If None, the default from\n+            `rcParams[\"text.antialias\"]` is used.\n+        \"\"\"\n+        self._antialiased = aa\n+        self.stale = True\n+\n     def get_fontstyle(self):\n         \"\"\"\n         Return the font style as a string.\ndiff --git a/text_antialiasing_test.png b/text_antialiasing_test.png\nnew file mode 100644\nindex 0000000000..efcbcae30e\nBinary files /dev/null and b/text_antialiasing_test.png differ\n"}