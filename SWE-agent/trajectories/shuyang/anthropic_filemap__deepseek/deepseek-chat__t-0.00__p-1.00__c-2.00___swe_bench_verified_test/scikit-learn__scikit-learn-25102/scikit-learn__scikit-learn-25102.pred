{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "scikit-learn__scikit-learn-25102", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..285e6fb8b 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,5 +1,6 @@\n from functools import wraps\n \n+import numpy as np\n from scipy.sparse import issparse\n \n from . import check_pandas_support\n@@ -12,6 +13,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    dtypes=None,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -36,6 +38,10 @@ def _wrap_in_pandas_container(\n     index : array-like, default=None\n         Index for data.\n \n+    dtypes : dict, default=None\n+        If not None, specifies the dtypes for the output DataFrame.\n+        Keys are column names, and values are the corresponding dtypes.\n+\n     Returns\n     -------\n     dataframe : DataFrame\n@@ -57,9 +63,14 @@ def _wrap_in_pandas_container(\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        if dtypes is not None:\n+            data_to_wrap = data_to_wrap.astype(dtypes)\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if dtypes is not None:\n+        df = df.astype(dtypes)\n+    return df\n \n \n def _get_output_config(method, estimator=None):\n@@ -127,10 +138,27 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    preserve_dtypes = getattr(estimator, \"_sklearn_output_config\", {}).get(\"preserve_dtypes\", False)\n+    dtypes = None\n+    if preserve_dtypes and hasattr(original_input, \"dtypes\"):\n+        dtypes = original_input.dtypes.to_dict()\n+        # Ensure dtypes only includes columns present in the output\n+        if isinstance(data_to_wrap, np.ndarray):\n+            # If data_to_wrap is an ndarray, columns will be set by get_feature_names_out\n+            # So we cannot filter dtypes here; skip preserving dtypes\n+            dtypes = None\n+        elif hasattr(estimator, \"get_feature_names_out\"):\n+            try:\n+                output_columns = estimator.get_feature_names_out()\n+                dtypes = {col: dtypes[col] for col in output_columns if col in dtypes}\n+            except Exception:\n+                dtypes = None\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n         index=getattr(original_input, \"index\", None),\n         columns=estimator.get_feature_names_out,\n+        dtypes=dtypes,\n     )\n \n \n@@ -208,7 +236,7 @@ class _SetOutputMixin:\n             setattr(cls, method, wrapped_method)\n \n     @available_if(_auto_wrap_is_configured)\n-    def set_output(self, *, transform=None):\n+    def set_output(self, *, transform=None, preserve_dtypes=False):\n         \"\"\"Set output container.\n \n         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n@@ -223,18 +251,28 @@ class _SetOutputMixin:\n             - `\"pandas\"`: DataFrame output\n             - `None`: Transform configuration is unchanged\n \n+        preserve_dtypes : bool, default=False\n+            If True, the output DataFrame will preserve the dtypes of the input DataFrame.\n+            Only applicable if `transform=\"pandas\"`.\n+\n         Returns\n         -------\n         self : estimator instance\n             Estimator instance.\n         \"\"\"\n-        if transform is None:\n+        if transform is None and not preserve_dtypes:\n             return self\n \n         if not hasattr(self, \"_sklearn_output_config\"):\n             self._sklearn_output_config = {}\n \n-        self._sklearn_output_config[\"transform\"] = transform\n+        if transform is not None:\n+            self._sklearn_output_config[\"transform\"] = transform\n+        if preserve_dtypes:\n+            self._sklearn_output_config[\"preserve_dtypes\"] = True\n+        else:\n+            self._sklearn_output_config.pop(\"preserve_dtypes\", None)\n+\n         return self\n \n \n"}