diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index bb5a9d646..11236d958 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -130,10 +130,7 @@ def strip_accents_unicode(s):
         ASCII equivalent.
     """
     normalized = unicodedata.normalize('NFKD', s)
-    if normalized == s:
-        return s
-    else:
-        return ''.join([c for c in normalized if not unicodedata.combining(c)])
+    return ''.join([c for c in normalized if not unicodedata.combining(c)])
 
 
 def strip_accents_ascii(s):
diff --git a/test_strip_accents.py b/test_strip_accents.py
new file mode 100644
index 000000000..6f2a9dad3
--- /dev/null
+++ b/test_strip_accents.py
@@ -0,0 +1,34 @@
+from sklearn.feature_extraction.text import strip_accents_unicode
+
+# Test case from the PR description
+s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE
+s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE
+
+print(f"Original s1: {s1}")
+print(f"Original s2: {s2}")
+
+# Stripped versions
+stripped_s1 = strip_accents_unicode(s1)
+stripped_s2 = strip_accents_unicode(s2)
+
+print(f"Stripped s1: {stripped_s1}")
+print(f"Stripped s2: {stripped_s2}")
+
+# Check if both are normalized to 'n'
+assert stripped_s1 == stripped_s2 == 'n', "Both strings should be normalized to 'n'"
+print("Test passed: Both strings are normalized to 'n'")
+
+# Edge case: Empty string
+empty_str = ""
+assert strip_accents_unicode(empty_str) == "", "Empty string should return empty"
+print("Test passed: Empty string handled correctly")
+
+# Edge case: String with no accents
+no_accents = "hello"
+assert strip_accents_unicode(no_accents) == "hello", "String with no accents should be unchanged"
+print("Test passed: String with no accents handled correctly")
+
+# Edge case: Mixed characters
+mixed = "héllö"
+assert strip_accents_unicode(mixed) == "hello", "Mixed characters should be stripped"
+print("Test passed: Mixed characters handled correctly")
\ No newline at end of file
