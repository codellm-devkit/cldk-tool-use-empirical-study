{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-14434", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex ad2f5a7da1..837ab584e8 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1251,6 +1251,9 @@ class BaseDatabaseSchemaEditor:\n         else:\n             sql = self.sql_create_unique\n         if columns:\n+            # Ensure columns is a list of strings (column names)\n+            if isinstance(columns, Table):\n+                columns = [columns.name]  # Replace with actual column names if needed\n             columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)\n         else:\n             columns = Expressions(model._meta.db_table, expressions, compiler, self.quote_value)\ndiff --git a/test_unique_sql.py b/test_unique_sql.py\nnew file mode 100644\nindex 0000000000..2cd4e84935\n--- /dev/null\n+++ b/test_unique_sql.py\n@@ -0,0 +1,42 @@\n+from django.db.backends.ddl_references import Table\n+from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n+\n+# Mock model and schema editor\n+class MockModel:\n+    class _meta:\n+        db_table = \"test_table\"\n+\n+class MockConnection:\n+    class features:\n+        supports_deferrable_unique_constraints = True\n+        supports_partial_indexes = True\n+        supports_covering_indexes = True\n+        supports_expression_indexes = True\n+        can_rollback_ddl = False\n+\n+    class ops:\n+        def quote_name(self, name):\n+            return f'\"{name}\"'\n+\n+        def compiler(self, compiler_name, *args, **kwargs):\n+            class MockCompiler:\n+                def __init__(self, *args, **kwargs):\n+                    pass\n+\n+                def as_sql(self):\n+                    return \"\", ()\n+\n+            return MockCompiler(*args, **kwargs)\n+\n+    def quote_name(self, name):\n+        return self.ops.quote_name(name)\n+\n+schema_editor = BaseDatabaseSchemaEditor(MockConnection())\n+\n+# Test case: Pass a Table instance to _create_unique_sql\n+table = Table(\"test_table\", lambda x: x)\n+try:\n+    result = schema_editor._create_unique_sql(MockModel, table)\n+    print(\"Result:\", result)\n+except Exception as e:\n+    print(\"Error:\", e)\n\\ No newline at end of file\n"}