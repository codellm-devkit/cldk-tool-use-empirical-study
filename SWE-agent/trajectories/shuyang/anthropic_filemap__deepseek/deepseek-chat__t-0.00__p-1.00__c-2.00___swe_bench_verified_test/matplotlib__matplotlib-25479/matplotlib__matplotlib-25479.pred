{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-25479", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 38158db956..f076956159 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -260,6 +260,9 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):\n     # the global ColormapRegistry\n     _colormaps._allow_override_builtin = override_builtin\n     _colormaps.register(cmap, name=name, force=override_builtin)\n+    # Ensure the colormap's name matches the registered name\n+    cmap.name = name\n+    print(f\"DEBUG: Registered colormap '{name}' with .name attribute '{cmap.name}'\")  # Debug statement\n     _colormaps._allow_override_builtin = False\n \n \n@@ -396,6 +399,15 @@ class ScalarMappable:\n         self._norm = None  # So that the setter knows we're initializing.\n         self.set_norm(norm)  # The Normalize instance of this ScalarMappable.\n         self.cmap = None  # So that the setter knows we're initializing.\n+        # Ensure the colormap is resolved using the registered name\n+        if isinstance(cmap, colors.Colormap):\n+            for name, registered_cmap in _colormaps.items():\n+                if registered_cmap is cmap:\n+                    cmap = name\n+                    break\n+            else:\n+                # If the colormap is not registered, use its name\n+                cmap = cmap.name\n         self.set_cmap(cmap)  # The Colormap instance of this ScalarMappable.\n         #: The last colorbar associated with this ScalarMappable. May be None.\n         self.colorbar = None\n@@ -715,7 +727,18 @@ def _ensure_cmap(cmap):\n \n     \"\"\"\n     if isinstance(cmap, colors.Colormap):\n-        return cmap\n+        # Check if the colormap is registered under any name\n+        for name, registered_cmap in _colormaps.items():\n+            if registered_cmap is cmap:\n+                return mpl.colormaps[name]\n+        # If not registered, use the colormap's name\n+        cmap_name = cmap.name\n+        try:\n+            _api.check_in_list(sorted(_colormaps), cmap=cmap_name)\n+            return mpl.colormaps[cmap_name]\n+        except ValueError:\n+            # If the colormap's name is not registered, return the colormap as-is\n+            return cmap\n     cmap_name = cmap if cmap is not None else mpl.rcParams[\"image.cmap\"]\n     # use check_in_list to ensure type stability of the exception raised by\n     # the internal usage of this (ValueError vs KeyError)\n"}