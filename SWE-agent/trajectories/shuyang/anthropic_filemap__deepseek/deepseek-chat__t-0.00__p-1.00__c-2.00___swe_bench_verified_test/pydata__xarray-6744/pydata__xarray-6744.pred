{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-6744", "model_patch": "diff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 00000000..bab44661\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,16 @@\n+import xarray as xr\n+import numpy as np\n+\n+my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+\n+# Option 1: take a center-justified rolling average\n+result1 = my_data.rolling(x=3, center=True).mean().values\n+print(\"Result 1 (direct mean):\", result1)\n+\n+# Option 2: manually iterate\n+my_data_rolling = my_data.rolling(x=3, center=True)\n+result2 = []\n+for label, window in my_data_rolling:\n+    print(f\"Label: {label}, Window: {window.values}\")\n+    result2.append(window.mean().values.item())\n+print(\"Result 2 (manual iteration):\", result2)\n\\ No newline at end of file\ndiff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex aef290f6..3d2374ad 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,9 +270,14 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n+        window_size = int(self.window[0])\n         stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n+        starts = stops - window_size\n+        if self.center:\n+            shift = window_size // 2\n+            starts = np.maximum(starts + shift, 0)\n+            stops = np.minimum(stops + shift, len(self.obj[self.dim[0]]))\n+        starts[:window_size] = 0\n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n"}