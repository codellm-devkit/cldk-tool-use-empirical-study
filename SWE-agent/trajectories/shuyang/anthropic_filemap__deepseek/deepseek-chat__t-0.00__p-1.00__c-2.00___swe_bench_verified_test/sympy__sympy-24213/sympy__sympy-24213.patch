diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3d85af2067
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,4 @@
+from sympy import Contains, Reals, Symbol
+
+x = Symbol('x')
+print(Contains(x, Reals).as_set())
\ No newline at end of file
diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d12..997a4d8e16 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -45,4 +45,4 @@ def binary_symbols(self):
             isinstance(i, (Eq, Ne))])
 
     def as_set(self):
-        raise NotImplementedError()
+        return self.args[1]
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..7bb45ea518
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,15 @@
+from sympy import Contains, Reals, Symbol, Interval, Union, S
+
+x = Symbol('x')
+
+# Test with Reals
+print(Contains(x, Reals).as_set())  # Expected: Reals
+
+# Test with Interval
+print(Contains(x, Interval(0, 1)).as_set())  # Expected: Interval(0, 1)
+
+# Test with Union
+print(Contains(x, Union(Reals, S.Integers)).as_set())  # Expected: Union(Reals, Integers)
+
+# Test with EmptySet
+print(Contains(x, S.EmptySet).as_set())  # Expected: EmptySet
\ No newline at end of file
