{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 000000000..a6883cd41\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,17 @@\n+\"\"\"\n+Minimal script to reproduce the issue with autodoc and inherited attributes.\n+\"\"\"\n+\n+class Parent:\n+    \"\"\"Parent class with an attribute and docstring.\"\"\"\n+    attr = \"Parent attribute\"\n+    \"\"\"Docstring for Parent.attr.\"\"\"\n+\n+class Child(Parent):\n+    \"\"\"Child class inheriting Parent.attr.\"\"\"\n+    pass\n+\n+# Expected: Child.attr should have the docstring from Parent.attr\n+# Actual: Child.attr's docstring is not documented by autodoc\n+print(f\"Child.attr: {Child.attr}\")\n+print(f\"Child.attr.__doc__: {getattr(Child, 'attr').__doc__}\")\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 8d40de1a8..03f325278 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ddfd2b365..27ead6b8e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -548,8 +548,9 @@ class Documenter:\n             warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\"\n                           % self.__class__.__name__,\n                           RemovedInSphinx50Warning, stacklevel=2)\n+        # Ensure inherited docstrings are retrieved by passing the parent class and attribute name\n         docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,\n-                           self.parent, self.object_name)\n+                           getattr(self, 'parent', None), getattr(self, 'object_name', None))\n         if docstring:\n             tab_width = self.directive.state.document.settings.tab_width\n             return [prepare_docstring(docstring, ignore, tab_width)]\n@@ -646,9 +647,17 @@ class Documenter:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, [(m.name, m.value) for m in members.values()]\n+            # For inherited members, ensure docstrings are retrieved from the base class\n+            inherited_members = []\n+            for m in members.values():\n+                # Set parent and object_name for inherited members\n+                parent = self.parent if hasattr(self, 'parent') else None\n+                object_name = m.name if hasattr(m, 'name') else None\n+                docstring = getdoc(m.value, self.get_attr, True, parent, object_name)\n+                inherited_members.append(ObjectMember(m.name, m.value, docstring=docstring))\n+            return False, inherited_members\n         else:\n-            return False, [(m.name, m.value) for m in members.values()\n+            return False, [(m.name, m.value) for m in members.values()]\n                            if m.directly_defined]\n \n     def filter_members(self, members: ObjectMembers, want_all: bool\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36a..9951f3c9a 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -162,7 +162,8 @@ def get_module_members(module: Any) -> List[Tuple[str, Any]]:\n \n Attribute = NamedTuple('Attribute', [('name', str),\n                                      ('directly_defined', bool),\n-                                     ('value', Any)])\n+                                     ('value', Any),\n+                                     ('docstring', Optional[str])])\n \n \n def _getmro(obj: Any) -> Tuple[\"Type\", ...]:\n@@ -205,8 +206,8 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         if __slots__:\n             from sphinx.ext.autodoc import SLOTSATTR\n \n-            for name in __slots__:\n-                members[name] = Attribute(name, True, SLOTSATTR)\n+            for name, docstring in __slots__.items():\n+                members[name] = Attribute(name, True, SLOTSATTR, docstring)\n     except (AttributeError, TypeError, ValueError):\n         pass\n \n@@ -217,7 +218,15 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             directly_defined = name in obj_dict\n             name = unmangle(subject, name)\n             if name and name not in members:\n-                members[name] = Attribute(name, directly_defined, value)\n+                # Retrieve docstring for inherited attributes\n+                docstring = None\n+                if not directly_defined:\n+                    for cls in getmro(subject):\n+                        if hasattr(cls, '__dict__') and name in cls.__dict__:\n+                            docstring = getattr(cls.__dict__[name], '__doc__', None)\n+                            if docstring:\n+                                break\n+                members[name] = Attribute(name, directly_defined, value, docstring)\n         except AttributeError:\n             continue\n \ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a26c818c0..7d47ac1bf 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -913,5 +913,10 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n                     doc = inspect.getdoc(meth)\n                     if doc:\n                         break\n+                # Also check the base class's namespace directly\n+                if hasattr(basecls, '__dict__') and name in basecls.__dict__:\n+                    doc = getattr(basecls.__dict__[name], '__doc__', None)\n+                    if doc:\n+                        break\n \n     return doc\ndiff --git a/tox.ini b/tox.ini\nindex dbb705a3a..9f4fc3a32 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n"}