{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 075ecee1be..b1950f531d 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -21,9 +21,10 @@ class BaseConstraint:\n     violation_error_message = None\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n-    # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n         # RemovedInDjango60Warning.\n+        self.violation_error_code = violation_error_code\n         if name is None and not args:\n             raise TypeError(\n                 f\"{self.__class__.__name__}.__init__() missing 1 required keyword-only \"\n@@ -82,13 +83,13 @@ class BaseConstraint:\n \n \n class CheckConstraint(BaseConstraint):\n-    def __init__(self, *, check, name, violation_error_message=None):\n+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n         self.check = check\n         if not getattr(check, \"conditional\", False):\n             raise TypeError(\n                 \"CheckConstraint.check must be a Q instance or boolean expression.\"\n             )\n-        super().__init__(name=name, violation_error_message=violation_error_message)\n \n     def _get_check_sql(self, model, schema_editor):\n         query = Query(model=model, alias_cols=False)\n@@ -112,7 +113,10 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(\n+                    self.get_violation_error_message(),\n+                    code=self.violation_error_code\n+                )\n         except FieldError:\n             pass\n \n@@ -164,7 +168,9 @@ class UniqueConstraint(BaseConstraint):\n         include=None,\n         opclasses=(),\n         violation_error_message=None,\n+        violation_error_code=None,\n     ):\n+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)\n         if not name:\n             raise ValueError(\"A unique constraint must be named.\")\n         if not expressions and not fields:\n@@ -385,14 +391,18 @@ class UniqueConstraint(BaseConstraint):\n         if not self.condition:\n             if queryset.exists():\n                 if self.expressions:\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(\n+                        self.get_violation_error_message(),\n+                        code=self.violation_error_code\n+                    )\n                 # When fields are defined, use the unique_error_message() for\n                 # backward compatibility.\n                 for model, constraints in instance.get_constraints():\n                     for constraint in constraints:\n                         if constraint is self:\n                             raise ValidationError(\n-                                instance.unique_error_message(model, self.fields)\n+                                instance.unique_error_message(model, self.fields),\n+                                code=self.violation_error_code\n                             )\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n"}