{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-14248", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..a767bfc7b9 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -819,7 +819,28 @@ def _print_BlockMatrix(self, B):\n         return self._print(B.blocks)\n \n     def _print_MatAdd(self, expr):\n-        return self._print_seq(expr.args, None, None, ' + ')\n+        from sympy.matrices.expressions.matmul import MatMul\n+        from sympy.core.mul import Mul\n+        \n+        terms = []\n+        for arg in expr.args:\n+            if (isinstance(arg, (Mul, MatMul)) and len(arg.args) > 0 and arg.args[0] == S.NegativeOne):\n+                # Handle negative terms (e.g., (-1)*B or (-1)*A*B)\n+                if len(arg.args) == 2:\n+                    terms.append(arg.args[1])\n+                    terms.append('-')\n+                else:\n+                    terms.append(MatMul(*arg.args[1:]))\n+                    terms.append('-')\n+            else:\n+                terms.append(arg)\n+                terms.append('+')\n+        \n+        # Remove the last operator\n+        terms = terms[:-1]\n+        \n+        # Print the sequence\n+        return self._print_seq(terms, None, None, ' ')\n \n     def _print_MatMul(self, expr):\n         args = list(expr.args)\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..bc642a003f 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -312,8 +312,22 @@ def _print_HadamardProduct(self, expr):\n             for arg in expr.args])\n \n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        from sympy.matrices.expressions.matmul import MatMul\n+        from sympy.core.mul import Mul\n+        terms = []\n+        for arg in expr.args:\n+            if (isinstance(arg, (Mul, MatMul)) and len(arg.args) > 0 and arg.args[0] == S.NegativeOne):\n+                # Handle negative terms (e.g., (-1)*B or (-1)*A*B)\n+                if len(arg.args) == 2:\n+                    terms.append(' - ' + self.parenthesize(arg.args[1], precedence(expr)))\n+                else:\n+                    terms.append(' - ' + self.parenthesize(MatMul(*arg.args[1:]), precedence(expr)))\n+            else:\n+                terms.append(' + ' + self.parenthesize(arg, precedence(expr)))\n+        # Handle the first term (avoid leading '+ ')\n+        if terms and terms[0].startswith(' + '):\n+            terms[0] = terms[0][3:]\n+        return ''.join(terms)\n \n     def _print_NaN(self, expr):\n         return 'nan'\n"}