{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d610dc86f0..39f9b19830 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2,6 +2,7 @@ import collections.abc\n import copy\n import datetime\n import decimal\n+import enum\n import operator\n import uuid\n import warnings\n@@ -27,6 +28,12 @@ from django.utils.itercompat import is_iterable\n from django.utils.text import capfirst\n from django.utils.translation import gettext_lazy as _\n \n+\n+\n+\n+\n+\n+\n __all__ = [\n     'AutoField', 'BLANK_CHOICE_DASH', 'BigAutoField', 'BigIntegerField',\n     'BinaryField', 'BooleanField', 'CharField', 'CommaSeparatedIntegerField',\n@@ -790,6 +797,8 @@ class Field(RegisterLookupMixin):\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n+        if isinstance(value, enum.Enum):\n+            return value.value\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n         return value\n@@ -916,7 +925,8 @@ class Field(RegisterLookupMixin):\n \n     def value_from_object(self, obj):\n         \"\"\"Return the value of this field in the given model instance.\"\"\"\n-        return getattr(obj, self.attname)\n+        value = getattr(obj, self.attname)\n+        return self.to_python(value)\n \n \n class BooleanField(Field):\n@@ -972,6 +982,14 @@ class CharField(Field):\n         super().__init__(*args, **kwargs)\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n+    def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return str(value) if value is not None else value\n+\n+\n+\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n"}