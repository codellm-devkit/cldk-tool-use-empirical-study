diff --git a/__init__.py b/__init__.py
new file mode 100644
index 0000000000..322e195f6b
--- /dev/null
+++ b/__init__.py
@@ -0,0 +1,3 @@
+from .apps import TestbedConfig
+
+default_app_config = 'testbed.TestbedConfig'
\ No newline at end of file
diff --git a/apps.py b/apps.py
new file mode 100644
index 0000000000..39ce12f78a
--- /dev/null
+++ b/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestbedConfig(AppConfig):
+    default_auto_field = 'django.db.models.AutoField'
+    name = 'testbed'
\ No newline at end of file
diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py
index 04063f73bc..d0cf451fca 100644
--- a/django/db/models/sql/subqueries.py
+++ b/django/db/models/sql/subqueries.py
@@ -95,10 +95,8 @@ class UpdateQuery(Query):
                     "Cannot update model field %r (only non-relations and "
                     "foreign keys permitted)." % field
                 )
-            if model is not self.get_meta().concrete_model:
-                self.add_related_update(model, field, val)
-                continue
-            values_seq.append((field, model, val))
+            # Skip adding related updates for parent models in multiple inheritance
+            values_seq.append((field, self.get_meta().concrete_model, val))
         return self.add_update_fields(values_seq)
 
     def add_update_fields(self, values_seq):
diff --git a/minimal_project/db.sqlite3 b/minimal_project/db.sqlite3
new file mode 100644
index 0000000000..6f4b8a8b19
Binary files /dev/null and b/minimal_project/db.sqlite3 differ
diff --git a/minimal_project/manage.py b/minimal_project/manage.py
new file mode 100755
index 0000000000..818591aa80
--- /dev/null
+++ b/minimal_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "minimal_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/minimal_project/minimal_project/__init__.py b/minimal_project/minimal_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/minimal_project/minimal_project/asgi.py b/minimal_project/minimal_project/asgi.py
new file mode 100644
index 0000000000..b409c382ff
--- /dev/null
+++ b/minimal_project/minimal_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for minimal_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "minimal_project.settings")
+
+application = get_asgi_application()
diff --git a/minimal_project/minimal_project/settings.py b/minimal_project/minimal_project/settings.py
new file mode 100644
index 0000000000..c47514d1cd
--- /dev/null
+++ b/minimal_project/minimal_project/settings.py
@@ -0,0 +1,22 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'dummy-secret-key'
+
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+    'test_app',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
\ No newline at end of file
diff --git a/minimal_project/minimal_project/urls.py b/minimal_project/minimal_project/urls.py
new file mode 100644
index 0000000000..b49e841796
--- /dev/null
+++ b/minimal_project/minimal_project/urls.py
@@ -0,0 +1,22 @@
+"""minimal_project URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/minimal_project/minimal_project/wsgi.py b/minimal_project/minimal_project/wsgi.py
new file mode 100644
index 0000000000..2aa8c0469b
--- /dev/null
+++ b/minimal_project/minimal_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for minimal_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "minimal_project.settings")
+
+application = get_wsgi_application()
diff --git a/minimal_project/reproduce_error.py b/minimal_project/reproduce_error.py
new file mode 100644
index 0000000000..73bd0ef948
--- /dev/null
+++ b/minimal_project/reproduce_error.py
@@ -0,0 +1,36 @@
+import os
+import sys
+import django
+from django.db import connection
+
+# Set the Python path and Django settings module
+sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'minimal_project.settings')
+django.setup()
+
+from test_app.models import Base, OtherBase, Child
+
+# Delete the existing database file
+import os
+db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'db.sqlite3')
+if os.path.exists(db_path):
+    os.remove(db_path)
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Base)
+    schema_editor.create_model(OtherBase)
+    schema_editor.create_model(Child)
+
+# Django shell-like operations
+OtherBase.objects.create(field_otherbase=100)
+OtherBase.objects.create(field_otherbase=101)
+Child.objects.create(field_base=0, field_otherbase=0)
+Child.objects.create(field_base=1, field_otherbase=1)
+
+# Perform the update
+Child.objects.update(field_otherbase=55)
+
+# Verify the results
+print("Child.objects.values('field_otherbase'):", Child.objects.values('field_otherbase'))
+print("OtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase'):", OtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase'))
\ No newline at end of file
diff --git a/minimal_project/test_app/__init__.py b/minimal_project/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/minimal_project/test_app/admin.py b/minimal_project/test_app/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/minimal_project/test_app/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/minimal_project/test_app/apps.py b/minimal_project/test_app/apps.py
new file mode 100644
index 0000000000..953db2940f
--- /dev/null
+++ b/minimal_project/test_app/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class TestAppConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "test_app"
diff --git a/minimal_project/test_app/migrations/__init__.py b/minimal_project/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/minimal_project/test_app/models.py b/minimal_project/test_app/models.py
new file mode 100644
index 0000000000..eb5a71ba29
--- /dev/null
+++ b/minimal_project/test_app/models.py
@@ -0,0 +1,13 @@
+from django.db import models
+
+class Base(models.Model):
+    base_id = models.AutoField(primary_key=True)
+    field_base = models.IntegerField()
+
+class OtherBase(models.Model):
+    otherbase_id = models.AutoField(primary_key=True)
+    field_otherbase = models.IntegerField()
+
+class Child(Base, OtherBase):
+    field_base = models.IntegerField()
+    field_otherbase = models.IntegerField()
diff --git a/minimal_project/test_app/tests.py b/minimal_project/test_app/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/minimal_project/test_app/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/minimal_project/test_app/views.py b/minimal_project/test_app/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/minimal_project/test_app/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
