{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-12039", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 98afbcc05a..1e4c6ce6f7 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -2,7 +2,7 @@ import logging\n from datetime import datetime\n \n from django.db.backends.ddl_references import (\n-    Columns, ForeignKeyName, IndexName, Statement, Table,\n+    Columns, ForeignKeyName, IndexColumns, IndexName, Statement, Table,\n )\n from django.db.backends.utils import names_digest, split_identifier\n from django.db.models import Index\n@@ -979,6 +979,8 @@ class BaseDatabaseSchemaEditor:\n         )\n \n     def _index_columns(self, table, columns, col_suffixes, opclasses):\n+        if opclasses:\n+            return IndexColumns(table, columns, self.quote_name, col_suffixes=col_suffixes, opclasses=opclasses)\n         return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)\n \n     def _model_indexes_sql(self, model):\ndiff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 44e49806f8..9b357d5aaf 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -114,7 +114,8 @@ class IndexColumns(Columns):\n             # length as self.columns.\n             col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n             try:\n-                col = '{} {}'.format(col, self.col_suffixes[idx])\n+                if self.col_suffixes[idx]:\n+                    col = '{} {}'.format(col, self.col_suffixes[idx].strip())\n             except IndexError:\n                 pass\n             return col\ndiff --git a/django/db/models/indexes.py b/django/db/models/indexes.py\nindex 49f4989462..ab42d0f516 100644\n--- a/django/db/models/indexes.py\n+++ b/django/db/models/indexes.py\n@@ -48,7 +48,7 @@ class Index:\n \n     def create_sql(self, model, schema_editor, using='', **kwargs):\n         fields = [model._meta.get_field(field_name) for field_name, _ in self.fields_orders]\n-        col_suffixes = [order[1] for order in self.fields_orders]\n+        col_suffixes = [' ' + order[1] if order[1] else '' for order in self.fields_orders]\n         condition = self._get_condition_sql(model, schema_editor)\n         return schema_editor._create_index_sql(\n             model, fields, name=self.name, using=using, db_tablespace=self.db_tablespace,\n"}