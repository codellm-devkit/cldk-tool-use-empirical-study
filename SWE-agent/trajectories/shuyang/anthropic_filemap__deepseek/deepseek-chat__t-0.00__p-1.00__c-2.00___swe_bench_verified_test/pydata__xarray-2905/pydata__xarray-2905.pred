{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-2905", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 45553eb9..abd54fb9 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -217,8 +217,9 @@ def as_compatible_data(data, fastpath=False):\n     if isinstance(data, timedelta):\n         data = np.timedelta64(getattr(data, \"value\", data), \"ns\")\n \n-    # we don't want nested self-described arrays\n-    data = getattr(data, \"values\", data)\n+    # Skip coercion for objects with a .values property that should be stored directly\n+    if not hasattr(data, 'values') or isinstance(data, (np.ndarray, np.ma.MaskedArray)):\n+        data = getattr(data, \"values\", data)\n \n     if isinstance(data, np.ma.MaskedArray):\n         mask = np.ma.getmaskarray(data)\n@@ -855,17 +856,22 @@ class Variable(\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n-            if value.ndim > len(dims):\n-                raise ValueError(\n-                    \"shape mismatch: value array of shape %s could not be \"\n-                    \"broadcast to indexing result with %s dimensions\"\n-                    % (value.shape, len(dims))\n-                )\n-            if value.ndim == 0:\n-                value = Variable((), value)\n+            # Skip coercion for objects with a .values property\n+            if not hasattr(value, 'values'):\n+                value = as_compatible_data(value)\n+                if value.ndim > len(dims):\n+                    raise ValueError(\n+                        \"shape mismatch: value array of shape %s could not be \"\n+                        \"broadcast to indexing result with %s dimensions\"\n+                        % (value.shape, len(dims))\n+                    )\n+                if value.ndim == 0:\n+                    value = Variable((), value)\n+                else:\n+                    value = Variable(dims[-value.ndim :], value)\n             else:\n-                value = Variable(dims[-value.ndim :], value)\n+                # Directly assign the object without coercion\n+                value = Variable((), value)\n         # broadcast to become assignable\n         value = value.set_dims(dims).data\n \n"}