{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-15278", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6752a8e3c0..0e94386391 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -324,12 +324,21 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def add_field(self, model, field):\n         \"\"\"Create a field on a model.\"\"\"\n-        # Fields with default values cannot by handled by ALTER TABLE ADD\n-        # COLUMN statement because DROP DEFAULT is not supported in\n-        # ALTER TABLE.\n-        if not field.null or self.effective_default(field) is not None:\n+        # Debug: Print field type\n+        print(f\"Field type: {type(field)}\")\n+        print(f\"Is OneToOneField: {isinstance(field, models.OneToOneField)}\")\n+        print(f\"Field null: {field.null}\")\n+        print(f\"Field unique: {field.unique}\")\n+        print(f\"Field default: {self.effective_default(field)}\")\n+        \n+        # Fields with default values, UNIQUE constraints, or OneToOneField\n+        # cannot be handled by ALTER TABLE ADD COLUMN statement because\n+        # SQLite does not support adding UNIQUE constraints to existing columns.\n+        if not field.null or self.effective_default(field) is not None or field.unique or isinstance(field, models.OneToOneField):\n+            print(\"Triggering _remake_table\")\n             self._remake_table(model, create_field=field)\n         else:\n+            print(\"Triggering super().add_field\")\n             super().add_field(model, field)\n \n     def remove_field(self, model, field):\ndiff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 89e9344a68..7968b644ec 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -95,6 +95,7 @@ class MigrationExecutor:\n         Django first needs to create all project states before a migration is\n         (un)applied and in a second step run all the database operations.\n         \"\"\"\n+        print(\"Executing migrate method\")\n         # The django_migrations table must be present to record applied\n         # migrations, but don't create it if there are no migrations to apply.\n         if plan == []:\n@@ -105,6 +106,7 @@ class MigrationExecutor:\n \n         if plan is None:\n             plan = self.migration_plan(targets)\n+        print(f\"Migration plan: {plan}\")\n         # Create the forwards plan Django would follow on an empty database\n         full_plan = self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True)\n \n@@ -225,6 +227,7 @@ class MigrationExecutor:\n \n     def apply_migration(self, state, migration, fake=False, fake_initial=False):\n         \"\"\"Run a migration forwards.\"\"\"\n+        print(f\"Applying migration: {migration.app_label}.{migration.name}\")\n         migration_recorded = False\n         if self.progress_callback:\n             self.progress_callback(\"apply_start\", migration, fake)\n@@ -237,6 +240,7 @@ class MigrationExecutor:\n             if not fake:\n                 # Alright, do it normally\n                 with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n+                    print(f\"Executing operations for {migration.app_label}.{migration.name}\")\n                     state = migration.apply(state, schema_editor)\n                     if not schema_editor.deferred_sql:\n                         self.record_migration(migration)\ndiff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 094c3e3cda..3419555f90 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -91,10 +91,13 @@ class AddField(FieldOperation):\n         )\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        print(\"Executing database_forwards for AddField\")\n         to_model = to_state.apps.get_model(app_label, self.model_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, to_model):\n             from_model = from_state.apps.get_model(app_label, self.model_name)\n             field = to_model._meta.get_field(self.name)\n+            print(f\"Field type: {type(field)}\")\n+            print(f\"Is OneToOneField: {isinstance(field, models.OneToOneField)}\")\n             if not self.preserve_default:\n                 field.default = self.field.default\n             schema_editor.add_field(\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..0b5e11b9eb\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,108 @@\n+import os\n+import django\n+import tempfile\n+from django.conf import settings\n+from django.db import models, connections\n+from django.db.migrations import Migration\n+from django.db.migrations.operations import CreateModel, AddField\n+from django.db.migrations.executor import MigrationExecutor\n+\n+# Create a temporary directory for migrations\n+temp_dir = tempfile.mkdtemp()\n+\n+# Create a dummy_app directory\n+app_dir = os.path.join(temp_dir, \"dummy_app\")\n+os.makedirs(app_dir)\n+\n+# Create a migrations directory\n+migrations_dir = os.path.join(app_dir, \"migrations\")\n+os.makedirs(migrations_dir)\n+\n+# Create __init__.py files\n+with open(os.path.join(app_dir, \"__init__.py\"), \"w\") as f:\n+    f.write(\"\")\n+\n+with open(os.path.join(migrations_dir, \"__init__.py\"), \"w\") as f:\n+    f.write(\"\")\n+\n+# Create 0001_initial.py\n+with open(os.path.join(migrations_dir, \"0001_initial.py\"), \"w\") as f:\n+    f.write(\"\"\"\n+from django.db import migrations, models\n+\n+class Migration(migrations.Migration):\n+    initial = True\n+    dependencies = []\n+    operations = [\n+        migrations.CreateModel(\n+            name=\"MyModel\",\n+            fields=[\n+                (\"id\", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name=\"ID\")),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+        ),\n+    ]\n+\"\"\")\n+\n+# Create 0002_add_related_model.py\n+with open(os.path.join(migrations_dir, \"0002_add_related_model.py\"), \"w\") as f:\n+    f.write(\"\"\"\n+from django.db import migrations, models\n+\n+class Migration(migrations.Migration):\n+    dependencies = [(\"dummy_app\", \"0001_initial\")]\n+    operations = [\n+        migrations.AddField(\n+            model_name=\"mymodel\",\n+            name=\"related_model\",\n+            field=models.OneToOneField(\n+                blank=True,\n+                null=True,\n+                on_delete=models.SET_NULL,\n+                to=\"self\",\n+            ),\n+        ),\n+    ]\n+\"\"\")\n+\n+# Minimal Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            \"default\": {\n+                \"ENGINE\": \"django.db.backends.sqlite3\",\n+                \"NAME\": \":memory:\",\n+            }\n+        },\n+        INSTALLED_APPS=[\"dummy_app\"],\n+        MIGRATION_MODULES={\"dummy_app\": \"dummy_app.migrations\"},\n+    )\n+\n+# Add the temporary directory to Python path\n+import sys\n+sys.path.insert(0, temp_dir)\n+\n+django.setup()\n+\n+# Execute the migrations\n+def execute_migrations():\n+    connection = connections[\"default\"]\n+    executor = MigrationExecutor(connection)\n+    \n+    # Apply the first migration\n+    executor.migrate([(\"dummy_app\", \"0001_initial\")])\n+    \n+    # Insert some data into the table\n+    with connection.cursor() as cursor:\n+        cursor.execute(\"INSERT INTO dummy_app_mymodel (name) VALUES ('test')\")\n+    \n+    # Try to apply the second migration\n+    try:\n+        print(\"Applying migration 0002_add_related_model\")\n+        executor.migrate([(\"dummy_app\", \"0002_add_related_model\")])\n+        print(\"Migration successful!\")\n+    except Exception as e:\n+        print(f\"Migration failed: {e}\")\n+\n+if __name__ == \"__main__\":\n+    execute_migrations()\n\\ No newline at end of file\n"}