{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-12663", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..cc0efcf9c2 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -804,6 +804,8 @@ class Field(RegisterLookupMixin):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        if hasattr(value, '_wrapped'):  # Handle SimpleLazyObject\n+            value = value._wrapped\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..e426782fe4\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,17 @@\n+from django.contrib.auth.models import User\n+from django.db.models import OuterRef, Subquery\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n+from ..models import A, B, C\n+\n+class BugTestCase(TestCase):\n+    def test_bug(self):\n+        owner_user = (\n+            B.objects.filter(a=OuterRef(\"pk\"))\n+            .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+            .values(\"owner_user\")\n+        )\n+        user = SimpleLazyObject(lambda: User.objects.create_user(\"testuser\"))\n+        A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+            owner_user=user\n+        )\n\\ No newline at end of file\n"}