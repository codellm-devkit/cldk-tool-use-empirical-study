{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-18199", "model_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 9a3052d4c3..9613399ffc 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -768,6 +768,23 @@ def nthroot_mod(a, n, p, all_roots=False):\n     \"\"\"\n     from sympy.core.numbers import igcdex\n     a, n, p = as_int(a), as_int(n), as_int(p)\n+    \n+    # Handle the case where a % p == 0 (x = 0 is a root)\n+    if a % p == 0:\n+        if all_roots:\n+            roots = [0]\n+            # Proceed to find other roots if they exist\n+            other_roots = nthroot_mod(a, n, p, all_roots=False)\n+            if other_roots is not None:\n+                if isinstance(other_roots, list):\n+                    roots.extend([r for r in other_roots if r != 0])  # Avoid duplicate 0\n+                else:\n+                    if other_roots != 0:\n+                        roots.append(other_roots)\n+            return roots\n+        else:\n+            return 0\n+    \n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\ndiff --git a/test_nthroot_mod.py b/test_nthroot_mod.py\nnew file mode 100644\nindex 0000000000..45f8f2f90e\n--- /dev/null\n+++ b/test_nthroot_mod.py\n@@ -0,0 +1,2 @@\n+from sympy.ntheory.residue_ntheory import nthroot_mod\n+print(nthroot_mod(17*17, 5, 17))\ndiff --git a/test_nthroot_mod_edge.py b/test_nthroot_mod_edge.py\nnew file mode 100644\nindex 0000000000..39ddf1cb66\n--- /dev/null\n+++ b/test_nthroot_mod_edge.py\n@@ -0,0 +1,2 @@\n+from sympy.ntheory.residue_ntheory import nthroot_mod\n+print(nthroot_mod(0, 3, 7, all_roots=True))\ndiff --git a/test_nthroot_mod_final.py b/test_nthroot_mod_final.py\nnew file mode 100644\nindex 0000000000..187166a6b3\n--- /dev/null\n+++ b/test_nthroot_mod_final.py\n@@ -0,0 +1,2 @@\n+from sympy.ntheory.residue_ntheory import nthroot_mod\n+print(nthroot_mod(0, 2, 7, all_roots=True))\n"}