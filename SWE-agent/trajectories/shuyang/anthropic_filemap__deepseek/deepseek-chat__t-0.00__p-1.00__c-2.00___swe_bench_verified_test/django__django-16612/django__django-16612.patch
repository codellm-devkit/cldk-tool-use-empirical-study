diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 075ecee1be..b1950f531d 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -21,9 +21,10 @@ class BaseConstraint:
     violation_error_message = None
 
     # RemovedInDjango60Warning: When the deprecation ends, replace with:
-    # def __init__(self, *, name, violation_error_message=None):
-    def __init__(self, *args, name=None, violation_error_message=None):
+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):
+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):
         # RemovedInDjango60Warning.
+        self.violation_error_code = violation_error_code
         if name is None and not args:
             raise TypeError(
                 f"{self.__class__.__name__}.__init__() missing 1 required keyword-only "
@@ -82,13 +83,13 @@ class BaseConstraint:
 
 
 class CheckConstraint(BaseConstraint):
-    def __init__(self, *, check, name, violation_error_message=None):
+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
         self.check = check
         if not getattr(check, "conditional", False):
             raise TypeError(
                 "CheckConstraint.check must be a Q instance or boolean expression."
             )
-        super().__init__(name=name, violation_error_message=violation_error_message)
 
     def _get_check_sql(self, model, schema_editor):
         query = Query(model=model, alias_cols=False)
@@ -112,7 +113,10 @@ class CheckConstraint(BaseConstraint):
         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
         try:
             if not Q(self.check).check(against, using=using):
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(
+                    self.get_violation_error_message(),
+                    code=self.violation_error_code
+                )
         except FieldError:
             pass
 
@@ -164,7 +168,9 @@ class UniqueConstraint(BaseConstraint):
         include=None,
         opclasses=(),
         violation_error_message=None,
+        violation_error_code=None,
     ):
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
         if not name:
             raise ValueError("A unique constraint must be named.")
         if not expressions and not fields:
@@ -385,14 +391,18 @@ class UniqueConstraint(BaseConstraint):
         if not self.condition:
             if queryset.exists():
                 if self.expressions:
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(
+                        self.get_violation_error_message(),
+                        code=self.violation_error_code
+                    )
                 # When fields are defined, use the unique_error_message() for
                 # backward compatibility.
                 for model, constraints in instance.get_constraints():
                     for constraint in constraints:
                         if constraint is self:
                             raise ValidationError(
-                                instance.unique_error_message(model, self.fields)
+                                instance.unique_error_message(model, self.fields),
+                                code=self.violation_error_code
                             )
         else:
             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
