diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0a5e5ff673..1196c580aa 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -939,6 +939,10 @@ class Model(metaclass=ModelBase):
     delete.alters_data = True
 
     def _get_FIELD_display(self, field):
+        # Check if the model has an overridden get_FIELD_display method.
+        method_name = 'get_%s_display' % field.name
+        if hasattr(self.__class__, method_name) and getattr(self.__class__, method_name).__name__ != '_get_FIELD_display':
+            return getattr(self.__class__, method_name).__get__(self, self.__class__)()
         value = getattr(self, field.attname)
         # force_str() to coerce lazy strings.
         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)
diff --git a/test_get_field_display.py b/test_get_field_display.py
new file mode 100644
index 0000000000..09d1a3a369
--- /dev/null
+++ b/test_get_field_display.py
@@ -0,0 +1,34 @@
+import os
+import django
+from django.conf import settings
+
+# Minimal Django settings
+settings.configure(
+    INSTALLED_APPS=[],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    }
+)
+django.setup()
+
+from django.db import models
+
+class FooBar(models.Model):
+    foo_bar = models.CharField("foo", choices=[(1, 'foo'), (2, 'bar')])
+    
+    class Meta:
+        app_label = 'test_app'
+    
+    def __str__(self):
+        return self.get_foo_bar_display()
+    
+    def get_foo_bar_display(self):
+        return "something"
+
+# Test the behavior
+if __name__ == "__main__":
+    obj = FooBar(foo_bar=1)
+    print(obj.get_foo_bar_display())  # Should print "something"
\ No newline at end of file
