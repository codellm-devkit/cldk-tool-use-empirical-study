{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/reproduce_sparsecoder.py b/reproduce_sparsecoder.py\nnew file mode 100644\nindex 000000000..e67bf674d\n--- /dev/null\n+++ b/reproduce_sparsecoder.py\n@@ -0,0 +1,14 @@\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+\n+# Create a random dictionary and data\n+np.random.seed(0)\n+dictionary = np.random.randn(10, 5)\n+data = np.random.randn(100, 5)\n+\n+# Initialize SparseCoder with lasso_cd algorithm and higher max_iter\n+coder = SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd', transform_alpha=0.1, max_iter=5000)\n+\n+# Transform the data (this should trigger the warning)\n+codes = coder.transform(data)\n+print(codes.shape)\n\\ No newline at end of file\ndiff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..17855a515 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -900,7 +900,7 @@ class SparseCodingMixin(TransformerMixin):\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -991,7 +991,9 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self.max_iter = max_iter\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n"}