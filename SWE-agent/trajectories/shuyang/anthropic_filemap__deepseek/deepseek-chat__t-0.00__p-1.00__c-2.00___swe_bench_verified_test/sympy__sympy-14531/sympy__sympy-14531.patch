diff --git a/reproduce_tensor_product_issue.py b/reproduce_tensor_product_issue.py
new file mode 100644
index 0000000000..708588a8b9
--- /dev/null
+++ b/reproduce_tensor_product_issue.py
@@ -0,0 +1,16 @@
+from sympy import *
+from sympy.physics.quantum import TensorProduct as tp
+from sympy.physics.quantum import tensor_product_simp as tps
+from sympy.physics.paulialgebra import Pauli
+
+a = Symbol('a', commutative=False)
+
+# Example 1: (1x1)**2
+t1 = tp(1,1)*tp(1,1)
+print("Original t1:", t1)
+print("Simplified t1:", tps(t1))
+
+# Example 2: (1xsigma3)**2
+t2 = tp(1,Pauli(3))*tp(1,Pauli(3))
+print("Original t2:", t2)
+print("Simplified t2:", tps(t2))
\ No newline at end of file
diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 9dd10d219e..3e7ca140ca 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -382,7 +382,11 @@ def tensor_product_simp(e, **hints):
     if isinstance(e, Add):
         return Add(*[tensor_product_simp(arg) for arg in e.args])
     elif isinstance(e, Pow):
-        return tensor_product_simp(e.base) ** e.exp
+        base = tensor_product_simp(e.base)
+        if isinstance(base, TensorProduct):
+            return TensorProduct(*[arg ** e.exp for arg in base.args])
+        else:
+            return base ** e.exp
     elif isinstance(e, Mul):
         return tensor_product_simp_Mul(e)
     elif isinstance(e, Commutator):
