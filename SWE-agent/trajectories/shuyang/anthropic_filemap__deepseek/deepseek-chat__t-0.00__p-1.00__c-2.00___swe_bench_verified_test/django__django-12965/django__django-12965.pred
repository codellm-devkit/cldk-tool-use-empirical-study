{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-12965", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..cdc211df3e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -742,6 +742,14 @@ class QuerySet:\n         del_query.query.select_related = False\n         del_query.query.clear_ordering(force_empty=True)\n \n+        # Check if this is an unconditional deletion (no filters)\n+        if not del_query.query.where:\n+            # Perform a fast delete without collecting related objects\n+            deleted = del_query._raw_delete(del_query.db)\n+            # Clear the result cache, in case this QuerySet gets reused.\n+            self._result_cache = None\n+            return deleted, {self.model._meta.label: deleted}\n+\n         collector = Collector(using=del_query.db)\n         collector.collect(del_query)\n         deleted, _rows_count = collector.delete()\n@@ -760,6 +768,12 @@ class QuerySet:\n         \"\"\"\n         query = self.query.clone()\n         query.__class__ = sql.DeleteQuery\n+        # Ensure the base_table is set\n+        query.base_table = query.get_meta().db_table\n+        # Ensure unconditional deletions skip the WHERE clause\n+        if not query.where:\n+            from django.db.models.sql.where import WhereNode\n+            query.where = WhereNode()\n         cursor = query.get_compiler(using).execute_sql(CURSOR)\n         if cursor:\n             with cursor:\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f..6ed5829869 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1423,7 +1423,8 @@ class SQLDeleteCompiler(SQLCompiler):\n         Create the SQL for this query. Return the SQL string and list of\n         parameters.\n         \"\"\"\n-        if self.single_alias:\n+        if self.single_alias or not self.query.where:\n+            # Skip subquery for unconditional deletions or single-alias queries\n             return self._as_sql(self.query)\n         innerq = self.query.clone()\n         innerq.__class__ = Query\ndiff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex 72b6712864..99c8a8b4ce 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -17,6 +17,10 @@ class DeleteQuery(Query):\n \n     compiler = 'SQLDeleteCompiler'\n \n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.base_table = self.get_meta().db_table\n+\n     def do_query(self, table, where, using):\n         self.alias_map = {table: self.alias_map[table]}\n         self.where = where\n@@ -36,11 +40,20 @@ class DeleteQuery(Query):\n         # number of objects deleted\n         num_deleted = 0\n         field = self.get_meta().pk\n-        for offset in range(0, len(pk_list), GET_ITERATOR_CHUNK_SIZE):\n-            self.where = self.where_class()\n-            self.add_q(Q(\n-                **{field.attname + '__in': pk_list[offset:offset + GET_ITERATOR_CHUNK_SIZE]}))\n+        if not pk_list and not self.where:\n+            # Unconditional deletion (e.g., Model.objects.all().delete())\n+            self.where = None\n             num_deleted += self.do_query(self.get_meta().db_table, self.where, using=using)\n+        else:\n+            # Conditional deletion with WHERE clause\n+            if pk_list:\n+                for offset in range(0, len(pk_list), GET_ITERATOR_CHUNK_SIZE):\n+                    self.where = self.where_class()\n+                    self.add_q(Q(\n+                        **{field.attname + '__in': pk_list[offset:offset + GET_ITERATOR_CHUNK_SIZE]}))\n+                    num_deleted += self.do_query(self.get_meta().db_table, self.where, using=using)\n+            else:\n+                num_deleted += self.do_query(self.get_meta().db_table, self.where, using=using)\n         return num_deleted\n \n \ndiff --git a/test_delete.py b/test_delete.py\nnew file mode 100644\nindex 0000000000..f19cda84ce\n--- /dev/null\n+++ b/test_delete.py\n@@ -0,0 +1,26 @@\n+import os\n+import django\n+from django.db import models\n+\n+# Minimal Django settings\n+os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"test_settings\")\n+django.setup()\n+\n+class Alphabet(models.Model):\n+    letter = models.CharField(max_length=1)\n+\n+    class Meta:\n+        app_label = 'testapp'\n+\n+# Simulate Model.objects.all().delete()\n+if __name__ == \"__main__\":\n+    from django.db import connection, connections\n+    from django.db.models.sql.subqueries import DeleteQuery\n+    # Create the table (for SQLite)\n+    with connections['default'].schema_editor() as schema_editor:\n+        schema_editor.create_model(Alphabet)\n+    # Print the DeleteQuery class being used\n+    print(\"DeleteQuery module:\", DeleteQuery.__module__)\n+    # Run the deletion\n+    Alphabet.objects.all().delete()\n+    print(\"Generated SQL:\", connection.queries[-1]['sql'])\n\\ No newline at end of file\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..6c6465e58d\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,15 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+]\n+\n+SECRET_KEY = 'test-secret-key'\n+\n+DEBUG = True\n\\ No newline at end of file\n"}