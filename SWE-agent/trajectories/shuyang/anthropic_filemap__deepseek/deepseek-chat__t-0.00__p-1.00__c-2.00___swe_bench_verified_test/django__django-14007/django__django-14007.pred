{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-14007", "model_patch": "diff --git a/__init__.py b/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/db.sqlite3 b/db.sqlite3\nnew file mode 100644\nindex 0000000000..2e7d9c2530\nBinary files /dev/null and b/db.sqlite3 differ\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca527..7b7d30efa7 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -451,6 +451,10 @@ class QuerySet:\n         obj = self.model(**kwargs)\n         self._for_write = True\n         obj.save(force_insert=True, using=self.db)\n+        # Ensure the primary key is passed through from_db_value\n+        pk_field = obj._meta.pk\n+        if hasattr(pk_field, 'from_db_value') and obj.pk is not None:\n+            obj.pk = pk_field.from_db_value(obj.pk, None, connections[self.db])\n         return obj\n \n     def _prepare_for_bulk_create(self, objs):\n@@ -518,6 +522,8 @@ class QuerySet:\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n+                        if hasattr(field, 'from_db_value') and result is not None:\n+                            result = field.from_db_value(result, None, connections[self.db])\n                         setattr(obj_without_pk, field.attname, result)\n                     obj_without_pk._state.adding = False\n                     obj_without_pk._state.db = self.db\ndiff --git a/reproduce.py b/reproduce.py\nnew file mode 100644\nindex 0000000000..7c557501d2\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,51 @@\n+import os\n+import sys\n+import django\n+from django.db import models\n+\n+# Add the parent directory of /testbed to the Python path\n+sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+\n+# Minimal Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')\n+django.setup()\n+\n+class MyIntWrapper:\n+    def __init__(self, value):\n+        self.value = value\n+    def __repr__(self):\n+        return f\"<MyIntWrapper: {self.value}>\"\n+\n+class MyAutoField(models.BigAutoField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        return MyIntWrapper(value)\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\n+\n+class AutoModel(models.Model):\n+    id = MyAutoField(primary_key=True)\n+\n+    class Meta:\n+        app_label = 'testbed'\n+\n+# Drop and recreate the database table (for testing)\n+from django.db import connection\n+with connection.schema_editor() as editor:\n+    editor.delete_model(AutoModel)\n+    editor.create_model(AutoModel)\n+\n+# Test create\n+am2 = AutoModel.objects.create()\n+print(\"After create:\", am2.id)  # Expected: <MyIntWrapper: 2>, Actual: 2\n+\n+# Skip bulk_create test for SQLite\n+if not connection.vendor == 'sqlite':\n+    ams = [AutoModel()]\n+    AutoModel.objects.bulk_create(ams)\n+    print(\"After bulk_create:\", ams[0].id)  # Expected: <MyIntWrapper: 2>, Actual: ?\n+else:\n+    print(\"Skipping bulk_create test for SQLite (not supported)\")\n\\ No newline at end of file\ndiff --git a/settings.py b/settings.py\nnew file mode 100644\nindex 0000000000..11d47358b2\n--- /dev/null\n+++ b/settings.py\n@@ -0,0 +1,8 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': 'db.sqlite3',\n+    }\n+}\n+INSTALLED_APPS = ['testbed']\n+SECRET_KEY = 'dummy-key'\n\\ No newline at end of file\n"}