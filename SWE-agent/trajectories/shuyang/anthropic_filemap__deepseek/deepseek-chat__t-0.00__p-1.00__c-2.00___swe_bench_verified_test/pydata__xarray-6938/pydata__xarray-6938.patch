diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 823cbe02..05e556bf 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -19,6 +19,7 @@ from typing import (
     Sequence,
     overload,
 )
+import xarray as xr
 
 import numpy as np
 
@@ -1876,7 +1877,8 @@ def polyval(
     Parameters
     ----------
     coord : DataArray or Dataset
-        Values at which to evaluate the polynomial.
+        Values at which to evaluate the polynomial. If the input is `timedelta64`,
+        it must be explicitly converted to numeric values (e.g., nanoseconds) first.
     coeffs : DataArray or Dataset
         Coefficients of the polynomial.
     degree_dim : Hashable, default: "degree"
@@ -1905,14 +1907,19 @@ def polyval(
     coeffs = coeffs.reindex(
         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False
     )
+    if hasattr(coord, "dtype") and getattr(coord, "dtype", None) and coord.dtype.kind == "m":
+        raise TypeError(
+            "`polyval` does not support `timedelta64` inputs. "
+            "Convert to numeric values (e.g., nanoseconds) first."
+        )
     coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?
 
     # using Horner's method
     # https://en.wikipedia.org/wiki/Horner%27s_method
     res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)
     for deg in range(max_deg - 1, -1, -1):
-        res *= coord
-        res += coeffs.isel({degree_dim: deg}, drop=True)
+        res = res * coord  # Use explicit multiplication to avoid in-place operations
+        res = res + coeffs.isel({degree_dim: deg}, drop=True)
 
     return res
 
@@ -1933,7 +1940,7 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:
     from .dataset import Dataset
 
     def to_floatable(x: DataArray) -> DataArray:
-        if x.dtype.kind in "mM":
+        if x.dtype.kind == "M":  # datetime64
             return x.copy(
                 data=datetime_to_numeric(
                     x.data,
@@ -1941,6 +1948,8 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:
                     datetime_unit="ns",
                 ),
             )
+        elif x.dtype.kind == "m":  # timedelta64
+            return x.copy(data=x.data.astype("timedelta64[ns]").astype("float64"))
         return x
 
     if isinstance(data, Dataset):
