{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex b20cd873c..04ee467a7 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -55,6 +55,7 @@ def expand_modules(\n     \"\"\"Take a list of files/modules/packages and return the list of tuple\n     (file, module name) which have to be actually checked.\n     \"\"\"\n+\n     result: list[ModuleDescriptionDict] = []\n     errors: list[ErrorDescriptionDict] = []\n     path = sys.path.copy()\n@@ -128,9 +129,17 @@ def expand_modules(\n             ):\n                 if filepath == subfilepath:\n                     continue\n-                if _is_in_ignore_list_re(\n-                    os.path.basename(subfilepath), ignore_list_re\n-                ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n+                if (\n+                    _is_in_ignore_list_re(os.path.basename(subfilepath), ignore_list_re)\n+                    or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re)\n+                    or any(\n+                        pattern.match(os.path.relpath(subfilepath, os.path.dirname(filepath)))\n+                        for pattern in ignore_list_paths_re + ignore_list_re\n+                    )\n+                ):\n+                    continue\n+                # Ensure the file is not matched by ignore_list_paths_re\n+                if _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                     continue\n \n                 modpath = _modpath_from_file(\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..5977aac7b 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -737,6 +737,9 @@ class PyLinter(\n \n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+        print(f\"Debug: ignore = {self.config.ignore}\", file=sys.stderr)\n+        print(f\"Debug: ignore_patterns = {self.config.ignore_patterns}\", file=sys.stderr)\n+        print(f\"Debug: _ignore_paths = {self._ignore_paths}\", file=sys.stderr)\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\ndiff --git a/reproduce/.a/foo.py b/reproduce/.a/foo.py\nnew file mode 100644\nindex 000000000..b199df542\n--- /dev/null\n+++ b/reproduce/.a/foo.py\n@@ -0,0 +1 @@\n+import re\ndiff --git a/reproduce/bar.py b/reproduce/bar.py\nnew file mode 100644\nindex 000000000..b199df542\n--- /dev/null\n+++ b/reproduce/bar.py\n@@ -0,0 +1 @@\n+import re\ndiff --git a/reproduce/foo.py b/reproduce/foo.py\nnew file mode 100644\nindex 000000000..b199df542\n--- /dev/null\n+++ b/reproduce/foo.py\n@@ -0,0 +1 @@\n+import re\ndiff --git a/test_dir/.a/foo.py b/test_dir/.a/foo.py\nnew file mode 100644\nindex 000000000..7d0e67bb7\n--- /dev/null\n+++ b/test_dir/.a/foo.py\n@@ -0,0 +1 @@\n+import re\n\\ No newline at end of file\ndiff --git a/test_dir/foo.py b/test_dir/foo.py\nnew file mode 100644\nindex 000000000..7d0e67bb7\n--- /dev/null\n+++ b/test_dir/foo.py\n@@ -0,0 +1 @@\n+import re\n\\ No newline at end of file\n"}