diff --git a/reproduce_diophantine.py b/reproduce_diophantine.py
new file mode 100644
index 0000000000..a443a0f721
--- /dev/null
+++ b/reproduce_diophantine.py
@@ -0,0 +1,4 @@
+from sympy import symbols, diophantine
+n, m = symbols("n m", integer=True)
+print(diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True))
+print(diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True))
diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..8dbc567edf 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -346,6 +346,18 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
                 final_soln.update(permuted_sign_var)
             else:
                 final_soln.add(sol)
+            # Ensure all permutations are generated regardless of syms order
+            if permute:
+                from sympy.utilities.iterables import permutations
+                for p in permutations(sol):
+                    final_soln.add(p)
+                # Also add the reverse of the solution if it's a pair
+                if len(sol) == 2:
+                    final_soln.add((sol[1], sol[0]))
+                # Ensure all sign permutations are added
+                if not (do_permute_signs or permute_few_signs or do_permute_signs_var):
+                    permuted_sign = set(permute_signs(sol))
+                    final_soln.update(permuted_sign)
         else:
                 final_soln.add(sol)
     return final_soln
