{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..79ab3cb1 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1942,29 +1942,49 @@ class DataArray(AbstractArray, DataWithCoords):\n                 labels=[[0, 0, 0, 1], [0, 1, 2, -1]],\n                 names=['variable', 'y'])\n         >>> roundtripped = stacked.to_unstacked_dataset(dim=\"z\")\n-        >>> data.identical(roundtripped)\n-        True\n-\n-        See Also\n-        --------\n-        Dataset.to_stacked_array\n         \"\"\"\n+        from .dataset import Dataset\n \n-        idx = self.indexes[dim]\n-        if not isinstance(idx, pd.MultiIndex):\n-            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n+        if not isinstance(dim, str):\n+            raise TypeError(f\"dim must be a string, got {type(dim)}\")\n \n-        level_number = idx._get_level_number(level)\n-        variables = idx.levels[level_number]\n-        variable_dim = idx.names[level_number]\n+        if dim not in self.dims:\n+            raise ValueError(f\"dimension {dim} not found in {self.dims}\")\n \n-        # pull variables out of datarray\n-        data_dict = {}\n-        for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+        # Get the MultiIndex for the stacked dimension\n+        index = self.indexes[dim]\n+        if not isinstance(index, pd.MultiIndex):\n+            raise ValueError(f\"dimension {dim} is not stacked\")\n+\n+        # Determine the level to expand along\n+        if isinstance(level, str):\n+            level_name = level\n+            level = index.names.index(level_name)\n+        elif isinstance(level, int):\n+            level_name = index.names[level]\n+        else:\n+            raise TypeError(f\"level must be int or str, got {type(level)}\")\n \n-        # unstacked dataset\n-        return Dataset(data_dict)\n+        # Split the DataArray into variables based on the MultiIndex level\n+        data_dict = {}\n+        for key, sub_array in self.groupby(dim):\n+            # Extract the variable name from the MultiIndex\n+            var_name = key[level]\n+            # Remove the stacked dimension if it exists\n+            if dim in sub_array.dims:\n+                sub_array = sub_array.squeeze(dim=dim)\n+            # Ensure the variable name is unique\n+            if var_name in data_dict:\n+                raise ValueError(f\"Duplicate variable name {var_name} found during unstacking\")\n+            data_dict[var_name] = sub_array\n+\n+        # Drop any conflicting coordinates from the data_dict\n+        for var_name in list(data_dict.keys()):\n+            if var_name in data_dict[var_name].coords:\n+                data_dict[var_name] = data_dict[var_name].drop_vars(var_name)\n+        # Create a new Dataset from the unstacked variables, skipping conflict checks\n+        from xarray.core.merge import merge\n+        return merge([Dataset({k: v}) for k, v in data_dict.items()], compat='override')\n \n     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> \"DataArray\":\n         \"\"\"Return a new DataArray object with transposed dimensions.\n"}