{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 823cbe02..05e556bf 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -19,6 +19,7 @@ from typing import (\n     Sequence,\n     overload,\n )\n+import xarray as xr\n \n import numpy as np\n \n@@ -1876,7 +1877,8 @@ def polyval(\n     Parameters\n     ----------\n     coord : DataArray or Dataset\n-        Values at which to evaluate the polynomial.\n+        Values at which to evaluate the polynomial. If the input is `timedelta64`,\n+        it must be explicitly converted to numeric values (e.g., nanoseconds) first.\n     coeffs : DataArray or Dataset\n         Coefficients of the polynomial.\n     degree_dim : Hashable, default: \"degree\"\n@@ -1905,14 +1907,19 @@ def polyval(\n     coeffs = coeffs.reindex(\n         {degree_dim: np.arange(max_deg + 1)}, fill_value=0, copy=False\n     )\n+    if hasattr(coord, \"dtype\") and getattr(coord, \"dtype\", None) and coord.dtype.kind == \"m\":\n+        raise TypeError(\n+            \"`polyval` does not support `timedelta64` inputs. \"\n+            \"Convert to numeric values (e.g., nanoseconds) first.\"\n+        )\n     coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n \n     # using Horner's method\n     # https://en.wikipedia.org/wiki/Horner%27s_method\n     res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)\n     for deg in range(max_deg - 1, -1, -1):\n-        res *= coord\n-        res += coeffs.isel({degree_dim: deg}, drop=True)\n+        res = res * coord  # Use explicit multiplication to avoid in-place operations\n+        res = res + coeffs.isel({degree_dim: deg}, drop=True)\n \n     return res\n \n@@ -1933,7 +1940,7 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n     from .dataset import Dataset\n \n     def to_floatable(x: DataArray) -> DataArray:\n-        if x.dtype.kind in \"mM\":\n+        if x.dtype.kind == \"M\":  # datetime64\n             return x.copy(\n                 data=datetime_to_numeric(\n                     x.data,\n@@ -1941,6 +1948,8 @@ def _ensure_numeric(data: T_Xarray) -> T_Xarray:\n                     datetime_unit=\"ns\",\n                 ),\n             )\n+        elif x.dtype.kind == \"m\":  # timedelta64\n+            return x.copy(data=x.data.astype(\"timedelta64[ns]\").astype(\"float64\"))\n         return x\n \n     if isinstance(data, Dataset):\n"}