{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13315", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a354..24ed56a940 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -986,10 +986,32 @@ class ForeignKey(ForeignObject):\n             raise ValueError(\"Cannot create form field for %r yet, because \"\n                              \"its related model %r has not been loaded yet\" %\n                              (self.name, self.remote_field.model))\n+        queryset = self.remote_field.model._default_manager.using(using)\n+        if self.remote_field.limit_choices_to:\n+            queryset = queryset.filter(self.remote_field.limit_choices_to)\n+            # Ensure uniqueness by overriding the ModelChoiceField's label_from_instance\n+            class UniqueModelChoiceField(forms.ModelChoiceField):\n+                def __init__(self, *args, **kwargs):\n+                    self.to_field_name = kwargs.pop('to_field_name', None)\n+                    super().__init__(*args, **kwargs)\n+                    self._choices = None\n+\n+                def _get_choices(self):\n+                    if not hasattr(self, '_choices') or self._choices is None:\n+                        # Deduplicate choices based on their display value\n+                        choices = []\n+                        seen = set()\n+                        for choice in super()._get_choices() or []:\n+                            if choice[1] not in seen:\n+                                seen.add(choice[1])\n+                                choices.append(choice)\n+                        self._choices = choices\n+                    return self._choices\n+                choices = property(_get_choices, forms.ChoiceField._set_choices)\n+            kwargs['form_class'] = UniqueModelChoiceField\n+            kwargs['to_field_name'] = self.remote_field.field_name\n         return super().formfield(**{\n-            'form_class': forms.ModelChoiceField,\n-            'queryset': self.remote_field.model._default_manager.using(using),\n-            'to_field_name': self.remote_field.field_name,\n+            'queryset': queryset,\n             **kwargs,\n             'blank': self.blank,\n         })\n"}