{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-16642", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..0e12058c77 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -608,11 +608,17 @@ class FileResponse(StreamingHttpResponse):\n                 content_type, encoding = mimetypes.guess_type(filename)\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n-                content_type = {\n-                    \"bzip2\": \"application/x-bzip\",\n-                    \"gzip\": \"application/gzip\",\n-                    \"xz\": \"application/x-xz\",\n-                }.get(encoding, content_type)\n+                # Explicitly handle .Z and .br extensions regardless of mimetypes.guess_type\n+                if filename.endswith('.Z'):\n+                    content_type = \"application/x-compress\"\n+                elif filename.endswith('.br'):\n+                    content_type = \"application/x-brotli\"\n+                else:\n+                    content_type = {\n+                        \"bzip2\": \"application/x-bzip\",\n+                        \"gzip\": \"application/gzip\",\n+                        \"xz\": \"application/x-xz\",\n+                    }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\n                 )\ndiff --git a/test.html.Z b/test.html.Z\nnew file mode 100644\nindex 0000000000..1111a795fe\n--- /dev/null\n+++ b/test.html.Z\n@@ -0,0 +1 @@\n+This is a test file with .Z extension.\n\\ No newline at end of file\ndiff --git a/test.html.br b/test.html.br\nnew file mode 100644\nindex 0000000000..580bb6f2a0\n--- /dev/null\n+++ b/test.html.br\n@@ -0,0 +1 @@\n+This is a test file with .br extension.\n\\ No newline at end of file\ndiff --git a/test_fileresponse.py b/test_fileresponse.py\nnew file mode 100644\nindex 0000000000..f1a77bc36c\n--- /dev/null\n+++ b/test_fileresponse.py\n@@ -0,0 +1,35 @@\n+import os\n+import mimetypes\n+\n+class MockFile:\n+    def __init__(self, name):\n+        self.name = name\n+        self.tell = lambda: 0\n+        self.seek = lambda pos, whence: None\n+        self.read = lambda size: b\"\"\n+        self.seekable = lambda: True\n+\n+# Test the MIME type guessing logic directly\n+def test_mime_type(filename):\n+    content_type, encoding = mimetypes.guess_type(filename)\n+    print(f\"Debug: filename={filename}, encoding={encoding}, content_type={content_type}\")\n+    if filename.endswith('.Z'):\n+        content_type = \"application/x-compress\"\n+    elif filename.endswith('.br'):\n+        content_type = \"application/x-brotli\"\n+    else:\n+        content_type = {\n+            \"bzip2\": \"application/x-bzip\",\n+            \"gzip\": \"application/gzip\",\n+            \"xz\": \"application/x-xz\",\n+        }.get(encoding, content_type)\n+    print(f\"Debug: final content_type={content_type}\")\n+    return content_type or \"application/octet-stream\"\n+\n+# Test with .Z file\n+content_type_z = test_mime_type(\"test.html.Z\")\n+print(f\"Content-Type for .Z file: {content_type_z}\")\n+\n+# Test with .br file\n+content_type_br = test_mime_type(\"test.html.br\")\n+print(f\"Content-Type for .br file: {content_type_br}\")\n\\ No newline at end of file\n"}