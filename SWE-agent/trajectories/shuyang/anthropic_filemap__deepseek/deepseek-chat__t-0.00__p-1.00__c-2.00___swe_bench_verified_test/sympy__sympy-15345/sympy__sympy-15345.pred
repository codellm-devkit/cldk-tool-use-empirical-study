{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-15345", "model_patch": "diff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..1ade1a658a\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,10 @@\n+from sympy import symbols, Max\n+from sympy.printing.mathematica import mathematica_code\n+\n+x, y = symbols('x y')\n+print(\"Case 1: Max(x, 2)\")\n+print(mathematica_code(Max(x, 2)))\n+print(\"\\nCase 2: Max(x, y, 2, 3)\")\n+print(mathematica_code(Max(x, y, 2, 3)))\n+print(\"\\nCase 3: Max(x, Max(y, 2))\")\n+print(mathematica_code(Max(x, Max(y, 2))))\n\\ No newline at end of file\ndiff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..28da5b98bc 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -31,6 +31,7 @@\n     \"asech\": [(lambda x: True, \"ArcSech\")],\n     \"acsch\": [(lambda x: True, \"ArcCsch\")],\n     \"conjugate\": [(lambda x: True, \"Conjugate\")],\n+    \"Max\": [(lambda *x: True, \"Max\")],\n \n }\n \n@@ -116,6 +117,9 @@ def _print_Derivative(self, expr):\n         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]\n         return \"Hold[D[\" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + \"]]\"\n \n+    def _print_Max(self, expr):\n+        return \"Max[\" + ', '.join(self.doprint(arg) for arg in expr.args) + \"]\"\n+\n \n def mathematica_code(expr, **settings):\n     r\"\"\"Converts an expr to a string of the Wolfram Mathematica code\n"}