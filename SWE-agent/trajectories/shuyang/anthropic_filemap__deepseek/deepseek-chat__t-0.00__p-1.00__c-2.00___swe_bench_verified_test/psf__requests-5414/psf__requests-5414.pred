{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "psf__requests-5414", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex fe22ff45..ddaa3bdc 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -301,19 +301,24 @@ class HTTPAdapter(BaseAdapter):\n         \"\"\"\n         proxy = select_proxy(url, proxies)\n \n-        if proxy:\n-            proxy = prepend_scheme_if_needed(proxy, 'http')\n-            proxy_url = parse_url(proxy)\n-            if not proxy_url.host:\n-                raise InvalidProxyURL(\"Please check proxy URL. It is malformed\"\n-                                      \" and could be missing the host.\")\n-            proxy_manager = self.proxy_manager_for(proxy)\n-            conn = proxy_manager.connection_from_url(url)\n-        else:\n-            # Only scheme should be lower case\n-            parsed = urlparse(url)\n-            url = parsed.geturl()\n-            conn = self.poolmanager.connection_from_url(url)\n+        try:\n+            if proxy:\n+                proxy = prepend_scheme_if_needed(proxy, 'http')\n+                proxy_url = parse_url(proxy)\n+                if not proxy_url.host:\n+                    raise InvalidProxyURL(\"Please check proxy URL. It is malformed\"\n+                                          \" and could be missing the host.\")\n+                proxy_manager = self.proxy_manager_for(proxy)\n+                conn = proxy_manager.connection_from_url(url)\n+            else:\n+                # Only scheme should be lower case\n+                parsed = urlparse(url)\n+                url = parsed.geturl()\n+                conn = self.poolmanager.connection_from_url(url)\n+        except LocationValueError as e:\n+            if 'label empty or too long' in str(e):\n+                raise InvalidURL('URL has an invalid label.')\n+            raise InvalidURL(e)\n \n         return conn\n \n@@ -412,6 +417,8 @@ class HTTPAdapter(BaseAdapter):\n         try:\n             conn = self.get_connection(request.url, proxies)\n         except LocationValueError as e:\n+            if 'label empty or too long' in str(e):\n+                raise InvalidURL('URL has an invalid label.', request=request)\n             raise InvalidURL(e, request=request)\n \n         self.cert_verify(conn, request.url, verify, cert)\ndiff --git a/requests/models.py b/requests/models.py\nindex e7d292d5..d0060256 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -383,6 +383,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         try:\n             scheme, auth, host, port, path, query, fragment = parse_url(url)\n         except LocationParseError as e:\n+            if 'label empty or too long' in str(e) or 'Failed to parse' in str(e):\n+                raise InvalidURL('URL has an invalid label.')\n             raise InvalidURL(*e.args)\n \n         if not scheme:\n"}