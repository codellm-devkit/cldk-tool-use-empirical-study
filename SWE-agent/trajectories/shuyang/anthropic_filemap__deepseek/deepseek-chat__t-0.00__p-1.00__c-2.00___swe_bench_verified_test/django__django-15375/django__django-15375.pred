{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-15375", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex d405a203ee..ee181b5dc3 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1683,6 +1683,9 @@ class SQLAggregateCompiler(SQLCompiler):\n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(\n             self.using, elide_empty=self.elide_empty,\n         ).as_sql(with_col_aliases=True)\n+        # Ensure the SQL includes the necessary column selection\n+        if not sql.strip():\n+            sql = '*'  # Fallback to select all columns if no specific columns are selected\n         sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)\n         params = params + inner_query_params\n         return sql, params\ndiff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex f6a371a925..34f317f5d0 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -163,3 +163,6 @@ class AggregateQuery(Query):\n     def __init__(self, model, inner_query):\n         self.inner_query = inner_query\n         super().__init__(model)\n+        # Ensure the query includes the necessary columns when default is used\n+        if not self.select:\n+            self.select = (self.model._meta.pk.get_col(self.get_initial_alias()),)\n"}