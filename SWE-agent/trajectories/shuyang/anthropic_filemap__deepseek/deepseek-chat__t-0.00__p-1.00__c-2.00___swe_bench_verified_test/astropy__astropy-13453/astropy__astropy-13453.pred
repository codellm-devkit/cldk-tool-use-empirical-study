{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "astropy__astropy-13453", "model_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 266cf229cc..dd9fc203f9 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -354,6 +354,13 @@ class HTML(core.BaseReader):\n             self.data.fill_values = [self.data.fill_values]\n \n         self.data._set_fill_values(cols)\n+        if hasattr(table, 'formats'):\n+            self.data.formats.update(table.formats)\n+            for col in cols:\n+                if col.info.name in table.formats:\n+                    col.info.format = table.formats[col.info.name]\n+                    col.info._format_funcs = {}\n+                    col.info._format_funcs[col.info.format] = lambda _, val: str(table.formats[col.info.name](val))\n \n         lines = []\n \n@@ -430,13 +437,19 @@ class HTML(core.BaseReader):\n                                     # Split up multicolumns into separate columns\n                                     new_col = Column([el[i] for el in col])\n \n+                                    # Apply formatting if specified\n+                                    if hasattr(table, 'formats') and col.info.name in table.formats:\n+                                        new_col = Column([table.formats[col.info.name](el) for el in new_col])\n+\n                                     new_col_iter_str_vals = self.fill_values(\n                                         col, new_col.info.iter_str_vals())\n                                     col_str_iters.append(new_col_iter_str_vals)\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n-\n+                                # Apply formatting if specified\n+                                if hasattr(table, 'formats') and col.info.name in table.formats:\n+                                    col = Column([table.formats[col.info.name](el) for el in col])\n                                 col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n                                 col_str_iters.append(col_iter_str_vals)\n \ndiff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py\nindex bef801959c..f22b5dfb12 100644\n--- a/astropy/io/ascii/ui.py\n+++ b/astropy/io/ascii/ui.py\n@@ -857,6 +857,9 @@ def write(table, output=None, format=None, Writer=None, fast_writer=True, *,\n         writer.write(table, output)\n         return\n \n+    # Ensure the formats argument is passed to the writer\n+    if 'formats' in kwargs:\n+        table.formats = kwargs['formats']\n     lines = writer.write(table)\n \n     # Write the lines to output\ndiff --git a/astropy/table/column.py b/astropy/table/column.py\nindex 52677d2e90..c6376b3487 100644\n--- a/astropy/table/column.py\n+++ b/astropy/table/column.py\n@@ -761,11 +761,21 @@ class BaseColumn(_ColumnGetitemShim, np.ndarray):\n         str_vals : iterator\n             Column values formatted as strings\n         \"\"\"\n-        # Iterate over formatted values with no max number of lines, no column\n-        # name, no unit, and ignoring the returned header info in outs.\n-        _pformat_col_iter = self._formatter._pformat_col_iter\n-        yield from _pformat_col_iter(self, -1, show_name=False, show_unit=False,\n-                                     show_dtype=False, outs={})\n+        if hasattr(self.info, 'format') and callable(self.info.format):\n+            for val in self:\n+                yield str(self.info.format(val))\n+        elif hasattr(self.info, '_format') and callable(self.info._format):\n+            for val in self:\n+                yield str(self.info._format(val))\n+        elif hasattr(self.parent_table, 'formats') and self.info.name in self.parent_table.formats:\n+            for val in self:\n+                yield str(self.parent_table.formats[self.info.name](val))\n+        else:\n+            # Iterate over formatted values with no max number of lines, no column\n+            # name, no unit, and ignoring the returned header info in outs.\n+            _pformat_col_iter = self._formatter._pformat_col_iter\n+            yield from _pformat_col_iter(self, -1, show_name=False, show_unit=False,\n+                                         show_dtype=False, outs={})\n \n     def attrs_equal(self, col):\n         \"\"\"Compare the column attributes of ``col`` to this object.\ndiff --git a/astropy/table/pprint.py b/astropy/table/pprint.py\nindex cbec55fb6a..4064fc66e5 100644\n--- a/astropy/table/pprint.py\n+++ b/astropy/table/pprint.py\n@@ -457,7 +457,10 @@ class TableFormatter:\n         pssf = (getattr(col.info, 'possible_string_format_functions', None)\n                 or _possible_string_format_functions)\n         auto_format_func = get_auto_format_func(col, pssf)\n-        format_func = col.info._format_funcs.get(col_format, auto_format_func)\n+        if col_format is not None and callable(col_format):\n+            format_func = lambda _, val: str(col_format(val))\n+        else:\n+            format_func = col.info._format_funcs.get(col_format, auto_format_func)\n \n         if len(col) > max_lines:\n             if show_length is None:\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 7a3b85fc92..83f08ed124 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\n"}