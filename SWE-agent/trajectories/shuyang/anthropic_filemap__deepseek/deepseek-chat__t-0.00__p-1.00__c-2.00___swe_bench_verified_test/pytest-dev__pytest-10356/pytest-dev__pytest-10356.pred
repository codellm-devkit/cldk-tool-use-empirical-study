{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex 800a25c92..eb76a1501 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -357,9 +357,20 @@ class MarkDecorator:\n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n     \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    mark_list = []\n+    if isinstance(obj, type):\n+        # For classes, collect markers from the MRO chain\n+        for base in obj.__mro__:\n+            base_marks = getattr(base, \"pytestmark\", [])\n+            if not isinstance(base_marks, list):\n+                base_marks = [base_marks]\n+            mark_list.extend(base_marks)\n+    else:\n+        # For non-class objects (e.g., functions), use the existing logic\n+        obj_marks = getattr(obj, \"pytestmark\", [])\n+        if not isinstance(obj_marks, list):\n+            obj_marks = [obj_marks]\n+        mark_list.extend(obj_marks)\n     return normalize_mark_list(mark_list)\n \n \ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 3db877506..344bbfe58 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -832,6 +832,19 @@ class Class(PyCollector):\n             )\n             return []\n \n+        # Aggregate markers from the MRO chain\n+        mark_list = []\n+        for base in self.obj.__mro__[1:]:  # Skip the current class\n+            base_marks = getattr(base, \"pytestmark\", [])\n+            if not isinstance(base_marks, list):\n+                base_marks = [base_marks]\n+            mark_list.extend(base_marks)\n+        if mark_list:\n+            existing_marks = getattr(self.obj, \"pytestmark\", [])\n+            if not isinstance(existing_marks, list):\n+                existing_marks = [existing_marks]\n+            self.obj.pytestmark = existing_marks + mark_list\n+\n         self._inject_setup_class_fixture()\n         self._inject_setup_method_fixture()\n \n"}