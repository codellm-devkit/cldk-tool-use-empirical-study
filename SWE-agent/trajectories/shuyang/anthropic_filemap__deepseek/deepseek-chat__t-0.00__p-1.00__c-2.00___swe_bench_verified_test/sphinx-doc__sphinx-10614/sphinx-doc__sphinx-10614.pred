{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-10614", "model_patch": "diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 6e3985512..b46005d1b 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -33,6 +33,7 @@ from __future__ import annotations\n import builtins\n import hashlib\n import inspect\n+import os\n import re\n from collections.abc import Iterable\n from importlib import import_module\n@@ -413,12 +414,19 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = \"../\" + child.get('refuri')\n+                from os.path import relpath\n+                base_dir = os.path.dirname(current_filename)\n+                target_path = child.get('refuri')\n+                rel_path = relpath(target_path, base_dir) if target_path else \"\"\n+                urls[child['reftitle']] = rel_path if rel_path else target_path\n             else:\n                 urls[child['reftitle']] = child.get('refuri')\n         elif child.get('refid') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')\n+                from os.path import relpath\n+                base_dir = os.path.dirname(current_filename)\n+                rel_path = relpath(current_filename, base_dir) if current_filename else \"\"\n+                urls[child['reftitle']] = rel_path + '#' + child.get('refid') if rel_path else '#' + child.get('refid')\n             else:\n                 urls[child['reftitle']] = '#' + child.get('refid')\n \ndiff --git a/test_inheritance_diagram_fix.py b/test_inheritance_diagram_fix.py\nnew file mode 100644\nindex 000000000..f8751f7ca\n--- /dev/null\n+++ b/test_inheritance_diagram_fix.py\n@@ -0,0 +1,72 @@\n+import os\n+from sphinx.ext.inheritance_diagram import html_visit_inheritance_diagram\n+from sphinx.writers.html import HTML5Translator\n+from sphinx.environment import BuildEnvironment\n+from docutils import nodes\n+\n+class MockApp:\n+    def __init__(self):\n+        self.config = type('Config', (), {'graphviz_output_format': 'svg', 'source_encoding': 'utf-8', 'trim_footnote_reference_space': False, 'language': 'en', 'manpages_url': None, 'html_secnumber_suffix': '.', 'graphviz_dot': 'dot', 'graphviz_dot_args': []})\n+        self.doctreedir = \"/tmp/doctrees\"\n+        self.srcdir = \"/tmp/source\"\n+        self.outdir = \"/tmp/build\"\n+        self.events = type('Events', (), {})()\n+        self.project = type('Project', (), {'restore': lambda self, env: None})()\n+        self.registry = type('Registry', (), {'get_envversion': lambda self, app: \"1.0\", 'create_domains': lambda self, env: []})()\n+\n+class MockBuilder:\n+    def __init__(self, current_docname, out_suffix):\n+        self.current_docname = current_docname\n+        self.out_suffix = out_suffix\n+        self.env = BuildEnvironment(MockApp())\n+        self.env.config = self.env.app.config\n+        self.settings = type('Settings', (), {'language_code': 'en', 'initial_header_level': '3', 'math_output': 'mathjax', 'stylesheet': None, 'stylesheet_path': [], 'xml_declaration': False, 'output_encoding': 'utf-8'})()\n+        self.reporter = type('Reporter', (), {})()\n+        self.env = self.env\n+        self.config = self.env.config\n+        self.imgpath = '_images'\n+        self.outdir = '/tmp/build'\n+        self.imagedir = '_images'\n+        self.srcdir = '/tmp/source'\n+\n+class MockGraph:\n+    def generate_dot(self, name, urls, env):\n+        return \"mock_dot_code\"\n+\n+class MockNode(nodes.Element):\n+    def __init__(self, content, graph):\n+        super().__init__()\n+        self['content'] = content\n+        self['graph'] = MockGraph()\n+        self['parts'] = 0\n+\n+# Test case: Nested directory\n+builder = MockBuilder(\"nested_dir/index\", \".html\")\n+node = MockNode(\"Test Diagram\", None)\n+\n+# Simulate pending_xrefs with refuri and refid\n+pending_xrefs = [\n+    type('PendingXref', (), {'get': lambda self, key: {\n+        'refuri': \"my_package/my_class_1.html\",\n+        'refid': \"my_class_1\",\n+        'reftitle': \"MyClass1\"\n+    }.get(key)}),\n+    type('PendingXref', (), {'get': lambda self, key: {\n+        'refuri': \"my_package/my_class_2.html\",\n+        'refid': \"my_class_2\",\n+        'reftitle': \"MyClass2\"\n+    }.get(key)})\n+]\n+\n+# Create a mock translator\n+class MockTranslator:\n+    def __init__(self, builder):\n+        self.builder = builder\n+        self.body = []\n+    def encode(self, text):\n+        return text\n+\n+# Call the function\n+html_visit_inheritance_diagram(MockTranslator(builder), node)\n+\n+print(\"Test completed.\")\n\\ No newline at end of file\ndiff --git a/tox.ini b/tox.ini\nindex a3dc56211..c76147de3 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -24,7 +24,7 @@ setenv =\n     PYTHONWARNINGS = error\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}\n+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}\n \n [testenv:docs]\n basepython = python3\n"}