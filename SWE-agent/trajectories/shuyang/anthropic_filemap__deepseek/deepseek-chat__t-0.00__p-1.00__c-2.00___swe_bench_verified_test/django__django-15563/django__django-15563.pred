{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-15563", "model_patch": "diff --git a/__init__.py b/__init__.py\nnew file mode 100644\nindex 0000000000..322e195f6b\n--- /dev/null\n+++ b/__init__.py\n@@ -0,0 +1,3 @@\n+from .apps import TestbedConfig\n+\n+default_app_config = 'testbed.TestbedConfig'\n\\ No newline at end of file\ndiff --git a/apps.py b/apps.py\nnew file mode 100644\nindex 0000000000..39ce12f78a\n--- /dev/null\n+++ b/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+class TestbedConfig(AppConfig):\n+    default_auto_field = 'django.db.models.AutoField'\n+    name = 'testbed'\n\\ No newline at end of file\ndiff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex 04063f73bc..d0cf451fca 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -95,10 +95,8 @@ class UpdateQuery(Query):\n                     \"Cannot update model field %r (only non-relations and \"\n                     \"foreign keys permitted).\" % field\n                 )\n-            if model is not self.get_meta().concrete_model:\n-                self.add_related_update(model, field, val)\n-                continue\n-            values_seq.append((field, model, val))\n+            # Skip adding related updates for parent models in multiple inheritance\n+            values_seq.append((field, self.get_meta().concrete_model, val))\n         return self.add_update_fields(values_seq)\n \n     def add_update_fields(self, values_seq):\ndiff --git a/minimal_project/db.sqlite3 b/minimal_project/db.sqlite3\nnew file mode 100644\nindex 0000000000..6f4b8a8b19\nBinary files /dev/null and b/minimal_project/db.sqlite3 differ\ndiff --git a/minimal_project/manage.py b/minimal_project/manage.py\nnew file mode 100755\nindex 0000000000..818591aa80\n--- /dev/null\n+++ b/minimal_project/manage.py\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env python\n+\"\"\"Django's command-line utility for administrative tasks.\"\"\"\n+import os\n+import sys\n+\n+\n+def main():\n+    \"\"\"Run administrative tasks.\"\"\"\n+    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"minimal_project.settings\")\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\n+            \"Couldn't import Django. Are you sure it's installed and \"\n+            \"available on your PYTHONPATH environment variable? Did you \"\n+            \"forget to activate a virtual environment?\"\n+        ) from exc\n+    execute_from_command_line(sys.argv)\n+\n+\n+if __name__ == \"__main__\":\n+    main()\ndiff --git a/minimal_project/minimal_project/__init__.py b/minimal_project/minimal_project/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/minimal_project/minimal_project/asgi.py b/minimal_project/minimal_project/asgi.py\nnew file mode 100644\nindex 0000000000..b409c382ff\n--- /dev/null\n+++ b/minimal_project/minimal_project/asgi.py\n@@ -0,0 +1,16 @@\n+\"\"\"\n+ASGI config for minimal_project project.\n+\n+It exposes the ASGI callable as a module-level variable named ``application``.\n+\n+For more information on this file, see\n+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/\n+\"\"\"\n+\n+import os\n+\n+from django.core.asgi import get_asgi_application\n+\n+os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"minimal_project.settings\")\n+\n+application = get_asgi_application()\ndiff --git a/minimal_project/minimal_project/settings.py b/minimal_project/minimal_project/settings.py\nnew file mode 100644\nindex 0000000000..c47514d1cd\n--- /dev/null\n+++ b/minimal_project/minimal_project/settings.py\n@@ -0,0 +1,22 @@\n+import os\n+\n+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n+\n+SECRET_KEY = 'dummy-secret-key'\n+\n+DEBUG = True\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'test_app',\n+]\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n+    }\n+}\n+\n+DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'\n\\ No newline at end of file\ndiff --git a/minimal_project/minimal_project/urls.py b/minimal_project/minimal_project/urls.py\nnew file mode 100644\nindex 0000000000..b49e841796\n--- /dev/null\n+++ b/minimal_project/minimal_project/urls.py\n@@ -0,0 +1,22 @@\n+\"\"\"minimal_project URL Configuration\n+\n+The `urlpatterns` list routes URLs to views. For more information please see:\n+    https://docs.djangoproject.com/en/dev/topics/http/urls/\n+Examples:\n+Function views\n+    1. Add an import:  from my_app import views\n+    2. Add a URL to urlpatterns:  path('', views.home, name='home')\n+Class-based views\n+    1. Add an import:  from other_app.views import Home\n+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\n+Including another URLconf\n+    1. Import the include() function: from django.urls import include, path\n+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n+\"\"\"\n+\n+from django.contrib import admin\n+from django.urls import path\n+\n+urlpatterns = [\n+    path(\"admin/\", admin.site.urls),\n+]\ndiff --git a/minimal_project/minimal_project/wsgi.py b/minimal_project/minimal_project/wsgi.py\nnew file mode 100644\nindex 0000000000..2aa8c0469b\n--- /dev/null\n+++ b/minimal_project/minimal_project/wsgi.py\n@@ -0,0 +1,16 @@\n+\"\"\"\n+WSGI config for minimal_project project.\n+\n+It exposes the WSGI callable as a module-level variable named ``application``.\n+\n+For more information on this file, see\n+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/\n+\"\"\"\n+\n+import os\n+\n+from django.core.wsgi import get_wsgi_application\n+\n+os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"minimal_project.settings\")\n+\n+application = get_wsgi_application()\ndiff --git a/minimal_project/reproduce_error.py b/minimal_project/reproduce_error.py\nnew file mode 100644\nindex 0000000000..73bd0ef948\n--- /dev/null\n+++ b/minimal_project/reproduce_error.py\n@@ -0,0 +1,36 @@\n+import os\n+import sys\n+import django\n+from django.db import connection\n+\n+# Set the Python path and Django settings module\n+sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'minimal_project.settings')\n+django.setup()\n+\n+from test_app.models import Base, OtherBase, Child\n+\n+# Delete the existing database file\n+import os\n+db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'db.sqlite3')\n+if os.path.exists(db_path):\n+    os.remove(db_path)\n+\n+# Create tables\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Base)\n+    schema_editor.create_model(OtherBase)\n+    schema_editor.create_model(Child)\n+\n+# Django shell-like operations\n+OtherBase.objects.create(field_otherbase=100)\n+OtherBase.objects.create(field_otherbase=101)\n+Child.objects.create(field_base=0, field_otherbase=0)\n+Child.objects.create(field_base=1, field_otherbase=1)\n+\n+# Perform the update\n+Child.objects.update(field_otherbase=55)\n+\n+# Verify the results\n+print(\"Child.objects.values('field_otherbase'):\", Child.objects.values('field_otherbase'))\n+print(\"OtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase'):\", OtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase'))\n\\ No newline at end of file\ndiff --git a/minimal_project/test_app/__init__.py b/minimal_project/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/minimal_project/test_app/admin.py b/minimal_project/test_app/admin.py\nnew file mode 100644\nindex 0000000000..8c38f3f3da\n--- /dev/null\n+++ b/minimal_project/test_app/admin.py\n@@ -0,0 +1,3 @@\n+from django.contrib import admin\n+\n+# Register your models here.\ndiff --git a/minimal_project/test_app/apps.py b/minimal_project/test_app/apps.py\nnew file mode 100644\nindex 0000000000..953db2940f\n--- /dev/null\n+++ b/minimal_project/test_app/apps.py\n@@ -0,0 +1,6 @@\n+from django.apps import AppConfig\n+\n+\n+class TestAppConfig(AppConfig):\n+    default_auto_field = \"django.db.models.BigAutoField\"\n+    name = \"test_app\"\ndiff --git a/minimal_project/test_app/migrations/__init__.py b/minimal_project/test_app/migrations/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/minimal_project/test_app/models.py b/minimal_project/test_app/models.py\nnew file mode 100644\nindex 0000000000..eb5a71ba29\n--- /dev/null\n+++ b/minimal_project/test_app/models.py\n@@ -0,0 +1,13 @@\n+from django.db import models\n+\n+class Base(models.Model):\n+    base_id = models.AutoField(primary_key=True)\n+    field_base = models.IntegerField()\n+\n+class OtherBase(models.Model):\n+    otherbase_id = models.AutoField(primary_key=True)\n+    field_otherbase = models.IntegerField()\n+\n+class Child(Base, OtherBase):\n+    field_base = models.IntegerField()\n+    field_otherbase = models.IntegerField()\ndiff --git a/minimal_project/test_app/tests.py b/minimal_project/test_app/tests.py\nnew file mode 100644\nindex 0000000000..7ce503c2dd\n--- /dev/null\n+++ b/minimal_project/test_app/tests.py\n@@ -0,0 +1,3 @@\n+from django.test import TestCase\n+\n+# Create your tests here.\ndiff --git a/minimal_project/test_app/views.py b/minimal_project/test_app/views.py\nnew file mode 100644\nindex 0000000000..91ea44a218\n--- /dev/null\n+++ b/minimal_project/test_app/views.py\n@@ -0,0 +1,3 @@\n+from django.shortcuts import render\n+\n+# Create your views here.\n"}