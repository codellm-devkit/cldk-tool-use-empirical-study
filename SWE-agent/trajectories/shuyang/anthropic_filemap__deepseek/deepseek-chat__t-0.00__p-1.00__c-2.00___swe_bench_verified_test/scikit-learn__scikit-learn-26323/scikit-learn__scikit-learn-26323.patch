diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..285e6fb8b 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -1,5 +1,6 @@
 from functools import wraps
 
+import numpy as np
 from scipy.sparse import issparse
 
 from . import check_pandas_support
@@ -12,6 +13,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.
 
@@ -36,6 +38,10 @@ def _wrap_in_pandas_container(
     index : array-like, default=None
         Index for data.
 
+    dtypes : dict, default=None
+        If not None, specifies the dtypes for the output DataFrame.
+        Keys are column names, and values are the corresponding dtypes.
+
     Returns
     -------
     dataframe : DataFrame
@@ -57,9 +63,14 @@ def _wrap_in_pandas_container(
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        if dtypes is not None:
+            data_to_wrap = data_to_wrap.astype(dtypes)
         return data_to_wrap
 
-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    if dtypes is not None:
+        df = df.astype(dtypes)
+    return df
 
 
 def _get_output_config(method, estimator=None):
@@ -127,10 +138,27 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
         return data_to_wrap
 
     # dense_config == "pandas"
+    preserve_dtypes = getattr(estimator, "_sklearn_output_config", {}).get("preserve_dtypes", False)
+    dtypes = None
+    if preserve_dtypes and hasattr(original_input, "dtypes"):
+        dtypes = original_input.dtypes.to_dict()
+        # Ensure dtypes only includes columns present in the output
+        if isinstance(data_to_wrap, np.ndarray):
+            # If data_to_wrap is an ndarray, columns will be set by get_feature_names_out
+            # So we cannot filter dtypes here; skip preserving dtypes
+            dtypes = None
+        elif hasattr(estimator, "get_feature_names_out"):
+            try:
+                output_columns = estimator.get_feature_names_out()
+                dtypes = {col: dtypes[col] for col in output_columns if col in dtypes}
+            except Exception:
+                dtypes = None
+
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=dtypes,
     )
 
 
@@ -208,7 +236,7 @@ class _SetOutputMixin:
             setattr(cls, method, wrapped_method)
 
     @available_if(_auto_wrap_is_configured)
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=False):
         """Set output container.
 
         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
@@ -223,18 +251,28 @@ class _SetOutputMixin:
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
 
+        preserve_dtypes : bool, default=False
+            If True, the output DataFrame will preserve the dtypes of the input DataFrame.
+            Only applicable if `transform="pandas"`.
+
         Returns
         -------
         self : estimator instance
             Estimator instance.
         """
-        if transform is None:
+        if transform is None and not preserve_dtypes:
             return self
 
         if not hasattr(self, "_sklearn_output_config"):
             self._sklearn_output_config = {}
 
-        self._sklearn_output_config["transform"] = transform
+        if transform is not None:
+            self._sklearn_output_config["transform"] = transform
+        if preserve_dtypes:
+            self._sklearn_output_config["preserve_dtypes"] = True
+        else:
+            self._sklearn_output_config.pop("preserve_dtypes", None)
+
         return self
 
 
