{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-12262", "model_patch": "diff --git a/django/template/base.py b/django/template/base.py\nindex 7efc45356c..e7f26852c8 100644\n--- a/django/template/base.py\n+++ b/django/template/base.py\n@@ -1031,11 +1031,19 @@ def token_kwargs(bits, parser, support_legacy=False):\n             if not match or not match.group(1):\n                 return kwargs\n             key, value = match.groups()\n+            if key in kwargs:\n+                raise TemplateSyntaxError(\n+                    \"'%s' received multiple values for keyword argument '%s'\" %\n+                    (parser.tags[-1], key))\n             del bits[:1]\n         else:\n             if len(bits) < 3 or bits[1] != 'as':\n                 return kwargs\n             key, value = bits[2], bits[0]\n+            if key in kwargs:\n+                raise TemplateSyntaxError(\n+                    \"'%s' received multiple values for keyword argument '%s'\" %\n+                    (parser.tags[-1], key))\n             del bits[:3]\n         kwargs[key] = parser.compile_filter(value)\n         if bits and not kwarg_format:\ndiff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86dac8..29edc0bc54 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -251,26 +251,26 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n     args = []\n     kwargs = {}\n     unhandled_params = list(params)\n-    unhandled_kwargs = [\n-        kwarg for kwarg in kwonly\n-        if not kwonly_defaults or kwarg not in kwonly_defaults\n-    ]\n+    unhandled_kwargs = list(kwonly)  # All keyword-only arguments are valid, regardless of defaults\n+    # Check for duplicate keyword arguments in bits\n+    seen_kwargs = set()\n     for bit in bits:\n         # First we try to extract a potential kwarg from the bit\n         kwarg = token_kwargs([bit], parser)\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n+            if param in seen_kwargs:\n+                # The keyword argument has already been supplied once\n+                raise TemplateSyntaxError(\n+                    \"'%s' received multiple values for keyword argument '%s'\" %\n+                    (name, param))\n+            seen_kwargs.add(param)\n             if param not in params and param not in unhandled_kwargs and varkw is None:\n                 # An unexpected keyword argument was supplied\n                 raise TemplateSyntaxError(\n                     \"'%s' received unexpected keyword argument '%s'\" %\n                     (name, param))\n-            elif param in kwargs:\n-                # The keyword argument has already been supplied once\n-                raise TemplateSyntaxError(\n-                    \"'%s' received multiple values for keyword argument '%s'\" %\n-                    (name, param))\n             else:\n                 # All good, record the keyword argument\n                 kwargs[str(param)] = value\n@@ -282,13 +282,23 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n                     # Same for keyword-only arguments\n                     unhandled_kwargs.remove(param)\n         else:\n-            if kwargs:\n-                raise TemplateSyntaxError(\n-                    \"'%s' received some positional argument(s) after some \"\n-                    \"keyword argument(s)\" % name)\n+            # Check for duplicate keyword arguments in the bit itself\n+            if '=' in bit:\n+                parts = bit.split('=', 1)\n+                param = parts[0]\n+                if param in seen_kwargs:\n+                    # The keyword argument has already been supplied once\n+                    raise TemplateSyntaxError(\n+                        \"'%s' received multiple values for keyword argument '%s'\" %\n+                        (name, param))\n             else:\n-                # Record the positional argument\n-                args.append(parser.compile_filter(bit))\n+                if kwargs:\n+                    raise TemplateSyntaxError(\n+                        \"'%s' received some positional argument(s) after some \"\n+                        \"keyword argument(s)\" % name)\n+                else:\n+                    # Record the positional argument\n+                    args.append(parser.compile_filter(bit))\n                 try:\n                     # Consume from the list of expected positional arguments\n                     unhandled_params.pop(0)\n"}