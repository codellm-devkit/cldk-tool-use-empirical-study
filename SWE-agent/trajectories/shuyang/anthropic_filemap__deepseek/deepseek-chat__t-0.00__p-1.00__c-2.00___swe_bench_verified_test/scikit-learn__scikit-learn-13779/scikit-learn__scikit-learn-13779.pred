{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..13accdcec 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \ndiff --git a/test_voting_classifier.py b/test_voting_classifier.py\nnew file mode 100644\nindex 000000000..da8b6010a\n--- /dev/null\n+++ b/test_voting_classifier.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+from sklearn.ensemble import VotingClassifier\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier\n+from sklearn.datasets import load_iris\n+\n+# Load dataset\n+X, y = load_iris(return_X_y=True)\n+\n+# Initialize VotingClassifier\n+voter = VotingClassifier(\n+    estimators=[('lr', LogisticRegression()),\n+                ('rf', RandomForestClassifier())]\n+)\n+\n+# First fit with sample_weight\n+voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+# Set one estimator to None and fit again\n+voter.set_params(lr=None)\n+voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+print(\"Success: No errors encountered.\")\n\\ No newline at end of file\n"}