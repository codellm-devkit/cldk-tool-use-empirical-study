{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex ab611afca7..1194eb3909 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1320,10 +1320,10 @@ class ModelMultipleChoiceField(ModelChoiceField):\n \n     def clean(self, value):\n         value = self.prepare_value(value)\n-        if self.required and not value:\n-            raise ValidationError(self.error_messages['required'], code='required')\n-        elif not self.required and not value:\n-            return self.queryset.none()\n+        if value in ([], ()):\n+            if self.required:\n+                raise ValidationError(self.error_messages['required'], code='required')\n+            return self.queryset.model.objects.none()\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(\n                 self.error_messages['invalid_list'],\n@@ -1341,6 +1341,8 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         corresponding objects. Raise a ValidationError if a given value is\n         invalid (not a valid PK, not in the queryset, etc.)\n         \"\"\"\n+        if not value:\n+            return self.queryset.none()\n         key = self.to_field_name or 'pk'\n         # deduplicate given values to avoid creating many querysets or\n         # requiring the database backend deduplicate efficiently.\n@@ -1373,6 +1375,8 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         return qs\n \n     def prepare_value(self, value):\n+        if value in ([], ()):\n+            return []\n         if (hasattr(value, '__iter__') and\n                 not isinstance(value, str) and\n                 not hasattr(value, '_meta')):\n"}