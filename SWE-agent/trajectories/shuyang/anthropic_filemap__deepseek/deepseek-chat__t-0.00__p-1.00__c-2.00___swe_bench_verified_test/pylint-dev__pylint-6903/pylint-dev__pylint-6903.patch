diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 00000000..bab44661
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,16 @@
+import xarray as xr
+import numpy as np
+
+my_data = xr.DataArray(np.arange(1, 10), dims="x")
+
+# Option 1: take a center-justified rolling average
+result1 = my_data.rolling(x=3, center=True).mean().values
+print("Result 1 (direct mean):", result1)
+
+# Option 2: manually iterate
+my_data_rolling = my_data.rolling(x=3, center=True)
+result2 = []
+for label, window in my_data_rolling:
+    print(f"Label: {label}, Window: {window.values}")
+    result2.append(window.mean().values.item())
+print("Result 2 (manual iteration):", result2)
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index aef290f6..3d2374ad 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -270,9 +270,14 @@ class DataArrayRolling(Rolling["DataArray"]):
     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:
         if self.ndim > 1:
             raise ValueError("__iter__ is only supported for 1d-rolling")
+        window_size = int(self.window[0])
         stops = np.arange(1, len(self.window_labels) + 1)
-        starts = stops - int(self.window[0])
-        starts[: int(self.window[0])] = 0
+        starts = stops - window_size
+        if self.center:
+            shift = window_size // 2
+            starts = np.maximum(starts + shift, 0)
+            stops = np.minimum(stops + shift, len(self.obj[self.dim[0]]))
+        starts[:window_size] = 0
         for (label, start, stop) in zip(self.window_labels, starts, stops):
             window = self.obj.isel({self.dim[0]: slice(start, stop)})
 
