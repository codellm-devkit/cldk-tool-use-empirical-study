diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 90fc31bee5..8a5c04393b 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -170,6 +170,19 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
+        elif (
+            isinstance(operation, AlterModelManagers)
+            and self.name_lower == operation.name_lower
+        ):
+            return [
+                CreateModel(
+                    self.name,
+                    fields=self.fields,
+                    options=self.options,
+                    bases=self.bases,
+                    managers=operation.managers,
+                ),
+            ]
         elif (
             isinstance(operation, AlterTogetherOptionOperation)
             and self.name_lower == operation.name_lower
diff --git a/test_optimization.py b/test_optimization.py
new file mode 100644
index 0000000000..a08a6c8e53
--- /dev/null
+++ b/test_optimization.py
@@ -0,0 +1,110 @@
+from django.db.migrations.operations.models import CreateModel, AlterModelManagers
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def test_optimization():
+    # Define a CreateModel operation
+    create_model = CreateModel(
+        name="TestModel",
+        fields=[("id", "django.db.models.AutoField(primary_key=True)")],
+        managers=[("objects", "django.db.models.Manager()")]
+    )
+
+    # Define an AlterModelManagers operation
+    alter_managers = AlterModelManagers(
+        name="TestModel",
+        managers=[("custom_manager", "django.db.models.Manager()")]
+    )
+
+    # Optimize the operations
+    optimizer = MigrationOptimizer()
+    optimized_operations = optimizer.optimize([create_model, alter_managers], app_label="test_app")
+
+    # Check if the operations were optimized into a single CreateModel
+    assert len(optimized_operations) == 1, "Operations were not optimized"
+    assert isinstance(optimized_operations[0], CreateModel), "Optimized operation is not CreateModel"
+    assert optimized_operations[0].managers == alter_managers.managers, "Managers were not merged correctly"
+
+    print("Test passed: CreateModel + AlterModelManagers optimized successfully.")
+
+def test_empty_managers():
+    # Define a CreateModel operation
+    create_model = CreateModel(
+        name="TestModel",
+        fields=[("id", "django.db.models.AutoField(primary_key=True)")],
+        managers=[("objects", "django.db.models.Manager()")]
+    )
+
+    # Define an AlterModelManagers operation with empty managers
+    alter_managers = AlterModelManagers(
+        name="TestModel",
+        managers=[]
+    )
+
+    # Optimize the operations
+    optimizer = MigrationOptimizer()
+    optimized_operations = optimizer.optimize([create_model, alter_managers], app_label="test_app")
+
+    # Check if the operations were optimized into a single CreateModel
+    assert len(optimized_operations) == 1, "Operations were not optimized"
+    assert isinstance(optimized_operations[0], CreateModel), "Optimized operation is not CreateModel"
+    assert optimized_operations[0].managers == [], "Managers were not merged correctly"
+
+    print("Test passed: CreateModel + AlterModelManagers with empty managers optimized successfully.")
+
+def test_multiple_alterations():
+    # Define a CreateModel operation
+    create_model = CreateModel(
+        name="TestModel",
+        fields=[("id", "django.db.models.AutoField(primary_key=True)")],
+        managers=[("objects", "django.db.models.Manager()")]
+    )
+
+    # Define multiple AlterModelManagers operations
+    alter_managers1 = AlterModelManagers(
+        name="TestModel",
+        managers=[("custom_manager1", "django.db.models.Manager()")]
+    )
+    alter_managers2 = AlterModelManagers(
+        name="TestModel",
+        managers=[("custom_manager2", "django.db.models.Manager()")]
+    )
+
+    # Optimize the operations
+    optimizer = MigrationOptimizer()
+    optimized_operations = optimizer.optimize([create_model, alter_managers1, alter_managers2], app_label="test_app")
+
+    # Check if the operations were optimized into a single CreateModel
+    assert len(optimized_operations) == 1, "Operations were not optimized"
+    assert isinstance(optimized_operations[0], CreateModel), "Optimized operation is not CreateModel"
+    assert optimized_operations[0].managers == alter_managers2.managers, "Managers were not merged correctly"
+
+    print("Test passed: CreateModel + multiple AlterModelManagers optimized successfully.")
+
+def test_non_matching_names():
+    # Define a CreateModel operation
+    create_model = CreateModel(
+        name="TestModel",
+        fields=[("id", "django.db.models.AutoField(primary_key=True)")],
+        managers=[("objects", "django.db.models.Manager()")]
+    )
+
+    # Define an AlterModelManagers operation with a non-matching name
+    alter_managers = AlterModelManagers(
+        name="OtherModel",
+        managers=[("custom_manager", "django.db.models.Manager()")]
+    )
+
+    # Optimize the operations
+    optimizer = MigrationOptimizer()
+    optimized_operations = optimizer.optimize([create_model, alter_managers], app_label="test_app")
+
+    # Check if the operations were not optimized
+    assert len(optimized_operations) == 2, "Operations were incorrectly optimized"
+
+    print("Test passed: Non-matching model names were not optimized.")
+
+if __name__ == "__main__":
+    test_optimization()
+    test_empty_managers()
+    test_multiple_alterations()
+    test_non_matching_names()
\ No newline at end of file
