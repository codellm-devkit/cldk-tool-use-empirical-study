{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-15499", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee5..8a5c04393b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -170,6 +170,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterTogetherOptionOperation)\n             and self.name_lower == operation.name_lower\ndiff --git a/test_optimization.py b/test_optimization.py\nnew file mode 100644\nindex 0000000000..a08a6c8e53\n--- /dev/null\n+++ b/test_optimization.py\n@@ -0,0 +1,110 @@\n+from django.db.migrations.operations.models import CreateModel, AlterModelManagers\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+def test_optimization():\n+    # Define a CreateModel operation\n+    create_model = CreateModel(\n+        name=\"TestModel\",\n+        fields=[(\"id\", \"django.db.models.AutoField(primary_key=True)\")],\n+        managers=[(\"objects\", \"django.db.models.Manager()\")]\n+    )\n+\n+    # Define an AlterModelManagers operation\n+    alter_managers = AlterModelManagers(\n+        name=\"TestModel\",\n+        managers=[(\"custom_manager\", \"django.db.models.Manager()\")]\n+    )\n+\n+    # Optimize the operations\n+    optimizer = MigrationOptimizer()\n+    optimized_operations = optimizer.optimize([create_model, alter_managers], app_label=\"test_app\")\n+\n+    # Check if the operations were optimized into a single CreateModel\n+    assert len(optimized_operations) == 1, \"Operations were not optimized\"\n+    assert isinstance(optimized_operations[0], CreateModel), \"Optimized operation is not CreateModel\"\n+    assert optimized_operations[0].managers == alter_managers.managers, \"Managers were not merged correctly\"\n+\n+    print(\"Test passed: CreateModel + AlterModelManagers optimized successfully.\")\n+\n+def test_empty_managers():\n+    # Define a CreateModel operation\n+    create_model = CreateModel(\n+        name=\"TestModel\",\n+        fields=[(\"id\", \"django.db.models.AutoField(primary_key=True)\")],\n+        managers=[(\"objects\", \"django.db.models.Manager()\")]\n+    )\n+\n+    # Define an AlterModelManagers operation with empty managers\n+    alter_managers = AlterModelManagers(\n+        name=\"TestModel\",\n+        managers=[]\n+    )\n+\n+    # Optimize the operations\n+    optimizer = MigrationOptimizer()\n+    optimized_operations = optimizer.optimize([create_model, alter_managers], app_label=\"test_app\")\n+\n+    # Check if the operations were optimized into a single CreateModel\n+    assert len(optimized_operations) == 1, \"Operations were not optimized\"\n+    assert isinstance(optimized_operations[0], CreateModel), \"Optimized operation is not CreateModel\"\n+    assert optimized_operations[0].managers == [], \"Managers were not merged correctly\"\n+\n+    print(\"Test passed: CreateModel + AlterModelManagers with empty managers optimized successfully.\")\n+\n+def test_multiple_alterations():\n+    # Define a CreateModel operation\n+    create_model = CreateModel(\n+        name=\"TestModel\",\n+        fields=[(\"id\", \"django.db.models.AutoField(primary_key=True)\")],\n+        managers=[(\"objects\", \"django.db.models.Manager()\")]\n+    )\n+\n+    # Define multiple AlterModelManagers operations\n+    alter_managers1 = AlterModelManagers(\n+        name=\"TestModel\",\n+        managers=[(\"custom_manager1\", \"django.db.models.Manager()\")]\n+    )\n+    alter_managers2 = AlterModelManagers(\n+        name=\"TestModel\",\n+        managers=[(\"custom_manager2\", \"django.db.models.Manager()\")]\n+    )\n+\n+    # Optimize the operations\n+    optimizer = MigrationOptimizer()\n+    optimized_operations = optimizer.optimize([create_model, alter_managers1, alter_managers2], app_label=\"test_app\")\n+\n+    # Check if the operations were optimized into a single CreateModel\n+    assert len(optimized_operations) == 1, \"Operations were not optimized\"\n+    assert isinstance(optimized_operations[0], CreateModel), \"Optimized operation is not CreateModel\"\n+    assert optimized_operations[0].managers == alter_managers2.managers, \"Managers were not merged correctly\"\n+\n+    print(\"Test passed: CreateModel + multiple AlterModelManagers optimized successfully.\")\n+\n+def test_non_matching_names():\n+    # Define a CreateModel operation\n+    create_model = CreateModel(\n+        name=\"TestModel\",\n+        fields=[(\"id\", \"django.db.models.AutoField(primary_key=True)\")],\n+        managers=[(\"objects\", \"django.db.models.Manager()\")]\n+    )\n+\n+    # Define an AlterModelManagers operation with a non-matching name\n+    alter_managers = AlterModelManagers(\n+        name=\"OtherModel\",\n+        managers=[(\"custom_manager\", \"django.db.models.Manager()\")]\n+    )\n+\n+    # Optimize the operations\n+    optimizer = MigrationOptimizer()\n+    optimized_operations = optimizer.optimize([create_model, alter_managers], app_label=\"test_app\")\n+\n+    # Check if the operations were not optimized\n+    assert len(optimized_operations) == 2, \"Operations were incorrectly optimized\"\n+\n+    print(\"Test passed: Non-matching model names were not optimized.\")\n+\n+if __name__ == \"__main__\":\n+    test_optimization()\n+    test_empty_managers()\n+    test_multiple_alterations()\n+    test_non_matching_names()\n\\ No newline at end of file\n"}