diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index 75b0646512..3267d298e3 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -478,7 +478,7 @@ class BaseFormSet(RenderableFormMixin):
 def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
                     can_delete=False, max_num=None, validate_max=False,
                     min_num=None, validate_min=False, absolute_max=None,
-                    can_delete_extra=True, renderer=None):
+                    can_delete_extra=True, can_add_new=True, renderer=None):
     """Return a FormSet for the given form class."""
     if min_num is None:
         min_num = DEFAULT_MIN_NUM
@@ -499,6 +499,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
         'can_order': can_order,
         'can_delete': can_delete,
         'can_delete_extra': can_delete_extra,
+        'can_add_new': can_add_new,
         'min_num': min_num,
         'max_num': max_num,
         'absolute_max': absolute_max,
diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..dd97eda481 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -573,9 +573,10 @@ class BaseModelFormSet(BaseFormSet):
     unique_fields = set()
 
     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
-                 queryset=None, *, initial=None, **kwargs):
+                 queryset=None, *, initial=None, can_add_new=True, **kwargs):
         self.queryset = queryset
         self.initial_extra = initial
+        self.can_add_new = can_add_new
         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})
 
     def initial_form_count(self):
@@ -653,6 +654,8 @@ class BaseModelFormSet(BaseFormSet):
 
     def save_new(self, form, commit=True):
         """Save and return a new model instance for the given form."""
+        if not self.can_add_new:
+            raise ValidationError("New object creation is not allowed in this formset.")
         return form.save(commit=commit)
 
     def save_existing(self, form, instance, commit=True):
@@ -681,6 +684,8 @@ class BaseModelFormSet(BaseFormSet):
     save.alters_data = True
 
     def clean(self):
+        if not self.can_add_new and any(form.has_changed() and not form.instance.pk for form in self.forms):
+            raise ValidationError("New object creation is not allowed in this formset.")
         self.validate_unique()
 
     def validate_unique(self):
@@ -875,7 +880,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
+                         absolute_max=None, can_delete_extra=True, can_add_new=True, renderer=None):
     """Return a FormSet class for the given Django model class."""
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
@@ -893,6 +898,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,
                               can_order=can_order, can_delete=can_delete,
                               validate_min=validate_min, validate_max=validate_max,
+                              can_add_new=can_add_new,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
                               renderer=renderer)
     FormSet.model = model
