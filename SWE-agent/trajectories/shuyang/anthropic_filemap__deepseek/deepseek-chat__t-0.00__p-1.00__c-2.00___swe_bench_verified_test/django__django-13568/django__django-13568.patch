diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..9824c7ec0b 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -7,6 +7,7 @@ from uuid import UUID
 
 from django.core.exceptions import EmptyResultSet, FieldError
 from django.db import NotSupportedError, connection
+from django.db import models
 from django.db.models import fields
 from django.db.models.constants import LOOKUP_SEP
 from django.db.models.query_utils import Q
@@ -1327,10 +1328,15 @@ class Window(Expression):
         params.extend(window_params)
         template = template or self.template
 
-        return template % {
+        sql = template % {
             'expression': expr_sql,
             'window': ''.join(window_sql).strip()
-        }, params
+        }
+
+        if connection.vendor == 'sqlite' and isinstance(self.source_expression.output_field, models.DecimalField):
+            sql = 'CAST(%s AS NUMERIC)' % sql
+
+        return sql, params
 
     def __str__(self):
         return '{} OVER ({}{}{})'.format(
@@ -1340,6 +1346,12 @@ class Window(Expression):
             str(self.frame or ''),
         )
 
+    def as_sqlite(self, compiler, connection, **extra_context):
+        if isinstance(self.source_expression.output_field, models.DecimalField):
+            sql, params = self.as_sql(compiler, connection)
+            return 'CAST(%s AS NUMERIC)' % sql, params
+        return self.as_sql(compiler, connection)
+
     def __repr__(self):
         return '<%s: %s>' % (self.__class__.__name__, self)
 
diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py
index 84b2b24ffa..4d86da16ef 100644
--- a/django/db/models/functions/window.py
+++ b/django/db/models/functions/window.py
@@ -1,3 +1,4 @@
+from django.db import models
 from django.db.models.expressions import Func
 from django.db.models.fields import FloatField, IntegerField
 
@@ -52,6 +53,15 @@ class LagLeadFunction(Func):
 class Lag(LagLeadFunction):
     function = 'LAG'
 
+    def as_sql(self, compiler, connection, **extra_context):
+        if connection.vendor == 'sqlite' and isinstance(self.output_field, models.DecimalField):
+            # Generate the SQL for the window function
+            sql, params = super().as_sql(compiler, connection, **extra_context)
+            # Ensure the CAST wraps the entire expression
+            if 'OVER' in sql:
+                return 'CAST(%s AS NUMERIC)' % sql, params
+        return super().as_sql(compiler, connection, **extra_context)
+
 
 class LastValue(Func):
     arity = 1
