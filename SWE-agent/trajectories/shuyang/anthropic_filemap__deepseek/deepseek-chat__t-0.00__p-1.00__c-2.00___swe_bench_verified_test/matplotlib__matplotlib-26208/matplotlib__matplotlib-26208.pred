{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-26208", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 5203e3232c..23f3f7e315 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2353,10 +2353,12 @@ class _AxesBase(martist.Artist):\n                 updatex = False\n             if updatey and line_trf == self.get_xaxis_transform():\n                 updatey = False\n-        self.dataLim.update_from_path(data_path,\n+        # Skip updating dataLim if this is a twin axis to avoid affecting the original axis\n+        if not hasattr(self, '_twinned_axes') or self not in self._twinned_axes:\n+            self.dataLim.update_from_path(data_path,\n                                       self.ignore_existing_data_limits,\n                                       updatex=updatex, updatey=updatey)\n-        self.ignore_existing_data_limits = False\n+            self.ignore_existing_data_limits = False\n \n     def add_patch(self, p):\n         \"\"\"\n@@ -2409,7 +2411,9 @@ class _AxesBase(martist.Artist):\n                 updatey = False\n         trf_to_data = patch_trf - self.transData\n         xys = trf_to_data.transform(vertices)\n-        self.update_datalim(xys, updatex=updatex, updatey=updatey)\n+        # Skip updating dataLim if this is a twin axis to avoid affecting the original axis\n+        if not hasattr(self, '_twinned_axes') or self not in self._twinned_axes:\n+            self.update_datalim(xys, updatex=updatex, updatey=updatey)\n \n     def add_table(self, tab):\n         \"\"\"\n@@ -4431,9 +4435,37 @@ class _AxesBase(martist.Artist):\n         Notes\n         -----\n         For those who are 'picking' artists while using twinx, pick\n+        \"\"\"\n+        twin = self._make_twin_axes(sharex=self, sharey=None)\n+        twin.yaxis.tick_right()\n+        twin.yaxis.set_label_position('right')\n+        twin.yaxis.set_offset_position('right')\n+        twin._set_lim_and_transforms()\n+        # Ensure the original axis's dataLim is not affected by the twin axis\n+        twin.dataLim.ignore(True)\n+        return twin\n+\n+    def twiny(self):\n+        \"\"\"\n+        Create a twin Axes sharing the yaxis.\n+\n+        Create a new Axes with an invisible y-axis and an independent\n+        x-axis positioned opposite to the original one (i.e. at top). The\n+        y-axis autoscale setting will be inherited from the original\n+        Axes.  To ensure that the tick marks of both x-axes align, see\n+        `~matplotlib.ticker.LinearLocator`.\n+\n+        Returns\n+        -------\n+        Axes\n+            The newly created Axes instance\n+\n+        Notes\n+        -----\n+        For those who are 'picking' artists while using twiny, pick\n         events are only called for the artists in the top-most Axes.\n         \"\"\"\n-        ax2 = self._make_twin_axes(sharex=self)\n+        ax2 = self._make_twin_axes(sharex=None, sharey=self)\n         ax2.yaxis.tick_right()\n         ax2.yaxis.set_label_position('right')\n         ax2.yaxis.set_offset_position('right')\ndiff --git a/lib/matplotlib/axes/_secondary_axes.py b/lib/matplotlib/axes/_secondary_axes.py\nindex 5a65fee154..ca21d61ce3 100644\n--- a/lib/matplotlib/axes/_secondary_axes.py\n+++ b/lib/matplotlib/axes/_secondary_axes.py\n@@ -219,6 +219,9 @@ class SecondaryAxis(_AxesBase):\n             # Flip because the transform will take care of the flipping.\n             lims = lims[::-1]\n         set_lim(lims)\n+        # Ensure the original axis's dataLim is not affected\n+        if hasattr(self, '_parent') and hasattr(self._parent, 'dataLim'):\n+            self._parent.dataLim.ignore(True)\n \n     def set_aspect(self, *args, **kwargs):\n         \"\"\"\ndiff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex c97a21e029..3f91ceb37d 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -124,4 +124,8 @@ def stackplot(axes, x, *args,\n                                    facecolor=next(colors),\n                                    label=next(labels, None),\n                                    **kwargs))\n+    \n+    # Ensure the dataLim of the original axis is not updated if this is a twin axis\n+    if hasattr(axes, '_twinned_axes') and axes in axes._twinned_axes:\n+        axes.dataLim.ignore(True)\n     return r\ndiff --git a/reproduce_bug.py b/reproduce_bug.py\nnew file mode 100644\nindex 0000000000..d54e44d215\n--- /dev/null\n+++ b/reproduce_bug.py\n@@ -0,0 +1,21 @@\n+import matplotlib.pyplot as plt\n+\n+def print_datalim(*ax):\n+    for ax_ in ax:\n+        print(ax_.dataLim.intervaly, end=' / ')\n+    print()\n+\n+df1_index = ['16 May', '17 May']  # == df2_index\n+df1_values = [-22.717708333333402, 26.584999999999937]\n+df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+fig, ax1 = plt.subplots()\n+\n+ax1.stackplot(df1_index, df1_values)\n+print_datalim(ax1)\n+\n+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n+print_datalim(ax1, ax2)\n+\n+ax2.plot(df1_index, df2_values)\n+print_datalim(ax1, ax2)\n\\ No newline at end of file\n"}