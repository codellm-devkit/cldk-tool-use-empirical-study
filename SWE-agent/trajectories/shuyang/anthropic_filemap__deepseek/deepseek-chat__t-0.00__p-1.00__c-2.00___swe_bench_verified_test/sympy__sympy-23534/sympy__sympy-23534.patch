diff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py
index b9227d8d7a..5374cef741 100644
--- a/sympy/printing/lambdarepr.py
+++ b/sympy/printing/lambdarepr.py
@@ -69,6 +69,12 @@ def _print_Pow(self, expr, **kwargs):
         # isolated from PythonCodePrinter?
         return super(PythonCodePrinter, self)._print_Pow(expr, **kwargs)
 
+    def _print_Tuple(self, expr):
+        if len(expr.args) == 1:
+            return "(%s,)" % self._print(expr.args[0])
+        else:
+            return "(%s)" % self.stringify(expr.args, ", ")
+
 
 # numexpr works by altering the string passed to numexpr.evaluate
 # rather than by populating a namespace.  Thus a special printer...
diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py
index da67263b19..b71af9aa49 100644
--- a/sympy/utilities/lambdify.py
+++ b/sympy/utilities/lambdify.py
@@ -959,9 +959,11 @@ def _recursive_to_string(doprint, arg):
             left, right = "[]"
         elif isinstance(arg, tuple):
             left, right = "()"
+            if len(arg) == 1:
+                return "(%s,)" % _recursive_to_string(doprint, arg[0])
         else:
             raise NotImplementedError("unhandled type: %s, %s" % (type(arg), arg))
-        return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right
+        return left + ', '.join(_recursive_to_string(doprint, e) for e in arg) + right
     elif isinstance(arg, str):
         return arg
     else:
