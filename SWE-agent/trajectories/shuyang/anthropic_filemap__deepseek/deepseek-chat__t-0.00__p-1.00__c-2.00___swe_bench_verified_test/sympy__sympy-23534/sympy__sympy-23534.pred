{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-23534", "model_patch": "diff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..bdfd659439\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,4 @@\n+import sympy as smp\n+\n+q, u = smp.symbols(('q:2', 'u:2'), cls=smp.Function)\n+print(type(q[0]))\n\\ No newline at end of file\ndiff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex f4a555c13f..a54ef4696e 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -5,7 +5,7 @@\n from .cache import cacheit\n from .containers import Tuple\n from .expr import Expr, AtomicExpr\n-from .function import AppliedUndef, FunctionClass\n+from .function import AppliedUndef, FunctionClass, Function\n from .kind import NumberKind, UndefinedKind\n from .logic import fuzzy_bool\n from .singleton import S\n@@ -747,13 +747,15 @@ def literal(s):\n \n             split: list[str] = _range.split(name)\n             split_list: list[list[str]] = []\n-            # remove 1 layer of bounding parentheses around ranges\n-            for i in range(len(split) - 1):\n-                if i and ':' in split[i] and split[i] != ':' and \\\n-                        split[i - 1].endswith('(') and \\\n-                        split[i + 1].startswith(')'):\n-                    split[i - 1] = split[i - 1][:-1]\n-                    split[i + 1] = split[i + 1][1:]\n+            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n+            from .function import FunctionClass\n+            if not isinstance(cls, FunctionClass):\n+                for i in range(len(split) - 1):\n+                    if i and ':' in split[i] and split[i] != ':' and \\\n+                            split[i - 1].endswith('(') and \\\n+                            split[i + 1].startswith(')'):\n+                        split[i - 1] = split[i - 1][:-1]\n+                        split[i + 1] = split[i + 1][1:]\n             for s in split:\n                 if ':' in s:\n                     if s.endswith(':'):\n"}