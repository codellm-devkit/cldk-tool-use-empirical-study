{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex ac0b62d0bf..d0a2d0361d 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -14,13 +14,33 @@ __all__ = [\n \n \n class Aggregate(Func):\n-    template = '%(function)s(%(distinct)s%(expressions)s)'\n+    template = '%(function)s(%(distinct)s %(expressions)s)'\n     contains_aggregate = True\n     name = None\n     filter_template = '%s FILTER (WHERE %%(filter)s)'\n     window_compatible = True\n     allow_distinct = False\n \n+    def as_sql(self, compiler, connection, **extra_context):\n+        extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''\n+        if self.filter:\n+            if connection.features.supports_aggregate_filter_clause:\n+                filter_sql, filter_params = self.filter.as_sql(compiler, connection)\n+                template = self.filter_template % extra_context.get('template', self.template)\n+                sql, params = super().as_sql(\n+                    compiler, connection, template=template, filter=filter_sql,\n+                    **extra_context\n+                )\n+                return sql, params + filter_params\n+            else:\n+                copy = self.copy()\n+                copy.filter = None\n+                source_expressions = copy.get_source_expressions()\n+                condition = When(self.filter, then=source_expressions[0])\n+                copy.set_source_expressions([Case(condition)] + source_expressions[1:])\n+                return super(Aggregate, copy).as_sql(compiler, connection, **extra_context)\n+        return super().as_sql(compiler, connection, **extra_context)\n+\n     def __init__(self, *expressions, distinct=False, filter=None, **extra):\n         if distinct and not self.allow_distinct:\n             raise TypeError(\"%s does not allow distinct.\" % self.__class__.__name__)\n"}