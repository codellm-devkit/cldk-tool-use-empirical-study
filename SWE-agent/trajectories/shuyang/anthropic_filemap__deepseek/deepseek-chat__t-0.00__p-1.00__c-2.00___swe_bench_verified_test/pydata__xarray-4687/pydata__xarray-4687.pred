{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-4687", "model_patch": "diff --git a/test_where.py b/test_where.py\nnew file mode 100644\nindex 00000000..e28a2e29\n--- /dev/null\n+++ b/test_where.py\n@@ -0,0 +1,15 @@\n+import numpy as np\n+import xarray as xr\n+\n+# Test case from the PR description\n+data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+data.attrs[\"attr_1\"] = \"test1\"\n+data.attrs[\"attr_2\"] = \"test2\"\n+\n+data2 = xr.where(data == 1, 5, 0)\n+\n+# Check if attributes are preserved\n+print(\"Attributes preserved:\", data2.attrs == data.attrs)\n+\n+# Check if dtype is preserved\n+print(\"Dtype preserved:\", data2.dtype == data.dtype)\n\\ No newline at end of file\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 9fe93c88..eb02fc04 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1809,15 +1809,45 @@ def where(cond, x, y):\n         equivalent methods\n     \"\"\"\n     # alignment for three arguments is complicated, so don't support it yet\n-    return apply_ufunc(\n-        duck_array_ops.where,\n-        cond,\n-        x,\n-        y,\n-        join=\"exact\",\n-        dataset_join=\"exact\",\n-        dask=\"allowed\",\n-    )\n+    from .dataarray import DataArray\n+    from .variable import Variable\n+\n+    from .dataarray import DataArray\n+    from .variable import Variable\n+\n+    # Determine the dtype and attributes from cond, x, or y if they are DataArray or Variable\n+    dtype = None\n+    attrs = None\n+    template = None\n+    for arg in (cond, x, y):\n+        if isinstance(arg, (DataArray, Variable)):\n+            dtype = arg.dtype\n+            attrs = arg.attrs\n+            template = arg\n+            break\n+\n+    # Apply the where operation directly to the data\n+    result_data = duck_array_ops.where(cond, x, y)\n+\n+    # Ensure the result has the correct dtype\n+    if dtype is not None:\n+        result_data = result_data.astype(dtype)\n+\n+    # Construct the result DataArray with preserved attributes\n+    if template is not None:\n+        result = DataArray(\n+            result_data,\n+            dims=template.dims,\n+            coords=template.coords,\n+            attrs=attrs,\n+            name=template.name,\n+        )\n+    else:\n+        result = result_data\n+\n+    return result\n+\n+    return result\n \n \n def polyval(coord, coeffs, degree_dim=\"degree\"):\n"}