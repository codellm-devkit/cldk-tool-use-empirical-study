{"model_name_or_path": "deepseek-chat__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "scikit-learn__scikit-learn-15100", "model_patch": "diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex bb5a9d646..11236d958 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -130,10 +130,7 @@ def strip_accents_unicode(s):\n         ASCII equivalent.\n     \"\"\"\n     normalized = unicodedata.normalize('NFKD', s)\n-    if normalized == s:\n-        return s\n-    else:\n-        return ''.join([c for c in normalized if not unicodedata.combining(c)])\n+    return ''.join([c for c in normalized if not unicodedata.combining(c)])\n \n \n def strip_accents_ascii(s):\ndiff --git a/test_strip_accents.py b/test_strip_accents.py\nnew file mode 100644\nindex 000000000..6f2a9dad3\n--- /dev/null\n+++ b/test_strip_accents.py\n@@ -0,0 +1,34 @@\n+from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+# Test case from the PR description\n+s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+\n+print(f\"Original s1: {s1}\")\n+print(f\"Original s2: {s2}\")\n+\n+# Stripped versions\n+stripped_s1 = strip_accents_unicode(s1)\n+stripped_s2 = strip_accents_unicode(s2)\n+\n+print(f\"Stripped s1: {stripped_s1}\")\n+print(f\"Stripped s2: {stripped_s2}\")\n+\n+# Check if both are normalized to 'n'\n+assert stripped_s1 == stripped_s2 == 'n', \"Both strings should be normalized to 'n'\"\n+print(\"Test passed: Both strings are normalized to 'n'\")\n+\n+# Edge case: Empty string\n+empty_str = \"\"\n+assert strip_accents_unicode(empty_str) == \"\", \"Empty string should return empty\"\n+print(\"Test passed: Empty string handled correctly\")\n+\n+# Edge case: String with no accents\n+no_accents = \"hello\"\n+assert strip_accents_unicode(no_accents) == \"hello\", \"String with no accents should be unchanged\"\n+print(\"Test passed: String with no accents handled correctly\")\n+\n+# Edge case: Mixed characters\n+mixed = \"h\u00e9ll\u00f6\"\n+assert strip_accents_unicode(mixed) == \"hello\", \"Mixed characters should be stripped\"\n+print(\"Test passed: Mixed characters handled correctly\")\n\\ No newline at end of file\n"}