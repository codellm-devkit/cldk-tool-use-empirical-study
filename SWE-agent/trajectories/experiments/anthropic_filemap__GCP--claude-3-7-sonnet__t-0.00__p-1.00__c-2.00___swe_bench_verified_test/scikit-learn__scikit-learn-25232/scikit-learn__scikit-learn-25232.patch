diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py
index 1d918bc0c..0751342dd 100644
--- a/sklearn/impute/_iterative.py
+++ b/sklearn/impute/_iterative.py
@@ -116,6 +116,13 @@ class IterativeImputer(_BaseImputer):
             default='mean'
         Which strategy to use to initialize the missing values. Same as the
         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.
+        
+    fill_value : str or numerical value, default=None
+        When `initial_strategy="constant"`, `fill_value` is used to replace all
+        occurrences of missing_values. For string or object data types,
+        `fill_value` must be a string. If `None`, `fill_value` will be 0 when
+        imputing numerical data and "missing_value" for strings or object data types.
+        Used only when `initial_strategy="constant"`.
 
     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \
             'random'}, default='ascending'
@@ -289,6 +296,7 @@ class IterativeImputer(_BaseImputer):
         "max_value": [None, Interval(Real, None, None, closed="both"), "array-like"],
         "verbose": ["verbose"],
         "random_state": ["random_state"],
+        "fill_value": "no_validation",  # any object is valid, same as in SimpleImputer
     }
 
     def __init__(
@@ -309,6 +317,7 @@ class IterativeImputer(_BaseImputer):
         random_state=None,
         add_indicator=False,
         keep_empty_features=False,
+        fill_value=None,
     ):
         super().__init__(
             missing_values=missing_values,
@@ -328,6 +337,7 @@ class IterativeImputer(_BaseImputer):
         self.max_value = max_value
         self.verbose = verbose
         self.random_state = random_state
+        self.fill_value = fill_value
 
     def _impute_one_feature(
         self,
@@ -610,11 +620,17 @@ class IterativeImputer(_BaseImputer):
         X_missing_mask = _get_mask(X, self.missing_values)
         mask_missing_values = X_missing_mask.copy()
         if self.initial_imputer_ is None:
-            self.initial_imputer_ = SimpleImputer(
-                missing_values=self.missing_values,
-                strategy=self.initial_strategy,
-                keep_empty_features=self.keep_empty_features,
-            )
+            imputer_params = {
+                "missing_values": self.missing_values,
+                "strategy": self.initial_strategy,
+                "keep_empty_features": self.keep_empty_features,
+            }
+            
+            # Only pass fill_value when initial_strategy is "constant"
+            if self.initial_strategy == "constant":
+                imputer_params["fill_value"] = self.fill_value
+                
+            self.initial_imputer_ = SimpleImputer(**imputer_params)
             X_filled = self.initial_imputer_.fit_transform(X)
         else:
             X_filled = self.initial_imputer_.transform(X)
