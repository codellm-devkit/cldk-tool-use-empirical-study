{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a778cd413b..ef80cb1907 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -77,17 +77,22 @@ class Aggregate(Func):\n             # returning self.filter and including that in this loop.\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n+                before_resolved = self.get_source_expressions()[index]\n+                name = (\n+                    before_resolved.name\n+                    if hasattr(before_resolved, \"name\")\n+                    else repr(before_resolved)\n+                )\n                 if expr.contains_aggregate:\n-                    before_resolved = self.get_source_expressions()[index]\n-                    name = (\n-                        before_resolved.name\n-                        if hasattr(before_resolved, \"name\")\n-                        else repr(before_resolved)\n-                    )\n                     raise FieldError(\n                         \"Cannot compute %s('%s'): '%s' is an aggregate\"\n                         % (c.name, name, name)\n                     )\n+                if getattr(expr, 'contains_over_clause', False):\n+                    raise FieldError(\n+                        \"Cannot compute %s('%s'): '%s' contains a window function\"\n+                        % (c.name, name, name)\n+                    )\n         if (default := c.default) is None:\n             return c\n         if hasattr(default, \"resolve_expression\"):\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 280cb967b4..3783ffe7c6 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -998,6 +998,13 @@ class Func(SQLiteNumericMixin, Expression):\n     @cached_property\n     def allowed_default(self):\n         return all(expression.allowed_default for expression in self.source_expressions)\n+        \n+    @cached_property\n+    def contains_over_clause(self):\n+        return getattr(self, '_contains_over_clause', False) or any(\n+            getattr(expr, 'contains_over_clause', False) \n+            for expr in self.source_expressions\n+        )\n \n \n @deconstructible(path=\"django.db.models.Value\")\n"}