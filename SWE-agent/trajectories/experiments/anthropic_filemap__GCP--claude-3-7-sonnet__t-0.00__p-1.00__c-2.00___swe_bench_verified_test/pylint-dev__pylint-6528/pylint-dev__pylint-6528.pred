{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..8bfc47524 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -564,8 +564,7 @@ class PyLinter(\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n@@ -575,19 +574,45 @@ class PyLinter(\n                 os.path.join(something, \"__init__.py\")\n             ):\n                 skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n+                for root, dirs, files in os.walk(something):\n+                    # Apply ignore patterns to directories\n+                    dirs_to_remove = []\n+                    for directory in dirs:\n+                        dir_path = os.path.join(root, directory)\n+                        dir_name = os.path.basename(dir_path)\n+                        \n+                        # Check if directory should be ignored\n+                        if (dir_name in self.config.ignore or\n+                            any(pattern.match(dir_name) for pattern in self.config.ignore_patterns) or\n+                            any(pattern.match(os.path.normpath(dir_path)) for pattern in self.config.ignore_paths)):\n+                            dirs_to_remove.append(directory)\n+                    \n+                    # Remove ignored directories from dirs list to prevent walking into them\n+                    for directory in dirs_to_remove:\n+                        dirs.remove(directory)\n+                    \n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n+                    \n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                        for file in files:\n+                            if not file.endswith(\".py\"):\n+                                continue\n+                                \n+                            file_path = os.path.join(root, file)\n+                            file_name = os.path.basename(file_path)\n+                            \n+                            # Check if file should be ignored\n+                            if (file_name in self.config.ignore or\n+                                any(pattern.match(file_name) for pattern in self.config.ignore_patterns) or\n+                                any(pattern.match(os.path.normpath(file_path)) for pattern in self.config.ignore_paths)):\n+                                continue\n+                                \n+                            yield file_path\n             else:\n                 yield something\n \n"}