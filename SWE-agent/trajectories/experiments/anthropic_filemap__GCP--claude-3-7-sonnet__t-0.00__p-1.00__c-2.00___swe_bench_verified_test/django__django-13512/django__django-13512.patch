diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 90d90119d0..ea50ee410d 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -24,7 +24,11 @@ class SQLiteNumericMixin:
         sql, params = self.as_sql(compiler, connection, **extra_context)
         try:
             if self.output_field.get_internal_type() == 'DecimalField':
-                sql = 'CAST(%s AS NUMERIC)' % sql
+                # Check if this is being used in a window function
+                # If it's a window function, don't apply CAST here
+                # as it will be applied to the entire window expression later
+                if not getattr(self, 'window_compatible', False):
+                    sql = 'CAST(%s AS NUMERIC)' % sql
         except FieldError:
             pass
         return sql, params
@@ -1327,10 +1331,23 @@ class Window(Expression):
         params.extend(window_params)
         template = template or self.template
 
-        return template % {
+        result = template % {
             'expression': expr_sql,
             'window': ''.join(window_sql).strip()
         }, params
+        
+        # Special handling for SQLite with DecimalField
+        if connection.vendor == 'sqlite':
+            try:
+                if hasattr(self.source_expression, 'output_field') and \
+                   self.source_expression.output_field.get_internal_type() == 'DecimalField':
+                    sql, params = result
+                    sql = 'CAST(%s AS NUMERIC)' % sql
+                    result = sql, params
+            except FieldError:
+                pass
+                
+        return result
 
     def __str__(self):
         return '{} OVER ({}{}{})'.format(
