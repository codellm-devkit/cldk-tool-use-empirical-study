{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13112", "model_patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 408964a146..8e1a064b29 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -89,12 +89,14 @@ class Apps:\n                     app_config = entry\n                 else:\n                     app_config = AppConfig.create(entry)\n-                if app_config.label in self.app_configs:\n+                # Ensure app_config.label is stored in lowercase for consistent lookup\n+                label = app_config.label.lower()\n+                if label in self.app_configs:\n                     raise ImproperlyConfigured(\n                         \"Application labels aren't unique, \"\n                         \"duplicates: %s\" % app_config.label)\n \n-                self.app_configs[app_config.label] = app_config\n+                self.app_configs[label] = app_config\n                 app_config.apps = self\n \n             # Check for duplicate app names.\n@@ -154,6 +156,11 @@ class Apps:\n         try:\n             return self.app_configs[app_label]\n         except KeyError:\n+            # Try case-insensitive lookup\n+            for label, app_config in self.app_configs.items():\n+                if label.lower() == app_label.lower():\n+                    return app_config\n+                    \n             message = \"No installed app with label '%s'.\" % app_label\n             for app_config in self.get_app_configs():\n                 if app_config.name == app_label:\n@@ -188,7 +195,7 @@ class Apps:\n \n         As a shortcut, app_label may be in the form <app_label>.<model_name>.\n \n-        model_name is case-insensitive.\n+        app_label and model_name are case-insensitive.\n \n         Raise LookupError if no application exists with this label, or no\n         model exists with this name in the application. Raise ValueError if\n@@ -207,13 +214,29 @@ class Apps:\n         if not require_ready and app_config.models is None:\n             app_config.import_models()\n \n-        return app_config.get_model(model_name, require_ready=require_ready)\n+        # Try to get the model from the app_config\n+        try:\n+            return app_config.get_model(model_name, require_ready=require_ready)\n+        except LookupError:\n+            # If not found, try to get it from all_models using lowercase app_label\n+            app_label_lower = app_label.lower()\n+            if app_label_lower in self.all_models:\n+                model_name_lower = model_name.lower()\n+                if model_name_lower in self.all_models[app_label_lower]:\n+                    return self.all_models[app_label_lower][model_name_lower]\n+            # If still not found, raise the original error\n+            raise LookupError(\n+                \"App '%s' doesn't have a '%s' model.\" % (app_label, model_name))\n \n     def register_model(self, app_label, model):\n         # Since this method is called when models are imported, it cannot\n         # perform imports because of the risk of import loops. It mustn't\n         # call get_app_config().\n         model_name = model._meta.model_name\n+        \n+        # Register the model under the original app_label\n+        if app_label not in self.all_models:\n+            self.all_models[app_label] = {}\n         app_models = self.all_models[app_label]\n         if model_name in app_models:\n             if (model.__name__ == app_models[model_name].__name__ and\n@@ -228,6 +251,13 @@ class Apps:\n                     \"Conflicting '%s' models in application '%s': %s and %s.\" %\n                     (model_name, app_label, app_models[model_name], model))\n         app_models[model_name] = model\n+        \n+        # Also register the model under the lowercase app_label for case-insensitive lookups\n+        app_label_lower = app_label.lower()\n+        if app_label_lower != app_label:\n+            if app_label_lower not in self.all_models:\n+                self.all_models[app_label_lower] = {}\n+            self.all_models[app_label_lower][model_name] = model\n         self.do_pending_operations(model)\n         self.clear_cache()\n \ndiff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 15d9b7fd86..fc563775f5 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -127,11 +127,35 @@ def _check_lazy_references(apps, ignore=None):\n         return operation, args, keywords\n \n     def app_model_error(model_key):\n+        app_label, model_name = model_key\n         try:\n-            apps.get_app_config(model_key[0])\n-            model_error = \"app '%s' doesn't provide model '%s'\" % model_key\n+            # Try to get the app config using the original app_label\n+            app_config = apps.get_app_config(app_label)\n+            \n+            # Check if the model exists in the app (case-insensitive)\n+            try:\n+                app_config.get_model(model_name)\n+                # If we get here, the model exists, so this shouldn't happen\n+                model_error = \"app '%s' doesn't provide model '%s'\" % model_key\n+            except LookupError:\n+                # Try to find the model with the original case\n+                for model_cls in app_config.get_models():\n+                    if model_cls.__name__.lower() == model_name.lower():\n+                        # Model exists but with different case\n+                        model_error = \"app '%s' provides model '%s', not '%s' (case mismatch)\" % (\n+                            app_label, model_cls.__name__, model_name)\n+                        break\n+                else:\n+                    # Model doesn't exist at all\n+                    model_error = \"app '%s' doesn't provide model '%s'\" % model_key\n         except LookupError:\n-            model_error = \"app '%s' isn't installed\" % model_key[0]\n+            # Try case-insensitive app lookup\n+            for cfg in apps.get_app_configs():\n+                if cfg.label.lower() == app_label.lower():\n+                    model_error = \"app '%s' is installed as '%s' (case mismatch)\" % (app_label, cfg.label)\n+                    break\n+            else:\n+                model_error = \"app '%s' isn't installed\" % app_label\n         return model_error\n \n     # Here are several functions which return CheckMessage instances for the\n@@ -141,16 +165,44 @@ def _check_lazy_references(apps, ignore=None):\n     # determined by extract_operation().\n \n     def field_error(model_key, func, args, keywords):\n+        app_label, model_name = model_key\n+        field = keywords['field']\n+        \n+        # Check if this is a case-sensitivity issue with the app label\n+        for app_config in apps.get_app_configs():\n+            if app_config.label.lower() == app_label.lower() and app_config.label != app_label:\n+                # Found a case-insensitive match for the app\n+                # Now check if the model exists in this app\n+                try:\n+                    model_class = app_config.get_model(model_name)\n+                    # Model exists, so this is just a case sensitivity issue with the app label\n+                    error_msg = (\n+                        \"The field %(field)s was declared with a lazy reference \"\n+                        \"to '%(wrong_app)s.%(model)s', but the app is installed as '%(correct_app)s'. \"\n+                        \"Update your reference to use the correct case: '%(correct_app)s.%(model)s'.\"\n+                    )\n+                    params = {\n+                        'field': field,\n+                        'wrong_app': app_label,\n+                        'correct_app': app_config.label,\n+                        'model': model_name,\n+                    }\n+                    return Error(error_msg % params, obj=field, id='fields.E307')\n+                except LookupError:\n+                    # Model doesn't exist, but app does with different case\n+                    pass\n+        \n+        # Default error message\n         error_msg = (\n             \"The field %(field)s was declared with a lazy reference \"\n             \"to '%(model)s', but %(model_error)s.\"\n         )\n         params = {\n             'model': '.'.join(model_key),\n-            'field': keywords['field'],\n+            'field': field,\n             'model_error': app_model_error(model_key),\n         }\n-        return Error(error_msg % params, obj=keywords['field'], id='fields.E307')\n+        return Error(error_msg % params, obj=field, id='fields.E307')\n \n     def signal_connect_error(model_key, func, args, keywords):\n         error_msg = (\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex c2aea9c730..d1732ce25e 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -54,7 +54,18 @@ def resolve_relation(scope_model, relation):\n     # Look for an \"app.Model\" relation\n     if isinstance(relation, str):\n         if \".\" not in relation:\n+            # Use the original app_label case from the model's metadata\n             relation = \"%s.%s\" % (scope_model._meta.app_label, relation)\n+        else:\n+            # For explicit app_label.model strings, check if we need to fix the case\n+            app_label, model_name = relation.split(\".\")\n+            # Check if this is a case-sensitivity issue with the app label\n+            from django.apps import apps\n+            for app_config in apps.get_app_configs():\n+                if app_config.label.lower() == app_label.lower() and app_config.label != app_label:\n+                    # Found a case-insensitive match for the app, use the correct case\n+                    relation = \"%s.%s\" % (app_config.label, model_name)\n+                    break\n \n     return relation\n \ndiff --git a/django/db/models/utils.py b/django/db/models/utils.py\nindex 989667dc8c..c11f92cf5a 100644\n--- a/django/db/models/utils.py\n+++ b/django/db/models/utils.py\n@@ -9,6 +9,8 @@ def make_model_tuple(model):\n             model_tuple = model\n         elif isinstance(model, str):\n             app_label, model_name = model.split(\".\")\n+            # For string references, preserve the original app_label case\n+            # This is important for mixed-case app names\n             model_tuple = app_label, model_name.lower()\n         else:\n             model_tuple = model._meta.app_label, model._meta.model_name\n"}