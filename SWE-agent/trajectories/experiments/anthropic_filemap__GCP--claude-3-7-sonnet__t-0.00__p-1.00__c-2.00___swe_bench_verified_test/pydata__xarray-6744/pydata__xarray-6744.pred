{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-6744", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex aef290f6..08a3dab7 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,16 +270,41 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n-        for (label, start, stop) in zip(self.window_labels, starts, stops):\n-            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n-\n-            counts = window.count(dim=self.dim[0])\n-            window = window.where(counts >= self.min_periods)\n-\n-            yield (label, window)\n+        \n+        window_size = int(self.window[0])\n+        data_size = len(self.window_labels)\n+        \n+        if self.center[0]:\n+            # For centered windows\n+            # For even window sizes, the window is positioned so that the center of the\n+            # window is to the right of the current position\n+            left_radius = window_size // 2\n+            right_radius = window_size - left_radius - 1\n+            \n+            # For each position, calculate the start and stop indices for the window\n+            for i, label in enumerate(self.window_labels):\n+                start = max(0, i - left_radius)\n+                stop = min(data_size, i + right_radius + 1)\n+                \n+                window = self.obj.isel({self.dim[0]: slice(start, stop)})\n+                \n+                counts = window.count(dim=self.dim[0])\n+                window = window.where(counts >= self.min_periods)\n+                \n+                yield (label, window)\n+        else:\n+            # Original non-centered behavior\n+            stops = np.arange(1, data_size + 1)\n+            starts = stops - window_size\n+            starts[: window_size] = 0\n+            \n+            for (label, start, stop) in zip(self.window_labels, starts, stops):\n+                window = self.obj.isel({self.dim[0]: slice(start, stop)})\n+                \n+                counts = window.count(dim=self.dim[0])\n+                window = window.where(counts >= self.min_periods)\n+                \n+                yield (label, window)\n \n     def construct(\n         self,\n"}