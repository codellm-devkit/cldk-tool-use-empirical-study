diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b9eb33329f..9a6614a809 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):
 
     def __init__(self, *args, **kwargs):
         kwargs.setdefault("required", False)
+        kwargs.setdefault("disabled", True)
         super().__init__(*args, **kwargs)
 
     def bound_data(self, data, initial):
diff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt
index 6ab8305468..77129ac77c 100644
--- a/docs/topics/auth/customizing.txt
+++ b/docs/topics/auth/customizing.txt
@@ -1137,11 +1137,16 @@ code would be required in the app's ``admin.py`` file::
             model = MyUser
             fields = ('email', 'password', 'date_of_birth', 'is_active', 'is_admin')
 
-        def clean_password(self):
-            # Regardless of what the user provides, return the initial value.
-            # This is done here, rather than on the field, because the
-            # field does not have access to the initial value
-            return self.initial["password"]
+        # Note: The ReadOnlyPasswordHashField has disabled=True by default,
+        # which means the clean_password method is not needed.
+        # If you're using an older version of Django or have set disabled=False,
+        # you'll need to include the following method:
+        #
+        # def clean_password(self):
+        #     # Regardless of what the user provides, return the initial value.
+        #     # This is done here, rather than on the field, because the
+        #     # field does not have access to the initial value
+        #     return self.initial["password"]
 
 
     class UserAdmin(BaseUserAdmin):
