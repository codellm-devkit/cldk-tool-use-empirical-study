{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py\nindex c54dc8f72a..eaa9bedc4d 100644\n--- a/sympy/sets/handlers/intersection.py\n+++ b/sympy/sets/handlers/intersection.py\n@@ -304,22 +304,25 @@ def intersection_sets(self, other): # noqa:F811\n             return None\n         else:\n             # univarite imaginary part in same variable\n-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])\n-            if x and all(i == n for i in x):\n-                base_set -= FiniteSet(xis)\n+            from sympy.solvers.solveset import solveset\n+            solutions = solveset(im, n, domain=base_set)\n+            if solutions.is_FiniteSet:\n+                return solutions\n             else:\n-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)\n-        # exclude values that make denominators 0\n+                # If we can't determine the solutions directly, use the condition set approach\n+                return ConditionSet(n, Eq(im, 0), base_set)\n+        # If we've reached here, the imaginary part is zero\n+        # We need to exclude values that make denominators 0\n+        result = imageset(lam, base_set)\n         for i in denoms(f):\n             if i.has(n):\n-                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))\n-                if sol != []:\n-                    x, xis = sol\n-                    if x and all(i == n for i in x):\n-                        base_set -= FiniteSet(xis)\n+                from sympy.solvers.solveset import solveset\n+                bad_values = solveset(i, n, domain=base_set)\n+                if bad_values.is_FiniteSet:\n+                    result = result - bad_values\n                 else:\n-                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)\n-        return imageset(lam, base_set)\n+                    result = result - ConditionSet(n, Eq(i, 0), base_set)\n+        return result\n \n     elif isinstance(other, Interval):\n         from sympy.solvers.solveset import (invert_real, invert_complex,\n"}