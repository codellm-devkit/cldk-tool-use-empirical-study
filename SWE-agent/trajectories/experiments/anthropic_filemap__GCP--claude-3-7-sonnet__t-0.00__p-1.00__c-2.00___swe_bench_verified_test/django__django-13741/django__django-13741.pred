{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13741", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b9eb33329f..9a6614a809 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):\n \n     def __init__(self, *args, **kwargs):\n         kwargs.setdefault(\"required\", False)\n+        kwargs.setdefault(\"disabled\", True)\n         super().__init__(*args, **kwargs)\n \n     def bound_data(self, data, initial):\ndiff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt\nindex 6ab8305468..77129ac77c 100644\n--- a/docs/topics/auth/customizing.txt\n+++ b/docs/topics/auth/customizing.txt\n@@ -1137,11 +1137,16 @@ code would be required in the app's ``admin.py`` file::\n             model = MyUser\n             fields = ('email', 'password', 'date_of_birth', 'is_active', 'is_admin')\n \n-        def clean_password(self):\n-            # Regardless of what the user provides, return the initial value.\n-            # This is done here, rather than on the field, because the\n-            # field does not have access to the initial value\n-            return self.initial[\"password\"]\n+        # Note: The ReadOnlyPasswordHashField has disabled=True by default,\n+        # which means the clean_password method is not needed.\n+        # If you're using an older version of Django or have set disabled=False,\n+        # you'll need to include the following method:\n+        #\n+        # def clean_password(self):\n+        #     # Regardless of what the user provides, return the initial value.\n+        #     # This is done here, rather than on the field, because the\n+        #     # field does not have access to the initial value\n+        #     return self.initial[\"password\"]\n \n \n     class UserAdmin(BaseUserAdmin):\n"}