{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/setup.py b/setup.py\nindex 2538952e3..94e1d8b32 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 7d39d80ed..067766b9c 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -304,12 +304,42 @@ class PyXrefMixin:\n     def make_xrefs(self, rolename: str, domain: str, target: str,\n                    innernode: Type[TextlikeNode] = nodes.emphasis,\n                    contnode: Node = None, env: BuildEnvironment = None) -> List[Node]:\n+        # Check if we need to split the contnode\n+        split_contnode = bool(contnode and contnode.astext() == target)\n+        \n+        # Handle complex nested types with balanced parentheses\n+        # This is a more robust approach that handles any level of nesting\n+        if '(' in target and ')' in target:\n+            # Count opening and closing parentheses\n+            open_count = target.count('(')\n+            close_count = target.count(')')\n+            \n+            # If they're balanced and there's a comma inside, it's likely a complex type\n+            if open_count == close_count and ',' in target:\n+                # Check if the commas are inside parentheses\n+                paren_level = 0\n+                has_comma_inside_parens = False\n+                \n+                for char in target:\n+                    if char == '(':\n+                        paren_level += 1\n+                    elif char == ')':\n+                        paren_level -= 1\n+                    elif char == ',' and paren_level > 0:\n+                        has_comma_inside_parens = True\n+                        break\n+                \n+                if has_comma_inside_parens or open_count > 1:\n+                    # This is a complex nested type - don't split it\n+                    if contnode is None or contnode.astext() != target:\n+                        contnode = nodes.Text(target)\n+                    return [self.make_xref(rolename, domain, target, innernode, contnode, env)]\n+        \n+        # Original implementation for other cases\n         delims = r'(\\s*[\\[\\]\\(\\),](?:\\s*or\\s)?\\s*|\\s+or\\s+|\\.\\.\\.)'\n         delims_re = re.compile(delims)\n         sub_targets = re.split(delims, target)\n \n-        split_contnode = bool(contnode and contnode.astext() == target)\n-\n         results = []\n         for sub_target in filter(None, sub_targets):\n             if split_contnode:\ndiff --git a/sphinx/util/docfields.py b/sphinx/util/docfields.py\nindex 3a3367ebe..19a15ba81 100644\n--- a/sphinx/util/docfields.py\n+++ b/sphinx/util/docfields.py\n@@ -9,6 +9,7 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import re\n from typing import TYPE_CHECKING, Any, Dict, List, Tuple, Type, Union, cast\n \n from docutils import nodes\n@@ -183,8 +184,25 @@ class TypedField(GroupedField):\n                 fieldtype = types.pop(fieldarg)\n                 if len(fieldtype) == 1 and isinstance(fieldtype[0], nodes.Text):\n                     typename = fieldtype[0].astext()\n-                    par.extend(self.make_xrefs(self.typerolename, domain, typename,\n-                                               addnodes.literal_emphasis, env=env))\n+                    \n+                    # Special handling for complex nested types\n+                    if '(' in typename and ')' in typename and ',' in typename:\n+                        # Count opening and closing parentheses\n+                        open_count = typename.count('(')\n+                        close_count = typename.count(')')\n+                        \n+                        # If they're balanced, it's likely a complex type\n+                        if open_count == close_count:\n+                            # Add the type as a single entity\n+                            par += addnodes.literal_emphasis(typename, typename)\n+                        else:\n+                            # Fall back to normal handling\n+                            par.extend(self.make_xrefs(self.typerolename, domain, typename,\n+                                                      addnodes.literal_emphasis, env=env))\n+                    else:\n+                        # Normal case\n+                        par.extend(self.make_xrefs(self.typerolename, domain, typename,\n+                                                  addnodes.literal_emphasis, env=env))\n                 else:\n                     par += fieldtype\n                 par += nodes.Text(')')\n@@ -298,7 +316,37 @@ class DocFieldTransformer:\n             # also support syntax like ``:param type name:``\n             if typedesc.is_typed:\n                 try:\n-                    argtype, argname = fieldarg.split(None, 1)\n+                    # Handle complex nested types with balanced parentheses\n+                    if '(' in fieldarg and ')' in fieldarg:\n+                        # Find the position of the last space before the parameter name\n+                        # This is more reliable for complex nested types\n+                        \n+                        # First, find all balanced parentheses\n+                        paren_stack = []\n+                        balanced_ranges = []\n+                        \n+                        for i, char in enumerate(fieldarg):\n+                            if char == '(':\n+                                paren_stack.append(i)\n+                            elif char == ')' and paren_stack:\n+                                start = paren_stack.pop()\n+                                if not paren_stack:  # Only consider top-level parentheses\n+                                    balanced_ranges.append((start, i))\n+                        \n+                        # Find the last space after all balanced parentheses\n+                        last_paren_end = balanced_ranges[-1][1] if balanced_ranges else -1\n+                        space_pos = fieldarg.find(' ', last_paren_end + 1)\n+                        \n+                        if space_pos != -1:\n+                            # Split at the space after the last balanced parenthesis\n+                            argtype = fieldarg[:space_pos].strip()\n+                            argname = fieldarg[space_pos:].strip()\n+                        else:\n+                            # Fall back to normal splitting\n+                            argtype, argname = fieldarg.split(None, 1)\n+                    else:\n+                        # Normal case\n+                        argtype, argname = fieldarg.split(None, 1)\n                 except ValueError:\n                     pass\n                 else:\ndiff --git a/tox.ini b/tox.ini\nindex a363e187f..3b8bc12d0 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n"}