{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-16145", "model_patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 3c39f57e4d..5cf2e5b216 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -147,7 +147,7 @@ class Command(BaseCommand):\n                 \"version\": self.get_version(),\n                 \"settings\": settings.SETTINGS_MODULE,\n                 \"protocol\": self.protocol,\n-                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else self.addr,\n+                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else \"0.0.0.0\" if self.addr == \"0\" else self.addr,\n                 \"port\": self.port,\n                 \"quit_command\": quit_command,\n             }\ndiff --git a/reproduce.py b/reproduce.py\nnew file mode 100755\nindex 0000000000..e6523f1153\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,28 @@\n+#!/usr/bin/env python\n+import sys\n+import os\n+\n+# Add the testbed directory to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Set up minimal Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n+\n+# Create a minimal settings module\n+if not os.path.exists('/testbed/settings.py'):\n+    with open('/testbed/settings.py', 'w') as f:\n+        f.write('''\n+DEBUG = True\n+SECRET_KEY = 'dummy'\n+ALLOWED_HOSTS = ['*']\n+INSTALLED_APPS = [\n+    'django.contrib.staticfiles',\n+]\n+STATIC_URL = '/static/'\n+''')\n+\n+# Import and run the runserver command\n+from django.core.management import execute_from_command_line\n+\n+# Run the command with the address 0:8000\n+execute_from_command_line(['manage.py', 'runserver', '0:8000'])\n\\ No newline at end of file\ndiff --git a/settings.py b/settings.py\nnew file mode 100644\nindex 0000000000..f6b09ba639\n--- /dev/null\n+++ b/settings.py\n@@ -0,0 +1,8 @@\n+\n+DEBUG = True\n+SECRET_KEY = 'dummy'\n+ALLOWED_HOSTS = ['*']\n+INSTALLED_APPS = [\n+    'django.contrib.staticfiles',\n+]\n+STATIC_URL = '/static/'\ndiff --git a/test_addresses.py b/test_addresses.py\nnew file mode 100644\nindex 0000000000..80c1889975\n--- /dev/null\n+++ b/test_addresses.py\n@@ -0,0 +1,64 @@\n+#!/usr/bin/env python\n+import sys\n+import os\n+import re\n+from django.core.management.commands.runserver import Command, naiveip_re\n+\n+# Test different address formats\n+test_cases = [\n+    ('0:8000', 'Explicit zero address with port'),\n+    ('127.0.0.1:8000', 'IPv4 address with port'),\n+    ('localhost:8000', 'Hostname with port'),\n+    ('::1:8000', 'IPv6 address with port (no brackets)'),\n+    ('[::1]:8000', 'IPv6 address with port (with brackets)'),\n+    ('8000', 'Port only (should use default address)'),\n+    ('', 'No address or port (should use defaults)'),\n+]\n+\n+# Create a mock command instance\n+cmd = Command()\n+cmd.protocol = 'http'\n+cmd.default_addr = '127.0.0.1'\n+cmd.default_addr_ipv6 = '::1'\n+cmd.default_port = '8000'\n+\n+for addrport, description in test_cases:\n+    print(f\"\\nTesting: {description}\")\n+    print(f\"Input: {repr(addrport)}\")\n+    \n+    # Simulate Django's address parsing logic\n+    cmd.use_ipv6 = False\n+    cmd._raw_ipv6 = False\n+    \n+    if not addrport:\n+        cmd.addr = ''\n+        cmd.port = cmd.default_port\n+    else:\n+        m = re.match(naiveip_re, addrport)\n+        if m is None:\n+            print(f\"  Invalid address format: {addrport}\")\n+            continue\n+        \n+        cmd.addr, _ipv4, _ipv6, _fqdn, cmd.port = m.groups()\n+        if not cmd.port.isdigit():\n+            print(f\"  Invalid port: {cmd.port}\")\n+            continue\n+            \n+        if cmd.addr:\n+            if _ipv6:\n+                cmd.addr = cmd.addr[1:-1]\n+                cmd.use_ipv6 = True\n+                cmd._raw_ipv6 = True\n+    \n+    # Set default address if none provided\n+    if not cmd.addr:\n+        cmd.addr = cmd.default_addr_ipv6 if cmd.use_ipv6 else cmd.default_addr\n+        cmd._raw_ipv6 = cmd.use_ipv6\n+    \n+    # Format the address as it would appear in the output\n+    formatted_addr = \"[%s]\" % cmd.addr if cmd._raw_ipv6 else \"0.0.0.0\" if cmd.addr == \"0\" else cmd.addr\n+    \n+    print(f\"  Parsed address: {cmd.addr}\")\n+    print(f\"  Parsed port: {cmd.port}\")\n+    print(f\"  Formatted address: {formatted_addr}\")\n+    print(f\"  Output URL: {cmd.protocol}://{formatted_addr}:{cmd.port}/\")\n\\ No newline at end of file\n"}