{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "astropy__astropy-7671", "model_patch": "diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py\nindex 3e784f9fc3..52a6651e47 100644\n--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -6,7 +6,49 @@\n import inspect\n import types\n import importlib\n-from distutils.version import LooseVersion\n+\n+try:\n+    from pkg_resources import parse_version\n+except ImportError:\n+    # Fall back to distutils.version.LooseVersion, but with a wrapper to handle\n+    # the specific error case we're trying to fix\n+    from distutils.version import LooseVersion as _LooseVersion\n+    \n+    class SafeLooseVersion(_LooseVersion):\n+        def __lt__(self, other):\n+            try:\n+                return super().__lt__(other)\n+            except TypeError:\n+                # Handle the case where we're comparing int and str components\n+                # Convert both version strings to strings for comparison\n+                return str(self.version) < str(other.version)\n+                \n+        def __gt__(self, other):\n+            try:\n+                return super().__gt__(other)\n+            except TypeError:\n+                return str(self.version) > str(other.version)\n+                \n+        def __eq__(self, other):\n+            try:\n+                return super().__eq__(other)\n+            except TypeError:\n+                return str(self.version) == str(other.version)\n+                \n+        def __ge__(self, other):\n+            try:\n+                return super().__ge__(other)\n+            except TypeError:\n+                return str(self.version) >= str(other.version)\n+                \n+        def __le__(self, other):\n+            try:\n+                return super().__le__(other)\n+            except TypeError:\n+                return str(self.version) <= str(other.version)\n+    \n+    def parse_version(version_string):\n+        return SafeLooseVersion(version_string)\n \n \n __all__ = ['resolve_name', 'minversion', 'find_current_module',\n@@ -140,9 +182,9 @@ def minversion(module, version, inclusive=True, version_path='__version__'):\n         have_version = resolve_name(module.__name__, version_path)\n \n     if inclusive:\n-        return LooseVersion(have_version) >= LooseVersion(version)\n+        return parse_version(have_version) >= parse_version(version)\n     else:\n-        return LooseVersion(have_version) > LooseVersion(version)\n+        return parse_version(have_version) > parse_version(version)\n \n \n def find_current_module(depth=1, finddiff=False):\n"}