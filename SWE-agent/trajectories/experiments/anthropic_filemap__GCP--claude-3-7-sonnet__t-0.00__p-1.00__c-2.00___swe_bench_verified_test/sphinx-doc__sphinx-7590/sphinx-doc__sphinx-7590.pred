{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d881d..4f39e915b 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -882,6 +882,24 @@ class ASTCharLiteral(ASTLiteral):\n         signode.append(nodes.Text(txt, txt))\n \n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: ASTLiteral, suffix: str) -> None:\n+        self.literal = literal\n+        self.suffix = suffix\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return str(self.literal) + self.suffix\n+\n+    def get_id(self, version: int) -> str:\n+        # Use the same ID as the underlying literal, but add a suffix\n+        return self.literal.get_id(version) + \"u\" + self.suffix\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        self.literal.describe_signature(signode, mode, env, symbol)\n+        signode.append(nodes.Text(self.suffix, self.suffix))\n+\n+\n class ASTThisLiteral(ASTExpression):\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return \"this\"\n@@ -4658,31 +4676,78 @@ class DefinitionParser(BaseParser):\n             return ASTBooleanLiteral(True)\n         if self.skip_word('false'):\n             return ASTBooleanLiteral(False)\n+        \n+        # Handle numeric literals\n         for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n                       integer_literal_re, octal_literal_re]:\n             pos = self.pos\n             if self.match(regex):\n+                # Handle standard suffixes\n                 while self.current_char in 'uUlLfF':\n                     self.pos += 1\n-                return ASTNumberLiteral(self.definition[pos:self.pos])\n+                \n+                # Get the numeric part\n+                numeric_part = self.definition[pos:self.pos]\n+                \n+                # Check for user-defined literal suffix\n+                if self.current_char and (self.current_char.isalpha() or self.current_char == '_'):\n+                    suffix_start = self.pos\n+                    \n+                    # Parse the UDL suffix (identifier-like)\n+                    # First character must be alphabetic or underscore\n+                    self.pos += 1\n+                    # Subsequent characters can be alphanumeric or underscore\n+                    while self.pos < len(self.definition) and (self.definition[self.pos].isalnum() or self.definition[self.pos] == '_'):\n+                        self.pos += 1\n+                    \n+                    suffix = self.definition[suffix_start:self.pos]\n+                    return ASTUserDefinedLiteral(ASTNumberLiteral(numeric_part), suffix)\n+                else:\n+                    return ASTNumberLiteral(numeric_part)\n \n+        # Handle string literals\n         string = self._parse_string()\n         if string is not None:\n-            return ASTStringLiteral(string)\n+            # Check for user-defined literal suffix\n+            if self.pos < len(self.definition) and (self.definition[self.pos].isalpha() or self.definition[self.pos] == '_'):\n+                suffix_start = self.pos\n+                \n+                # Parse the UDL suffix (identifier-like)\n+                self.pos += 1\n+                while self.pos < len(self.definition) and (self.definition[self.pos].isalnum() or self.definition[self.pos] == '_'):\n+                    self.pos += 1\n+                \n+                suffix = self.definition[suffix_start:self.pos]\n+                return ASTUserDefinedLiteral(ASTStringLiteral(string), suffix)\n+            else:\n+                return ASTStringLiteral(string)\n \n-        # character-literal\n+        # Handle character literals\n         if self.match(char_literal_re):\n             prefix = self.last_match.group(1)  # may be None when no prefix\n             data = self.last_match.group(2)\n             try:\n-                return ASTCharLiteral(prefix, data)\n+                char_literal = ASTCharLiteral(prefix, data)\n+                \n+                # Check for user-defined literal suffix\n+                if self.pos < len(self.definition) and (self.definition[self.pos].isalpha() or self.definition[self.pos] == '_'):\n+                    suffix_start = self.pos\n+                    \n+                    # Parse the UDL suffix (identifier-like)\n+                    self.pos += 1\n+                    while self.pos < len(self.definition) and (self.definition[self.pos].isalnum() or self.definition[self.pos] == '_'):\n+                        self.pos += 1\n+                    \n+                    suffix = self.definition[suffix_start:self.pos]\n+                    return ASTUserDefinedLiteral(char_literal, suffix)\n+                else:\n+                    return char_literal\n             except UnicodeDecodeError as e:\n                 self.fail(\"Can not handle character literal. Internal error was: %s\" % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n"}