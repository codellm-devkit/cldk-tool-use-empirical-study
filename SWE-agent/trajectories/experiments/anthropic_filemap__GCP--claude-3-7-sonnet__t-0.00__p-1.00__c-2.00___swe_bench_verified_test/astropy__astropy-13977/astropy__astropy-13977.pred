{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "astropy__astropy-13977", "model_patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex 8c3204b8b0..30bfcdde33 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -1013,7 +1013,11 @@ class UnitBase:\n \n         def make_converter(scale1, func, scale2):\n             def convert(v):\n-                return func(_condition_arg(v) / scale1) * scale2\n+                # Handle the case where _condition_arg returns NotImplemented\n+                conditioned = _condition_arg(v)\n+                if conditioned is NotImplemented:\n+                    return NotImplemented\n+                return func(conditioned / scale1) * scale2\n \n             return convert\n \n@@ -1070,7 +1074,13 @@ class UnitBase:\n             if scale == 1.0:\n                 return unit_scale_converter\n             else:\n-                return lambda val: scale * _condition_arg(val)\n+                def converter(val):\n+                    # Handle the case where _condition_arg returns NotImplemented\n+                    result = _condition_arg(val)\n+                    if result is NotImplemented:\n+                        return NotImplemented\n+                    return scale * result\n+                return converter\n \n         # if that doesn't work, maybe we can do it with equivalencies?\n         try:\n@@ -2614,23 +2624,25 @@ def _condition_arg(value):\n \n     Returns\n     -------\n-    Scalar value or numpy array\n-\n-    Raises\n-    ------\n-    ValueError\n-        If value is not as expected\n+    Scalar value or numpy array or NotImplemented\n+        Returns NotImplemented if the value cannot be converted to a compatible array\n+\n+    Notes\n+    -----\n+    Previously, this function raised a ValueError for incompatible inputs, but\n+    this prevented duck-typing with custom array-like objects. Returning NotImplemented\n+    allows the reflected operations to be tried.\n     \"\"\"\n     if isinstance(value, (np.ndarray, float, int, complex, np.void)):\n         return value\n \n-    avalue = np.array(value)\n-    if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n-        raise ValueError(\n-            \"Value not scalar compatible or convertible to \"\n-            \"an int, float, or complex array\"\n-        )\n-    return avalue\n+    try:\n+        avalue = np.array(value)\n+        if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n+            return NotImplemented\n+        return avalue\n+    except (TypeError, ValueError):\n+        return NotImplemented\n \n \n def unit_scale_converter(val):\n@@ -2639,7 +2651,11 @@ def unit_scale_converter(val):\n     This is a separate function so it can be recognized and\n     discarded in unit conversion.\n     \"\"\"\n-    return 1.0 * _condition_arg(val)\n+    # Handle the case where _condition_arg returns NotImplemented\n+    conditioned = _condition_arg(val)\n+    if conditioned is NotImplemented:\n+        return NotImplemented\n+    return 1.0 * conditioned\n \n \n dimensionless_unscaled = CompositeUnit(1, [], [], _error_check=False)\ndiff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex b98abfafb0..1d07383042 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -667,7 +667,15 @@ class Quantity(np.ndarray):\n         arrays = []\n         for input_, converter in zip(inputs, converters):\n             input_ = getattr(input_, \"value\", input_)\n-            arrays.append(converter(input_) if converter else input_)\n+            if converter:\n+                converted = converter(input_)\n+                # If a converter returns NotImplemented, we should return NotImplemented\n+                # to allow the reflected operation to be tried\n+                if converted is NotImplemented:\n+                    return NotImplemented\n+                arrays.append(converted)\n+            else:\n+                arrays.append(input_)\n \n         # Call our superclass's __array_ufunc__\n         result = super().__array_ufunc__(function, method, *arrays, **kwargs)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 486d6b9b3b..1c5f74f3a1 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\n"}