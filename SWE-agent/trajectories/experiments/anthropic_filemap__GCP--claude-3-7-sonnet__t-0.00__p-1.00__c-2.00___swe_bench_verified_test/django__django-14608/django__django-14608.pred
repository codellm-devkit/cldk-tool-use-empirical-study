{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-14608", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..ae03b64102 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -295,7 +295,12 @@ class BaseFormSet:\n         \"\"\"\n         if self._non_form_errors is None:\n             self.full_clean()\n-        return self._non_form_errors\n+        \n+        # Create a new ErrorList with the 'nonform' CSS class and copy the errors\n+        errors = self.error_class(error_class='nonform')\n+        if self._non_form_errors:\n+            errors.extend(self._non_form_errors)\n+        return errors\n \n     @property\n     def errors(self):\ndiff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt\nindex 1f2c7c3fad..58a158901e 100644\n--- a/docs/topics/forms/formsets.txt\n+++ b/docs/topics/forms/formsets.txt\n@@ -365,6 +365,18 @@ The formset ``clean`` method is called after all the ``Form.clean`` methods\n have been called. The errors will be found using the ``non_form_errors()``\n method on the formset.\n \n+Non-form errors will be rendered with an additional CSS class of ``nonform``\n+to help distinguish them from form-specific errors. For example, \n+``{{ formset.non_form_errors }}`` might be rendered as:\n+\n+.. code-block:: html+django\n+\n+    <ul class=\"errorlist nonform\">\n+        <li>Articles in a set must have distinct titles.</li>\n+    </ul>\n+\n+This is similar to how non-field errors in a form are rendered with a ``nonfield`` CSS class.\n+\n Validating the number of forms in a formset\n ===========================================\n \n"}