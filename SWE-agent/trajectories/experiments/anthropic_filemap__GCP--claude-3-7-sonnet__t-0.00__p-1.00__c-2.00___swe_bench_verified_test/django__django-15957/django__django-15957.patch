diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 822968ef56..9de32e14c6 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1298,9 +1298,37 @@ class When(Expression):
         connection.ops.check_expression_support(self)
         template_params = extra_context
         sql_params = []
-        condition_sql, condition_params = compiler.compile(self.condition)
-        template_params["condition"] = condition_sql
-        sql_params.extend(condition_params)
+        
+        # Special case for negated Q(field__in=[])
+        if (isinstance(self.condition, Q) and 
+            self.condition.negated and 
+            len(self.condition.children) == 1 and 
+            isinstance(self.condition.children[0], tuple) and 
+            self.condition.children[0][0].endswith('__in') and 
+            isinstance(self.condition.children[0][1], list) and 
+            len(self.condition.children[0][1]) == 0):
+            # This is ~Q(field__in=[]), which should be True for all rows
+            template_params["condition"] = "1 = 1"  # Always true condition
+        else:
+            try:
+                condition_sql, condition_params = compiler.compile(self.condition)
+                # Fix for empty condition string
+                if not condition_sql.strip():
+                    # If the condition is negated, it should be True for all rows
+                    if getattr(self.condition, 'negated', False):
+                        template_params["condition"] = "1 = 1"  # Always true condition
+                    else:
+                        template_params["condition"] = "0 = 1"  # Always false condition
+                else:
+                    template_params["condition"] = condition_sql
+                    sql_params.extend(condition_params)
+            except EmptyResultSet:
+                # If we get here with a negated condition, it should be True for all rows
+                if getattr(self.condition, 'negated', False):
+                    template_params["condition"] = "1 = 1"  # Always true condition
+                else:
+                    raise
+                
         result_sql, result_params = compiler.compile(self.result)
         template_params["result"] = result_sql
         sql_params.extend(result_params)
