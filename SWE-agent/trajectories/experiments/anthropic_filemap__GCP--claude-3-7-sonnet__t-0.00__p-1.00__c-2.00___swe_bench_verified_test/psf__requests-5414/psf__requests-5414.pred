{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "psf__requests-5414", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex fe22ff45..ac907780 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -28,6 +28,7 @@ from urllib3.exceptions import ReadTimeoutError\n from urllib3.exceptions import SSLError as _SSLError\n from urllib3.exceptions import ResponseError\n from urllib3.exceptions import LocationValueError\n+from urllib3.exceptions import LocationParseError\n \n from .models import Response\n from .compat import urlparse, basestring\n@@ -413,6 +414,12 @@ class HTTPAdapter(BaseAdapter):\n             conn = self.get_connection(request.url, proxies)\n         except LocationValueError as e:\n             raise InvalidURL(e, request=request)\n+        except LocationParseError as e:\n+            # Check if this is an invalid label error (empty or too long)\n+            if 'label empty or too long' in str(e):\n+                raise InvalidURL('URL has an invalid label.', request=request)\n+            else:\n+                raise InvalidURL(e, request=request)\n \n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n@@ -515,6 +522,10 @@ class HTTPAdapter(BaseAdapter):\n             if isinstance(e.reason, _SSLError):\n                 # This branch is for urllib3 v1.22 and later.\n                 raise SSLError(e, request=request)\n+                \n+            # Check if this is an invalid label error\n+            if isinstance(e.reason, NewConnectionError) and 'URL has an invalid label' in str(e.reason):\n+                raise InvalidURL('URL has an invalid label.', request=request)\n \n             raise ConnectionError(e, request=request)\n \n@@ -534,5 +545,19 @@ class HTTPAdapter(BaseAdapter):\n                 raise InvalidHeader(e, request=request)\n             else:\n                 raise\n+                \n+        except LocationParseError as e:\n+            # Check if this is an invalid label error (empty or too long)\n+            if 'label empty or too long' in str(e):\n+                raise InvalidURL('URL has an invalid label.', request=request)\n+            else:\n+                raise InvalidURL(e, request=request)\n+                \n+        except NewConnectionError as e:\n+            # Check if this is an invalid label error\n+            if 'URL has an invalid label' in str(e):\n+                raise InvalidURL('URL has an invalid label.', request=request)\n+            else:\n+                raise ConnectionError(e, request=request)\n \n         return self.build_response(request, resp)\ndiff --git a/requests/models.py b/requests/models.py\nindex e7d292d5..250f999b 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -354,7 +354,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n         except idna.IDNAError:\n-            raise UnicodeError\n+            raise InvalidURL('URL has an invalid label.')\n         return host\n \n     def prepare_url(self, url, params):\n@@ -383,7 +383,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         try:\n             scheme, auth, host, port, path, query, fragment = parse_url(url)\n         except LocationParseError as e:\n-            raise InvalidURL(*e.args)\n+            # Check if this is an invalid label error (empty or too long)\n+            if 'label empty or too long' in str(e):\n+                raise InvalidURL('URL has an invalid label.')\n+            else:\n+                raise InvalidURL(*e.args)\n \n         if not scheme:\n             error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n"}