diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index af8cfd86b5..6c2d767a99 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -1,3 +1,5 @@
+import datetime
+import decimal
 import uuid
 
 from django.conf import settings
@@ -298,6 +300,8 @@ class DatabaseOperations(BaseDatabaseOperations):
                 converters.append(self.convert_datetimefield_value)
         elif internal_type == 'UUIDField':
             converters.append(self.convert_uuidfield_value)
+        elif internal_type == 'DurationField':
+            converters.append(self.convert_durationfield_value)
         return converters
 
     def convert_booleanfield_value(self, value, expression, connection):
@@ -314,6 +318,19 @@ class DatabaseOperations(BaseDatabaseOperations):
         if value is not None:
             value = uuid.UUID(value)
         return value
+        
+    def convert_durationfield_value(self, value, expression, connection):
+        if value is not None:
+            # MySQL stores DurationField as text.
+            if isinstance(value, str):
+                try:
+                    # Convert to microseconds as integer
+                    value = datetime.timedelta(0, 0, int(decimal.Decimal(value)))
+                except (ValueError, decimal.InvalidOperation):
+                    pass
+            elif not isinstance(value, datetime.timedelta):
+                value = datetime.timedelta(0, 0, value)
+        return value
 
     def binary_placeholder_sql(self, value):
         return '_binary %s' if value is not None and not hasattr(value, 'as_sql') else '%s'
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 9510b5edd9..c8045f66ab 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -275,6 +275,8 @@ class DatabaseOperations(BaseDatabaseOperations):
             converters.append(self.convert_uuidfield_value)
         elif internal_type in ('NullBooleanField', 'BooleanField'):
             converters.append(self.convert_booleanfield_value)
+        elif internal_type == 'DurationField':
+            converters.append(self.convert_durationfield_value)
         return converters
 
     def convert_datetimefield_value(self, value, expression, connection):
@@ -320,6 +322,19 @@ class DatabaseOperations(BaseDatabaseOperations):
 
     def convert_booleanfield_value(self, value, expression, connection):
         return bool(value) if value in (1, 0) else value
+        
+    def convert_durationfield_value(self, value, expression, connection):
+        if value is not None:
+            # SQLite stores DurationField as text.
+            if isinstance(value, str):
+                try:
+                    # Convert to microseconds as integer
+                    value = datetime.timedelta(0, 0, int(decimal.Decimal(value)))
+                except (ValueError, decimal.InvalidOperation):
+                    pass
+            elif not isinstance(value, datetime.timedelta):
+                value = datetime.timedelta(0, 0, value)
+        return value
 
     def bulk_insert_sql(self, fields, placeholder_rows):
         return " UNION ALL ".join(
