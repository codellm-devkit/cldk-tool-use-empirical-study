{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-18199", "model_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 9a3052d4c3..42a8a7a4c3 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -768,16 +768,44 @@ def nthroot_mod(a, n, p, all_roots=False):\n     \"\"\"\n     from sympy.core.numbers import igcdex\n     a, n, p = as_int(a), as_int(n), as_int(p)\n+    \n+    # Special case: if a % p == 0, then 0 is a root\n+    zero_is_root = (a % p == 0)\n+    \n+    # If a % p == 0 and we're not looking for all roots, just return 0\n+    if zero_is_root and not all_roots:\n+        return 0\n+    \n     if n == 2:\n-        return sqrt_mod(a, p, all_roots)\n+        result = sqrt_mod(a, p, all_roots)\n+        if result is None:\n+            # If no roots found but a % p == 0, return 0 or [0]\n+            if zero_is_root:\n+                return [0] if all_roots else 0\n+            return None\n+        \n+        # Add 0 to the list of roots if a % p == 0\n+        if zero_is_root and all_roots and 0 not in result:\n+            result.insert(0, 0)\n+        return result\n+    \n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n     if not is_nthpow_residue(a, n, p):\n+        # If a % p == 0, we still have 0 as a root\n+        if zero_is_root:\n+            return [0] if all_roots else 0\n         return None\n+    \n     if not isprime(p):\n         raise NotImplementedError(\"Not implemented for composite p\")\n \n     if (p - 1) % n == 0:\n-        return _nthroot_mod1(a, n, p, all_roots)\n+        result = _nthroot_mod1(a, n, p, all_roots)\n+        # Add 0 to the list of roots if a % p == 0\n+        if zero_is_root and all_roots and result is not None and 0 not in result:\n+            result.insert(0, 0)\n+        return result\n+    \n     # The roots of ``x**n - a = 0 (mod p)`` are roots of\n     # ``gcd(x**n - a, x**(p - 1) - 1) = 0 (mod p)``\n     pa = n\n@@ -798,12 +826,28 @@ def nthroot_mod(a, n, p, all_roots=False):\n     if pa == 1:\n         if all_roots:\n             res = [a]\n+            # Add 0 to the list of roots if a % p == 0\n+            if zero_is_root and 0 not in res:\n+                res.insert(0, 0)\n         else:\n             res = a\n     elif pa == 2:\n-        return sqrt_mod(a, p , all_roots)\n+        result = sqrt_mod(a, p, all_roots)\n+        # Add 0 to the list of roots if a % p == 0\n+        if zero_is_root and all_roots and result is not None and 0 not in result:\n+            result.insert(0, 0)\n+        return result\n     else:\n-        res = _nthroot_mod1(a, pa, p, all_roots)\n+        result = _nthroot_mod1(a, pa, p, all_roots)\n+        # Add 0 to the list of roots if a % p == 0\n+        if zero_is_root and all_roots and result is not None and 0 not in result:\n+            result.insert(0, 0)\n+        return result\n+    \n+    # Add 0 to the list of roots if a % p == 0\n+    if zero_is_root and all_roots and isinstance(res, list) and 0 not in res:\n+        res.insert(0, 0)\n+    \n     return res\n \n \n"}