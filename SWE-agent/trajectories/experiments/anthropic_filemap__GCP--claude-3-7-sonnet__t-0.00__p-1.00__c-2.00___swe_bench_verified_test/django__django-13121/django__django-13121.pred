{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13121", "model_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex af8cfd86b5..6c2d767a99 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -1,3 +1,5 @@\n+import datetime\n+import decimal\n import uuid\n \n from django.conf import settings\n@@ -298,6 +300,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n                 converters.append(self.convert_datetimefield_value)\n         elif internal_type == 'UUIDField':\n             converters.append(self.convert_uuidfield_value)\n+        elif internal_type == 'DurationField':\n+            converters.append(self.convert_durationfield_value)\n         return converters\n \n     def convert_booleanfield_value(self, value, expression, connection):\n@@ -314,6 +318,19 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if value is not None:\n             value = uuid.UUID(value)\n         return value\n+        \n+    def convert_durationfield_value(self, value, expression, connection):\n+        if value is not None:\n+            # MySQL stores DurationField as text.\n+            if isinstance(value, str):\n+                try:\n+                    # Convert to microseconds as integer\n+                    value = datetime.timedelta(0, 0, int(decimal.Decimal(value)))\n+                except (ValueError, decimal.InvalidOperation):\n+                    pass\n+            elif not isinstance(value, datetime.timedelta):\n+                value = datetime.timedelta(0, 0, value)\n+        return value\n \n     def binary_placeholder_sql(self, value):\n         return '_binary %s' if value is not None and not hasattr(value, 'as_sql') else '%s'\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 9510b5edd9..c8045f66ab 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -275,6 +275,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n             converters.append(self.convert_uuidfield_value)\n         elif internal_type in ('NullBooleanField', 'BooleanField'):\n             converters.append(self.convert_booleanfield_value)\n+        elif internal_type == 'DurationField':\n+            converters.append(self.convert_durationfield_value)\n         return converters\n \n     def convert_datetimefield_value(self, value, expression, connection):\n@@ -320,6 +322,19 @@ class DatabaseOperations(BaseDatabaseOperations):\n \n     def convert_booleanfield_value(self, value, expression, connection):\n         return bool(value) if value in (1, 0) else value\n+        \n+    def convert_durationfield_value(self, value, expression, connection):\n+        if value is not None:\n+            # SQLite stores DurationField as text.\n+            if isinstance(value, str):\n+                try:\n+                    # Convert to microseconds as integer\n+                    value = datetime.timedelta(0, 0, int(decimal.Decimal(value)))\n+                except (ValueError, decimal.InvalidOperation):\n+                    pass\n+            elif not isinstance(value, datetime.timedelta):\n+                value = datetime.timedelta(0, 0, value)\n+        return value\n \n     def bulk_insert_sql(self, fields, placeholder_rows):\n         return \" UNION ALL \".join(\n"}