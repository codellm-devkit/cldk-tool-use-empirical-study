{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/fixedwidth.py b/astropy/io/ascii/fixedwidth.py\nindex fdadbbc050..958cb9dc70 100644\n--- a/astropy/io/ascii/fixedwidth.py\n+++ b/astropy/io/ascii/fixedwidth.py\n@@ -271,17 +271,23 @@ class FixedWidthData(basic.BasicData):\n         # List (rows) of list (columns values) for header lines.\n         hdrs_list = []\n         for col_attr in header_rows:\n-            vals = [\n-                \"\" if (val := getattr(col.info, col_attr)) is None else str(val)\n-                for col in self.cols\n-            ]\n+            vals = []\n+            for col in self.cols:\n+                try:\n+                    val = getattr(col.info, col_attr)\n+                    vals.append(\"\" if val is None else str(val))\n+                except AttributeError:\n+                    vals.append(\"\")\n             hdrs_list.append(vals)\n \n         # Widths for data columns\n-        widths = [\n-            max(len(vals[i_col]) for vals in vals_list)\n-            for i_col in range(len(self.cols))\n-        ]\n+        widths = []\n+        for i_col in range(len(self.cols)):\n+            if vals_list:\n+                widths.append(max(len(vals[i_col]) for vals in vals_list))\n+            else:\n+                # Handle case of no data rows\n+                widths.append(0)\n         # Incorporate widths for header columns (if there are any)\n         if hdrs_list:\n             for i_col in range(len(self.cols)):\ndiff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..ee9edaf967 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -27,7 +27,7 @@ class SimpleRSTHeader(FixedWidthHeader):\n \n \n class SimpleRSTData(FixedWidthData):\n-    start_line = 3\n+    start_line = 3  # Default for standard RST format with single header row\n     end_line = -1\n     splitter_class = FixedWidthTwoLineDataSplitter\n \n@@ -49,7 +49,14 @@ class RST(FixedWidth):\n     Currently there is no support for reading tables which utilize continuation lines,\n     or for ones which define column spans through the use of an additional\n     line of dashes in the header.\n-\n+    \n+    Parameters\n+    ----------\n+    header_rows : list, optional\n+        A list of strings corresponding to attributes of column.info that\n+        should be used for the header rows. For instance, ['name', 'unit']\n+        will create a header row with column names followed by a row with\n+        the units. Default is ['name'].\n     \"\"\"\n \n     _format_name = \"rst\"\n@@ -57,10 +64,26 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        # If header_rows is an empty list, set it to None to use default behavior\n+        if header_rows is not None and len(header_rows) == 0:\n+            header_rows = None\n+            \n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+        \n+        # Adjust data start line based on header_rows\n+        if header_rows is not None:\n+            self.data.start_line = len(header_rows) + 1\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Get the separator line (the line with '=' characters)\n+        # In the standard case, it's the second line (index 1)\n+        # With multiple header rows, it's after all header rows\n+        header_rows = getattr(self.header, \"header_rows\", [\"name\"])\n+        separator_line_index = len(header_rows) if header_rows else 1\n+        separator_line = lines[separator_line_index]\n+        \n+        # Add separator line at the beginning and end\n+        lines = [separator_line] + lines + [separator_line]\n         return lines\n"}