{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 4682d5b6e..f2f6dca8e 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -12,6 +12,7 @@ from _pytest._code.code import ReprFuncArgs\n from _pytest._code.code import ReprLocals\n from _pytest._code.code import ReprTraceback\n from _pytest._code.code import TerminalRepr\n+from _pytest._code.code import ExceptionChainRepr\n from _pytest.outcomes import skip\n from _pytest.pathlib import Path\n \n@@ -162,6 +163,38 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n+            # Handle ExceptionChainRepr which contains multiple exceptions\n+            if hasattr(rep.longrepr, \"chain\"):\n+                chain_data = []\n+                for reprtraceback, reprcrash, descr in rep.longrepr.chain:\n+                    tb_data = reprtraceback.__dict__.copy()\n+                    crash_data = reprcrash.__dict__.copy() if reprcrash else None\n+                    \n+                    new_entries = []\n+                    for entry in tb_data[\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    \n+                    tb_data[\"reprentries\"] = new_entries\n+                    chain_data.append({\n+                        \"reprtraceback\": tb_data,\n+                        \"reprcrash\": crash_data,\n+                        \"description\": descr\n+                    })\n+                \n+                return {\n+                    \"is_chain\": True,\n+                    \"chain\": chain_data,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n+            \n+            # Handle single exception (original code)\n             reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n             reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n \n@@ -179,6 +212,7 @@ class BaseReport:\n             reprtraceback[\"reprentries\"] = new_entries\n \n             return {\n+                \"is_chain\": False,\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n@@ -212,41 +246,76 @@ class BaseReport:\n         Experimental method.\n         \"\"\"\n         if reportdict[\"longrepr\"]:\n-            if (\n+            # Helper function to deserialize a single traceback entry\n+            def deserialize_entry(entry_data):\n+                data = entry_data[\"data\"]\n+                entry_type = entry_data[\"type\"]\n+                if entry_type == \"ReprEntry\":\n+                    reprfuncargs = None\n+                    reprfileloc = None\n+                    reprlocals = None\n+                    if data[\"reprfuncargs\"]:\n+                        reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                    if data[\"reprfileloc\"]:\n+                        reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                    if data[\"reprlocals\"]:\n+                        reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+                    return ReprEntry(\n+                        lines=data[\"lines\"],\n+                        reprfuncargs=reprfuncargs,\n+                        reprlocals=reprlocals,\n+                        filelocrepr=reprfileloc,\n+                        style=data[\"style\"],\n+                    )\n+                elif entry_type == \"ReprEntryNative\":\n+                    return ReprEntryNative(data[\"lines\"])\n+                else:\n+                    _report_unserialization_failure(entry_type, cls, reportdict)\n+            \n+            # Helper function to deserialize a traceback\n+            def deserialize_traceback(tb_dict):\n+                tb_copy = tb_dict.copy()\n+                unserialized_entries = []\n+                for entry_data in tb_copy[\"reprentries\"]:\n+                    reprentry = deserialize_entry(entry_data)\n+                    unserialized_entries.append(reprentry)\n+                tb_copy[\"reprentries\"] = unserialized_entries\n+                return ReprTraceback(**tb_copy)\n+            \n+            # Check if this is a chain of exceptions\n+            if reportdict[\"longrepr\"].get(\"is_chain\", False):\n+                chain_data = []\n+                \n+                for item in reportdict[\"longrepr\"][\"chain\"]:\n+                    reprtraceback = deserialize_traceback(item[\"reprtraceback\"])\n+                    \n+                    reprcrash = None\n+                    if item[\"reprcrash\"]:\n+                        reprcrash = ReprFileLocation(**item[\"reprcrash\"])\n+                    \n+                    chain_data.append((reprtraceback, reprcrash, item[\"description\"]))\n+                \n+                # Create ExceptionChainRepr\n+                exception_info = ExceptionChainRepr(chain_data)\n+                \n+                # Add sections\n+                for section in reportdict[\"longrepr\"][\"sections\"]:\n+                    exception_info.addsection(*section)\n+                \n+                reportdict[\"longrepr\"] = exception_info\n+            \n+            # Handle single exception (original code)\n+            elif (\n                 \"reprcrash\" in reportdict[\"longrepr\"]\n                 and \"reprtraceback\" in reportdict[\"longrepr\"]\n             ):\n-\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n \n                 unserialized_entries = []\n-                reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n-                    data = entry_data[\"data\"]\n-                    entry_type = entry_data[\"type\"]\n-                    if entry_type == \"ReprEntry\":\n-                        reprfuncargs = None\n-                        reprfileloc = None\n-                        reprlocals = None\n-                        if data[\"reprfuncargs\"]:\n-                            reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n-                        if data[\"reprfileloc\"]:\n-                            reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n-                        if data[\"reprlocals\"]:\n-                            reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n-\n-                        reprentry = ReprEntry(\n-                            lines=data[\"lines\"],\n-                            reprfuncargs=reprfuncargs,\n-                            reprlocals=reprlocals,\n-                            filelocrepr=reprfileloc,\n-                            style=data[\"style\"],\n-                        )\n-                    elif entry_type == \"ReprEntryNative\":\n-                        reprentry = ReprEntryNative(data[\"lines\"])\n-                    else:\n-                        _report_unserialization_failure(entry_type, cls, reportdict)\n+                    reprentry = deserialize_entry(entry_data)\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n"}