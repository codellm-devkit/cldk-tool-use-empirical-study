{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "astropy__astropy-14369", "model_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 307e987ed6..4b93d08ac8 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -301,6 +301,27 @@ class CDS(Base):\n             return cls._parse_unit(s, detailed_exception=False)\n         except ValueError:\n             try:\n+                # Preprocess the string to handle consecutive divisions correctly\n+                # For CDS format, a/b/c should be interpreted as a/(b*c)\n+                import re\n+                \n+                # Check if there are multiple consecutive divisions\n+                if s.count('/') > 1:\n+                    # Split the string by '/'\n+                    parts = s.split('/')\n+                    \n+                    # The first part is the numerator\n+                    numerator = parts[0]\n+                    \n+                    # The rest are denominators that should be multiplied together\n+                    denominators = parts[1:]\n+                    \n+                    # Join the denominators with '.' (multiplication in CDS format)\n+                    denominator = '.'.join(denominators)\n+                    \n+                    # Reconstruct the string with a single division\n+                    s = f\"{numerator}/{denominator}\"\n+                \n                 return cls._parser.parse(s, lexer=cls._lexer, debug=debug)\n             except ValueError as e:\n                 if str(e):\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 5b691556b8..277dafd0f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -231,7 +231,7 @@ extend-ignore = [\n     \"S101\",  # UseOfAssert                           # TODO: fix\n     \"S105\",  # HardcodedPasswordString               # TODO: fix by adding noqa\n     \"S506\",  # UnsafeYAMLLoad                        # TODO: fix\n-    \"S324\",\t # HashlibInsecureHashFunction           # TODO: fix or noqa\n+    \"S324\",      # HashlibInsecureHashFunction           # TODO: fix or noqa\n \n     # flake8-simplify (SIM)\n     \"SIM102\",  # NestedIfStatements                  # TODO: fixable with `pass`.\n"}