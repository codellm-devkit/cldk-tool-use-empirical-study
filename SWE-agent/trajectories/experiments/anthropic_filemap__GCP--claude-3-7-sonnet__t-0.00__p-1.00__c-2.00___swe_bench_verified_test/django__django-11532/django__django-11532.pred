{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-11532", "model_patch": "diff --git a/django/core/mail/message.py b/django/core/mail/message.py\nindex e393b4cf5c..a024a02142 100644\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -256,8 +256,8 @@ class EmailMessage:\n             # will get picked up by formatdate().\n             msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)\n         if 'message-id' not in header_names:\n-            # Use cached DNS_NAME for performance\n-            msg['Message-ID'] = make_msgid(domain=DNS_NAME)\n+            # Use cached DNS_NAME for performance, but get ASCII version to avoid encoding issues\n+            msg['Message-ID'] = make_msgid(domain=DNS_NAME.get_ascii_fqdn())\n         for name, value in self.extra_headers.items():\n             if name.lower() != 'from':  # From is already handled\n                 msg[name] = value\ndiff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex d18dfe4667..8db4651f53 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -4,6 +4,13 @@ Email message and email sending related helper functions.\n \n import socket\n \n+# Try to import idna for punycode conversion\n+try:\n+    import idna\n+    HAS_IDNA = True\n+except ImportError:\n+    HAS_IDNA = False\n+\n \n # Cache the hostname, but do it lazily: socket.getfqdn() can take a couple of\n # seconds, which slows down the restart of the server.\n@@ -15,6 +22,37 @@ class CachedDnsName:\n         if not hasattr(self, '_fqdn'):\n             self._fqdn = socket.getfqdn()\n         return self._fqdn\n+    \n+    def get_ascii_fqdn(self):\n+        \"\"\"\n+        Return FQDN in ASCII-only form (Punycode) for use in email headers.\n+        This prevents encoding errors when the system hostname contains\n+        non-ASCII characters.\n+        \"\"\"\n+        if not hasattr(self, '_ascii_fqdn'):\n+            fqdn = self.get_fqdn()\n+            \n+            # Check if conversion is needed (if hostname is already ASCII-only)\n+            try:\n+                fqdn.encode('ascii')\n+                self._ascii_fqdn = fqdn  # Already ASCII, no conversion needed\n+                return self._ascii_fqdn\n+            except UnicodeEncodeError:\n+                # Contains non-ASCII characters, needs conversion\n+                pass\n+                \n+            # Try to convert to punycode if idna module is available\n+            if HAS_IDNA:\n+                try:\n+                    self._ascii_fqdn = idna.encode(fqdn).decode('ascii')\n+                except (UnicodeError, AttributeError):\n+                    # If conversion fails, fall back to a safe default\n+                    self._ascii_fqdn = 'localhost'\n+            else:\n+                # If idna module is not available, fall back to a safe default\n+                self._ascii_fqdn = 'localhost'\n+                \n+        return self._ascii_fqdn\n \n \n DNS_NAME = CachedDnsName()\n"}