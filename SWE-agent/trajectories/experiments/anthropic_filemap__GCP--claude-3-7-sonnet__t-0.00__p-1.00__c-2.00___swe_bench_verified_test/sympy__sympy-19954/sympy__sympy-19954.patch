diff --git a/sympy/physics/quantum/__init__.py b/sympy/physics/quantum/__init__.py
index bf08e1f7a3..82ace57a04 100644
--- a/sympy/physics/quantum/__init__.py
+++ b/sympy/physics/quantum/__init__.py
@@ -15,6 +15,8 @@
 
     'InnerProduct',
 
+    'identity_simplify',
+
     'Operator', 'HermitianOperator', 'UnitaryOperator', 'IdentityOperator',
     'OuterProduct', 'DifferentialOperator',
 
@@ -44,6 +46,8 @@
 
 from .innerproduct import InnerProduct
 
+from .identitysimplify import identity_simplify
+
 from .operator import (Operator, HermitianOperator, UnitaryOperator,
         IdentityOperator, OuterProduct, DifferentialOperator)
 
diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c..d17c48c4a8 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -3,6 +3,7 @@
 from __future__ import print_function, division
 
 from sympy.core import Expr
+from sympy.core.mul import Mul
 from sympy.functions.elementary.complexes import adjoint
 
 __all__ = [
@@ -84,6 +85,22 @@ def __new__(cls, arg):
         if obj is not None:
             return obj
         return Expr.__new__(cls, arg)
+        
+    def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        
+        if isinstance(other, IdentityOperator):
+            return self
+            
+        return Mul(self, other)
+        
+    def __rmul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        
+        if isinstance(other, IdentityOperator):
+            return self
+            
+        return Mul(other, self)
 
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/identitysimplify.py b/sympy/physics/quantum/identitysimplify.py
new file mode 100644
index 0000000000..a90ed3f8b5
--- /dev/null
+++ b/sympy/physics/quantum/identitysimplify.py
@@ -0,0 +1,67 @@
+"""Simplify expressions involving IdentityOperator."""
+
+from __future__ import print_function, division
+
+from sympy import Mul, Add, Pow
+from sympy.physics.quantum.operator import IdentityOperator
+
+__all__ = [
+    'identity_simplify'
+]
+
+def identity_simplify(expr):
+    """Simplify expressions involving IdentityOperator.
+    
+    This function simplifies expressions like A * I, I * A, and more complex
+    expressions involving IdentityOperator.
+    
+    Parameters
+    ==========
+    
+    expr : Expr
+        The expression to simplify.
+        
+    Returns
+    =======
+    
+    Expr
+        The simplified expression.
+        
+    Examples
+    ========
+    
+    >>> from sympy.physics.quantum.operator import Operator, IdentityOperator
+    >>> from sympy.physics.quantum.dagger import Dagger
+    >>> from sympy.physics.quantum.identitysimplify import identity_simplify
+    >>> A = Operator('A')
+    >>> I = IdentityOperator()
+    >>> identity_simplify(A * I)
+    A
+    >>> identity_simplify(I * A)
+    A
+    >>> identity_simplify(Dagger(A) * I)
+    Dagger(A)
+    >>> identity_simplify(I * Dagger(A))
+    Dagger(A)
+    """
+    if isinstance(expr, Mul):
+        args = list(expr.args)
+        # Remove all IdentityOperator instances
+        args = [arg for arg in args if not isinstance(arg, IdentityOperator)]
+        if not args:
+            # If all args were IdentityOperator, return one IdentityOperator
+            return IdentityOperator()
+        if len(args) == 1:
+            # If only one arg is left, return it
+            return args[0]
+        # Otherwise, return the Mul of the remaining args
+        return Mul(*args)
+    elif isinstance(expr, Add):
+        # Apply identity_simplify to each term in the Add
+        return Add(*[identity_simplify(arg) for arg in expr.args])
+    elif isinstance(expr, Pow):
+        # Apply identity_simplify to the base of the Pow
+        return Pow(identity_simplify(expr.base), expr.exp)
+    else:
+        # For other types, return the expression unchanged
+        return expr
\ No newline at end of file
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64f..ea03fa057d 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -306,9 +306,22 @@ def _print_contents_latex(self, printer, *args):
         return r'{\mathcal{I}}'
 
     def __mul__(self, other):
+        from sympy.physics.quantum.dagger import Dagger
 
-        if isinstance(other, Operator):
+        if isinstance(other, Operator) or isinstance(other, Dagger):
             return other
+            
+        # Handle expressions like (A*B) * Identity or c*A * Identity
+        if isinstance(other, Mul):
+            # Check if any of the args is a Dagger or Operator
+            has_quantum_term = False
+            for arg in other.args:
+                if isinstance(arg, Operator) or isinstance(arg, Dagger):
+                    has_quantum_term = True
+                    break
+            
+            if has_quantum_term:
+                return other
 
         return Mul(self, other)
 
