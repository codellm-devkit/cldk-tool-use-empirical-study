{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-19954", "model_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4..e563cd089a 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2192,18 +2192,27 @@ def _number_blocks(blocks):\n                 # a representative block (containing 0)\n                 rep = {j for j in range(self.degree) if num_block[j] == 0}\n                 # check if the system is minimal with\n-                # respect to the already discovere ones\n+                # respect to the already discovered ones\n                 minimal = True\n                 to_remove = []\n+                indices_to_remove = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        indices_to_remove.append(i)\n+                        to_remove.append(r)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n+                \n+                # Remove non-minimal block systems\n+                # Remove in reverse order to avoid index shifting problems\n+                for i in sorted(indices_to_remove, reverse=True):\n+                    if i < len(num_blocks):\n+                        del num_blocks[i]\n+                    if i < len(blocks):\n+                        del blocks[i]\n                 # remove non-minimal representative blocks\n                 rep_blocks = [r for r in rep_blocks if r not in to_remove]\n \n"}