{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py\nindex 7d038a998f..b3e292d31b 100644\n--- a/lib/matplotlib/backends/backend_agg.py\n+++ b/lib/matplotlib/backends/backend_agg.py\n@@ -205,8 +205,10 @@ class RendererAgg(RendererBase):\n         # We pass '0' for angle here, since it will be rotated (in raster\n         # space) in the following call to draw_text_image).\n         font.set_text(s, 0, flags=get_hinting_flag())\n+        # Use antialiased from gc if set, otherwise fall back to rcParams\n+        antialiased = gc.get_antialiased() if gc._antialiased != 1 else mpl.rcParams['text.antialiased']\n         font.draw_glyphs_to_bitmap(\n-            antialiased=mpl.rcParams['text.antialiased'])\n+            antialiased=antialiased)\n         d = font.get_descent() / 64.0\n         # The descent needs to be adjusted for the angle.\n         xo, yo = font.get_bitmap_offset()\ndiff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py\nindex 9ccadcdf1c..758c8a8907 100644\n--- a/lib/matplotlib/backends/backend_cairo.py\n+++ b/lib/matplotlib/backends/backend_cairo.py\n@@ -204,8 +204,10 @@ class RendererCairo(RendererBase):\n             ctx.select_font_face(*_cairo_font_args_from_font_prop(prop))\n             ctx.set_font_size(self.points_to_pixels(prop.get_size_in_points()))\n             opts = cairo.FontOptions()\n+            # Use antialiased from gc if set, otherwise fall back to rcParams\n+            antialiased = gc.get_antialiased() if gc._antialiased != 1 else mpl.rcParams[\"text.antialiased\"]\n             opts.set_antialias(\n-                cairo.ANTIALIAS_DEFAULT if mpl.rcParams[\"text.antialiased\"]\n+                cairo.ANTIALIAS_DEFAULT if antialiased\n                 else cairo.ANTIALIAS_NONE)\n             ctx.set_font_options(opts)\n             if angle:\ndiff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 4591316cf9..f5ca39cfd6 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -183,6 +183,7 @@ class Text(Artist):\n         self._transform_rotates_text = transform_rotates_text\n         self._bbox_patch = None  # a FancyBboxPatch instance\n         self._renderer = None\n+        self._antialiased = None  # Use rcParams by default\n         if linespacing is None:\n             linespacing = 1.2  # Maybe use rcParam later.\n         self.set_linespacing(linespacing)\n@@ -738,6 +739,10 @@ class Text(Artist):\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n             self._set_gc_clip(gc)\n+            \n+            # Set antialiased property if it's explicitly set\n+            if self._antialiased is not None:\n+                gc.set_antialiased(self._antialiased)\n \n             angle = self.get_rotation()\n \n@@ -1316,6 +1321,29 @@ class Text(Artist):\n     def get_parse_math(self):\n         \"\"\"Return whether mathtext parsing is considered for this `Text`.\"\"\"\n         return self._parse_math\n+        \n+    def get_antialiased(self):\n+        \"\"\"\n+        Return whether to use antialiased rendering.\n+        \n+        Returns\n+        -------\n+        bool or None\n+            If None, use the value from rcParams['text.antialiased'].\n+        \"\"\"\n+        return self._antialiased\n+        \n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+        \n+        Parameters\n+        ----------\n+        b : bool or None\n+            If None, use the value from rcParams['text.antialiased'].\n+        \"\"\"\n+        self._antialiased = b\n+        self.stale = True\n \n     def set_fontname(self, fontname):\n         \"\"\"\n"}