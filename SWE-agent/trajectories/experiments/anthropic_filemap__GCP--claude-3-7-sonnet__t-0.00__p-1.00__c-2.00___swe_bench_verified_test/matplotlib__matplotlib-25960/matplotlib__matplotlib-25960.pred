{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex dab2bc4a5a..a5b3fb60c8 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2276,10 +2276,59 @@ class SubFigure(FigureBase):\n         gs = self._subplotspec.get_gridspec()\n         wr = np.asarray(gs.get_width_ratios())\n         hr = np.asarray(gs.get_height_ratios())\n-        dx = wr[self._subplotspec.colspan].sum() / wr.sum()\n-        dy = hr[self._subplotspec.rowspan].sum() / hr.sum()\n-        x0 = wr[:self._subplotspec.colspan.start].sum() / wr.sum()\n-        y0 = 1 - hr[:self._subplotspec.rowspan.stop].sum() / hr.sum()\n+        \n+        # Get the wspace and hspace values from the gridspec\n+        wspace = gs.wspace\n+        hspace = gs.hspace\n+        \n+        # Calculate the total number of rows and columns\n+        nrows, ncols = gs.get_geometry()\n+        \n+        # Calculate the width and height of each cell, accounting for spacing\n+        total_width = 1.0\n+        total_height = 1.0\n+        \n+        # Calculate the width of each column, accounting for spacing\n+        if wspace is not None:\n+            # Ensure wspace is not negative to avoid overlapping subfigures\n+            wspace_safe = max(0, wspace)\n+            # The width of all columns plus the spacing between them equals the total width\n+            # ncols * col_width + (ncols - 1) * spacing = total_width\n+            # col_width = (total_width - (ncols - 1) * spacing) / ncols\n+            col_width = total_width / (ncols + wspace_safe * (ncols - 1))\n+            spacing_width = wspace_safe * col_width\n+        else:\n+            col_width = total_width / ncols\n+            spacing_width = 0\n+            \n+        # Calculate the height of each row, accounting for spacing\n+        if hspace is not None:\n+            # Ensure hspace is not negative to avoid overlapping subfigures\n+            hspace_safe = max(0, hspace)\n+            # The height of all rows plus the spacing between them equals the total height\n+            # nrows * row_height + (nrows - 1) * spacing = total_height\n+            # row_height = (total_height - (nrows - 1) * spacing) / nrows\n+            row_height = total_height / (nrows + hspace_safe * (nrows - 1))\n+            spacing_height = hspace_safe * row_height\n+        else:\n+            row_height = total_height / nrows\n+            spacing_height = 0\n+            \n+        # Calculate the width and height of this subfigure\n+        colspan_size = self._subplotspec.colspan.stop - self._subplotspec.colspan.start\n+        rowspan_size = self._subplotspec.rowspan.stop - self._subplotspec.rowspan.start\n+        \n+        # Calculate the width of this subfigure, accounting for spacing\n+        dx = colspan_size * col_width + (colspan_size - 1) * spacing_width\n+        \n+        # Calculate the height of this subfigure, accounting for spacing\n+        dy = rowspan_size * row_height + (rowspan_size - 1) * spacing_height\n+        \n+        # Calculate the position of this subfigure\n+        x0 = self._subplotspec.colspan.start * (col_width + spacing_width)\n+        y0 = 1.0 - (self._subplotspec.rowspan.stop * row_height + \n+                   (self._subplotspec.rowspan.stop - 1) * spacing_height)\n+        \n         if self.bbox_relative is None:\n             self.bbox_relative = Bbox.from_bounds(x0, y0, dx, dy)\n         else:\n"}