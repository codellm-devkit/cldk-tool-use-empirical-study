{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "scikit-learn__scikit-learn-25102", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 5f76c2cc9..5c90da156 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -271,7 +271,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         except (TypeError, ValueError):\n             self.transformers = value\n \n-    def set_output(self, *, transform=None):\n+    def set_output(self, *, transform=None, preserve_dtypes=None):\n         \"\"\"Set the output container when `\"transform\"` and `\"fit_transform\"` are called.\n \n         Calling `set_output` will set the output of all estimators in `transformers`\n@@ -285,13 +285,21 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             - `\"default\"`: Default output format of a transformer\n             - `\"pandas\"`: DataFrame output\n             - `None`: Transform configuration is unchanged\n+            \n+        preserve_dtypes : bool, default=None\n+            Whether to preserve the dtypes from the input DataFrame when using\n+            pandas output. Only used when `transform=\"pandas\"`.\n+            \n+            - `True`: Preserve original dtypes from input DataFrame\n+            - `False`: Use default dtypes in output DataFrame\n+            - `None`: Preserve dtypes configuration is unchanged\n \n         Returns\n         -------\n         self : estimator instance\n             Estimator instance.\n         \"\"\"\n-        super().set_output(transform=transform)\n+        super().set_output(transform=transform, preserve_dtypes=preserve_dtypes)\n         transformers = (\n             trans\n             for _, trans, _ in chain(\n@@ -300,7 +308,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             if trans not in {\"passthrough\", \"drop\"}\n         )\n         for trans in transformers:\n-            _safe_set_output(trans, transform=transform)\n+            _safe_set_output(trans, transform=transform, preserve_dtypes=preserve_dtypes)\n \n         return self\n \ndiff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 94d9465d7..fb7cffa81 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -154,7 +154,7 @@ class Pipeline(_BaseComposition):\n         self.memory = memory\n         self.verbose = verbose\n \n-    def set_output(self, *, transform=None):\n+    def set_output(self, *, transform=None, preserve_dtypes=None):\n         \"\"\"Set the output container when `\"transform\"` and `\"fit_transform\"` are called.\n \n         Calling `set_output` will set the output of all estimators in `steps`.\n@@ -167,6 +167,14 @@ class Pipeline(_BaseComposition):\n             - `\"default\"`: Default output format of a transformer\n             - `\"pandas\"`: DataFrame output\n             - `None`: Transform configuration is unchanged\n+            \n+        preserve_dtypes : bool, default=None\n+            Whether to preserve the dtypes from the input DataFrame when using\n+            pandas output. Only used when `transform=\"pandas\"`.\n+            \n+            - `True`: Preserve original dtypes from input DataFrame\n+            - `False`: Use default dtypes in output DataFrame\n+            - `None`: Preserve dtypes configuration is unchanged\n \n         Returns\n         -------\n@@ -174,7 +182,7 @@ class Pipeline(_BaseComposition):\n             Estimator instance.\n         \"\"\"\n         for _, _, step in self._iter():\n-            _safe_set_output(step, transform=transform)\n+            _safe_set_output(step, transform=transform, preserve_dtypes=preserve_dtypes)\n         return self\n \n     def get_params(self, deep=True):\n@@ -1027,7 +1035,7 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         self.transformer_weights = transformer_weights\n         self.verbose = verbose\n \n-    def set_output(self, *, transform=None):\n+    def set_output(self, *, transform=None, preserve_dtypes=None):\n         \"\"\"Set the output container when `\"transform\"` and `\"fit_transform\"` are called.\n \n         `set_output` will set the output of all estimators in `transformer_list`.\n@@ -1040,15 +1048,23 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n             - `\"default\"`: Default output format of a transformer\n             - `\"pandas\"`: DataFrame output\n             - `None`: Transform configuration is unchanged\n+            \n+        preserve_dtypes : bool, default=None\n+            Whether to preserve the dtypes from the input DataFrame when using\n+            pandas output. Only used when `transform=\"pandas\"`.\n+            \n+            - `True`: Preserve original dtypes from input DataFrame\n+            - `False`: Use default dtypes in output DataFrame\n+            - `None`: Preserve dtypes configuration is unchanged\n \n         Returns\n         -------\n         self : estimator instance\n             Estimator instance.\n         \"\"\"\n-        super().set_output(transform=transform)\n+        super().set_output(transform=transform, preserve_dtypes=preserve_dtypes)\n         for _, step, _ in self._iter():\n-            _safe_set_output(step, transform=transform)\n+            _safe_set_output(step, transform=transform, preserve_dtypes=preserve_dtypes)\n         return self\n \n     @property\ndiff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..44d8ed285 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    dtypes=None,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -35,6 +36,10 @@ def _wrap_in_pandas_container(\n \n     index : array-like, default=None\n         Index for data.\n+        \n+    dtypes : dict or pandas.Series, default=None\n+        The data types to use for the columns in the output DataFrame.\n+        If not None, the output DataFrame will use these dtypes.\n \n     Returns\n     -------\n@@ -57,9 +62,24 @@ def _wrap_in_pandas_container(\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        # Apply dtypes if provided\n+        if dtypes is not None:\n+            # Filter dtypes to only include columns that exist in the output\n+            filtered_dtypes = {col: dtype for col, dtype in dtypes.items() \n+                              if col in data_to_wrap.columns}\n+            if filtered_dtypes:\n+                data_to_wrap = data_to_wrap.astype(filtered_dtypes)\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    # Apply dtypes if provided\n+    if dtypes is not None:\n+        # Filter dtypes to only include columns that exist in the output\n+        filtered_dtypes = {col: dtype for col, dtype in dtypes.items() \n+                          if col in df.columns}\n+        if filtered_dtypes:\n+            df = df.astype(filtered_dtypes)\n+    return df\n \n \n def _get_output_config(method, estimator=None):\n@@ -81,10 +101,14 @@ def _get_output_config(method, estimator=None):\n \n         - \"dense\": specifies the dense container for `method`. This can be\n           `\"default\"` or `\"pandas\"`.\n+        - \"preserve_dtypes\": specifies whether to preserve dtypes from the input.\n+          This can be `True` or `False`.\n     \"\"\"\n     est_sklearn_output_config = getattr(estimator, \"_sklearn_output_config\", {})\n-    if method in est_sklearn_output_config:\n-        dense_config = est_sklearn_output_config[method]\n+    \n+    # Get dense config\n+    if method in est_sklearn_output_config and \"dense\" in est_sklearn_output_config[method]:\n+        dense_config = est_sklearn_output_config[method][\"dense\"]\n     else:\n         dense_config = get_config()[f\"{method}_output\"]\n \n@@ -92,8 +116,16 @@ def _get_output_config(method, estimator=None):\n         raise ValueError(\n             f\"output config must be 'default' or 'pandas' got {dense_config}\"\n         )\n-\n-    return {\"dense\": dense_config}\n+    \n+    # Get preserve_dtypes config\n+    if (method in est_sklearn_output_config and \n+        \"preserve_dtypes\" in est_sklearn_output_config[method]):\n+        preserve_dtypes = est_sklearn_output_config[method][\"preserve_dtypes\"]\n+    else:\n+        # Default to False for backward compatibility\n+        preserve_dtypes = False\n+    \n+    return {\"dense\": dense_config, \"preserve_dtypes\": preserve_dtypes}\n \n \n def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n@@ -127,10 +159,15 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    dtypes = None\n+    if output_config[\"preserve_dtypes\"] and hasattr(original_input, \"dtypes\"):\n+        dtypes = original_input.dtypes\n+    \n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n         index=getattr(original_input, \"index\", None),\n         columns=estimator.get_feature_names_out,\n+        dtypes=dtypes,\n     )\n \n \n@@ -208,7 +245,7 @@ class _SetOutputMixin:\n             setattr(cls, method, wrapped_method)\n \n     @available_if(_auto_wrap_is_configured)\n-    def set_output(self, *, transform=None):\n+    def set_output(self, *, transform=None, preserve_dtypes=None):\n         \"\"\"Set output container.\n \n         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n@@ -222,23 +259,39 @@ class _SetOutputMixin:\n             - `\"default\"`: Default output format of a transformer\n             - `\"pandas\"`: DataFrame output\n             - `None`: Transform configuration is unchanged\n+            \n+        preserve_dtypes : bool, default=None\n+            Whether to preserve the dtypes from the input DataFrame when using\n+            pandas output. Only used when `transform=\"pandas\"`.\n+            \n+            - `True`: Preserve original dtypes from input DataFrame\n+            - `False`: Use default dtypes in output DataFrame\n+            - `None`: Preserve dtypes configuration is unchanged\n \n         Returns\n         -------\n         self : estimator instance\n             Estimator instance.\n         \"\"\"\n-        if transform is None:\n+        if transform is None and preserve_dtypes is None:\n             return self\n \n         if not hasattr(self, \"_sklearn_output_config\"):\n             self._sklearn_output_config = {}\n-\n-        self._sklearn_output_config[\"transform\"] = transform\n+            \n+        if \"transform\" not in self._sklearn_output_config:\n+            self._sklearn_output_config[\"transform\"] = {}\n+\n+        if transform is not None:\n+            self._sklearn_output_config[\"transform\"][\"dense\"] = transform\n+            \n+        if preserve_dtypes is not None:\n+            self._sklearn_output_config[\"transform\"][\"preserve_dtypes\"] = preserve_dtypes\n+            \n         return self\n \n \n-def _safe_set_output(estimator, *, transform=None):\n+def _safe_set_output(estimator, *, transform=None, preserve_dtypes=None):\n     \"\"\"Safely call estimator.set_output and error if it not available.\n \n     This is used by meta-estimators to set the output for child estimators.\n@@ -255,6 +308,14 @@ def _safe_set_output(estimator, *, transform=None):\n         - `\"fit_transform\"`\n \n         If `None`, this operation is a no-op.\n+        \n+    preserve_dtypes : bool, default=None\n+        Whether to preserve the dtypes from the input DataFrame when using\n+        pandas output. Only used when `transform=\"pandas\"`.\n+        \n+        - `True`: Preserve original dtypes from input DataFrame\n+        - `False`: Use default dtypes in output DataFrame\n+        - `None`: Preserve dtypes configuration is unchanged\n \n     Returns\n     -------\n@@ -264,7 +325,7 @@ def _safe_set_output(estimator, *, transform=None):\n     set_output_for_transform = (\n         hasattr(estimator, \"transform\")\n         or hasattr(estimator, \"fit_transform\")\n-        and transform is not None\n+        and (transform is not None or preserve_dtypes is not None)\n     )\n     if not set_output_for_transform:\n         # If estimator can not transform, then `set_output` does not need to be\n@@ -276,4 +337,4 @@ def _safe_set_output(estimator, *, transform=None):\n             f\"Unable to configure output for {estimator} because `set_output` \"\n             \"is not available.\"\n         )\n-    return estimator.set_output(transform=transform)\n+    return estimator.set_output(transform=transform, preserve_dtypes=preserve_dtypes)\n"}