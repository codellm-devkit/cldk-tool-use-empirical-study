diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..e84d6ac4ff 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1110,6 +1110,17 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
         ast.BitAnd: 'And',
         ast.BitXor: 'Not',
     }
+    
+    # Map Python comparison operators to SymPy relational classes
+    comparison_operators = {
+        ast.Lt: 'Lt',    # <
+        ast.Gt: 'Gt',    # >
+        ast.LtE: 'Le',   # <=
+        ast.GtE: 'Ge',   # >=
+        ast.Eq: 'Eq',    # ==
+        ast.NotEq: 'Ne', # !=
+    }
+    
     functions = (
         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',
         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',
@@ -1185,6 +1196,30 @@ def visit_BinOp(self, node):
 
             return new_node
         return node
+        
+    def visit_Compare(self, node):
+        """Handle comparison operators like <, >, <=, >=, ==, !="""
+        # Python's AST for comparisons can have multiple comparisons (e.g., a < b < c)
+        # but we'll just handle the first one as SymPy doesn't support chained comparisons
+        if len(node.ops) == 1 and node.ops[0].__class__ in self.comparison_operators:
+            sympy_class = self.comparison_operators[node.ops[0].__class__]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            
+            new_node = ast.Call(
+                func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                starargs=None,
+                kwargs=None
+            )
+            
+            return new_node
+        
+        # If we can't handle this comparison, just visit its children
+        node.left = self.visit(node.left)
+        node.comparators = [self.visit(comparator) for comparator in node.comparators]
+        return node
 
     def visit_Call(self, node):
         new_node = self.generic_visit(node)
