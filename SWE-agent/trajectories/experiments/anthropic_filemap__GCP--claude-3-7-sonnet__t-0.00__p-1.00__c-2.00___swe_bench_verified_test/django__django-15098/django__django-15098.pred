{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-15098", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 6ea18dd22f..8a739a7e11 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -324,7 +324,39 @@ class LocalePrefixPattern:\n         language_prefix = self.language_prefix\n         if path.startswith(language_prefix):\n             return path[len(language_prefix):], (), {}\n+        \n+        # If the language prefix is empty (default language with prefix_default_language=False)\n+        # and the path doesn't have a language prefix, we should match the path as is\n+        if language_prefix == '' and not self._has_language_prefix(path):\n+            return path, (), {}\n+        \n+        # Check if the path starts with a language code from LANGUAGES\n+        languages = getattr(settings, 'LANGUAGES', [])\n+        path_lower = path.lower()\n+        for language_code, language_name in languages:\n+            # Skip the default language if prefix_default_language is False\n+            if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:\n+                continue\n+                \n+            language_path = f\"{language_code.lower()}/\"\n+            if path_lower.startswith(language_path):\n+                # Use the original case from the path\n+                prefix_len = len(language_path)\n+                return path[prefix_len:], (), {}\n+        \n         return None\n+        \n+    def _has_language_prefix(self, path):\n+        \"\"\"Check if the path starts with any language code from LANGUAGES.\"\"\"\n+        languages = getattr(settings, 'LANGUAGES', [])\n+        path_lower = path.lower()\n+        \n+        for language_code, language_name in languages:\n+            language_path = f\"{language_code.lower()}/\"\n+            if path_lower.startswith(language_path):\n+                return True\n+                \n+        return False\n \n     def check(self):\n         return []\n"}