{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 06768168e..aea4fbb75 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -57,16 +57,26 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n \n+        # For classes, we don't want to include the return type annotation\n+        # from the __init__ method\n+        if objtype == 'class':\n+            annotations_copy = annotations[fullname].copy()\n+            if 'return' in annotations_copy:\n+                del annotations_copy['return']\n+            annotations_to_use = annotations_copy\n+        else:\n+            annotations_to_use = annotations[fullname]\n+\n         for field_list in field_lists:\n             if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n+                modify_field_list(field_list, annotations_to_use)\n             elif app.config.autodoc_typehints_description_target == \"documented_params\":\n                 augment_descriptions_with_types(\n-                    field_list, annotations[fullname], force_rtype=True\n+                    field_list, annotations_to_use, force_rtype=(objtype != 'class')\n                 )\n             else:\n                 augment_descriptions_with_types(\n-                    field_list, annotations[fullname], force_rtype=False\n+                    field_list, annotations_to_use, force_rtype=(objtype != 'class')\n                 )\n \n \n@@ -126,7 +136,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n         node += field\n \n \n@@ -171,8 +181,10 @@ def augment_descriptions_with_types(\n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n         rtype = annotations['return']\n+        # For functions, we always want to show the return type\n+        # For other objects, we only show it if it's explicitly described or forced\n         if 'return' not in has_type and ('return' in has_description or\n-                                         (force_rtype and rtype != \"None\")):\n+                                         force_rtype or rtype != \"None\"):\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n             field += nodes.field_body('', nodes.paragraph('', rtype))\ndiff --git a/tox.ini b/tox.ini\nindex 105a02597..90ada0821 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -29,7 +29,7 @@ setenv =\n     PYTHONWARNINGS = all\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}\n+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}\n \n [testenv:du-latest]\n commands =\n"}