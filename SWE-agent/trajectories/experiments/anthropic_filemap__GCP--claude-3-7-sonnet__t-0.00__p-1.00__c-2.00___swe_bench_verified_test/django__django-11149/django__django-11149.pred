{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 880a2cc17b..792a1f1183 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2047,9 +2047,26 @@ class InlineModelAdmin(BaseModelAdmin):\n         base_model_form = defaults['form']\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n-\n-        class DeleteProtectedModelForm(base_model_form):\n-\n+        can_view = self.has_view_permission(request, obj) if request else True\n+\n+        class ReadOnlyModelForm(base_model_form):\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                if can_view and not can_change:\n+                    for field_name, field in self.fields.items():\n+                        # Ensure the widget has an attrs dictionary\n+                        if not hasattr(field.widget, 'attrs'):\n+                            field.widget.attrs = {}\n+                        \n+                        # Set the field as disabled\n+                        field.widget.attrs['disabled'] = 'disabled'\n+                        field.widget.attrs['readonly'] = True\n+                        \n+                        # Also set the field's disabled attribute if it has one\n+                        if hasattr(field, 'disabled'):\n+                            field.disabled = True\n+\n+        class DeleteProtectedModelForm(ReadOnlyModelForm):\n             def hand_clean_DELETE(self):\n                 \"\"\"\n                 We don't validate the 'DELETE' field itself because on\n@@ -2100,7 +2117,33 @@ class InlineModelAdmin(BaseModelAdmin):\n         if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n             defaults['fields'] = forms.ALL_FIELDS\n \n-        return inlineformset_factory(self.parent_model, self.model, **defaults)\n+        # Create the formset class\n+        FormSet = inlineformset_factory(self.parent_model, self.model, **defaults)\n+        \n+        # If the user only has view permission, override the formset's __init__ method\n+        # to disable all fields in all forms\n+        if self.has_view_permission(request, obj) and not self.has_change_permission(request, obj):\n+            original_init = FormSet.__init__\n+            \n+            def new_init(self, *args, **kwargs):\n+                original_init(self, *args, **kwargs)\n+                for form in self.forms:\n+                    for field_name, field in form.fields.items():\n+                        # Ensure the widget has an attrs dictionary\n+                        if not hasattr(field.widget, 'attrs'):\n+                            field.widget.attrs = {}\n+                        \n+                        # Set the field as disabled\n+                        field.widget.attrs['disabled'] = 'disabled'\n+                        field.widget.attrs['readonly'] = True\n+                        \n+                        # Also set the field's disabled attribute if it has one\n+                        if hasattr(field, 'disabled'):\n+                            field.disabled = True\n+            \n+            FormSet.__init__ = new_init\n+        \n+        return FormSet\n \n     def _get_form_for_get_fields(self, request, obj=None):\n         return self.get_formset(request, obj, fields=None).form\n@@ -2115,28 +2158,44 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to add intermediate model instances.\n+            opts = self._get_related_model_opts()\n+            return (\n+                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('add', opts))) or\n+                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n+            )\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to change intermediate model instances.\n+            opts = self._get_related_model_opts()\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to delete intermediate model instances.\n+            opts = self._get_related_model_opts()\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_delete_permission(request, obj)\n+        \n+    def _get_related_model_opts(self):\n+        # Helper method to get the options for the related model\n+        opts = self.opts\n+        # The model was auto-created as intermediary for a many-to-many\n+        # relationship; find the target model.\n+        for field in opts.fields:\n+            if field.remote_field and field.remote_field.model != self.parent_model:\n+                return field.remote_field.model._meta\n+        return opts\n \n     def has_view_permission(self, request, obj=None):\n         if self.opts.auto_created:\n"}