{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex b48d0df9c0..5838833ec1 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -211,6 +211,17 @@ class QuerySet:\n     @query.setter\n     def query(self, value):\n         self._query = value\n+        # If the query is a values query, set the appropriate iterable class\n+        if hasattr(value, 'is_values_query') and value.is_values_query:\n+            if hasattr(value, 'is_values_list_query') and value.is_values_list_query:\n+                if value.is_named_values_list:\n+                    self._iterable_class = NamedValuesListIterable\n+                elif value.is_flat_values_list:\n+                    self._iterable_class = FlatValuesListIterable\n+                else:\n+                    self._iterable_class = ValuesListIterable\n+            else:\n+                self._iterable_class = ValuesIterable\n \n     def as_manager(cls):\n         # Address the circular dependency between `Queryset` and `Manager`.\n@@ -855,6 +866,11 @@ class QuerySet:\n                 _fields.append(field)\n \n         clone = self._values(*_fields, **expressions)\n+        # Set the values_list flags on the query\n+        clone.query.is_values_list_query = True\n+        clone.query.is_flat_values_list = flat\n+        clone.query.is_named_values_list = named\n+        \n         clone._iterable_class = (\n             NamedValuesListIterable if named\n             else FlatValuesListIterable if flat\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..513d689094 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -152,6 +152,8 @@ class Query(BaseExpression):\n         self.alias_map = {}\n         # Whether to provide alias to columns during reference resolving.\n         self.alias_cols = alias_cols\n+        # Flag to indicate if this query is a values query\n+        self.is_values_query = False\n         # Sometimes the query contains references to aliases in outer queries (as\n         # a result of split_exclude). Correct alias quoting needs to know these\n         # aliases too.\n@@ -2181,6 +2183,12 @@ class Query(BaseExpression):\n         self.select_related = False\n         self.clear_deferred_loading()\n         self.clear_select_fields()\n+        # Store the fact that this is a values query\n+        self.is_values_query = bool(fields)\n+        # Initialize values_list attributes\n+        self.is_values_list_query = False\n+        self.is_flat_values_list = False\n+        self.is_named_values_list = False\n \n         if fields:\n             field_names = []\n"}