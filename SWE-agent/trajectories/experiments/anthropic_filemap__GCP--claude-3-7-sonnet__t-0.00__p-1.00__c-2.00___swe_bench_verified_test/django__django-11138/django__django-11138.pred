{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-11138", "model_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 50f85e0621..2257f07d11 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -70,7 +70,12 @@ class DatabaseOperations(BaseDatabaseOperations):\n \n     def _convert_field_to_tz(self, field_name, tzname):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            # Get the database's timezone setting, default to UTC if not specified\n+            db_timezone = self.connection.settings_dict.get('TIME_ZONE', 'UTC')\n+            # If the database timezone and the target timezone are the same,\n+            # no conversion is needed\n+            if db_timezone != tzname:\n+                field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, db_timezone, tzname)\n         return field_name\n \n     def datetime_cast_date_sql(self, field_name, tzname):\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex c1afb2ed5e..3e4b3266b3 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -99,9 +99,31 @@ END;\n             return field_name\n         if not self._tzname_re.match(tzname):\n             raise ValueError(\"Invalid time zone name: %s\" % tzname)\n-        # Convert from UTC to local time, returning TIMESTAMP WITH TIME ZONE\n-        # and cast it back to TIMESTAMP to strip the TIME ZONE details.\n-        return \"CAST((FROM_TZ(%s, '0:00') AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+            \n+        # Get the database's timezone setting, default to UTC\n+        db_timezone = self.connection.settings_dict.get('TIME_ZONE')\n+        \n+        # If database timezone is specified and equals the target timezone,\n+        # no conversion is needed\n+        if db_timezone and db_timezone == tzname:\n+            return field_name\n+            \n+        # Oracle stores timestamps in the database's timezone, which is either\n+        # the TIME_ZONE specified in the database settings or UTC if not specified.\n+        # We need to convert from this timezone to the target timezone.\n+        \n+        # For Oracle, we use FROM_TZ to interpret the timestamp in the database timezone,\n+        # then convert to the target timezone with AT TIME ZONE.\n+        source_tz = db_timezone if db_timezone else '0:00'  # Default to UTC if not specified\n+        \n+        # If source_tz is a named timezone (not an offset), we need to use it directly\n+        if source_tz != '0:00' and self._tzname_re.match(source_tz):\n+            return \"CAST((%s AT TIME ZONE '%s') AS TIMESTAMP)\" % (field_name, tzname)\n+        else:\n+            # Use the offset format for UTC\n+            return \"CAST((FROM_TZ(%s, '%s') AT TIME ZONE '%s') AS TIMESTAMP)\" % (\n+                field_name, source_tz, tzname\n+            )\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex c4b02e5c60..7e0aaf9654 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -85,7 +85,18 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return \"django_time_trunc('%s', %s)\" % (lookup_type.lower(), field_name)\n \n     def _convert_tzname_to_sql(self, tzname):\n-        return \"'%s'\" % tzname if settings.USE_TZ else 'NULL'\n+        if not settings.USE_TZ:\n+            return 'NULL'\n+        \n+        # Get the database's timezone setting\n+        db_timezone = self.connection.settings_dict.get('TIME_ZONE')\n+        \n+        # If database timezone is specified and equals the target timezone,\n+        # we can use NULL to avoid unnecessary conversion\n+        if db_timezone and db_timezone == tzname:\n+            return 'NULL'\n+            \n+        return \"'%s'\" % tzname\n \n     def datetime_cast_date_sql(self, field_name, tzname):\n         return \"django_datetime_cast_date(%s, %s)\" % (\n"}