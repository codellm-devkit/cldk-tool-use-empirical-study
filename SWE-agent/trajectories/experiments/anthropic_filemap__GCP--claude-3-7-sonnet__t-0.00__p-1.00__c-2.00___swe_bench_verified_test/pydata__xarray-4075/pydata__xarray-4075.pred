{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-4075", "model_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 996d2e4c..b54eb454 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,10 @@ class Weighted:\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        # Convert boolean weights to numeric to ensure proper summation\n+        weights = self.weights * 1 if self.weights.dtype == bool else self.weights\n+        \n+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\ndiff --git a/xarray/tests/test_weighted.py b/xarray/tests/test_weighted.py\nindex 24531215..1ede8db4 100644\n--- a/xarray/tests/test_weighted.py\n+++ b/xarray/tests/test_weighted.py\n@@ -139,6 +139,27 @@ def test_weighted_mean_no_nan(weights, expected):\n     assert_equal(expected, result)\n \n \n+def test_weighted_mean_bool_weights():\n+    \"\"\"Test that boolean weights work correctly.\"\"\"\n+    da = DataArray([1., 1., 1.])\n+    weights = DataArray(np.array([True, True, False]))\n+    \n+    # Test weighted mean\n+    expected = DataArray(1.0)\n+    result = da.weighted(weights).mean()\n+    assert_equal(expected, result)\n+    \n+    # Test sum of weights\n+    expected_weights = DataArray(2.0)\n+    result_weights = da.weighted(weights).sum_of_weights()\n+    assert_equal(expected_weights, result_weights)\n+    \n+    # Test that bool weights give same result as int weights\n+    weights_int = DataArray(np.array([1, 1, 0]))\n+    result_int = da.weighted(weights_int).mean()\n+    assert_equal(result, result_int)\n+\n+\n @pytest.mark.parametrize(\n     (\"weights\", \"expected\"), (([4, 6], 2.0), ([1, 0], np.nan), ([0, 0], np.nan))\n )\n"}