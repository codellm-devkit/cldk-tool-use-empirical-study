diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py
index fff7da80ae..b5948b4c97 100644
--- a/sympy/stats/crv_types.py
+++ b/sympy/stats/crv_types.py
@@ -47,7 +47,7 @@
 
 from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,
                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,
-                   Lambda, Basic, lowergamma, erf, erfc, I)
+                   Lambda, Basic, lowergamma, uppergamma, erf, erfc, I, asin, hyper)
 from sympy import beta as beta_fn
 from sympy import cos, exp, besseli
 from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,
@@ -152,6 +152,14 @@ class ArcsinDistribution(SingleContinuousDistribution):
 
     def pdf(self, x):
         return 1/(pi*sqrt((x - self.a)*(self.b - x)))
+        
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x < a),
+            (2*asin(sqrt((x - a)/(b - a)))/pi, x <= b),
+            (S.One, True)
+        )
 
 def Arcsin(name, a=0, b=1):
     r"""
@@ -669,6 +677,14 @@ class DagumDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         p, a, b = self.p, self.a, self.b
         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))
+        
+    def _cdf(self, x):
+        p, a, b = self.p, self.a, self.b
+        return Piecewise(
+            (S.Zero, x <= 0),
+            ((1 + (x/b)**(-a))**(-p), x > 0),
+            (S.One, True)
+        )
 
 
 def Dagum(name, p, a, b):
@@ -1041,6 +1057,14 @@ def __new__(cls, a, s=1, m=0):
     def pdf(self, x):
         a, s, m = self.a, self.s, self.m
         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))
+        
+    def _cdf(self, x):
+        a, s, m = self.a, self.s, self.m
+        return Piecewise(
+            (S.Zero, x <= m),
+            (exp(-((x-m)/s)**(-a)), x > m),
+            (S.One, True)
+        )
 
 def Frechet(name, a, s=1, m=0):
     r"""
@@ -1108,6 +1132,14 @@ def pdf(self, x):
         k, theta = self.k, self.theta
         return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)
 
+    def _cdf(self, x):
+        k, theta = self.k, self.theta
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (lowergamma(k, x/theta)/gamma(k), x > 0),
+            (S.One, True)
+        )
+
     def sample(self):
         return random.gammavariate(self.k, self.theta)
 
@@ -1199,6 +1231,14 @@ def check(a, b):
     def pdf(self, x):
         a, b = self.a, self.b
         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)
+        
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x <= 0),
+            (uppergamma(a, b/x)/gamma(a), x > 0),
+            (S.One, True)
+        )
 
 def GammaInverse(name, a, b):
     r"""
@@ -1374,7 +1414,7 @@ def Gompertz(name, b, eta):
 class KumaraswamyDistribution(SingleContinuousDistribution):
     _argnames = ('a', 'b')
 
-    set = Interval(0, oo)
+    set = Interval(0, 1)
 
     @staticmethod
     def check(a, b):
@@ -1384,6 +1424,14 @@ def check(a, b):
     def pdf(self, x):
         a, b = self.a, self.b
         return a * b * x**(a-1) * (1-x**a)**(b-1)
+        
+    def _cdf(self, x):
+        a, b = self.a, self.b
+        return Piecewise(
+            (S.Zero, x < 0),
+            (1 - (1 - x**a)**b, x <= 1),
+            (S.One, True)
+        )
 
 def Kumaraswamy(name, a, b):
     r"""
@@ -1444,6 +1492,13 @@ class LaplaceDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         mu, b = self.mu, self.b
         return 1/(2*b)*exp(-Abs(x - mu)/b)
+        
+    def _cdf(self, x):
+        mu, b = self.mu, self.b
+        return Piecewise(
+            (S.Half*exp((x - mu)/b), x < mu),
+            (1 - S.Half*exp(-(x - mu)/b), True)
+        )
 
 
 def Laplace(name, mu, b):
@@ -1500,6 +1555,10 @@ class LogisticDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         mu, s = self.mu, self.s
         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)
+        
+    def _cdf(self, x):
+        mu, s = self.mu, self.s
+        return 1/(1 + exp(-(x - mu)/s))
 
 
 def Logistic(name, mu, s):
@@ -1710,6 +1769,14 @@ class NakagamiDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         mu, omega = self.mu, self.omega
         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)
+        
+    def _cdf(self, x):
+        mu, omega = self.mu, self.omega
+        return Piecewise(
+            (S.Zero, x < 0),
+            (lowergamma(mu, mu/omega*x**2)/gamma(mu), x >= 0),
+            (S.One, True)
+        )
 
 
 def Nakagami(name, mu, omega):
@@ -2226,6 +2293,30 @@ class StudentTDistribution(SingleContinuousDistribution):
     def pdf(self, x):
         nu = self.nu
         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)
+        
+    def _cdf(self, x):
+        nu = self.nu
+        # For x > 0, the CDF is 1/2 + x*gamma((nu+1)/2)/(sqrt(nu*pi)*gamma(nu/2)) *
+        # hypergeometric(1/2, 3/2, (nu+1)/2, -x**2/nu)
+        # We'll use the fact that CDF(-x) = 1 - CDF(x)
+        
+        # Using a simpler formula based on the regularized incomplete beta function
+        # CDF = 1/2 + x*gamma((nu+1)/2)/(sqrt(nu*pi)*gamma(nu/2)) * 
+        #       2F1(1/2, (nu+1)/2, 3/2, -x**2/nu)
+        
+        # For Student's t-distribution, we can use a simpler formula:
+        # For x >= 0: CDF = 1/2 + 1/2 * betainc(nu/2, 1/2, nu/(nu + x**2))
+        # For x < 0: CDF = 1/2 - 1/2 * betainc(nu/2, 1/2, nu/(nu + x**2))
+        
+        # Since SymPy doesn't have a direct betainc function, we'll use the relationship
+        # with the incomplete beta function
+        
+        # For now, let's use a simpler approach
+        return Piecewise(
+            (S.Half, Eq(x, 0)),
+            (S.Half + S.Half*beta_fn(nu/2, S.Half)*(1 - nu/(nu + x**2))**(nu/2), x > 0),
+            (S.Half - S.Half*beta_fn(nu/2, S.Half)*(1 - nu/(nu + x**2))**(nu/2), True)
+        )
 
 
 def StudentT(name, nu):
@@ -2553,6 +2644,15 @@ def pdf(self, x):
         k = Dummy("k")
         return 1/factorial(
             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))
+            
+    def _cdf(self, x):
+        n = self.n
+        k = Dummy("k")
+        return Piecewise(
+            (S.Zero, x < 0),
+            (1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x))), x <= n),
+            (S.One, True)
+        )
 
 
 
