{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-14248", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f682..e375fc7074 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -389,6 +389,7 @@ def _print_Gradient(self, expr):\n     def _print_Mul(self, expr):\n         from sympy.core.power import Pow\n         from sympy.physics.units import Quantity\n+        from sympy.matrices.expressions.matexpr import MatrixExpr\n         include_parens = False\n         if _coeff_isneg(expr):\n             expr = -expr\n@@ -399,6 +400,11 @@ def _print_Mul(self, expr):\n         else:\n             tex = \"\"\n \n+        # Special case for matrix expressions with -1 coefficient\n+        if len(expr.args) >= 2 and expr.args[0] == S.NegativeOne and any(isinstance(arg, MatrixExpr) for arg in expr.args[1:]):\n+            args = list(expr.args[1:])\n+            return \"- \" + \" \".join(self._print(arg) for arg in args)\n+\n         from sympy.simplify import fraction\n         numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n@@ -1356,7 +1362,8 @@ def _print_Symbol(self, expr):\n             '\\\\' not in expr.name else expr.name\n \n     _print_RandomSymbol = _print_Symbol\n-    _print_MatrixSymbol = _print_Symbol\n+    def _print_MatrixSymbol(self, expr):\n+        return self._print_Symbol(expr)\n \n     def _deal_with_super_sub(self, string):\n         if '{' in string:\n@@ -1478,17 +1485,42 @@ def _print_Adjoint(self, expr):\n \n     def _print_MatAdd(self, expr):\n         terms = list(expr.args)\n-        tex = \" + \".join(map(self._print, terms))\n+        tex = \"\"\n+        for i, term in enumerate(terms):\n+            if i == 0:\n+                if _coeff_isneg(term):\n+                    tex += \"- \"\n+                    term = -term\n+            elif _coeff_isneg(term):\n+                tex += \" - \"\n+                term = -term\n+            else:\n+                tex += \" + \"\n+            term_tex = self._print(term)\n+            if self._needs_add_brackets(term):\n+                term_tex = r\"\\left(%s\\right)\" % term_tex\n+            tex += term_tex\n         return tex\n \n     def _print_MatMul(self, expr):\n         from sympy import Add, MatAdd, HadamardProduct\n-\n-        def parens(x):\n-            if isinstance(x, (Add, MatAdd, HadamardProduct)):\n-                return r\"\\left(%s\\right)\" % self._print(x)\n-            return self._print(x)\n-        return ' '.join(map(parens, expr.args))\n+        from sympy.core.numbers import NegativeOne\n+\n+        # Check if the first argument is -1\n+        if len(expr.args) > 0 and expr.args[0] == S.NegativeOne:\n+            # Remove the -1 coefficient and print the rest with a minus sign\n+            rest_args = expr.args[1:]\n+            def parens(x):\n+                if isinstance(x, (Add, MatAdd, HadamardProduct)):\n+                    return r\"\\left(%s\\right)\" % self._print(x)\n+                return self._print(x)\n+            return \"- \" + ' '.join(map(parens, rest_args))\n+        else:\n+            def parens(x):\n+                if isinstance(x, (Add, MatAdd, HadamardProduct)):\n+                    return r\"\\left(%s\\right)\" % self._print(x)\n+                return self._print(x)\n+            return ' '.join(map(parens, expr.args))\n \n     def _print_Mod(self, expr, exp=None):\n         if exp is not None:\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..2a80819c8a 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -819,7 +819,67 @@ def _print_BlockMatrix(self, B):\n         return self._print(B.blocks)\n \n     def _print_MatAdd(self, expr):\n-        return self._print_seq(expr.args, None, None, ' + ')\n+        terms = list(expr.args)\n+        pforms, indices = [], []\n+\n+        def pretty_negative(pform, index):\n+            \"\"\"Prepend a minus sign to a pretty form. \"\"\"\n+            if index == 0:\n+                if pform.height() > 1:\n+                    pform_neg = '- '\n+                else:\n+                    pform_neg = '-'\n+            else:\n+                pform_neg = ' - '\n+\n+            if (pform.binding > prettyForm.NEG\n+                or pform.binding == prettyForm.ADD):\n+                p = stringPict(*pform.parens())\n+            else:\n+                p = pform\n+            p = stringPict.next(pform_neg, p)\n+            return prettyForm(binding=prettyForm.NEG, *p)\n+\n+        for i, term in enumerate(terms):\n+            if term.is_Mul and _coeff_isneg(term):\n+                coeff, other = term.as_coeff_mul(rational=False)\n+                pform = self._print(Mul(-coeff, *other, evaluate=False))\n+                pforms.append(pretty_negative(pform, i))\n+            elif term.is_Rational and term.q > 1:\n+                pforms.append(None)\n+                indices.append(i)\n+            elif term.is_Number and term < 0:\n+                pform = self._print(-term)\n+                pforms.append(pretty_negative(pform, i))\n+            else:\n+                pforms.append(self._print(term))\n+\n+        if indices:\n+            large = True\n+            for pform in pforms:\n+                if pform is not None and pform.height() > 1:\n+                    break\n+            else:\n+                large = False\n+\n+            for i in indices:\n+                term, negative = terms[i], False\n+\n+                if term < 0:\n+                    term, negative = -term, True\n+\n+                if large:\n+                    pform = prettyForm(str(term.p))/prettyForm(str(term.q))\n+                else:\n+                    pform = self._print(term)\n+\n+                if negative:\n+                    pform = pretty_negative(pform, i)\n+\n+                pforms[i] = pform\n+\n+        result = self._print_seq(pforms, None, None, ' + ')\n+        return result\n \n     def _print_MatMul(self, expr):\n         args = list(expr.args)\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..e2dd7d8331 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -312,8 +312,27 @@ def _print_HadamardProduct(self, expr):\n             for arg in expr.args])\n \n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = list(expr.args)\n+        PREC = precedence(expr)\n+        l = []\n+        for term in terms:\n+            t = self._print(term)\n+            if t.startswith('(-1)*'):\n+                sign = \"-\"\n+                t = t[5:]\n+            elif t.startswith('-'):\n+                sign = \"-\"\n+                t = t[1:]\n+            else:\n+                sign = \"+\"\n+            if precedence(term) < PREC:\n+                l.extend([sign, \"(%s)\" % t])\n+            else:\n+                l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = \"\"\n+        return sign + ' '.join(l)\n \n     def _print_NaN(self, expr):\n         return 'nan'\n"}