{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-10673", "model_patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 35e16e623..1ed5877f4 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -119,16 +119,26 @@ class TocTree(SphinxDirective):\n                 if url_re.match(ref) or ref == 'self':\n                     toctree['entries'].append((title, ref))\n                 elif docname not in self.env.found_docs:\n-                    if excluded(self.env.doc2path(docname, False)):\n+                    # Check if the reference is to a special page (genindex, modindex, search)\n+                    # These are handled by the standard domain and don't exist as actual documents\n+                    from sphinx.domains.std import StandardDomain\n+                    std = self.env.get_domain('std')\n+                    if docname in std.labels:\n+                        # Special page - add it to the toctree\n+                        toctree['entries'].append((title, docname))\n+                        # Don't add it to includefiles as it's not a real document\n+                    elif excluded(self.env.doc2path(docname, False)):\n                         message = __('toctree contains reference to excluded document %r')\n                         subtype = 'excluded'\n+                        logger.warning(message, docname, type='toc', subtype=subtype,\n+                                      location=toctree)\n+                        self.env.note_reread()\n                     else:\n                         message = __('toctree contains reference to nonexisting document %r')\n                         subtype = 'not_readable'\n-\n-                    logger.warning(message, docname, type='toc', subtype=subtype,\n-                                   location=toctree)\n-                    self.env.note_reread()\n+                        logger.warning(message, docname, type='toc', subtype=subtype,\n+                                      location=toctree)\n+                        self.env.note_reread()\n                 else:\n                     if docname in all_docnames:\n                         all_docnames.remove(docname)\ndiff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 9678e3c7c..26f6b1a5f 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -146,18 +146,35 @@ class TocTree:\n                                            ref, ' <- '.join(parents),\n                                            location=ref, type='toc', subtype='circular')\n                             continue\n-                        refdoc = ref\n-                        toc = self.env.tocs[ref].deepcopy()\n-                        maxdepth = self.env.metadata[ref].get('tocdepth', 0)\n-                        if ref not in toctree_ancestors or (prune and maxdepth > 0):\n-                            self._toctree_prune(toc, 2, maxdepth, collapse)\n-                        process_only_nodes(toc, builder.tags)\n-                        if title and toc.children and len(toc.children) == 1:\n-                            child = toc.children[0]\n-                            for refnode in child.findall(nodes.reference):\n-                                if refnode['refuri'] == ref and \\\n-                                   not refnode['anchorname']:\n-                                    refnode.children = [nodes.Text(title)]\n+                        \n+                        # Check if the reference is to a special page (genindex, modindex, search)\n+                        # These are handled by the standard domain and don't exist as actual documents\n+                        std = self.env.get_domain('std')\n+                        if ref in std.labels:\n+                            # Create a reference to the special page\n+                            if not title:\n+                                title = std.labels[ref][2]  # Get the title from the label\n+                            reference = nodes.reference('', '', internal=True,\n+                                                      refuri=ref,\n+                                                      anchorname='',\n+                                                      *[nodes.Text(title)])\n+                            para = addnodes.compact_paragraph('', '', reference)\n+                            item = nodes.list_item('', para)\n+                            toc = nodes.bullet_list('', item)\n+                        else:\n+                            # Regular document reference\n+                            refdoc = ref\n+                            toc = self.env.tocs[ref].deepcopy()\n+                            maxdepth = self.env.metadata[ref].get('tocdepth', 0)\n+                            if ref not in toctree_ancestors or (prune and maxdepth > 0):\n+                                self._toctree_prune(toc, 2, maxdepth, collapse)\n+                            process_only_nodes(toc, builder.tags)\n+                            if title and toc.children and len(toc.children) == 1:\n+                                child = toc.children[0]\n+                                for refnode in child.findall(nodes.reference):\n+                                    if refnode['refuri'] == ref and \\\n+                                       not refnode['anchorname']:\n+                                        refnode.children = [nodes.Text(title)]\n                     if not toc.children:\n                         # empty toc means: no titles will show up in the toctree\n                         logger.warning(__('toctree contains reference to document %r that '\ndiff --git a/tox.ini b/tox.ini\nindex 7ca990b56..a0708b02c 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -30,7 +30,7 @@ setenv =\n     PYTHONWARNINGS = all\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}\n+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}\n \n [testenv:du-latest]\n commands =\n"}