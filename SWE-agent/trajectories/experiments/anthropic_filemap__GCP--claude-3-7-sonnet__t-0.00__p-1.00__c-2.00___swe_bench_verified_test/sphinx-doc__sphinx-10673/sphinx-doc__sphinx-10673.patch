diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index 06768168e..aea4fbb75 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -57,16 +57,26 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
             field_list = insert_field_list(contentnode)
             field_lists.append(field_list)
 
+        # For classes, we don't want to include the return type annotation
+        # from the __init__ method
+        if objtype == 'class':
+            annotations_copy = annotations[fullname].copy()
+            if 'return' in annotations_copy:
+                del annotations_copy['return']
+            annotations_to_use = annotations_copy
+        else:
+            annotations_to_use = annotations[fullname]
+
         for field_list in field_lists:
             if app.config.autodoc_typehints_description_target == "all":
-                modify_field_list(field_list, annotations[fullname])
+                modify_field_list(field_list, annotations_to_use)
             elif app.config.autodoc_typehints_description_target == "documented_params":
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=True
+                    field_list, annotations_to_use, force_rtype=(objtype != 'class')
                 )
             else:
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=False
+                    field_list, annotations_to_use, force_rtype=(objtype != 'class')
                 )
 
 
@@ -126,7 +136,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
     if 'return' in annotations and 'return' not in arguments:
         field = nodes.field()
         field += nodes.field_name('', 'rtype')
-        field += nodes.field_body('', nodes.paragraph('', annotation))
+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))
         node += field
 
 
@@ -171,8 +181,10 @@ def augment_descriptions_with_types(
     # Add 'rtype' if 'return' is present and 'rtype' isn't.
     if 'return' in annotations:
         rtype = annotations['return']
+        # For functions, we always want to show the return type
+        # For other objects, we only show it if it's explicitly described or forced
         if 'return' not in has_type and ('return' in has_description or
-                                         (force_rtype and rtype != "None")):
+                                         force_rtype or rtype != "None"):
             field = nodes.field()
             field += nodes.field_name('', 'rtype')
             field += nodes.field_body('', nodes.paragraph('', rtype))
diff --git a/tox.ini b/tox.ini
index 105a02597..90ada0821 100644
--- a/tox.ini
+++ b/tox.ini
@@ -29,7 +29,7 @@ setenv =
     PYTHONWARNINGS = all
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:du-latest]
 commands =
