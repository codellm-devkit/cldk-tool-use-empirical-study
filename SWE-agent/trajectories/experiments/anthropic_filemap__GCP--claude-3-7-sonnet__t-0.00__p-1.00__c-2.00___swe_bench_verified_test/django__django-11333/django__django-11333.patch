diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..aaf844313a 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1666,6 +1666,16 @@ class Query(BaseExpression):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
+        # Copy annotations from the original query to the new query
+        if hasattr(self, 'annotations'):
+            query.annotations = self.annotations.copy()
+        # Copy filtered relations to ensure they're available in the new query
+        if hasattr(self, '_filtered_relations'):
+            query._filtered_relations = self._filtered_relations.copy()
+        # Add the annotation select values if they exist
+        if hasattr(self, 'annotation_select'):
+            for key in self.annotation_select:
+                query.set_annotation_mask([key])
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py
index 5e85dff16c..f36aa1aa9c 100644
--- a/tests/filtered_relation/tests.py
+++ b/tests/filtered_relation/tests.py
@@ -97,6 +97,15 @@ class FilteredRelationTests(TestCase):
             ).filter(book_alice__isnull=False),
             [self.author1]
         )
+        
+    def test_with_join_exclude(self):
+        """Test that exclude works with FilteredRelation."""
+        self.assertSequenceEqual(
+            Author.objects.annotate(
+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+            ).exclude(book_alice__isnull=False),
+            [self.author2, self.author3]
+        )
 
     def test_with_join_and_complex_condition(self):
         self.assertSequenceEqual(
