{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py\nindex c91da57e9..25c1f519b 100644\n--- a/sphinx/builders/html/transforms.py\n+++ b/sphinx/builders/html/transforms.py\n@@ -38,25 +38,55 @@ class KeyboardTransform(SphinxPostTransform):\n     default_priority = 400\n     builders = ('html',)\n     pattern = re.compile(r'(-|\\+|\\^|\\s+)')\n+    separators = {'-', '+', '^'}\n \n     def run(self, **kwargs: Any) -> None:\n         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n         for node in self.document.traverse(matcher):  # type: nodes.literal\n-            parts = self.pattern.split(node[-1].astext())\n+            text = node[-1].astext()\n+            \n+            # Handle single character keystrokes that are separators\n+            if text in self.separators:\n+                continue\n+                \n+            parts = self.pattern.split(text)\n             if len(parts) == 1:\n                 continue\n \n             node.pop()\n-            while parts:\n-                key = parts.pop(0)\n+            \n+            # Process the parts\n+            i = 0\n+            while i < len(parts):\n+                # Handle separator at the beginning of the text\n+                if i == 0 and not parts[i] and i + 1 < len(parts) and parts[i + 1] in self.separators:\n+                    sep = parts[i + 1]\n+                    node += nodes.literal('', sep, classes=[\"kbd\"])\n+                    i += 2\n+                    continue\n+                \n+                key = parts[i]\n+                i += 1\n+                \n+                # Skip empty keys\n+                if not key:\n+                    continue\n+                    \n+                # Add the key\n                 node += nodes.literal('', key, classes=[\"kbd\"])\n-\n-                try:\n-                    # key separator (ex. -, +, ^)\n-                    sep = parts.pop(0)\n-                    node += nodes.Text(sep)\n-                except IndexError:\n-                    pass\n+                \n+                # Process separators and spaces\n+                if i < len(parts):\n+                    # Check if we have a separator or space\n+                    if parts[i] in self.separators:\n+                        # It's a separator\n+                        sep = parts[i]\n+                        node += nodes.Text(sep)\n+                        i += 1\n+                    elif parts[i].strip() == '':\n+                        # It's whitespace\n+                        node += nodes.Text(parts[i])\n+                        i += 1\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\n"}