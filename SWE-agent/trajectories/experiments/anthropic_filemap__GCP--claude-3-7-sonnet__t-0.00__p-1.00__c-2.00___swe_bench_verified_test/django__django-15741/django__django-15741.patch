diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..83dee2fb22 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -967,7 +967,33 @@ class RenameIndex(IndexOperation):
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+            # Backward operation with unnamed index is a no-op in the database,
+            # but we need to store the auto-generated name in the state for
+            # future forward operations.
+            model = from_state.apps.get_model(app_label, self.model_name)
+            if not self.allow_migrate_model(schema_editor.connection.alias, model):
+                return
+                
+            # Get the auto-generated name of the index
+            columns = [
+                model._meta.get_field(field).column for field in self.old_fields
+            ]
+            matching_index_name = schema_editor._constraint_names(
+                model, column_names=columns, index=True
+            )
+            if len(matching_index_name) != 1:
+                # If we can't find the index, just return
+                return
+                
+            # Update the state to include the auto-generated name
+            to_model_state = to_state.models[app_label, self.model_name_lower]
+            for index in to_model_state.options.get('indexes', []):
+                if (
+                    len(index.fields) == len(self.old_fields) and
+                    all(a == b for a, b in zip(index.fields, self.old_fields))
+                ):
+                    index.name = matching_index_name[0]
+                    break
             return
 
         self.new_name_lower, self.old_name_lower = (
