{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pylint-dev__pylint-4661", "model_patch": "diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py\nindex 84774d0e3..025f7d777 100644\n--- a/pylint/config/__init__.py\n+++ b/pylint/config/__init__.py\n@@ -61,9 +61,36 @@ if \"PYLINTHOME\" in os.environ:\n     if USER_HOME == \"~\":\n         USER_HOME = os.path.dirname(PYLINT_HOME)\n elif USER_HOME == \"~\":\n+    # Default to current directory if home can't be determined\n     PYLINT_HOME = \".pylint.d\"\n else:\n-    PYLINT_HOME = os.path.join(USER_HOME, \".pylint.d\")\n+    # Follow XDG Base Directory Specification\n+    # Use $XDG_DATA_HOME/pylint if defined, otherwise $HOME/.local/share/pylint\n+    xdg_data_home = os.environ.get(\"XDG_DATA_HOME\", os.path.join(USER_HOME, \".local\", \"share\"))\n+    PYLINT_HOME = os.path.join(xdg_data_home, \"pylint\")\n+    \n+    # Check for old .pylint.d directory and migrate data if needed\n+    old_pylint_home = os.path.join(USER_HOME, \".pylint.d\")\n+    if os.path.exists(old_pylint_home) and os.path.isdir(old_pylint_home):\n+        try:\n+            # Create the new directory if it doesn't exist\n+            if not os.path.exists(PYLINT_HOME):\n+                os.makedirs(PYLINT_HOME, exist_ok=True)\n+                \n+            # Copy all files from old location to new location\n+            for filename in os.listdir(old_pylint_home):\n+                old_file = os.path.join(old_pylint_home, filename)\n+                new_file = os.path.join(PYLINT_HOME, filename)\n+                if os.path.isfile(old_file) and not os.path.exists(new_file):\n+                    try:\n+                        with open(old_file, 'rb') as src, open(new_file, 'wb') as dst:\n+                            dst.write(src.read())\n+                    except (OSError, IOError):\n+                        # Skip files that can't be copied\n+                        pass\n+        except (OSError, IOError):\n+            # If migration fails, just continue with the new directory\n+            pass\n \n \n def _get_pdata_path(base_name, recurs):\n@@ -83,7 +110,8 @@ def load_results(base):\n def save_results(results, base):\n     if not os.path.exists(PYLINT_HOME):\n         try:\n-            os.mkdir(PYLINT_HOME)\n+            # Create the full directory path\n+            os.makedirs(PYLINT_HOME, exist_ok=True)\n         except OSError:\n             print(\"Unable to create directory %s\" % PYLINT_HOME, file=sys.stderr)\n     data_file = _get_pdata_path(base, 1)\n@@ -110,8 +138,10 @@ ENV_HELP = (\n The following environment variables are used:\n     * PYLINTHOME\n     Path to the directory where persistent data for the run will be stored. If\n-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working\n-directory).\n+not found, it defaults to $XDG_DATA_HOME/pylint (usually ~/.local/share/pylint) \n+or .pylint.d (in the current working directory) if the home directory cannot be determined.\n+    * XDG_DATA_HOME\n+    Base directory for user-specific data files. If not set, defaults to ~/.local/share.\n     * PYLINTRC\n     Path to the configuration file. See the documentation for the method used\n to search for configuration file.\ndiff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 004c29281..4f6140788 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -631,11 +631,14 @@ def test_pylint_home():\n     if uhome == \"~\":\n         expected = \".pylint.d\"\n     else:\n-        expected = os.path.join(uhome, \".pylint.d\")\n+        # XDG Base Directory Specification\n+        xdg_data_home = os.environ.get(\"XDG_DATA_HOME\", os.path.join(uhome, \".local\", \"share\"))\n+        expected = os.path.join(xdg_data_home, \"pylint\")\n     assert config.PYLINT_HOME == expected\n \n     try:\n-        pylintd = join(tempfile.gettempdir(), \".pylint.d\")\n+        # Test with PYLINTHOME environment variable\n+        pylintd = join(tempfile.gettempdir(), \"pylint-home-test\")\n         os.environ[\"PYLINTHOME\"] = pylintd\n         try:\n             reload(config)\n@@ -647,6 +650,23 @@ def test_pylint_home():\n                 pass\n     finally:\n         del os.environ[\"PYLINTHOME\"]\n+        \n+    try:\n+        # Test with XDG_DATA_HOME environment variable\n+        xdg_data_home = join(tempfile.gettempdir(), \"xdg-data-home-test\")\n+        os.environ[\"XDG_DATA_HOME\"] = xdg_data_home\n+        try:\n+            reload(config)\n+            if uhome == \"~\":\n+                expected = \".pylint.d\"\n+            else:\n+                expected = os.path.join(xdg_data_home, \"pylint\")\n+            assert config.PYLINT_HOME == expected\n+        finally:\n+            pass\n+    finally:\n+        del os.environ[\"XDG_DATA_HOME\"]\n+        reload(config)  # Reset the config\n \n \n @pytest.mark.usefixtures(\"pop_pylintrc\")\n"}