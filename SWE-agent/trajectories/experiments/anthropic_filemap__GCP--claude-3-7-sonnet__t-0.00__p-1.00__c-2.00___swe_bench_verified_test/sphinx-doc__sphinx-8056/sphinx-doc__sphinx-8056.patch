diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index dd5317087..5bf46714f 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -208,12 +208,41 @@ class CheckExternalLinksBuilder(Builder):
                 else:
                     return 'redirected', new_url, 0
 
+        def check_local_uri(local_uri: str) -> Tuple[str, str, int]:
+            # Check if the local URI exists in the project
+            
+            # For the PR description, we just need to check if the target document exists
+            # We'll check if the referenced document is in the list of all documents
+            
+            # If it's a reference to a label, we need to check if the label exists
+            if local_uri in self.env.labels:
+                return 'working', '', 0
+                
+            # Otherwise, it might be a direct reference to a document
+            # Strip any anchor part
+            if '#' in local_uri:
+                local_uri = local_uri.split('#', 1)[0]
+                
+            # If it's empty, it refers to the current document
+            if not local_uri:
+                return 'working', '', 0
+                
+            # Strip file extension if present
+            for ext in self.app.config.source_suffix:
+                if local_uri.endswith(ext):
+                    local_uri = local_uri[:-len(ext)]
+                    break
+                
+            # Check if the document exists in the project
+            if local_uri not in self.env.all_docs:
+                return 'broken', f"Document '{local_uri}' not found", 0
+                
+            return 'working', '', 0
+            
         def check() -> Tuple[str, str, int]:
             # check for various conditions without bothering the network
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
-            elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
@@ -223,6 +252,10 @@ class CheckExternalLinksBuilder(Builder):
             for rex in self.to_ignore:
                 if rex.match(uri):
                     return 'ignored', '', 0
+                    
+            # Handle local links (not http/https)
+            if not uri.startswith(('http:', 'https:')):
+                return check_local_uri(uri)
 
             # need to actually check the URI
             for _ in range(self.app.config.linkcheck_retries):
