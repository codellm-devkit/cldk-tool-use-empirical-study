{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-11265", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d69c24419b..aaf844313a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1666,6 +1666,16 @@ class Query(BaseExpression):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n+        # Copy annotations from the original query to the new query\n+        if hasattr(self, 'annotations'):\n+            query.annotations = self.annotations.copy()\n+        # Copy filtered relations to ensure they're available in the new query\n+        if hasattr(self, '_filtered_relations'):\n+            query._filtered_relations = self._filtered_relations.copy()\n+        # Add the annotation select values if they exist\n+        if hasattr(self, 'annotation_select'):\n+            for key in self.annotation_select:\n+                query.set_annotation_mask([key])\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\ndiff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex 5e85dff16c..f36aa1aa9c 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -97,6 +97,15 @@ class FilteredRelationTests(TestCase):\n             ).filter(book_alice__isnull=False),\n             [self.author1]\n         )\n+        \n+    def test_with_join_exclude(self):\n+        \"\"\"Test that exclude works with FilteredRelation.\"\"\"\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2, self.author3]\n+        )\n \n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n"}