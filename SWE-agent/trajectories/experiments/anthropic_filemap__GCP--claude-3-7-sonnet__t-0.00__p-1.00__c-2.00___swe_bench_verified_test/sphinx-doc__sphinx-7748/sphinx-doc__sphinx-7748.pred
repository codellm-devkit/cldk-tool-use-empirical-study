{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/setup.py b/setup.py\nindex 5e822fe9b..77b63df38 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be999..d145e912b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1037,39 +1037,55 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n+    def _find_signature(self, encoding: str = None) -> Union[Tuple[str, str], List[Tuple[str, str]]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n+        \n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n                 continue\n-            # match first line of docstring against signature RE\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            # the base name must match ours\n-            valid_names = [self.objpath[-1]]  # type: ignore\n-            if isinstance(self, ClassDocumenter):\n-                valid_names.append('__init__')\n-                if hasattr(self.object, '__mro__'):\n-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n-            if base not in valid_names:\n-                continue\n-            # re-prepare docstring to ignore more leading indentation\n-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n-                                                        tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            \n+            # Process all consecutive lines that match the signature pattern\n+            j = 0\n+            while j < len(doclines):\n+                match = py_ext_sig_re.match(doclines[j])\n+                if not match:\n+                    break\n+                \n+                exmod, path, base, args, retann = match.groups()\n+                # the base name must match ours\n+                valid_names = [self.objpath[-1]]  # type: ignore\n+                if isinstance(self, ClassDocumenter):\n+                    valid_names.append('__init__')\n+                    if hasattr(self.object, '__mro__'):\n+                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+                \n+                if base not in valid_names:\n+                    break\n+                \n+                # Add this signature to our results\n+                results.append((args, retann))\n+                j += 1\n+            \n+            # If we found at least one signature, update the docstring\n+            if j > 0:\n+                # re-prepare docstring to ignore the signature lines\n+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+                self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[j:]),\n+                                                           tabsize=tab_width)\n+                # Return the first signature for backward compatibility if only one was found\n+                if len(results) == 1:\n+                    return results[0]\n+                return results\n+            \n+        # No signatures found\n+        return None\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n@@ -1087,7 +1103,22 @@ class DocstringSignatureMixin:\n             # the feature is enabled\n             result = self._find_signature()\n             if result is not None:\n-                self.args, self.retann = result\n+                if isinstance(result, list):\n+                    # Multiple signatures found\n+                    # Use the first one for the main signature\n+                    self.args, self.retann = result[0]\n+                    \n+                    # Store additional signatures for later use\n+                    self._additional_signatures = result[1:]\n+                else:\n+                    # Single signature (backward compatibility)\n+                    self.args, self.retann = result\n+                    self._additional_signatures = []\n+            else:\n+                self._additional_signatures = []\n+        else:\n+            self._additional_signatures = []\n+            \n         return super().format_signature(**kwargs)  # type: ignore\n \n \n@@ -1155,6 +1186,28 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n \n         if inspect.iscoroutinefunction(self.object):\n             self.add_line('   :async:', sourcename)\n+            \n+        # Add additional signatures if available\n+        if hasattr(self, '_additional_signatures') and self._additional_signatures:\n+            domain = getattr(self, 'domain', 'py')\n+            directive = getattr(self, 'directivetype', self.objtype)\n+            name = self.format_name()\n+            \n+            # Add each additional signature as a separate directive\n+            for args, retann in self._additional_signatures:\n+                # Format the signature\n+                if retann:\n+                    signature = '(%s) -> %s' % (args, retann)\n+                else:\n+                    signature = '(%s)' % args\n+                \n+                # Add the directive line\n+                self.add_line('', sourcename)  # Add a blank line for readability\n+                self.add_line('.. %s:%s:: %s%s' % (domain, directive, name, signature), sourcename)\n+                \n+                # Add module information\n+                if self.objpath:\n+                    self.add_line('   :module: %s' % self.modname, sourcename)\n \n     def format_signature(self, **kwargs: Any) -> str:\n         sig = super().format_signature(**kwargs)\n@@ -1617,6 +1670,28 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n         super().add_directive_header(sig)\n \n         sourcename = self.get_sourcename()\n+        \n+        # Add additional signatures if available\n+        if hasattr(self, '_additional_signatures') and self._additional_signatures:\n+            domain = getattr(self, 'domain', 'py')\n+            directive = getattr(self, 'directivetype', self.objtype)\n+            name = self.format_name()\n+            \n+            # Add each additional signature as a separate directive\n+            for args, retann in self._additional_signatures:\n+                # Format the signature\n+                if retann:\n+                    signature = '(%s) -> %s' % (args, retann)\n+                else:\n+                    signature = '(%s)' % args\n+                \n+                # Add the directive line\n+                self.add_line('', sourcename)  # Add a blank line for readability\n+                self.add_line('.. %s:%s:: %s%s' % (domain, directive, name, signature), sourcename)\n+                \n+                # Add module information\n+                if self.objpath:\n+                    self.add_line('   :module: %s' % self.modname, sourcename)\n         obj = self.parent.__dict__.get(self.object_name, self.object)\n         if inspect.isabstractmethod(obj):\n             self.add_line('   :abstractmethod:', sourcename)\ndiff --git a/tox.ini b/tox.ini\nindex d9f040544..bf39854b6 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n"}