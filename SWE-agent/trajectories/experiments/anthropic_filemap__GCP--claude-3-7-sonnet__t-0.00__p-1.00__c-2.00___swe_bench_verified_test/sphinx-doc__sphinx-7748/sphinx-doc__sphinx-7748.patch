diff --git a/setup.py b/setup.py
index 5e822fe9b..77b63df38 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index f8e4be999..d145e912b 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1037,39 +1037,55 @@ class DocstringSignatureMixin:
     feature of reading the signature from the docstring.
     """
 
-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:
+    def _find_signature(self, encoding: str = None) -> Union[Tuple[str, str], List[Tuple[str, str]]]:
         if encoding is not None:
             warnings.warn("The 'encoding' argument to autodoc.%s._find_signature() is "
                           "deprecated." % self.__class__.__name__,
                           RemovedInSphinx40Warning, stacklevel=2)
         docstrings = self.get_doc()
         self._new_docstrings = docstrings[:]
-        result = None
+        results = []
+        
         for i, doclines in enumerate(docstrings):
             # no lines in docstring, no match
             if not doclines:
                 continue
-            # match first line of docstring against signature RE
-            match = py_ext_sig_re.match(doclines[0])
-            if not match:
-                continue
-            exmod, path, base, args, retann = match.groups()
-            # the base name must match ours
-            valid_names = [self.objpath[-1]]  # type: ignore
-            if isinstance(self, ClassDocumenter):
-                valid_names.append('__init__')
-                if hasattr(self.object, '__mro__'):
-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)
-            if base not in valid_names:
-                continue
-            # re-prepare docstring to ignore more leading indentation
-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
-                                                        tabsize=tab_width)
-            result = args, retann
-            # don't look any further
-            break
-        return result
+            
+            # Process all consecutive lines that match the signature pattern
+            j = 0
+            while j < len(doclines):
+                match = py_ext_sig_re.match(doclines[j])
+                if not match:
+                    break
+                
+                exmod, path, base, args, retann = match.groups()
+                # the base name must match ours
+                valid_names = [self.objpath[-1]]  # type: ignore
+                if isinstance(self, ClassDocumenter):
+                    valid_names.append('__init__')
+                    if hasattr(self.object, '__mro__'):
+                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)
+                
+                if base not in valid_names:
+                    break
+                
+                # Add this signature to our results
+                results.append((args, retann))
+                j += 1
+            
+            # If we found at least one signature, update the docstring
+            if j > 0:
+                # re-prepare docstring to ignore the signature lines
+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore
+                self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[j:]),
+                                                           tabsize=tab_width)
+                # Return the first signature for backward compatibility if only one was found
+                if len(results) == 1:
+                    return results[0]
+                return results
+            
+        # No signatures found
+        return None
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
         if encoding is not None:
@@ -1087,7 +1103,22 @@ class DocstringSignatureMixin:
             # the feature is enabled
             result = self._find_signature()
             if result is not None:
-                self.args, self.retann = result
+                if isinstance(result, list):
+                    # Multiple signatures found
+                    # Use the first one for the main signature
+                    self.args, self.retann = result[0]
+                    
+                    # Store additional signatures for later use
+                    self._additional_signatures = result[1:]
+                else:
+                    # Single signature (backward compatibility)
+                    self.args, self.retann = result
+                    self._additional_signatures = []
+            else:
+                self._additional_signatures = []
+        else:
+            self._additional_signatures = []
+            
         return super().format_signature(**kwargs)  # type: ignore
 
 
@@ -1155,6 +1186,28 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ
 
         if inspect.iscoroutinefunction(self.object):
             self.add_line('   :async:', sourcename)
+            
+        # Add additional signatures if available
+        if hasattr(self, '_additional_signatures') and self._additional_signatures:
+            domain = getattr(self, 'domain', 'py')
+            directive = getattr(self, 'directivetype', self.objtype)
+            name = self.format_name()
+            
+            # Add each additional signature as a separate directive
+            for args, retann in self._additional_signatures:
+                # Format the signature
+                if retann:
+                    signature = '(%s) -> %s' % (args, retann)
+                else:
+                    signature = '(%s)' % args
+                
+                # Add the directive line
+                self.add_line('', sourcename)  # Add a blank line for readability
+                self.add_line('.. %s:%s:: %s%s' % (domain, directive, name, signature), sourcename)
+                
+                # Add module information
+                if self.objpath:
+                    self.add_line('   :module: %s' % self.modname, sourcename)
 
     def format_signature(self, **kwargs: Any) -> str:
         sig = super().format_signature(**kwargs)
@@ -1617,6 +1670,28 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:
         super().add_directive_header(sig)
 
         sourcename = self.get_sourcename()
+        
+        # Add additional signatures if available
+        if hasattr(self, '_additional_signatures') and self._additional_signatures:
+            domain = getattr(self, 'domain', 'py')
+            directive = getattr(self, 'directivetype', self.objtype)
+            name = self.format_name()
+            
+            # Add each additional signature as a separate directive
+            for args, retann in self._additional_signatures:
+                # Format the signature
+                if retann:
+                    signature = '(%s) -> %s' % (args, retann)
+                else:
+                    signature = '(%s)' % args
+                
+                # Add the directive line
+                self.add_line('', sourcename)  # Add a blank line for readability
+                self.add_line('.. %s:%s:: %s%s' % (domain, directive, name, signature), sourcename)
+                
+                # Add module information
+                if self.objpath:
+                    self.add_line('   :module: %s' % self.modname, sourcename)
         obj = self.parent.__dict__.get(self.object_name, self.object)
         if inspect.isabstractmethod(obj):
             self.add_line('   :abstractmethod:', sourcename)
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
