{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..303a95b4 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -25,7 +25,7 @@ from seaborn._marks.base import Mark\n from seaborn._stats.base import Stat\n from seaborn._core.data import PlotData\n from seaborn._core.moves import Move\n-from seaborn._core.scales import Scale\n+from seaborn._core.scales import Scale, Nominal\n from seaborn._core.subplots import Subplots\n from seaborn._core.groupby import GroupBy\n from seaborn._core.properties import PROPERTIES, Property\n@@ -1631,10 +1631,13 @@ class Plotter:\n             ax = sub[\"ax\"]\n             for axis in \"xy\":\n                 axis_key = sub[axis]\n+                axis_obj = getattr(ax, f\"{axis}axis\")\n+                scale = p._scales.get(axis_key)\n+                is_nominal = scale is not None and isinstance(scale, Nominal)\n \n                 # Axis limits\n                 if axis_key in p._limits:\n-                    convert_units = getattr(ax, f\"{axis}axis\").convert_units\n+                    convert_units = axis_obj.convert_units\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n@@ -1643,6 +1646,35 @@ class Plotter:\n                     if isinstance(b, str):\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f\"{axis}lim\": (lo, hi)})\n+                # For Nominal scales, set limits to +/- 0.5 from first and last tick\n+                elif is_nominal:\n+                    locs = axis_obj.get_majorticklocs()\n+                    if len(locs) > 0:\n+                        # Add invisible artist with sticky edges to control margins\n+                        # and set the margin to 0\n+                        from matplotlib.collections import LineCollection\n+                        line = LineCollection([], transform=axis_obj.get_transform())\n+                        line.sticky_edges.update({axis: [locs[0] - 0.5, locs[-1] + 0.5]})\n+                        ax.add_collection(line)\n+                        getattr(ax, f\"margins\")(**{axis: 0})\n+                    elif hasattr(scale, \"_legend\") and scale._legend is not None and len(scale._legend[0]) > 0:\n+                        # If no ticks but we have legend items, use those\n+                        from matplotlib.collections import LineCollection\n+                        line = LineCollection([], transform=axis_obj.get_transform())\n+                        line.sticky_edges.update({axis: [-0.5, len(scale._legend[0]) - 0.5]})\n+                        ax.add_collection(line)\n+                        getattr(ax, f\"margins\")(**{axis: 0})\n+                \n+                # Turn off grid for Nominal scales\n+                if is_nominal:\n+                    if axis == \"x\":\n+                        ax.grid(False, axis=\"x\")\n+                    else:\n+                        ax.grid(False, axis=\"y\")\n+                \n+                # Invert y-axis for Nominal scales on y-axis\n+                if axis == \"y\" and is_nominal:\n+                    ax.invert_yaxis()\n \n         engine_default = None if p._target is not None else \"tight\"\n         layout_engine = p._layout_spec.get(\"engine\", engine_default)\n"}