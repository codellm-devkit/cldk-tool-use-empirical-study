{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-16454", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a15..07eebf0b62 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -70,6 +70,40 @@ class CommandParser(ArgumentParser):\n             super().error(message)\n         else:\n             raise CommandError(\"Error: %s\" % message)\n+            \n+    def add_subparsers(self, **kwargs):\n+        \"\"\"\n+        Custom add_subparsers that passes the parser's formatting arguments to\n+        the subparsers it creates.\n+        \"\"\"\n+        # Add the parser class to the arguments if it's not present\n+        kwargs.setdefault('parser_class', type(self))\n+        \n+        # Create the subparser action\n+        subparsers = super().add_subparsers(**kwargs)\n+        \n+        # Save the parent parser's formatting arguments\n+        parent_parser_args = {\n+            'missing_args_message': self.missing_args_message,\n+            'called_from_command_line': self.called_from_command_line,\n+        }\n+        \n+        # Store the original add_parser method\n+        original_add_parser = subparsers.add_parser\n+        \n+        # Define a new add_parser method that passes the parent's formatting arguments\n+        def add_parser_with_formatting(name, **parser_kwargs):\n+            # Add the parent parser's formatting arguments if not explicitly provided\n+            for key, value in parent_parser_args.items():\n+                parser_kwargs.setdefault(key, value)\n+            \n+            # Call the original add_parser method\n+            return original_add_parser(name, **parser_kwargs)\n+        \n+        # Replace the add_parser method\n+        subparsers.add_parser = add_parser_with_formatting\n+        \n+        return subparsers\n \n \n def handle_default_options(options):\n"}