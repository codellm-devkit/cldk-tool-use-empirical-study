{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..ee8aeda76a 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,6 +45,31 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Unwrap functools.partial object to access the original function and arguments\n+        if isinstance(func, functools.partial):\n+            self.func_partial = func\n+            # Collect all args and kwargs from the partial chain\n+            partial_args = list(func.args)\n+            partial_keywords = dict(func.keywords) if func.keywords else {}\n+            \n+            # Recursively unwrap nested partial functions\n+            current_func = func.func\n+            while isinstance(current_func, functools.partial):\n+                # Add args and kwargs from the nested partial\n+                partial_args = list(current_func.args) + partial_args\n+                if current_func.keywords:\n+                    # Update keywords, giving priority to the outer partial's keywords\n+                    nested_keywords = dict(current_func.keywords)\n+                    nested_keywords.update(partial_keywords)\n+                    partial_keywords = nested_keywords\n+                current_func = current_func.func\n+            \n+            self.func_partial_args = tuple(partial_args)\n+            self.func_partial_keywords = partial_keywords\n+            func = current_func\n+        else:\n+            self.func_partial = None\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n@@ -59,10 +84,19 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n-        )\n+        if self.func_partial:\n+            partial_info = \" [partial with args=%s kwargs=%s]\" % (\n+                self.func_partial_args, self.func_partial_keywords\n+            )\n+            return \"ResolverMatch(func=%s%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, partial_info, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n+        else:\n+            return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n \n \n def get_resolver(urlconf=None):\n"}