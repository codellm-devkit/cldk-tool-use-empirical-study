{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..83dee2fb22 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -967,7 +967,33 @@ class RenameIndex(IndexOperation):\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            # Backward operation with unnamed index is a no-op in the database,\n+            # but we need to store the auto-generated name in the state for\n+            # future forward operations.\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+                return\n+                \n+            # Get the auto-generated name of the index\n+            columns = [\n+                model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                # If we can't find the index, just return\n+                return\n+                \n+            # Update the state to include the auto-generated name\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            for index in to_model_state.options.get('indexes', []):\n+                if (\n+                    len(index.fields) == len(self.old_fields) and\n+                    all(a == b for a, b in zip(index.fields, self.old_fields))\n+                ):\n+                    index.name = matching_index_name[0]\n+                    break\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n"}