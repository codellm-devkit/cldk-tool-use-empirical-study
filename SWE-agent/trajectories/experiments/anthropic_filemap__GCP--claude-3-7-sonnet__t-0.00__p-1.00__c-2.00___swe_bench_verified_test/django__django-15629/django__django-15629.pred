{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-15629", "model_patch": "diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex 562b209eef..d94e83e321 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -168,6 +168,62 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n         return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n+        \n+    def _alter_field(self, model, old_field, new_field, old_type, new_type,\n+                     old_db_params, new_db_params, strict=False):\n+        \"\"\"\n+        MySQL needs special handling for foreign key columns that reference\n+        a primary key with a collation. The foreign key needs to have the same\n+        collation as the primary key it references.\n+        \"\"\"\n+        # Call the parent method first\n+        super()._alter_field(model, old_field, new_field, old_type, new_type,\n+                           old_db_params, new_db_params, strict)\n+                           \n+        # If this is a primary key, check if collation has changed\n+        if new_field.primary_key:\n+            old_collation = old_db_params.get('collation')\n+            new_collation = new_db_params.get('collation')\n+            \n+            # Only proceed if collation has changed\n+            if old_collation != new_collation:\n+                # Find all related objects that reference this field\n+                for rel in model._meta.related_objects:\n+                    if not rel.field.many_to_many and rel.field.db_constraint:\n+                        # Only process foreign keys to this primary key\n+                        if rel.field.target_field == new_field:\n+                            # Get the related model and field\n+                            related_model = rel.related_model\n+                            related_field = rel.field\n+                            \n+                            # Get the field type\n+                            rel_type = related_field.db_type(self.connection)\n+                            \n+                            # Add NULL/NOT NULL as needed\n+                            if related_field.null:\n+                                rel_type += \" NULL\"\n+                            else:\n+                                rel_type += \" NOT NULL\"\n+                            \n+                            # Generate SQL to update the foreign key column with the same collation\n+                            if new_collation:\n+                                self.execute(\n+                                    \"ALTER TABLE %(table)s MODIFY %(column)s %(type)s COLLATE %(collation)s\" % {\n+                                        'table': self.quote_name(related_model._meta.db_table),\n+                                        'column': self.quote_name(related_field.column),\n+                                        'type': rel_type,\n+                                        'collation': self.quote_name(new_collation),\n+                                    }\n+                                )\n+                            else:\n+                                # If collation was removed, update without specifying collation\n+                                self.execute(\n+                                    \"ALTER TABLE %(table)s MODIFY %(column)s %(type)s\" % {\n+                                        'table': self.quote_name(related_model._meta.db_table),\n+                                        'column': self.quote_name(related_field.column),\n+                                        'type': rel_type,\n+                                    }\n+                                )\n \n     def _rename_field_sql(self, table, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n"}