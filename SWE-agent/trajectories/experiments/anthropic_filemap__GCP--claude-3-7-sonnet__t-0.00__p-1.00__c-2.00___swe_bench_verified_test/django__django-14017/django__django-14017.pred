{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ffc3a7fda5..717f933aa3 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1150,6 +1150,7 @@ class Subquery(Expression):\n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n+    conditional = True\n \n     def __init__(self, queryset, negated=False, **kwargs):\n         self.negated = negated\ndiff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..5f663f069c 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,6 +40,16 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n+        # Handle Exists objects\n+        from django.db.models.expressions import Exists\n+        if isinstance(other, Exists):\n+            # Create a new Q object\n+            obj = type(self)()\n+            obj.connector = conn\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n+        \n         if not isinstance(other, Q):\n             raise TypeError(other)\n \n"}