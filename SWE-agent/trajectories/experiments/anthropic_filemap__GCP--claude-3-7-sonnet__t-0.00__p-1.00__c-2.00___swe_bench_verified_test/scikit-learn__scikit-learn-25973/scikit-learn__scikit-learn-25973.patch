diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 5f76c2cc9..5c90da156 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -271,7 +271,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
         except (TypeError, ValueError):
             self.transformers = value
 
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=None):
         """Set the output container when `"transform"` and `"fit_transform"` are called.
 
         Calling `set_output` will set the output of all estimators in `transformers`
@@ -285,13 +285,21 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
             - `"default"`: Default output format of a transformer
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
+            
+        preserve_dtypes : bool, default=None
+            Whether to preserve the dtypes from the input DataFrame when using
+            pandas output. Only used when `transform="pandas"`.
+            
+            - `True`: Preserve original dtypes from input DataFrame
+            - `False`: Use default dtypes in output DataFrame
+            - `None`: Preserve dtypes configuration is unchanged
 
         Returns
         -------
         self : estimator instance
             Estimator instance.
         """
-        super().set_output(transform=transform)
+        super().set_output(transform=transform, preserve_dtypes=preserve_dtypes)
         transformers = (
             trans
             for _, trans, _ in chain(
@@ -300,7 +308,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
             if trans not in {"passthrough", "drop"}
         )
         for trans in transformers:
-            _safe_set_output(trans, transform=transform)
+            _safe_set_output(trans, transform=transform, preserve_dtypes=preserve_dtypes)
 
         return self
 
diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 94d9465d7..fb7cffa81 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -154,7 +154,7 @@ class Pipeline(_BaseComposition):
         self.memory = memory
         self.verbose = verbose
 
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=None):
         """Set the output container when `"transform"` and `"fit_transform"` are called.
 
         Calling `set_output` will set the output of all estimators in `steps`.
@@ -167,6 +167,14 @@ class Pipeline(_BaseComposition):
             - `"default"`: Default output format of a transformer
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
+            
+        preserve_dtypes : bool, default=None
+            Whether to preserve the dtypes from the input DataFrame when using
+            pandas output. Only used when `transform="pandas"`.
+            
+            - `True`: Preserve original dtypes from input DataFrame
+            - `False`: Use default dtypes in output DataFrame
+            - `None`: Preserve dtypes configuration is unchanged
 
         Returns
         -------
@@ -174,7 +182,7 @@ class Pipeline(_BaseComposition):
             Estimator instance.
         """
         for _, _, step in self._iter():
-            _safe_set_output(step, transform=transform)
+            _safe_set_output(step, transform=transform, preserve_dtypes=preserve_dtypes)
         return self
 
     def get_params(self, deep=True):
@@ -1027,7 +1035,7 @@ class FeatureUnion(TransformerMixin, _BaseComposition):
         self.transformer_weights = transformer_weights
         self.verbose = verbose
 
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=None):
         """Set the output container when `"transform"` and `"fit_transform"` are called.
 
         `set_output` will set the output of all estimators in `transformer_list`.
@@ -1040,15 +1048,23 @@ class FeatureUnion(TransformerMixin, _BaseComposition):
             - `"default"`: Default output format of a transformer
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
+            
+        preserve_dtypes : bool, default=None
+            Whether to preserve the dtypes from the input DataFrame when using
+            pandas output. Only used when `transform="pandas"`.
+            
+            - `True`: Preserve original dtypes from input DataFrame
+            - `False`: Use default dtypes in output DataFrame
+            - `None`: Preserve dtypes configuration is unchanged
 
         Returns
         -------
         self : estimator instance
             Estimator instance.
         """
-        super().set_output(transform=transform)
+        super().set_output(transform=transform, preserve_dtypes=preserve_dtypes)
         for _, step, _ in self._iter():
-            _safe_set_output(step, transform=transform)
+            _safe_set_output(step, transform=transform, preserve_dtypes=preserve_dtypes)
         return self
 
     @property
diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..44d8ed285 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.
 
@@ -35,6 +36,10 @@ def _wrap_in_pandas_container(
 
     index : array-like, default=None
         Index for data.
+        
+    dtypes : dict or pandas.Series, default=None
+        The data types to use for the columns in the output DataFrame.
+        If not None, the output DataFrame will use these dtypes.
 
     Returns
     -------
@@ -57,9 +62,24 @@ def _wrap_in_pandas_container(
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        # Apply dtypes if provided
+        if dtypes is not None:
+            # Filter dtypes to only include columns that exist in the output
+            filtered_dtypes = {col: dtype for col, dtype in dtypes.items() 
+                              if col in data_to_wrap.columns}
+            if filtered_dtypes:
+                data_to_wrap = data_to_wrap.astype(filtered_dtypes)
         return data_to_wrap
 
-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    # Apply dtypes if provided
+    if dtypes is not None:
+        # Filter dtypes to only include columns that exist in the output
+        filtered_dtypes = {col: dtype for col, dtype in dtypes.items() 
+                          if col in df.columns}
+        if filtered_dtypes:
+            df = df.astype(filtered_dtypes)
+    return df
 
 
 def _get_output_config(method, estimator=None):
@@ -81,10 +101,14 @@ def _get_output_config(method, estimator=None):
 
         - "dense": specifies the dense container for `method`. This can be
           `"default"` or `"pandas"`.
+        - "preserve_dtypes": specifies whether to preserve dtypes from the input.
+          This can be `True` or `False`.
     """
     est_sklearn_output_config = getattr(estimator, "_sklearn_output_config", {})
-    if method in est_sklearn_output_config:
-        dense_config = est_sklearn_output_config[method]
+    
+    # Get dense config
+    if method in est_sklearn_output_config and "dense" in est_sklearn_output_config[method]:
+        dense_config = est_sklearn_output_config[method]["dense"]
     else:
         dense_config = get_config()[f"{method}_output"]
 
@@ -92,8 +116,16 @@ def _get_output_config(method, estimator=None):
         raise ValueError(
             f"output config must be 'default' or 'pandas' got {dense_config}"
         )
-
-    return {"dense": dense_config}
+    
+    # Get preserve_dtypes config
+    if (method in est_sklearn_output_config and 
+        "preserve_dtypes" in est_sklearn_output_config[method]):
+        preserve_dtypes = est_sklearn_output_config[method]["preserve_dtypes"]
+    else:
+        # Default to False for backward compatibility
+        preserve_dtypes = False
+    
+    return {"dense": dense_config, "preserve_dtypes": preserve_dtypes}
 
 
 def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
@@ -127,10 +159,15 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
         return data_to_wrap
 
     # dense_config == "pandas"
+    dtypes = None
+    if output_config["preserve_dtypes"] and hasattr(original_input, "dtypes"):
+        dtypes = original_input.dtypes
+    
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=dtypes,
     )
 
 
@@ -208,7 +245,7 @@ class _SetOutputMixin:
             setattr(cls, method, wrapped_method)
 
     @available_if(_auto_wrap_is_configured)
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=None):
         """Set output container.
 
         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
@@ -222,23 +259,39 @@ class _SetOutputMixin:
             - `"default"`: Default output format of a transformer
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
+            
+        preserve_dtypes : bool, default=None
+            Whether to preserve the dtypes from the input DataFrame when using
+            pandas output. Only used when `transform="pandas"`.
+            
+            - `True`: Preserve original dtypes from input DataFrame
+            - `False`: Use default dtypes in output DataFrame
+            - `None`: Preserve dtypes configuration is unchanged
 
         Returns
         -------
         self : estimator instance
             Estimator instance.
         """
-        if transform is None:
+        if transform is None and preserve_dtypes is None:
             return self
 
         if not hasattr(self, "_sklearn_output_config"):
             self._sklearn_output_config = {}
-
-        self._sklearn_output_config["transform"] = transform
+            
+        if "transform" not in self._sklearn_output_config:
+            self._sklearn_output_config["transform"] = {}
+
+        if transform is not None:
+            self._sklearn_output_config["transform"]["dense"] = transform
+            
+        if preserve_dtypes is not None:
+            self._sklearn_output_config["transform"]["preserve_dtypes"] = preserve_dtypes
+            
         return self
 
 
-def _safe_set_output(estimator, *, transform=None):
+def _safe_set_output(estimator, *, transform=None, preserve_dtypes=None):
     """Safely call estimator.set_output and error if it not available.
 
     This is used by meta-estimators to set the output for child estimators.
@@ -255,6 +308,14 @@ def _safe_set_output(estimator, *, transform=None):
         - `"fit_transform"`
 
         If `None`, this operation is a no-op.
+        
+    preserve_dtypes : bool, default=None
+        Whether to preserve the dtypes from the input DataFrame when using
+        pandas output. Only used when `transform="pandas"`.
+        
+        - `True`: Preserve original dtypes from input DataFrame
+        - `False`: Use default dtypes in output DataFrame
+        - `None`: Preserve dtypes configuration is unchanged
 
     Returns
     -------
@@ -264,7 +325,7 @@ def _safe_set_output(estimator, *, transform=None):
     set_output_for_transform = (
         hasattr(estimator, "transform")
         or hasattr(estimator, "fit_transform")
-        and transform is not None
+        and (transform is not None or preserve_dtypes is not None)
     )
     if not set_output_for_transform:
         # If estimator can not transform, then `set_output` does not need to be
@@ -276,4 +337,4 @@ def _safe_set_output(estimator, *, transform=None):
             f"Unable to configure output for {estimator} because `set_output` "
             "is not available."
         )
-    return estimator.set_output(transform=transform)
+    return estimator.set_output(transform=transform, preserve_dtypes=preserve_dtypes)
