{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "scikit-learn__scikit-learn-25973", "model_patch": "diff --git a/sklearn/feature_selection/_sequential.py b/sklearn/feature_selection/_sequential.py\nindex e983c55de..67a342357 100644\n--- a/sklearn/feature_selection/_sequential.py\n+++ b/sklearn/feature_selection/_sequential.py\n@@ -185,6 +185,9 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator\n         self.scoring = scoring\n         self.cv = cv\n         self.n_jobs = n_jobs\n+        \n+        # Store the original cv\n+        self._cv = cv\n \n     def fit(self, X, y=None):\n         \"\"\"Learn the features to select from X.\n@@ -205,7 +208,15 @@ class SequentialFeatureSelector(SelectorMixin, MetaEstimatorMixin, BaseEstimator\n             Returns the instance itself.\n         \"\"\"\n         self._validate_params()\n-\n+        \n+        # If cv is an iterable (not a CV splitter or int), convert it to a proper CV object\n+        if not hasattr(self.cv, \"split\") and not isinstance(self.cv, int) and hasattr(self.cv, \"__iter__\"):\n+            from sklearn.model_selection import check_cv\n+            cv_list = list(self.cv)  # Convert iterator to list to avoid consuming it\n+            if not cv_list:\n+                raise ValueError(\"The cv parameter is an empty iterable. It must contain at least one train/test split.\")\n+            self.cv = cv_list\n+            \n         # FIXME: to be removed in 1.3\n         if self.n_features_to_select in (\"warn\", None):\n             # for backwards compatibility\n"}