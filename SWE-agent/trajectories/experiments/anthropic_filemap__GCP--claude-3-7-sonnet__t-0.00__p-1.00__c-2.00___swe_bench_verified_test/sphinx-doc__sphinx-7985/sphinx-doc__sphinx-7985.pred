{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd5317087..5bf46714f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -208,12 +208,41 @@ class CheckExternalLinksBuilder(Builder):\n                 else:\n                     return 'redirected', new_url, 0\n \n+        def check_local_uri(local_uri: str) -> Tuple[str, str, int]:\n+            # Check if the local URI exists in the project\n+            \n+            # For the PR description, we just need to check if the target document exists\n+            # We'll check if the referenced document is in the list of all documents\n+            \n+            # If it's a reference to a label, we need to check if the label exists\n+            if local_uri in self.env.labels:\n+                return 'working', '', 0\n+                \n+            # Otherwise, it might be a direct reference to a document\n+            # Strip any anchor part\n+            if '#' in local_uri:\n+                local_uri = local_uri.split('#', 1)[0]\n+                \n+            # If it's empty, it refers to the current document\n+            if not local_uri:\n+                return 'working', '', 0\n+                \n+            # Strip file extension if present\n+            for ext in self.app.config.source_suffix:\n+                if local_uri.endswith(ext):\n+                    local_uri = local_uri[:-len(ext)]\n+                    break\n+                \n+            # Check if the document exists in the project\n+            if local_uri not in self.env.all_docs:\n+                return 'broken', f\"Document '{local_uri}' not found\", 0\n+                \n+            return 'working', '', 0\n+            \n         def check() -> Tuple[str, str, int]:\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n@@ -223,6 +252,10 @@ class CheckExternalLinksBuilder(Builder):\n             for rex in self.to_ignore:\n                 if rex.match(uri):\n                     return 'ignored', '', 0\n+                    \n+            # Handle local links (not http/https)\n+            if not uri.startswith(('http:', 'https:')):\n+                return check_local_uri(uri)\n \n             # need to actually check the URI\n             for _ in range(self.app.config.linkcheck_retries):\n"}