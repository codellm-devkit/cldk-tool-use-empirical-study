{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-23413", "model_patch": "diff --git a/sympy/matrices/normalforms.py b/sympy/matrices/normalforms.py\nindex 7bce95d230..ded8987087 100644\n--- a/sympy/matrices/normalforms.py\n+++ b/sympy/matrices/normalforms.py\n@@ -124,4 +124,26 @@ def hermite_normal_form(A, *, D=None, check_rank=False):\n     # Accept any of Python int, SymPy Integer, and ZZ itself:\n     if D is not None and not ZZ.of_type(D):\n         D = ZZ(int(D))\n-    return _hnf(A._rep, D=D, check_rank=check_rank).to_Matrix()\n+    \n+    # Compute the HNF\n+    hnf = _hnf(A._rep, D=D, check_rank=check_rank).to_Matrix()\n+    \n+    # Find the pivot positions in each column\n+    m, n = hnf.shape\n+    row_pivots = {}  # Maps row index to pivot column index\n+    \n+    # Find the leftmost non-zero entry in each row\n+    for i in range(m):\n+        for j in range(n):\n+            if hnf[i, j] != 0:\n+                row_pivots[i] = j\n+                break\n+    \n+    # Zero out entries to the right of pivots in each row\n+    for i in range(m):\n+        if i in row_pivots:\n+            pivot_col = row_pivots[i]\n+            for j in range(pivot_col + 1, n):\n+                hnf[i, j] = 0\n+    \n+    return hnf\ndiff --git a/sympy/polys/matrices/normalforms.py b/sympy/polys/matrices/normalforms.py\nindex 30f5534b08..61a107a7dd 100644\n--- a/sympy/polys/matrices/normalforms.py\n+++ b/sympy/polys/matrices/normalforms.py\n@@ -243,9 +243,11 @@ def _hermite_normal_form(A):\n             for j in range(k + 1, n):\n                 q = A[i][j] // b\n                 add_columns(A, j, k, 1, -q, 0, 1)\n-    # Finally, the HNF consists of those columns of A in which we succeeded in making\n-    # a nonzero pivot.\n-    return DomainMatrix.from_rep(A)[:, k:]\n+    \n+    # Return the full matrix, not just the columns with pivots.\n+    # This ensures that when using flips and transposes to achieve a row-style HNF,\n+    # we don't lose any rows that might be considered linearly dependent.\n+    return DomainMatrix.from_rep(A)\n \n \n def _hermite_normal_form_modulo_D(A, D):\n"}