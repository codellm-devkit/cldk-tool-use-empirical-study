diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py
index c91da57e9..25c1f519b 100644
--- a/sphinx/builders/html/transforms.py
+++ b/sphinx/builders/html/transforms.py
@@ -38,25 +38,55 @@ class KeyboardTransform(SphinxPostTransform):
     default_priority = 400
     builders = ('html',)
     pattern = re.compile(r'(-|\+|\^|\s+)')
+    separators = {'-', '+', '^'}
 
     def run(self, **kwargs: Any) -> None:
         matcher = NodeMatcher(nodes.literal, classes=["kbd"])
         for node in self.document.traverse(matcher):  # type: nodes.literal
-            parts = self.pattern.split(node[-1].astext())
+            text = node[-1].astext()
+            
+            # Handle single character keystrokes that are separators
+            if text in self.separators:
+                continue
+                
+            parts = self.pattern.split(text)
             if len(parts) == 1:
                 continue
 
             node.pop()
-            while parts:
-                key = parts.pop(0)
+            
+            # Process the parts
+            i = 0
+            while i < len(parts):
+                # Handle separator at the beginning of the text
+                if i == 0 and not parts[i] and i + 1 < len(parts) and parts[i + 1] in self.separators:
+                    sep = parts[i + 1]
+                    node += nodes.literal('', sep, classes=["kbd"])
+                    i += 2
+                    continue
+                
+                key = parts[i]
+                i += 1
+                
+                # Skip empty keys
+                if not key:
+                    continue
+                    
+                # Add the key
                 node += nodes.literal('', key, classes=["kbd"])
-
-                try:
-                    # key separator (ex. -, +, ^)
-                    sep = parts.pop(0)
-                    node += nodes.Text(sep)
-                except IndexError:
-                    pass
+                
+                # Process separators and spaces
+                if i < len(parts):
+                    # Check if we have a separator or space
+                    if parts[i] in self.separators:
+                        # It's a separator
+                        sep = parts[i]
+                        node += nodes.Text(sep)
+                        i += 1
+                    elif parts[i].strip() == '':
+                        # It's whitespace
+                        node += nodes.Text(parts[i])
+                        i += 1
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:
