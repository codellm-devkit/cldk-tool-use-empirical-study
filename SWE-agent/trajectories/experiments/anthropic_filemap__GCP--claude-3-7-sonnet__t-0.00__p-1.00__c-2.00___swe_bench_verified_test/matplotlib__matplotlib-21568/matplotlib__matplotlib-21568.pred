{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-21568", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 0766156d64..ca20a16ce3 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -592,12 +592,51 @@ def drange(dstart, dend, delta):\n \n \n def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n-\n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n+    \"\"\"\n+    Wraps text in TeX to ensure proper rendering with usetex=True.\n+    \n+    For dates and times, we want to keep the numbers and letters together\n+    to maintain proper spacing.\n+    \"\"\"\n+    # Check if this is likely a date/time string\n+    date_time_indicators = [':', '-', '/', '.']\n+    is_datetime = any(indicator in text for indicator in date_time_indicators)\n+    \n+    # Check for month names with years (e.g., \"Jan 2020\")\n+    month_year_pattern = re.match(r'^([a-zA-Z]{3})\\s+(\\d{4})$', text)\n+    \n+    # Check for day with month (e.g., \"01 Jan\")\n+    day_month_pattern = re.match(r'^(\\d{1,2})\\s+([a-zA-Z]{3})$', text)\n+    \n+    # Check for full month names with years (e.g., \"January 2020\")\n+    full_month_year = re.match(r'^([a-zA-Z]+)\\s+(\\d{4})$', text)\n+    \n+    # Check for weekday abbreviations (e.g., \"Mon\", \"Tue\")\n+    weekday_abbr = re.match(r'^(Mon|Tue|Wed|Thu|Fri|Sat|Sun)$', text)\n+    \n+    # Check for full weekday names (e.g., \"Monday\", \"Tuesday\")\n+    weekday_full = re.match(r'^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)$', text)\n+    \n+    # Check for strings that contain both numbers and letters with spaces\n+    # This helps with formats like \"01 Jan\", \"1st Jan\", etc.\n+    mixed_alpha_num = bool(re.search(r'\\d', text) and re.search(r'[a-zA-Z]', text) and ' ' in text)\n+    \n+    # For weekday names, don't apply any TeX formatting\n+    if weekday_abbr or weekday_full:\n+        return text\n+    \n+    # For date/time strings and other date patterns, keep everything together\n+    if is_datetime or month_year_pattern or day_month_pattern or full_month_year or mixed_alpha_num:\n+        # Braces ensure dashes are not spaced like binary operators\n+        ret_text = '$\\\\mathdefault{' + text.replace('-', '{-}') + '}$'\n+    else:\n+        # Original behavior for non-date/time strings\n+        p = r'([a-zA-Z]+)'\n+        ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n+        # Braces ensure dashes are not spaced like binary operators\n+        ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n+        ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n+    \n     return ret_text\n \n \n"}