{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 90d90119d0..ea50ee410d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -24,7 +24,11 @@ class SQLiteNumericMixin:\n         sql, params = self.as_sql(compiler, connection, **extra_context)\n         try:\n             if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n+                # Check if this is being used in a window function\n+                # If it's a window function, don't apply CAST here\n+                # as it will be applied to the entire window expression later\n+                if not getattr(self, 'window_compatible', False):\n+                    sql = 'CAST(%s AS NUMERIC)' % sql\n         except FieldError:\n             pass\n         return sql, params\n@@ -1327,10 +1331,23 @@ class Window(Expression):\n         params.extend(window_params)\n         template = template or self.template\n \n-        return template % {\n+        result = template % {\n             'expression': expr_sql,\n             'window': ''.join(window_sql).strip()\n         }, params\n+        \n+        # Special handling for SQLite with DecimalField\n+        if connection.vendor == 'sqlite':\n+            try:\n+                if hasattr(self.source_expression, 'output_field') and \\\n+                   self.source_expression.output_field.get_internal_type() == 'DecimalField':\n+                    sql, params = result\n+                    sql = 'CAST(%s AS NUMERIC)' % sql\n+                    result = sql, params\n+            except FieldError:\n+                pass\n+                \n+        return result\n \n     def __str__(self):\n         return '{} OVER ({}{}{})'.format(\n"}