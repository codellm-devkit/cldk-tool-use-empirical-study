{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-14311", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f5491..e320efc582 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -224,7 +224,19 @@ def get_child_arguments():\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n     if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:\n-        args += ['-m', __main__.__spec__.parent]\n+        # Use __spec__.name if available, otherwise fall back to __spec__.parent\n+        module_name = getattr(__main__.__spec__, 'name', __main__.__spec__.parent)\n+        \n+        # Special case for Django's own __main__ module\n+        if module_name == 'django.__main__':\n+            module_name = 'django'\n+        # Handle the case of a package with __main__.py\n+        elif module_name.endswith('.__main__'):\n+            # When running 'python -m foo.bar', the module name is 'foo.bar.__main__'\n+            # but we want to restart with 'python -m foo.bar'\n+            module_name = module_name[:-9]  # Remove '.__main__'\n+            \n+        args += ['-m', module_name]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n"}