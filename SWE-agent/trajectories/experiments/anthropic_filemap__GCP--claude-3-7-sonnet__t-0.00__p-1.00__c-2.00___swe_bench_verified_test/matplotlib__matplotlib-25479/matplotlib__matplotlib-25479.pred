{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-25479", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 38158db956..409844e834 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -145,7 +145,11 @@ class ColormapRegistry(Mapping):\n             _api.warn_external(f\"Overwriting the cmap {name!r} \"\n                                \"that was already in the registry.\")\n \n-        self._cmaps[name] = cmap.copy()\n+        # Create a copy of the colormap with the registered name\n+        copied_cmap = cmap.copy()\n+        # Update the name attribute to match the registered name\n+        copied_cmap.name = name\n+        self._cmaps[name] = copied_cmap\n \n     def unregister(self, name):\n         \"\"\"\n@@ -715,6 +719,12 @@ def _ensure_cmap(cmap):\n \n     \"\"\"\n     if isinstance(cmap, colors.Colormap):\n+        # Check if this colormap is registered under a different name\n+        for name, registered_cmap in _colormaps.items():\n+            if registered_cmap is cmap:\n+                # Update the colormap's name to match the registered name\n+                cmap = registered_cmap\n+                break\n         return cmap\n     cmap_name = cmap if cmap is not None else mpl.rcParams[\"image.cmap\"]\n     # use check_in_list to ensure type stability of the exception raised by\n"}