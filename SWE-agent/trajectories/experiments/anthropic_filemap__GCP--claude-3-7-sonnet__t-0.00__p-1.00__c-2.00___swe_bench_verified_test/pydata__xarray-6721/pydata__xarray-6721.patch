diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 9fe93c88..8d2de21c 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1727,7 +1727,7 @@ def dot(*arrays, dims=None, **kwargs):
     return result.transpose(*all_dims, missing_dims="ignore")
 
 
-def where(cond, x, y):
+def where(cond, x, y, keep_attrs=True, source_attrs=None):
     """Return elements from `x` or `y` depending on `cond`.
 
     Performs xarray-like broadcasting across input arguments.
@@ -1743,6 +1743,13 @@ def where(cond, x, y):
         values to choose from where `cond` is True
     y : scalar, array, Variable, DataArray or Dataset
         values to choose from where `cond` is False
+    keep_attrs : bool, optional
+        Whether to preserve attributes from the input objects in the output.
+        Default is True.
+    source_attrs : dict, optional
+        If provided, these attributes will be attached to the result.
+        This is useful for the case where attributes should be preserved
+        but neither x, y, nor cond have the desired attributes.
 
     Returns
     -------
@@ -1808,8 +1815,10 @@ def where(cond, x, y):
     Dataset.where, DataArray.where :
         equivalent methods
     """
-    # alignment for three arguments is complicated, so don't support it yet
-    return apply_ufunc(
+    from .dataarray import DataArray
+    
+    # Get the result from apply_ufunc
+    result = apply_ufunc(
         duck_array_ops.where,
         cond,
         x,
@@ -1817,7 +1826,24 @@ def where(cond, x, y):
         join="exact",
         dataset_join="exact",
         dask="allowed",
+        keep_attrs=keep_attrs,
     )
+    
+    # If source_attrs is provided, use those attributes
+    if source_attrs is not None and hasattr(result, 'attrs'):
+        result.attrs.update(source_attrs)
+    # Otherwise, if keep_attrs is True and the result doesn't have attributes,
+    # try to copy attributes from the inputs
+    elif keep_attrs and hasattr(result, 'attrs') and not result.attrs:
+        # Try to get attributes from x, then y, then cond
+        if isinstance(x, DataArray) and hasattr(x, 'attrs') and x.attrs:
+            result.attrs.update(x.attrs)
+        elif isinstance(y, DataArray) and hasattr(y, 'attrs') and y.attrs:
+            result.attrs.update(y.attrs)
+        elif isinstance(cond, DataArray) and hasattr(cond, 'attrs') and cond.attrs:
+            result.attrs.update(cond.attrs)
+    
+    return result
 
 
 def polyval(coord, coeffs, degree_dim="degree"):
