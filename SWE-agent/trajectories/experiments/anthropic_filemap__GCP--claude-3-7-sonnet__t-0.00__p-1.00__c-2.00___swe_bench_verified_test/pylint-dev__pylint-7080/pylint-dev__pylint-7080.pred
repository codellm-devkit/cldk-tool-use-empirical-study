{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pylint-dev__pylint-7080", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 5cacc0371..cfd04179c 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -43,7 +43,20 @@ def get_python_path(filepath: str) -> str:\n \n def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:\n     \"\"\"Determines if the element is matched in a regex ignore-list.\"\"\"\n-    return any(file_pattern.match(element) for file_pattern in ignore_list_re)\n+    # Convert backslashes to forward slashes for consistent matching\n+    element_posix = element.replace(\"\\\\\", \"/\")\n+    \n+    for file_pattern in ignore_list_re:\n+        # Try to match the full path\n+        match = file_pattern.match(element)\n+        \n+        # If no match, try with the posix version\n+        if not match:\n+            match = file_pattern.match(element_posix)\n+        \n+        if match:\n+            return True\n+    return False\n \n \n def _is_ignored_file(\n@@ -53,11 +66,30 @@ def _is_ignored_file(\n     ignore_list_paths_re: list[Pattern[str]],\n ) -> bool:\n     basename = os.path.basename(element)\n-    return (\n-        basename in ignore_list\n-        or _is_in_ignore_list_re(basename, ignore_list_re)\n-        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n-    )\n+    \n+    # Check if the basename is in the ignore list\n+    if basename in ignore_list:\n+        return True\n+    \n+    # Check if the basename matches any pattern in ignore_list_re\n+    if _is_in_ignore_list_re(basename, ignore_list_re):\n+        return True\n+    \n+    # Check if the full path matches any pattern in ignore_list_paths_re\n+    if _is_in_ignore_list_re(element, ignore_list_paths_re):\n+        return True\n+    \n+    # If we're not in the ignore paths yet, try to match against relative paths\n+    # This is important for the --recursive=y option which uses absolute paths\n+    try:\n+        rel_path = os.path.relpath(element)\n+        if _is_in_ignore_list_re(rel_path, ignore_list_paths_re):\n+            return True\n+    except ValueError:\n+        # relpath might fail if the paths are on different drives\n+        pass\n+    \n+    return False\n \n \n def expand_modules(\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..e38308261 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -610,11 +610,16 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                        for file in files:\n+                            if file.endswith(\".py\"):\n+                                file_path = os.path.join(root, file)\n+                                if not _is_ignored_file(\n+                                    file_path,\n+                                    self.config.ignore,\n+                                    self.config.ignore_patterns,\n+                                    self.config.ignore_paths,\n+                                ):\n+                                    yield file_path\n             else:\n                 yield something\n \n"}