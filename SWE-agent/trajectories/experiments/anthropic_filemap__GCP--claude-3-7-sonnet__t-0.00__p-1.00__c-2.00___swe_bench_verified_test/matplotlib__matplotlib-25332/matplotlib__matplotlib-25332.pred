{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\nindex c9699b2e21..7b7999c498 100644\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -845,6 +845,36 @@ class Grouper:\n         self.clean()\n         siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])\n         return [x() for x in siblings]\n+        \n+    def __getstate__(self):\n+        \"\"\"Return state for pickling.\"\"\"\n+        # Convert weak references to strong references for pickling\n+        # We'll convert them back to weak references when unpickling\n+        state = {}\n+        mapping = {}\n+        for key, value in self._mapping.items():\n+            # Skip dead references\n+            if key() is None:\n+                continue\n+            # Convert weak ref key to strong ref\n+            strong_key = key()\n+            # Convert list of weak refs to list of strong refs\n+            strong_value = [ref() for ref in value if ref() is not None]\n+            mapping[strong_key] = strong_value\n+        state['_mapping'] = mapping\n+        return state\n+        \n+    def __setstate__(self, state):\n+        \"\"\"Restore state when unpickling.\"\"\"\n+        # Convert strong references back to weak references\n+        mapping = {}\n+        for key, value in state['_mapping'].items():\n+            # Convert strong ref key to weak ref\n+            weak_key = weakref.ref(key)\n+            # Convert list of strong refs to list of weak refs\n+            weak_value = [weakref.ref(obj) for obj in value]\n+            mapping[weak_key] = weak_value\n+        self._mapping = mapping\n \n \n class GrouperView:\n"}