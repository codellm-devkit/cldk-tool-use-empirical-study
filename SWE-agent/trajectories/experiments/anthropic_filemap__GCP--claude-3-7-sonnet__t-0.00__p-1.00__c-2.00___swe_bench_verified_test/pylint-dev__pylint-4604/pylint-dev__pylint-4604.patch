diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py
index f3f03c94..4432f242 100644
--- a/xarray/core/indexes.py
+++ b/xarray/core/indexes.py
@@ -178,8 +178,11 @@ def safe_cast_to_index(array: Any) -> pd.Index:
         index = array.array
     else:
         kwargs = {}
-        if hasattr(array, "dtype") and array.dtype.kind == "O":
-            kwargs["dtype"] = object
+        if hasattr(array, "dtype"):
+            if array.dtype.kind == "O":
+                kwargs["dtype"] = object
+            elif array.dtype.kind in "iuf":  # integer, unsigned integer, or float
+                kwargs["dtype"] = array.dtype  # preserve original dtype
         index = pd.Index(np.asarray(array), **kwargs)
 
     return _maybe_cast_to_cftimeindex(index)
@@ -706,10 +709,13 @@ class PandasMultiIndex(PandasIndex):
                     f"from variable {name!r} that wraps a multi-index"
                 )
 
-        split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])
+        # Use factorize but preserve original dtypes
+        factorized = [lev.factorize() for lev in level_indexes]
+        split_labels, levels = zip(*factorized)
         labels_mesh = np.meshgrid(*split_labels, indexing="ij")
         labels = [x.ravel() for x in labels_mesh]
 
+        # Create MultiIndex with original dtypes
         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())
         level_coords_dtype = {k: var.dtype for k, var in variables.items()}
 
diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py
index ba937183..e12ef599 100644
--- a/xarray/core/indexing.py
+++ b/xarray/core/indexing.py
@@ -1434,14 +1434,23 @@ class PandasIndexingAdapter(ExplicitlyIndexedNDArrayMixin):
         return self._dtype
 
     def __array__(self, dtype: DTypeLike = None) -> np.ndarray:
-        if dtype is None:
-            dtype = self.dtype
         array = self.array
         if isinstance(array, pd.PeriodIndex):
             with suppress(AttributeError):
                 # this might not be public API
                 array = array.astype("object")
-        return np.asarray(array.values, dtype=dtype)
+        
+        # Get the values from the pandas Index
+        values = array.values
+        
+        # Preserve the original dtype for numeric types if no specific dtype is requested
+        if dtype is None and hasattr(values, 'dtype') and values.dtype.kind in 'iuf':
+            return np.asarray(values)
+        
+        # Otherwise use the specified dtype or self.dtype
+        if dtype is None:
+            dtype = self.dtype
+        return np.asarray(values, dtype=dtype)
 
     @property
     def shape(self) -> tuple[int, ...]:
@@ -1532,7 +1541,17 @@ class PandasMultiIndexingAdapter(PandasIndexingAdapter):
 
     def __array__(self, dtype: DTypeLike = None) -> np.ndarray:
         if self.level is not None:
-            return self.array.get_level_values(self.level).values
+            # Get values from the level
+            values = self.array.get_level_values(self.level).values
+            
+            # Preserve the original dtype for numeric types if no specific dtype is requested
+            if dtype is None and hasattr(values, 'dtype') and values.dtype.kind in 'iuf':
+                return np.asarray(values)
+            
+            # Otherwise use the specified dtype
+            if dtype is not None:
+                return np.asarray(values, dtype=dtype)
+            return values
         else:
             return super().__array__(dtype)
 
