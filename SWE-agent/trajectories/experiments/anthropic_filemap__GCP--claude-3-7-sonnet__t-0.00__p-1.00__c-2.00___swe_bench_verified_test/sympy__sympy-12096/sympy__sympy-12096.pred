{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-12096", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 1b8005e1d2..23c8c5e1db 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -498,6 +498,33 @@ def is_commutative(self):\n             return False\n \n     def _eval_evalf(self, prec):\n+        # First, check if this is an implemented function with _imp_\n+        if hasattr(self, '_imp_'):\n+            try:\n+                # Evaluate the arguments first if they have evalf method\n+                evaled_args = []\n+                for arg in self.args:\n+                    if hasattr(arg, 'evalf'):\n+                        evaled_args.append(arg.evalf(prec))\n+                    else:\n+                        evaled_args.append(arg)\n+                \n+                # Apply the implementation function to the evaluated arguments\n+                result = self._imp_(*evaled_args)\n+                \n+                # If the result has evalf, call it recursively\n+                if hasattr(result, 'evalf'):\n+                    return result.evalf(prec)\n+                \n+                # Try to convert to Float if possible\n+                try:\n+                    return Float(result, prec)\n+                except (TypeError, ValueError):\n+                    # If we can't convert to Float, return the result as is\n+                    return result\n+            except (AttributeError, TypeError, ValueError):\n+                pass  # Fall back to mpmath lookup\n+        \n         # Lookup mpmath function based on name\n         fname = self.func.__name__\n         try:\n@@ -506,6 +533,9 @@ def _eval_evalf(self, prec):\n                 fname = MPMATH_TRANSLATIONS[fname]\n             func = getattr(mpmath, fname)\n         except (AttributeError, KeyError):\n+            # If we already tried _imp_ above, just return\n+            if hasattr(self, '_imp_'):\n+                return\n             try:\n                 return Float(self._imp_(*self.args), prec)\n             except (AttributeError, TypeError, ValueError):\n"}