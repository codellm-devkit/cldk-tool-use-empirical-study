{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..cb745e8348\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,13 @@\n+from sympy import *\n+from sympy.abc import a\n+\n+def f(n):\n+    return det(Matrix([[i + a*j for i in range(n)] for j in range(n)]))\n+\n+# Test different matrix sizes\n+for n in range(1, 7):\n+    try:\n+        result = f(n)\n+        print(f\"f({n}) = {result}\")\n+    except Exception as e:\n+        print(f\"f({n}) raised an exception: {type(e).__name__}: {e}\")\n\\ No newline at end of file\ndiff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 97cde62e26..ab415ca21f 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -422,7 +422,13 @@ def det(self, method=\"bareiss\"):\n                    - self[0, 0] * self[1, 2] * self[2, 1]\n                    - self[0, 1] * self[1, 0] * self[2, 2])\n \n-        if method == \"bareiss\":\n+        # Check if matrix contains any symbolic entries\n+        has_symbols = any(i.has(Symbol) for i in self)\n+        \n+        # Use Berkowitz algorithm for symbolic matrices as it's more robust\n+        if has_symbols and method == \"bareiss\":\n+            return self._eval_det_berkowitz()\n+        elif method == \"bareiss\":\n             return self._eval_det_bareiss()\n         elif method == \"berkowitz\":\n             return self._eval_det_berkowitz()\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..781a7f7ae5\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,37 @@\n+from sympy import *\n+from sympy.abc import a\n+\n+def f(n):\n+    return det(Matrix([[i + a*j for i in range(n)] for j in range(n)]))\n+\n+# Test the specific cases mentioned in the PR description\n+print(f\"f(1) = {f(1)}\")\n+print(f\"f(2) = {f(2)}\")\n+print(f\"f(3) = {f(3)}\")\n+print(f\"f(4) = {f(4)}\")\n+print(f\"f(5) = {f(5)}\")\n+print(f\"f(6) = {f(6)}\")\n+\n+# Test with a different symbolic variable\n+from sympy.abc import x\n+def g(n):\n+    return det(Matrix([[i + x*j for i in range(n)] for j in range(n)]))\n+\n+print(f\"\\nTesting with a different symbolic variable x:\")\n+print(f\"g(1) = {g(1)}\")\n+print(f\"g(2) = {g(2)}\")\n+print(f\"g(3) = {g(3)}\")\n+print(f\"g(4) = {g(4)}\")\n+print(f\"g(5) = {g(5)}\")\n+print(f\"g(6) = {g(6)}\")\n+\n+# Test with multiple symbolic variables\n+from sympy.abc import b, c\n+def h(n):\n+    return det(Matrix([[i*a + j*b + c for i in range(n)] for j in range(n)]))\n+\n+print(f\"\\nTesting with multiple symbolic variables a, b, c:\")\n+print(f\"h(1) = {h(1)}\")\n+print(f\"h(2) = {h(2)}\")\n+print(f\"h(3) = {h(3)}\")\n+print(f\"h(4) = {h(4)}\")\n\\ No newline at end of file\n"}