{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-16631", "model_patch": "diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py\nindex 155330c596..1c36af586a 100644\n--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -5,7 +5,7 @@ from django.apps import apps as django_apps\n from django.conf import settings\n from django.core.exceptions import ImproperlyConfigured, PermissionDenied\n from django.middleware.csrf import rotate_token\n-from django.utils.crypto import constant_time_compare\n+from django.utils.crypto import constant_time_compare, salted_hmac\n from django.utils.module_loading import import_string\n from django.views.decorators.debug import sensitive_variables\n \n@@ -199,9 +199,30 @@ def get_user(request):\n             # Verify the session\n             if hasattr(user, \"get_session_auth_hash\"):\n                 session_hash = request.session.get(HASH_SESSION_KEY)\n-                session_hash_verified = session_hash and constant_time_compare(\n-                    session_hash, user.get_session_auth_hash()\n-                )\n+                if session_hash:\n+                    # First try with the current SECRET_KEY\n+                    current_hash = user.get_session_auth_hash()\n+                    session_hash_verified = constant_time_compare(session_hash, current_hash)\n+                    \n+                    # If that fails, try with each of the fallback keys\n+                    if not session_hash_verified and settings.SECRET_KEY_FALLBACKS:\n+                        key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n+                        for fallback_key in settings.SECRET_KEY_FALLBACKS:\n+                            fallback_hash = salted_hmac(\n+                                key_salt,\n+                                user.password,\n+                                secret=fallback_key,\n+                                algorithm=\"sha256\",\n+                            ).hexdigest()\n+                            if constant_time_compare(session_hash, fallback_hash):\n+                                session_hash_verified = True\n+                                # Update the session with the current hash\n+                                request.session[HASH_SESSION_KEY] = current_hash\n+                                request.session.modified = True\n+                                break\n+                else:\n+                    session_hash_verified = False\n+                \n                 if not session_hash_verified:\n                     request.session.flush()\n                     user = None\n"}