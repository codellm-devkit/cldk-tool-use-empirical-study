{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "astropy__astropy-8707", "model_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 8c1ac5d738..c1dfbe7762 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -5,7 +5,7 @@ import warnings\n \n import numpy as np\n \n-from .util import _str_to_num, _is_int, translate, _words_group\n+from .util import _str_to_num, _is_int, translate, _words_group, decode_ascii\n from .verify import _Verify, _ErrList, VerifyError, VerifyWarning\n \n from . import conf\n@@ -547,12 +547,21 @@ class Card(_Verify):\n     @classmethod\n     def fromstring(cls, image):\n         \"\"\"\n-        Construct a `Card` object from a (raw) string. It will pad the string\n+        Construct a `Card` object from a (raw) string or bytes. It will pad the string\n         if it is not the length of a card image (80 columns).  If the card\n         image is longer than 80 columns, assume it contains ``CONTINUE``\n         card(s).\n+\n+        Parameters\n+        ----------\n+        image : str or bytes\n+            String or bytes containing the card image.\n         \"\"\"\n \n+        # Convert bytes to str if necessary\n+        if isinstance(image, bytes):\n+            image = decode_ascii(image)\n+\n         card = cls()\n         card._image = _pad(image)\n         card._verified = False\n@@ -1278,8 +1287,6 @@ def _pad(input):\n             return input\n         else:\n             return input + ' ' * (Card.length - strlen)\n-\n-    # minimum length is 80\n     else:\n-        strlen = _len % Card.length\n-        return input + ' ' * (Card.length - strlen)\n+        # minimum length is 80\n+        return input + ' ' * (Card.length - _len)\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex ad07e6d52d..7e1eaa5c7e 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -334,8 +334,8 @@ class Header:\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String or bytes containing the entire header.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -348,6 +348,10 @@ class Header:\n             A new `Header` instance.\n         \"\"\"\n \n+        # Convert bytes to str if necessary\n+        if isinstance(data, bytes):\n+            data = decode_ascii(data)\n+\n         cards = []\n \n         # If the card separator contains characters that may validly appear in\n"}