{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "pydata__xarray-4687", "model_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 9fe93c88..8d2de21c 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1727,7 +1727,7 @@ def dot(*arrays, dims=None, **kwargs):\n     return result.transpose(*all_dims, missing_dims=\"ignore\")\n \n \n-def where(cond, x, y):\n+def where(cond, x, y, keep_attrs=True, source_attrs=None):\n     \"\"\"Return elements from `x` or `y` depending on `cond`.\n \n     Performs xarray-like broadcasting across input arguments.\n@@ -1743,6 +1743,13 @@ def where(cond, x, y):\n         values to choose from where `cond` is True\n     y : scalar, array, Variable, DataArray or Dataset\n         values to choose from where `cond` is False\n+    keep_attrs : bool, optional\n+        Whether to preserve attributes from the input objects in the output.\n+        Default is True.\n+    source_attrs : dict, optional\n+        If provided, these attributes will be attached to the result.\n+        This is useful for the case where attributes should be preserved\n+        but neither x, y, nor cond have the desired attributes.\n \n     Returns\n     -------\n@@ -1808,8 +1815,10 @@ def where(cond, x, y):\n     Dataset.where, DataArray.where :\n         equivalent methods\n     \"\"\"\n-    # alignment for three arguments is complicated, so don't support it yet\n-    return apply_ufunc(\n+    from .dataarray import DataArray\n+    \n+    # Get the result from apply_ufunc\n+    result = apply_ufunc(\n         duck_array_ops.where,\n         cond,\n         x,\n@@ -1817,7 +1826,24 @@ def where(cond, x, y):\n         join=\"exact\",\n         dataset_join=\"exact\",\n         dask=\"allowed\",\n+        keep_attrs=keep_attrs,\n     )\n+    \n+    # If source_attrs is provided, use those attributes\n+    if source_attrs is not None and hasattr(result, 'attrs'):\n+        result.attrs.update(source_attrs)\n+    # Otherwise, if keep_attrs is True and the result doesn't have attributes,\n+    # try to copy attributes from the inputs\n+    elif keep_attrs and hasattr(result, 'attrs') and not result.attrs:\n+        # Try to get attributes from x, then y, then cond\n+        if isinstance(x, DataArray) and hasattr(x, 'attrs') and x.attrs:\n+            result.attrs.update(x.attrs)\n+        elif isinstance(y, DataArray) and hasattr(y, 'attrs') and y.attrs:\n+            result.attrs.update(y.attrs)\n+        elif isinstance(cond, DataArray) and hasattr(cond, 'attrs') and cond.attrs:\n+            result.attrs.update(cond.attrs)\n+    \n+    return result\n \n \n def polyval(coord, coeffs, degree_dim=\"degree\"):\n"}