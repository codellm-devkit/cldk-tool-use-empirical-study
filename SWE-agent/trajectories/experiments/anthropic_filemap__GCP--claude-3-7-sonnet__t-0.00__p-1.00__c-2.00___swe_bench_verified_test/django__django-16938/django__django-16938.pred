{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-16938", "model_patch": "diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex 36048601af..970cc5982e 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -71,7 +71,22 @@ class Serializer(base.Serializer):\n                     return value.natural_key()\n \n                 def queryset_iterator(obj, field):\n-                    return getattr(obj, field.name).iterator()\n+                    # Get the related manager\n+                    related_manager = getattr(obj, field.name)\n+                    \n+                    # Use a plain manager to avoid select_related issues\n+                    from django.db.models import Manager\n+                    plain_manager = Manager()\n+                    plain_manager.model = field.remote_field.model\n+                    \n+                    # Get the PKs from the related manager\n+                    pks = list(related_manager.values_list('pk', flat=True))\n+                    \n+                    # Use the plain manager to get the objects by PK\n+                    if pks:\n+                        return plain_manager.get_queryset().filter(pk__in=pks).iterator()\n+                    else:\n+                        return iter([])  # Empty iterator if no related objects\n \n             else:\n \n@@ -79,7 +94,22 @@ class Serializer(base.Serializer):\n                     return self._value_from_field(value, value._meta.pk)\n \n                 def queryset_iterator(obj, field):\n-                    return getattr(obj, field.name).only(\"pk\").iterator()\n+                    # Get the related manager\n+                    related_manager = getattr(obj, field.name)\n+                    \n+                    # Use a plain manager to avoid select_related issues\n+                    from django.db.models import Manager\n+                    plain_manager = Manager()\n+                    plain_manager.model = field.remote_field.model\n+                    \n+                    # Get the PKs from the related manager\n+                    pks = list(related_manager.values_list('pk', flat=True))\n+                    \n+                    # Use the plain manager to get the objects by PK\n+                    if pks:\n+                        return plain_manager.get_queryset().filter(pk__in=pks).iterator()\n+                    else:\n+                        return iter([])  # Empty iterator if no related objects\n \n             m2m_iter = getattr(obj, \"_prefetched_objects_cache\", {}).get(\n                 field.name,\n"}