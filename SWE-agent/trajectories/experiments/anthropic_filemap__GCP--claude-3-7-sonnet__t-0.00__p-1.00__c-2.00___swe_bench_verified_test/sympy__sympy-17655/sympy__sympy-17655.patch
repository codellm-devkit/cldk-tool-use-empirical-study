diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..888e945809 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -213,6 +213,21 @@ def __add__(self, other):
         sympy.geometry.point.Point.translate
 
         """
+        from sympy.core.mul import Mul
+        
+        # Handle the case where other is a Mul object with a Point factor
+        if isinstance(other, Mul):
+            point_factors = [arg for arg in other.args if isinstance(arg, Point)]
+            if len(point_factors) == 1:
+                point = point_factors[0]
+                # Extract the scalar factors (everything except the Point)
+                scalar_factors = [arg for arg in other.args if arg != point]
+                # Multiply the point by each scalar factor
+                result = point
+                for factor in scalar_factors:
+                    result = result * factor
+                return self + result
+        
         try:
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
@@ -274,9 +289,38 @@ def __mul__(self, factor):
 
         sympy.geometry.point.Point.scale
         """
+        # Prevent multiplying a point by another point
+        if isinstance(factor, Point):
+            raise TypeError("Cannot multiply a Point by another Point")
+            
         factor = sympify(factor)
         coords = [simplify(x*factor) for x in self.args]
         return Point(coords, evaluate=False)
+        
+    def __rmul__(self, factor):
+        """Multiply point's coordinates by a factor (from the left).
+        
+        This is the same as `__mul__` but allows the factor to be on the left.
+        
+        Examples
+        ========
+        
+        >>> from sympy.geometry.point import Point
+        >>> 2 * Point(1, 2)
+        Point2D(2, 4)
+        """
+        return self.__mul__(factor)
+        
+    # Add these methods to make Point work with sympy's core operations
+    def as_coeff_Mul(self):
+        """Return the tuple (S.One, self)."""
+        from sympy import S
+        return S.One, self
+        
+    def as_numer_denom(self):
+        """Return the tuple (self, S.One)."""
+        from sympy import S
+        return self, S.One
 
     def __neg__(self):
         """Negate the point."""
