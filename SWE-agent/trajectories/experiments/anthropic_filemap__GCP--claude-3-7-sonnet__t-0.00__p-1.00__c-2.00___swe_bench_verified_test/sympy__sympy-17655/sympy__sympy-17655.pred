{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..888e945809 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,6 +213,21 @@ def __add__(self, other):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        from sympy.core.mul import Mul\n+        \n+        # Handle the case where other is a Mul object with a Point factor\n+        if isinstance(other, Mul):\n+            point_factors = [arg for arg in other.args if isinstance(arg, Point)]\n+            if len(point_factors) == 1:\n+                point = point_factors[0]\n+                # Extract the scalar factors (everything except the Point)\n+                scalar_factors = [arg for arg in other.args if arg != point]\n+                # Multiply the point by each scalar factor\n+                result = point\n+                for factor in scalar_factors:\n+                    result = result * factor\n+                return self + result\n+        \n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n@@ -274,9 +289,38 @@ def __mul__(self, factor):\n \n         sympy.geometry.point.Point.scale\n         \"\"\"\n+        # Prevent multiplying a point by another point\n+        if isinstance(factor, Point):\n+            raise TypeError(\"Cannot multiply a Point by another Point\")\n+            \n         factor = sympify(factor)\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n+        \n+    def __rmul__(self, factor):\n+        \"\"\"Multiply point's coordinates by a factor (from the left).\n+        \n+        This is the same as `__mul__` but allows the factor to be on the left.\n+        \n+        Examples\n+        ========\n+        \n+        >>> from sympy.geometry.point import Point\n+        >>> 2 * Point(1, 2)\n+        Point2D(2, 4)\n+        \"\"\"\n+        return self.__mul__(factor)\n+        \n+    # Add these methods to make Point work with sympy's core operations\n+    def as_coeff_Mul(self):\n+        \"\"\"Return the tuple (S.One, self).\"\"\"\n+        from sympy import S\n+        return S.One, self\n+        \n+    def as_numer_denom(self):\n+        \"\"\"Return the tuple (self, S.One).\"\"\"\n+        from sympy import S\n+        return self, S.One\n \n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\"\n"}