{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-11400", "model_patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..591df8bb68 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -198,6 +198,9 @@ class RelatedFieldListFilter(FieldListFilter):\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        # Fall back to the related model's Meta.ordering if no ordering is defined in the ModelAdmin\n+        if not ordering and field.remote_field.model._meta.ordering:\n+            ordering = field.remote_field.model._meta.ordering\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +422,12 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        # Get ordering the same way as in RelatedFieldListFilter\n+        ordering = ()\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        # Fall back to the related model's Meta.ordering if no ordering is defined in the ModelAdmin\n+        if not ordering and field.remote_field.model._meta.ordering:\n+            ordering = field.remote_field.model._meta.ordering\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n"}