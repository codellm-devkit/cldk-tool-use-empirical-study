{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..ce371b8d9d 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,8 +897,19 @@ def __new__(cls, *args, **kwargs):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                # Instead of raising an error, we'll apply the cycles in left-to-right order\n+                # Create a permutation by applying each cycle in sequence\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n+                if size and size > len(aform):\n+                    aform.extend(list(range(len(aform), size)))\n+                size = len(aform)\n+                obj = Basic.__new__(cls, aform)\n+                obj._array_form = aform\n+                obj._size = size\n+                return obj\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n"}