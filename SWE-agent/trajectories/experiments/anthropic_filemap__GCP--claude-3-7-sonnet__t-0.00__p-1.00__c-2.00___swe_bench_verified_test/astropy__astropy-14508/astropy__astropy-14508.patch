diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89..42bd3fd3be 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,10 +1299,21 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
-    value_str = f"{value:.16G}"
-    if "." not in value_str and "E" not in value_str:
-        value_str += ".0"
-    elif "E" in value_str:
+    # First try using the string representation provided by Python
+    value_str = str(value)
+    
+    # Check if it has a decimal point or exponent
+    if "." not in value_str and "e" not in value_str.lower():
+        # If not, use the standard formatting
+        value_str = f"{value:.16G}"
+        if "." not in value_str and "E" not in value_str:
+            value_str += ".0"
+    elif "e" in value_str.lower():
+        # Normalize the exponent format
+        # First convert to uppercase E if lowercase e is present
+        if "e" in value_str:
+            value_str = value_str.replace("e", "E")
+            
         # On some Windows builds of Python (and possibly other platforms?) the
         # exponent is zero-padded out to, it seems, three digits.  Normalize
         # the format to pad only to two digits.
@@ -1318,12 +1329,26 @@ def _format_float(value):
     str_len = len(value_str)
 
     if str_len > 20:
-        idx = value_str.find("E")
-
-        if idx < 0:
-            value_str = value_str[:20]
-        else:
-            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
+        # If the string representation is too long, fall back to the standard format
+        value_str = f"{value:.16G}"
+        if "." not in value_str and "E" not in value_str:
+            value_str += ".0"
+        elif "E" in value_str:
+            significand, exponent = value_str.split("E")
+            if exponent[0] in ("+", "-"):
+                sign = exponent[0]
+                exponent = exponent[1:]
+            else:
+                sign = ""
+            value_str = f"{significand}E{sign}{int(exponent):02d}"
+            
+        str_len = len(value_str)
+        if str_len > 20:
+            idx = value_str.find("E")
+            if idx < 0:
+                value_str = value_str[:20]
+            else:
+                value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
 
     return value_str
 
diff --git a/pyproject.toml b/pyproject.toml
index 65df5b1b77..de75b1fa9d 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -230,7 +230,7 @@ extend-ignore = [
 
     # Pylint (PLC, PLE, PLR, PLW)
     "PLE0101",  # return-in-init                     # TODO: fix
-    "PLE0605",  # invalid-all-format	             # TODO: fix
+    "PLE0605",  # invalid-all-format                 # TODO: fix
     "PLR0402",  # ConsiderUsingFromImport            # TODO: fix
     "PLR1701",  # ConsiderMergingIsinstance          # TODO: fix
     "PLR2004",  # MagicValueComparison               # Note: low priority fix
