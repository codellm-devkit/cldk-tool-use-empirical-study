{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "astropy__astropy-14508", "model_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..42bd3fd3be 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,10 +1299,21 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n-    if \".\" not in value_str and \"E\" not in value_str:\n-        value_str += \".0\"\n-    elif \"E\" in value_str:\n+    # First try using the string representation provided by Python\n+    value_str = str(value)\n+    \n+    # Check if it has a decimal point or exponent\n+    if \".\" not in value_str and \"e\" not in value_str.lower():\n+        # If not, use the standard formatting\n+        value_str = f\"{value:.16G}\"\n+        if \".\" not in value_str and \"E\" not in value_str:\n+            value_str += \".0\"\n+    elif \"e\" in value_str.lower():\n+        # Normalize the exponent format\n+        # First convert to uppercase E if lowercase e is present\n+        if \"e\" in value_str:\n+            value_str = value_str.replace(\"e\", \"E\")\n+            \n         # On some Windows builds of Python (and possibly other platforms?) the\n         # exponent is zero-padded out to, it seems, three digits.  Normalize\n         # the format to pad only to two digits.\n@@ -1318,12 +1329,26 @@ def _format_float(value):\n     str_len = len(value_str)\n \n     if str_len > 20:\n-        idx = value_str.find(\"E\")\n-\n-        if idx < 0:\n-            value_str = value_str[:20]\n-        else:\n-            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n+        # If the string representation is too long, fall back to the standard format\n+        value_str = f\"{value:.16G}\"\n+        if \".\" not in value_str and \"E\" not in value_str:\n+            value_str += \".0\"\n+        elif \"E\" in value_str:\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+            \n+        str_len = len(value_str)\n+        if str_len > 20:\n+            idx = value_str.find(\"E\")\n+            if idx < 0:\n+                value_str = value_str[:20]\n+            else:\n+                value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n \n     return value_str\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 65df5b1b77..de75b1fa9d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -230,7 +230,7 @@ extend-ignore = [\n \n     # Pylint (PLC, PLE, PLR, PLW)\n     \"PLE0101\",  # return-in-init                     # TODO: fix\n-    \"PLE0605\",  # invalid-all-format\t             # TODO: fix\n+    \"PLE0605\",  # invalid-all-format                 # TODO: fix\n     \"PLR0402\",  # ConsiderUsingFromImport            # TODO: fix\n     \"PLR1701\",  # ConsiderMergingIsinstance          # TODO: fix\n     \"PLR2004\",  # MagicValueComparison               # Note: low priority fix\n"}