{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 2428218696..3b3a834ad0 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -937,10 +937,33 @@ class Model(metaclass=ModelBase):\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\n-                # If the relationship's pk/to_field was changed, clear the\n-                # cached relationship.\n+                # If the relationship's pk/to_field was changed, update the\n+                # foreign key value and clear the cached relationship.\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n-                    field.delete_cached_value(self)\n+                    setattr(self, field.attname, getattr(obj, field.target_field.attname))\n+                    if field.is_cached(self):\n+                        field.delete_cached_value(self)\n+                    \n+        # Also check for related objects that were cached by ForwardManyToOneDescriptor.__set__\n+        if hasattr(self, '_related_objects_cache'):\n+            for field_name, related_obj in self._related_objects_cache.items():\n+                if related_obj is None:\n+                    continue\n+                    \n+                field = self._meta.get_field(field_name)\n+                if not field.is_relation:\n+                    continue\n+                    \n+                # Update the foreign key value if it's different from the related object's PK\n+                for lh_field, rh_field in field.related_fields:\n+                    current_value = getattr(self, lh_field.attname)\n+                    related_value = getattr(related_obj, rh_field.attname)\n+                    \n+                    if current_value != related_value:\n+                        setattr(self, lh_field.attname, related_value)\n+                        # Clear the cached relationship since we've updated the FK value\n+                        if field.is_cached(self):\n+                            field.delete_cached_value(self)\n \n     def delete(self, using=None, keep_parents=False):\n         using = using or router.db_for_write(self.__class__, instance=self)\ndiff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..f1a0543905 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -265,6 +265,14 @@ class ForwardManyToOneDescriptor:\n         # query if it's accessed later on.\n         if value is not None and not remote_field.multiple:\n             remote_field.set_cached_value(value, instance)\n+            \n+        # Store a reference to the related object to update the foreign key\n+        # value if the related object's primary key changes before this\n+        # object is saved.\n+        if value is not None:\n+            if not hasattr(instance, '_related_objects_cache'):\n+                instance._related_objects_cache = {}\n+            instance._related_objects_cache[self.field.name] = value\n \n     def __reduce__(self):\n         \"\"\"\n"}