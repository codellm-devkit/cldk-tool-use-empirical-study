{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py\nindex 1a845a1f7f..b9115bfffa 100644\n--- a/django/db/models/fields/related_lookups.py\n+++ b/django/db/models/fields/related_lookups.py\n@@ -74,6 +74,16 @@ def get_normalized_value(value, lhs):\n \n class RelatedIn(In):\n     def get_prep_lookup(self):\n+        # If the RHS is a QuerySet with annotations, we need to use values_list\n+        # to avoid the \"sub-select returns N columns - expected 1\" error\n+        if hasattr(self.rhs, 'query') and hasattr(self.rhs.query, 'annotations') and self.rhs.query.annotations:\n+            # Use values_list to get only the primary key\n+            from django.db.models.query import QuerySet\n+            if isinstance(self.rhs, QuerySet):\n+                self.rhs = self.rhs.values_list('pk', flat=True)\n+                # Return early since we've already transformed the RHS\n+                return self.rhs\n+            \n         if not isinstance(self.lhs, MultiColSource):\n             if self.rhs_is_direct_value():\n                 # If we get here, we are dealing with single-column relations.\n@@ -106,6 +116,13 @@ class RelatedIn(In):\n                 else:\n                     target_field = self.lhs.field.target_field.name\n                 self.rhs.add_fields([target_field], True)\n+                \n+                # If we have annotations, we need to clear them to avoid including them in the SELECT\n+                if hasattr(self.rhs, 'annotations') and self.rhs.annotations:\n+                    # Clear annotations\n+                    self.rhs.annotations = {}\n+                    self.rhs.annotation_select_mask = None\n+                    self.rhs._annotation_select_cache = None\n         return super().get_prep_lookup()\n \n     def as_sql(self, compiler, connection):\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 866e38df83..8bd8b27a97 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -417,12 +417,29 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n \n     def get_prep_lookup(self):\n         from django.db.models.sql.query import Query  # avoid circular import\n-\n+        \n+        # If the RHS is a QuerySet with annotations, we need to use values_list\n+        # to avoid the \"sub-select returns N columns - expected 1\" error\n+        if hasattr(self.rhs, 'query') and hasattr(self.rhs.query, 'annotations') and self.rhs.query.annotations:\n+            # Use values_list to get only the primary key\n+            from django.db.models.query import QuerySet\n+            if isinstance(self.rhs, QuerySet):\n+                self.rhs = self.rhs.values_list('pk', flat=True)\n+                # Return early since we've already transformed the RHS\n+                return self.rhs\n+        \n         if isinstance(self.rhs, Query):\n             self.rhs.clear_ordering(clear_default=True)\n             if not self.rhs.has_select_fields:\n+                # Clear the select clause\n                 self.rhs.clear_select_clause()\n+                # Add only the primary key field\n                 self.rhs.add_fields([\"pk\"])\n+                # Clear annotations\n+                if self.rhs.annotations:\n+                    self.rhs.annotations = {}\n+                    self.rhs.annotation_select_mask = None\n+                    self.rhs._annotation_select_cache = None\n         return super().get_prep_lookup()\n \n     def process_rhs(self, compiler, connection):\n@@ -449,6 +466,25 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n             sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs)\n             placeholder = \"(\" + \", \".join(sqls) + \")\"\n             return (placeholder, sqls_params)\n+        \n+        # For subqueries, if it has annotations, create a new query with just the pk\n+        if hasattr(self.rhs, 'query') and hasattr(self.rhs.query, 'annotations') and self.rhs.query.annotations:\n+            from django.db.models.sql.query import Query\n+            \n+            # Create a new query with only the primary key field\n+            new_query = Query(self.rhs.query.model)\n+            # Copy the WHERE clause\n+            new_query.where = self.rhs.query.where.clone()\n+            # Copy other necessary attributes\n+            new_query.distinct = self.rhs.query.distinct\n+            new_query.distinct_fields = self.rhs.query.distinct_fields\n+            # Add only the primary key field\n+            new_query.add_fields([\"pk\"])\n+            \n+            # Compile the new query\n+            sql, params = compiler.compile(new_query)\n+            return sql, params\n+            \n         return super().process_rhs(compiler, connection)\n \n     def get_rhs_op(self, connection, rhs):\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 0000000000..07b60d270b\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,204 @@\n+import os\n+import sys\n+import django\n+\n+# Set up Django environment\n+os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django.conf.settings\")\n+sys.path.insert(0, \"/testbed\")\n+\n+# Configure minimal settings\n+from django.conf import settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'tests.annotations',\n+        ],\n+    )\n+\n+django.setup()\n+\n+from django.db.models import Value\n+from django.db import connection\n+from tests.annotations.models import Book, Publisher, Author\n+\n+def setup_test_data():\n+    # Create test data similar to what's in the test case\n+    author = Author.objects.create(name='Test Author', age=30)\n+    \n+    publisher1 = Publisher.objects.create(name='Apress', num_awards=3)\n+    publisher2 = Publisher.objects.create(name='Sams', num_awards=1)\n+    publisher3 = Publisher.objects.create(name='Prentice Hall', num_awards=2)\n+    publisher4 = Publisher.objects.create(name='Morgan Kaufmann', num_awards=4)\n+    \n+    # Create some books with pages > 400\n+    Book.objects.create(\n+        isbn='159059725', \n+        name='The Definitive Guide to Django: Web Development Done Right',\n+        pages=450, \n+        rating=4.5,\n+        price=30.00,\n+        contact=author,\n+        publisher=publisher1,\n+        pubdate='2007-12-06'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='067232959', \n+        name='Sams Teach Yourself Django in 24 Hours',\n+        pages=410, \n+        rating=3.0,\n+        price=23.99,\n+        contact=author,\n+        publisher=publisher2,\n+        pubdate='2008-03-03'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='159059996', \n+        name='Practical Django Projects',\n+        pages=420, \n+        rating=4.0,\n+        price=29.99,\n+        contact=author,\n+        publisher=publisher3,\n+        pubdate='2008-06-23'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='013235613', \n+        name='Python Web Development with Django',\n+        pages=430, \n+        rating=4.0,\n+        price=29.69,\n+        contact=author,\n+        publisher=publisher4,\n+        pubdate='2008-11-03'\n+    )\n+\n+def reproduce_issue():\n+    # Create the same query as in the test case\n+    long_books_qs = (\n+        Book.objects.filter(\n+            pages__gt=400,\n+        )\n+        .annotate(book_annotate=Value(1))\n+        .alias(book_alias=Value(1))\n+    )\n+    \n+    # Print debug info about the query\n+    print(\"Original Query Info:\")\n+    print(f\"Annotations: {long_books_qs.query.annotations}\")\n+    print(f\"Annotation Select Mask: {long_books_qs.query.annotation_select_mask}\")\n+    \n+    # Try a simpler query without alias to see if it works\n+    simple_books_qs = Book.objects.filter(pages__gt=400).annotate(book_annotate=Value(1))\n+    print(\"\\nSimple Query (no alias) Info:\")\n+    print(f\"Annotations: {simple_books_qs.query.annotations}\")\n+    print(f\"Annotation Select Mask: {simple_books_qs.query.annotation_select_mask}\")\n+    \n+    # Try a query with only alias to see if it works\n+    alias_books_qs = Book.objects.filter(pages__gt=400).alias(book_alias=Value(1))\n+    print(\"\\nAlias-only Query Info:\")\n+    print(f\"Annotations: {alias_books_qs.query.annotations}\")\n+    print(f\"Annotation Select Mask: {alias_books_qs.query.annotation_select_mask}\")\n+    \n+    # Try a direct approach - evaluate the queryset first\n+    direct_books_qs = list(Book.objects.filter(pages__gt=400).values_list('id', flat=True))\n+    print(\"\\nDirect approach - evaluate the queryset first:\")\n+    print(f\"IDs: {direct_books_qs}\")\n+    \n+    try:\n+        # Try the direct approach\n+        direct_publisher_books_qs = Publisher.objects.filter(book__id__in=direct_books_qs).values(\"name\")\n+        print(\"\\nDirect Query SQL:\")\n+        print(direct_publisher_books_qs.query)\n+        \n+        # Try to execute the direct query\n+        direct_result = list(direct_publisher_books_qs)\n+        print(\"Direct query executed successfully!\")\n+        print(\"Direct Result:\", direct_result)\n+        \n+        # Try the simple query\n+        simple_publisher_books_qs = Publisher.objects.filter(book__in=simple_books_qs).values(\"name\")\n+        print(\"\\nSimple Query SQL:\")\n+        print(simple_publisher_books_qs.query)\n+        \n+        # Try to execute the simple query\n+        simple_result = list(simple_publisher_books_qs)\n+        print(\"Simple query executed successfully!\")\n+        print(\"Simple Result:\", simple_result)\n+        \n+        # Try the alias-only query\n+        alias_publisher_books_qs = Publisher.objects.filter(book__in=alias_books_qs).values(\"name\")\n+        print(\"\\nAlias-only Query SQL:\")\n+        print(alias_publisher_books_qs.query)\n+        \n+        # Try to execute the alias-only query\n+        alias_result = list(alias_publisher_books_qs)\n+        print(\"Alias-only query executed successfully!\")\n+        print(\"Alias Result:\", alias_result)\n+        \n+        # Try a workaround for the original query\n+        # First, get the IDs from the original query\n+        long_books_ids = list(long_books_qs.values_list('id', flat=True))\n+        print(\"\\nLong books IDs:\", long_books_ids)\n+        \n+        # Then use the IDs directly\n+        workaround_publisher_books_qs = Publisher.objects.filter(book__id__in=long_books_ids).values(\"name\")\n+        print(\"\\nWorkaround Query SQL:\")\n+        print(workaround_publisher_books_qs.query)\n+        \n+        # Try to execute the workaround query\n+        workaround_result = list(workaround_publisher_books_qs)\n+        print(\"Workaround query executed successfully!\")\n+        print(\"Workaround Result:\", workaround_result)\n+        \n+        # Try a different approach - evaluate the queryset first\n+        # This is a workaround for the issue\n+        long_books_list = list(long_books_qs)\n+        print(\"\\nLong books list:\", long_books_list)\n+        \n+        # Try a different approach - use values_list to get only the primary key\n+        long_books_qs_pk_only = long_books_qs.values_list('pk', flat=True)\n+        print(\"\\nModified Query Info (values_list):\")\n+        print(f\"Type: {type(long_books_qs_pk_only)}\")\n+        \n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__id__in=long_books_qs_pk_only\n+            )\n+            .values(\"name\")\n+        )\n+        \n+        # Print the SQL query\n+        print(\"\\nOriginal Query SQL:\")\n+        print(publisher_books_qs.query)\n+        \n+        # Try to execute the query\n+        result = list(publisher_books_qs)\n+        print(\"Original query executed successfully!\")\n+        print(\"Result:\", result)\n+        \n+    except Exception as e:\n+        print(f\"Error: {e}\")\n+        import traceback\n+        traceback.print_exc()\n+\n+if __name__ == \"__main__\":\n+    # Create tables\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Author)\n+        schema_editor.create_model(Publisher)\n+        schema_editor.create_model(Book)\n+    \n+    # Set up test data\n+    setup_test_data()\n+    \n+    # Reproduce the issue\n+    reproduce_issue()\n\\ No newline at end of file\ndiff --git a/run_django_test.py b/run_django_test.py\nnew file mode 100644\nindex 0000000000..172877f89a\n--- /dev/null\n+++ b/run_django_test.py\n@@ -0,0 +1,60 @@\n+import os\n+import sys\n+import django\n+\n+# Set up Django environment\n+os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django.conf.settings\")\n+sys.path.insert(0, \"/testbed\")\n+\n+# Configure minimal settings\n+from django.conf import settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'tests.annotations',\n+        ],\n+    )\n+\n+django.setup()\n+\n+from django.test.runner import DiscoverRunner\n+from django.test import TestCase\n+from django.db.models import Value\n+from tests.annotations.models import Book, Publisher\n+\n+class TestAnnotationAndAliasFilterInSubquery(TestCase):\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+if __name__ == \"__main__\":\n+    # Create a test suite with our test case\n+    test_runner = DiscoverRunner(verbosity=2)\n+    failures = test_runner.run_tests(['run_django_test'])\n+    sys.exit(bool(failures))\n\\ No newline at end of file\ndiff --git a/run_test.py b/run_test.py\nnew file mode 100644\nindex 0000000000..f2e726248e\n--- /dev/null\n+++ b/run_test.py\n@@ -0,0 +1,122 @@\n+import os\n+import sys\n+import django\n+\n+# Set up Django environment\n+os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django.conf.settings\")\n+sys.path.insert(0, \"/testbed\")\n+\n+# Configure minimal settings\n+from django.conf import settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'tests.annotations',\n+        ],\n+    )\n+\n+django.setup()\n+\n+from django.db.models import Value\n+from django.db import connection\n+from django.test import TestCase\n+from tests.annotations.models import Book, Publisher, Author\n+\n+class TestAnnotationAndAliasFilterInSubquery(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        author = Author.objects.create(name='Test Author', age=30)\n+        \n+        publisher1 = Publisher.objects.create(name='Apress', num_awards=3)\n+        publisher2 = Publisher.objects.create(name='Sams', num_awards=1)\n+        publisher3 = Publisher.objects.create(name='Prentice Hall', num_awards=2)\n+        publisher4 = Publisher.objects.create(name='Morgan Kaufmann', num_awards=4)\n+        \n+        # Create some books with pages > 400\n+        Book.objects.create(\n+            isbn='159059725', \n+            name='The Definitive Guide to Django: Web Development Done Right',\n+            pages=450, \n+            rating=4.5,\n+            price=30.00,\n+            contact=author,\n+            publisher=publisher1,\n+            pubdate='2007-12-06'\n+        )\n+        \n+        Book.objects.create(\n+            isbn='067232959', \n+            name='Sams Teach Yourself Django in 24 Hours',\n+            pages=410, \n+            rating=3.0,\n+            price=23.99,\n+            contact=author,\n+            publisher=publisher2,\n+            pubdate='2008-03-03'\n+        )\n+        \n+        Book.objects.create(\n+            isbn='159059996', \n+            name='Practical Django Projects',\n+            pages=420, \n+            rating=4.0,\n+            price=29.99,\n+            contact=author,\n+            publisher=publisher3,\n+            pubdate='2008-06-23'\n+        )\n+        \n+        Book.objects.create(\n+            isbn='013235613', \n+            name='Python Web Development with Django',\n+            pages=430, \n+            rating=4.0,\n+            price=29.69,\n+            contact=author,\n+            publisher=publisher4,\n+            pubdate='2008-11-03'\n+        )\n+    \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+if __name__ == \"__main__\":\n+    # Create tables\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Author)\n+        schema_editor.create_model(Publisher)\n+        schema_editor.create_model(Book)\n+    \n+    # Run the test\n+    test_case = TestAnnotationAndAliasFilterInSubquery()\n+    test_case.setUpClass()\n+    test_case.setUp()\n+    test_case.test_annotation_and_alias_filter_in_subquery()\n+    print(\"Test passed successfully!\")\n\\ No newline at end of file\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..9356de21f2\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,131 @@\n+import os\n+import sys\n+import django\n+\n+# Set up Django environment\n+os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django.conf.settings\")\n+sys.path.insert(0, \"/testbed\")\n+\n+# Configure minimal settings\n+from django.conf import settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'tests.annotations',\n+        ],\n+    )\n+\n+django.setup()\n+\n+from django.db.models import Value\n+from django.db import connection\n+from tests.annotations.models import Book, Publisher, Author\n+\n+def setup_test_data():\n+    author = Author.objects.create(name='Test Author', age=30)\n+    \n+    publisher1 = Publisher.objects.create(name='Apress', num_awards=3)\n+    publisher2 = Publisher.objects.create(name='Sams', num_awards=1)\n+    publisher3 = Publisher.objects.create(name='Prentice Hall', num_awards=2)\n+    publisher4 = Publisher.objects.create(name='Morgan Kaufmann', num_awards=4)\n+    \n+    # Create some books with pages > 400\n+    Book.objects.create(\n+        isbn='159059725', \n+        name='The Definitive Guide to Django: Web Development Done Right',\n+        pages=450, \n+        rating=4.5,\n+        price=30.00,\n+        contact=author,\n+        publisher=publisher1,\n+        pubdate='2007-12-06'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='067232959', \n+        name='Sams Teach Yourself Django in 24 Hours',\n+        pages=410, \n+        rating=3.0,\n+        price=23.99,\n+        contact=author,\n+        publisher=publisher2,\n+        pubdate='2008-03-03'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='159059996', \n+        name='Practical Django Projects',\n+        pages=420, \n+        rating=4.0,\n+        price=29.99,\n+        contact=author,\n+        publisher=publisher3,\n+        pubdate='2008-06-23'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='013235613', \n+        name='Python Web Development with Django',\n+        pages=430, \n+        rating=4.0,\n+        price=29.69,\n+        contact=author,\n+        publisher=publisher4,\n+        pubdate='2008-11-03'\n+    )\n+\n+def test_annotation_and_alias_filter_in_subquery():\n+    # Create the same query as in the test case\n+    long_books_qs = (\n+        Book.objects.filter(\n+            pages__gt=400,\n+        )\n+        .annotate(book_annotate=Value(1))\n+        .alias(book_alias=Value(1))\n+    )\n+    \n+    # Use the queryset directly in the filter\n+    publisher_books_qs = (\n+        Publisher.objects.filter(\n+            book__in=long_books_qs\n+        )\n+        .values(\"name\")\n+    )\n+    \n+    # Print the result\n+    result = list(publisher_books_qs)\n+    print(\"Result:\", result)\n+    \n+    # Check if the result is correct\n+    expected = [\n+        {'name': 'Apress'},\n+        {'name': 'Sams'},\n+        {'name': 'Prentice Hall'},\n+        {'name': 'Morgan Kaufmann'}\n+    ]\n+    \n+    if sorted(result, key=lambda x: x['name']) == sorted(expected, key=lambda x: x['name']):\n+        print(\"Test passed successfully!\")\n+    else:\n+        print(\"Test failed!\")\n+        print(\"Expected:\", expected)\n+        print(\"Got:\", result)\n+\n+if __name__ == \"__main__\":\n+    # Create tables\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Author)\n+        schema_editor.create_model(Publisher)\n+        schema_editor.create_model(Book)\n+    \n+    # Set up test data\n+    setup_test_data()\n+    \n+    # Run the test\n+    test_annotation_and_alias_filter_in_subquery()\n\\ No newline at end of file\ndiff --git a/test_workaround.py b/test_workaround.py\nnew file mode 100644\nindex 0000000000..ed6fccb592\n--- /dev/null\n+++ b/test_workaround.py\n@@ -0,0 +1,134 @@\n+import os\n+import sys\n+import django\n+\n+# Set up Django environment\n+os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"django.conf.settings\")\n+sys.path.insert(0, \"/testbed\")\n+\n+# Configure minimal settings\n+from django.conf import settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'tests.annotations',\n+        ],\n+    )\n+\n+django.setup()\n+\n+from django.db.models import Value\n+from django.db import connection\n+from tests.annotations.models import Book, Publisher, Author\n+\n+def setup_test_data():\n+    author = Author.objects.create(name='Test Author', age=30)\n+    \n+    publisher1 = Publisher.objects.create(name='Apress', num_awards=3)\n+    publisher2 = Publisher.objects.create(name='Sams', num_awards=1)\n+    publisher3 = Publisher.objects.create(name='Prentice Hall', num_awards=2)\n+    publisher4 = Publisher.objects.create(name='Morgan Kaufmann', num_awards=4)\n+    \n+    # Create some books with pages > 400\n+    Book.objects.create(\n+        isbn='159059725', \n+        name='The Definitive Guide to Django: Web Development Done Right',\n+        pages=450, \n+        rating=4.5,\n+        price=30.00,\n+        contact=author,\n+        publisher=publisher1,\n+        pubdate='2007-12-06'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='067232959', \n+        name='Sams Teach Yourself Django in 24 Hours',\n+        pages=410, \n+        rating=3.0,\n+        price=23.99,\n+        contact=author,\n+        publisher=publisher2,\n+        pubdate='2008-03-03'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='159059996', \n+        name='Practical Django Projects',\n+        pages=420, \n+        rating=4.0,\n+        price=29.99,\n+        contact=author,\n+        publisher=publisher3,\n+        pubdate='2008-06-23'\n+    )\n+    \n+    Book.objects.create(\n+        isbn='013235613', \n+        name='Python Web Development with Django',\n+        pages=430, \n+        rating=4.0,\n+        price=29.69,\n+        contact=author,\n+        publisher=publisher4,\n+        pubdate='2008-11-03'\n+    )\n+\n+def test_annotation_and_alias_filter_in_subquery():\n+    # Create the same query as in the test case\n+    long_books_qs = (\n+        Book.objects.filter(\n+            pages__gt=400,\n+        )\n+        .annotate(book_annotate=Value(1))\n+        .alias(book_alias=Value(1))\n+    )\n+    \n+    # Use values_list to get only the primary key\n+    long_books_qs_pk_only = long_books_qs.values_list('pk', flat=True)\n+    \n+    # Use the primary keys in the filter\n+    publisher_books_qs = (\n+        Publisher.objects.filter(\n+            book__id__in=long_books_qs_pk_only\n+        )\n+        .values(\"name\")\n+    )\n+    \n+    # Print the result\n+    result = list(publisher_books_qs)\n+    print(\"Result:\", result)\n+    \n+    # Check if the result is correct\n+    expected = [\n+        {'name': 'Apress'},\n+        {'name': 'Sams'},\n+        {'name': 'Prentice Hall'},\n+        {'name': 'Morgan Kaufmann'}\n+    ]\n+    \n+    if sorted(result, key=lambda x: x['name']) == sorted(expected, key=lambda x: x['name']):\n+        print(\"Test passed successfully!\")\n+    else:\n+        print(\"Test failed!\")\n+        print(\"Expected:\", expected)\n+        print(\"Got:\", result)\n+\n+if __name__ == \"__main__\":\n+    # Create tables\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Author)\n+        schema_editor.create_model(Publisher)\n+        schema_editor.create_model(Book)\n+    \n+    # Set up test data\n+    setup_test_data()\n+    \n+    # Run the test\n+    test_annotation_and_alias_filter_in_subquery()\n\\ No newline at end of file\n"}