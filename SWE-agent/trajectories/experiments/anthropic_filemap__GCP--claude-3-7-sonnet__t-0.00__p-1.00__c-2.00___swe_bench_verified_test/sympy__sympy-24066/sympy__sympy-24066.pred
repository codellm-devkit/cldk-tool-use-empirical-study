{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c108..4a0f366917 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -9,6 +9,8 @@\n from sympy.core.mul import Mul\n from sympy.core.power import Pow\n from sympy.core.singleton import S\n+from sympy.functions.elementary.exponential import exp, log\n+from sympy.functions.elementary.trigonometric import TrigonometricFunction, InverseTrigonometricFunction\n from sympy.physics.units.dimensions import _QuantityMapper\n from sympy.physics.units.quantities import Quantity\n \n@@ -192,6 +194,18 @@ def _collect_factor_and_dimension(self, expr):\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(\n                 arg) for arg in expr.args]\n+            \n+            # For functions like exp, log, sin, cos, atan2, etc., the argument must be dimensionless\n+            # and the result is also dimensionless\n+            if isinstance(expr, (exp, log, TrigonometricFunction, InverseTrigonometricFunction)):\n+                for i, (factor, dim) in enumerate(fds):\n+                    if not self.get_dimension_system().is_dimensionless(dim):\n+                        raise ValueError(\n+                            'Dimension of \"{}\" is {}, '\n+                            'but it should be {}'.format(\n+                                expr.args[i], dim, Dimension(1)))\n+                return expr.func(*(f[0] for f in fds)), Dimension(1)\n+            \n             return (expr.func(*(f[0] for f in fds)),\n                     *(d[1] for d in fds))\n         elif isinstance(expr, Dimension):\n"}