{"model_name_or_path": "anthropic_filemap__GCP--claude-3-7-sonnet__t-0.00__p-1.00__c-2.00___swe_bench_verified_test", "instance_id": "django__django-13028", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..75f062249d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,11 +1124,35 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n+        # Check if the expression has a filterable attribute that was explicitly set\n+        # to control filterability, rather than just being a field named 'filterable'\n+        \n+        # For Django model instances, the filterable attribute might be a model field\n+        # We need to distinguish between a model field named 'filterable' and\n+        # a class-level attribute used to control filterability\n+        \n+        # If this is a Django model instance, we should check if it has a _meta attribute\n+        # which would indicate it's a model instance, and then check if 'filterable' is a field\n+        if hasattr(expression, '_meta') and hasattr(expression._meta, 'get_field'):\n+            try:\n+                # If 'filterable' is a field, we should not raise an error\n+                expression._meta.get_field('filterable')\n+                # It's a field, so we don't check its value\n+            except Exception:\n+                # 'filterable' is not a field, so check its value if it exists\n+                if hasattr(expression, 'filterable') and not expression.filterable:\n+                    raise NotSupportedError(\n+                        expression.__class__.__name__ + ' is disallowed in the filter '\n+                        'clause.'\n+                    )\n+        else:\n+            # For non-model instances, use the original behavior\n+            if not getattr(expression, 'filterable', True):\n+                raise NotSupportedError(\n+                    expression.__class__.__name__ + ' is disallowed in the filter '\n+                    'clause.'\n+                )\n+                \n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n"}