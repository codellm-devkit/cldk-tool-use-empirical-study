{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sphinx-doc__sphinx-8593"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1944831069558859
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20093982596881688
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2101620570756495
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.16609557205811143,
        0.18032476911321282
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          1,
          2000
        ]
      },
      "phase": "localization",
      "step_indices": [
        3,
        5
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18239201582036912
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          500,
          700
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17695897188968956
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/util/docstrings.py"
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17716236785054207
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          600,
          800
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18496113317087293
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          1000,
          1200
        ]
      },
      "phase": "localization",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18558310205116868
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          1200,
          1400
        ]
      },
      "phase": "localization",
      "step_indices": [
        9
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20652071991935372
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          1400,
          1600
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20042246603406966
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          1600,
          1800
        ]
      },
      "phase": "localization",
      "step_indices": [
        11
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17292503104545176
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          1800,
          2000
        ]
      },
      "phase": "localization",
      "step_indices": [
        12
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19556750310584903,
        0.1961504730861634
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          1853,
          1929
        ]
      },
      "phase": "localization",
      "step_indices": [
        13,
        15
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17800912912935019
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          662,
          800
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20035277004353702
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "old_str": "    def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n        if encoding is not None:\n            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n                          % self.__class__.__name__,\n                          RemovedInSphinx40Warning, stacklevel=2)\n        if self.object is UNINITIALIZED_ATTR:\n            return []\n        else:\n            return super().get_doc(encoding, ignore)  # type: ignore",
        "new_str": "    def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n        if encoding is not None:\n            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n                          % self.__class__.__name__,\n                          RemovedInSphinx40Warning, stacklevel=2)\n        if self.object is UNINITIALIZED_ATTR:\n            return []\n        else:\n            # Check for docstring in attr_docs for variables documented with #:\n            if self.analyzer:\n                attr_docs = self.analyzer.find_attr_docs()\n                key = ('.'.join(self.objpath[:-1]), self.objpath[-1]) if self.objpath else None\n                if key and key in attr_docs:\n                    return [list(attr_docs[key])]\n            return super().get_doc(encoding, ignore)  # type: ignore",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17902134102769196
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "view_range": [
          541,
          560
        ]
      },
      "phase": "localization",
      "step_indices": [
        17
      ],
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.22807253594510257
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "old_str": "    def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n        if encoding is not None:\n            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n                          % self.__class__.__name__,\n                          RemovedInSphinx40Warning, stacklevel=2)\n        if ignore is not None:\n            warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\"\n                          % self.__class__.__name__,\n                          RemovedInSphinx50Warning, stacklevel=2)\n        docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,\n                           self.parent, self.object_name)\n        if docstring:\n            tab_width = self.directive.state.document.settings.tab_width\n            return [prepare_docstring(docstring, ignore, tab_width)]\n        return []",
        "new_str": "    def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n        if encoding is not None:\n            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n                          % self.__class__.__name__,\n                          RemovedInSphinx40Warning, stacklevel=2)\n        if ignore is not None:\n            warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\"\n                          % self.__class__.__name__,\n                          RemovedInSphinx50Warning, stacklevel=2)\n        \n        # Check for docstring in attr_docs for variables documented with #:\n        if self.analyzer:\n            attr_docs = self.analyzer.find_attr_docs()\n            key = ('.'.join(self.objpath[:-1]), self.objpath[-1]) if self.objpath else None\n            if key and key in attr_docs:\n                tab_width = self.directive.state.document.settings.tab_width\n                return [prepare_docstring('\\n'.join(attr_docs[key]), ignore, tab_width)]\n        \n        docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,\n                           self.parent, self.object_name)\n        if docstring:\n            tab_width = self.directive.state.document.settings.tab_width\n            return [prepare_docstring(docstring, ignore, tab_width)]\n        return []",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20627664308995008
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/__init__.py",
        "old_str": "    def get_real_modname(self) -> str:\n        return self.get_attr(self.parent or self.object, '__module__', None) \\\n            or self.modname\n\n    def add_content(self, more_content: Optional[StringList], no_docstring: bool = False\n                    ) -> None:\n        if not more_content:\n            more_content = StringList()\n\n        self.update_content(more_content)\n        super().add_content(more_content, no_docstring=no_docstring)",
        "new_str": "    def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n        if encoding is not None:\n            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n                          % self.__class__.__name__,\n                          RemovedInSphinx40Warning, stacklevel=2)\n        if ignore is not None:\n            warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\"\n                          % self.__class__.__name__,\n                          RemovedInSphinx50Warning, stacklevel=2)\n        \n        # Check for docstring in attr_docs for variables documented with #:\n        if self.analyzer:\n            attr_docs = self.analyzer.find_attr_docs()\n            key = ('.'.join(self.objpath[:-1]), self.objpath[-1]) if self.objpath else None\n            if key and key in attr_docs:\n                tab_width = self.directive.state.document.settings.tab_width\n                return [prepare_docstring('\\n'.join(attr_docs[key]), ignore, tab_width)]\n        \n        docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,\n                           self.parent, self.object_name)\n        if docstring:\n            tab_width = self.directive.state.document.settings.tab_width\n            return [prepare_docstring(docstring, ignore, tab_width)]\n        return []\n\n    def get_real_modname(self) -> str:\n        return self.get_attr(self.parent or self.object, '__module__', None) \\\n            or self.modname\n\n    def add_content(self, more_content: Optional[StringList], no_docstring: bool = False\n                    ) -> None:\n        if not more_content:\n            more_content = StringList()\n\n        self.update_content(more_content)\n        super().add_content(more_content, no_docstring=no_docstring)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": [
        6.001688745454885,
        1.1678380490047857,
        1.0985370479756966,
        1.093645724002272
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        20,
        25,
        27,
        30
      ],
      "id": "18:cd"
    },
    {
      "label": "python",
      "execution_time": [
        6.001688745454885,
        1.1678380490047857,
        1.0985370479756966,
        1.093645724002272
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "doc",
        "build"
      ],
      "phase": "verification",
      "step_indices": [
        20,
        25,
        27,
        30
      ],
      "id": "19:python"
    },
    {
      "label": "find",
      "execution_time": [
        0.14667260483838618
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/build",
        "*.html",
        "|",
        "xargs",
        "grep",
        "||",
        "echo",
        "No files containing '_foo' found."
      ],
      "phase": "general",
      "step_indices": [
        21
      ],
      "id": "20:find"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19308863510377705
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/doc/example.py"
      },
      "phase": "localization",
      "step_indices": [
        22
      ],
      "id": "21:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.20363141898997128
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/doc/example.py",
        "file_text": "# example.py\n_foo = None  #: :meta public:"
      },
      "phase": "verification",
      "step_indices": [
        23
      ],
      "id": "22:str_replace_editor\ncreate"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1789626928512007
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/doc/index.rst",
        "file_text": ".. automodule:: example\n   :members:"
      },
      "phase": "verification",
      "step_indices": [
        24
      ],
      "id": "23:str_replace_editor\ncreate"
    },
    {
      "label": "mv",
      "execution_time": [
        0.1319507339503616
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/doc/example.py",
        "/testbed/"
      ],
      "phase": "general",
      "step_indices": [
        26
      ],
      "id": "24:mv"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2031423740554601
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/doc/contents.rst"
      },
      "phase": "localization",
      "step_indices": [
        28
      ],
      "id": "25:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19270003214478493
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/doc/contents.rst",
        "old_str": ".. toctree::\n   :maxdepth: 2\n\n   usage/index\n   development/index\n   man/index\n\n   templating\n   latex\n   extdev/index\n\n   internals/index\n\n   faq\n   glossary\n   changes\n   examples",
        "new_str": ".. toctree::\n   :maxdepth: 2\n\n   index\n   usage/index\n   development/index\n   man/index\n\n   templating\n   latex\n   extdev/index\n\n   internals/index\n\n   faq\n   glossary\n   changes\n   examples",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        31
      ],
      "id": "27:empty action"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "25:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "18:cd",
      "target": "19:python",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "18:cd",
      "target": "19:python",
      "key": 1
    },
    {
      "label": "27",
      "type": "exec",
      "source": "18:cd",
      "target": "19:python",
      "key": 2
    },
    {
      "label": "30",
      "type": "exec",
      "source": "18:cd",
      "target": "19:python",
      "key": 3
    },
    {
      "label": "21",
      "type": "exec",
      "source": "19:python",
      "target": "20:find",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "19:python",
      "target": "24:mv",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "19:python",
      "target": "25:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "19:python",
      "target": "27:empty action",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "20:find",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "22:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "22:str_replace_editor\ncreate",
      "target": "23:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "23:str_replace_editor\ncreate",
      "target": "18:cd",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "24:mv",
      "target": "18:cd",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "25:str_replace_editor\nview",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "18:cd",
      "key": 0
    }
  ]
}