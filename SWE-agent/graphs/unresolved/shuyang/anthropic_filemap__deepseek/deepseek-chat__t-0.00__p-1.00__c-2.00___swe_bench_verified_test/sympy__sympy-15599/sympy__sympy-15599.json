{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sympy__sympy-15599"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1754050289746374,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/mod.py"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.18714566598646343,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_mod.py",
        "file_text": "from sympy import Symbol, Mod\n\ni = Symbol('i', integer=True)\nprint(Mod(3 * i, 2))"
      },
      "phase": "verification",
      "id": "1:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": 1.1911876548547298,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_mod.py"
      ],
      "phase": "verification",
      "id": "2:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18531257682479918,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/mod.py",
        "old_str": "            if mod_l and all(inner.args[1] == q for inner in mod_l):\n                # finding distributive term\n                non_mod_l = [cls(x, q) for x in non_mod_l]\n                mod = []\n                non_mod = []\n                for j in non_mod_l:\n                    if isinstance(j, cls):\n                        mod.append(j.args[0])\n                    else:\n                        non_mod.append(j)\n                prod_mod = Mul(*mod)\n                prod_non_mod = Mul(*non_mod)\n                prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n                net = prod_mod1*prod_mod\n                return prod_non_mod*cls(net, q)",
        "new_str": "            was = non_mod_l[:]\n            non_mod_l = [cls(x, q) for x in non_mod_l]\n            changed = was != non_mod_l\n            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):\n                # finding distributive term\n                mod = []\n                non_mod = []\n                for j in non_mod_l:\n                    if isinstance(j, cls):\n                        mod.append(j.args[0])\n                    else:\n                        non_mod.append(j)\n                prod_mod = Mul(*mod)\n                prod_non_mod = Mul(*non_mod)\n                prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n                net = prod_mod1*prod_mod\n                return prod_non_mod*cls(net, q)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.49294636491686106,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_mod.py"
      ],
      "phase": "verification",
      "id": "4:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "5:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2125022360123694,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "6:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.119494813028723,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_mod.py"
      ],
      "phase": "general",
      "id": "7:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.21423361892811954,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "8:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\ncreate",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:python",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:python",
      "target": "5:empty action",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:empty action",
      "target": "6:submit",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:submit",
      "target": "7:rm",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:rm",
      "target": "8:submit",
      "key": 0
    }
  ]
}