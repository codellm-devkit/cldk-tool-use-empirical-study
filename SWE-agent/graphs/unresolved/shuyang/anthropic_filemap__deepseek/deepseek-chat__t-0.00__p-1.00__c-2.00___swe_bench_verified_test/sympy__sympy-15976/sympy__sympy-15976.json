{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sympy__sympy-15976"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20458896202035248
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20880868611857295
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/printing/mathml.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17496552085503936
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/printing/mathml.py",
        "view_range": [
          745,
          802
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.17631750786677003
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_mathml_issue.py",
        "file_text": "import sympy\nfrom sympy.printing.mathml import mathml\n\nx2, y, z = sympy.symbols('x2 y z')\ny = x2 * z + x2**3\n\n# Write MathML to a file\nwith open('sympy_test.html', 'w') as f:\n    f.write('<html><body>')\n    f.write(mathml(y, printer='presentation'))\n    f.write('</body></html>')"
      },
      "phase": "verification",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        1.2562786238268018,
        0.49100739788264036
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_mathml_issue.py"
      ],
      "phase": "verification",
      "step_indices": [
        4,
        7
      ],
      "id": "4:python"
    },
    {
      "label": "cat",
      "execution_time": [
        0.1281333949882537,
        0.11943443608470261
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/sympy_test.html"
      ],
      "phase": "general",
      "step_indices": [
        5,
        8
      ],
      "id": "5:cat"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19291181000880897
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/printing/mathml.py",
        "old_str": "    def _print_Symbol(self, sym, style='plain'):\n        x = self.dom.createElement('mi')\n\n        if style == 'bold':\n            x.setAttribute('mathvariant', 'bold')\n\n        def join(items):\n            if len(items) > 1:\n                mrow = self.dom.createElement('mrow')\n                for i, item in enumerate(items):\n                    if i > 0:\n                        mo = self.dom.createElement('mo')\n                        mo.appendChild(self.dom.createTextNode(\" \"))\n                        mrow.appendChild(mo)\n                    mi = self.dom.createElement('mi')\n                    mi.appendChild(self.dom.createTextNode(item))\n                    mrow.appendChild(mi)\n                return mrow\n            else:\n                mi = self.dom.createElement('mi')\n                mi.appendChild(self.dom.createTextNode(items[0]))\n                return mi\n\n        # translate name, supers and subs to unicode characters\n        def translate(s):\n            if s in greek_unicode:\n                return greek_unicode.get(s)\n            else:\n                return s\n\n        name, supers, subs = split_super_sub(sym.name)\n        name = translate(name)\n        supers = [translate(sup) for sup in supers]\n        subs = [translate(sub) for sub in subs]\n\n        mname = self.dom.createElement('mi')\n        mname.appendChild(self.dom.createTextNode(name))\n        if len(supers) == 0:\n            if len(subs) == 0:\n                x.appendChild(self.dom.createTextNode(name))\n            else:\n                msub = self.dom.createElement('msub')\n                msub.appendChild(mname)\n                msub.appendChild(join(subs))\n                x.appendChild(msub)\n        else:\n            if len(subs) == 0:\n                msup = self.dom.createElement('msup')\n                msup.appendChild(mname)\n                msup.appendChild(join(supers))\n                x.appendChild(msup)\n            else:\n                msubsup = self.dom.createElement('msubsup')\n                msubsup.appendChild(mname)\n                msubsup.appendChild(join(subs))\n                msubsup.appendChild(join(supers))\n                x.appendChild(msubsup)\n        return x",
        "new_str": "    def _print_Symbol(self, sym, style='plain'):\n        x = self.dom.createElement('mi')\n\n        if style == 'bold':\n            x.setAttribute('mathvariant', 'bold')\n\n        def join(items):\n            if len(items) > 1:\n                mrow = self.dom.createElement('mrow')\n                for i, item in enumerate(items):\n                    if i > 0:\n                        mo = self.dom.createElement('mo')\n                        mo.appendChild(self.dom.createTextNode(\" \"))\n                        mrow.appendChild(mo)\n                    mi = self.dom.createElement('mi')\n                    mi.appendChild(self.dom.createTextNode(item))\n                    mrow.appendChild(mi)\n                return mrow\n            else:\n                mi = self.dom.createElement('mi')\n                mi.appendChild(self.dom.createTextNode(items[0]))\n                return mi\n\n        # translate name, supers and subs to unicode characters\n        def translate(s):\n            if s in greek_unicode:\n                return greek_unicode.get(s)\n            else:\n                return s\n\n        # Check if the symbol name ends with a number\n        if sym.name[-1].isdigit():\n            name = sym.name\n            supers = []\n            subs = []\n        else:\n            name, supers, subs = split_super_sub(sym.name)\n\n        name = translate(name)\n        supers = [translate(sup) for sup in supers]\n        subs = [translate(sub) for sub in subs]\n\n        mname = self.dom.createElement('mi')\n        mname.appendChild(self.dom.createTextNode(name))\n        if len(supers) == 0:\n            if len(subs) == 0:\n                x.appendChild(self.dom.createTextNode(name))\n            else:\n                msub = self.dom.createElement('msub')\n                msub.appendChild(mname)\n                msub.appendChild(join(subs))\n                x.appendChild(msub)\n        else:\n            if len(subs) == 0:\n                msup = self.dom.createElement('msup')\n                msup.appendChild(mname)\n                msup.appendChild(join(supers))\n                x.appendChild(msup)\n            else:\n                msubsup = self.dom.createElement('msubsup')\n                msubsup.appendChild(mname)\n                msubsup.appendChild(join(subs))\n                msubsup.appendChild(join(supers))\n                x.appendChild(msubsup)\n        return x",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "7:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.20928145316429436,
        0.2095222279895097
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        10,
        12
      ],
      "id": "8:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11962998006492853
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_mathml_issue.py",
        "/testbed/sympy_test.html"
      ],
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "9:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\ncreate",
      "target": "4:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:python",
      "target": "5:cat",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "4:python",
      "target": "5:cat",
      "key": 1
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:cat",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "5:cat",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "4:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "8:submit",
      "target": "9:rm",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:rm",
      "target": "8:submit",
      "key": 0
    }
  ]
}