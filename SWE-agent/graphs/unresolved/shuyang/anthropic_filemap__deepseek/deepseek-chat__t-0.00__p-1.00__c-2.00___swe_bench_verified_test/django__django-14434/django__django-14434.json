{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-14434"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18880945607088506,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18848276999779046,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.2044155749026686,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.23887274600565434,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py"
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": 0.1203797459602356,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/django/db/models/sql/query.py"
      ],
      "phase": "general",
      "id": "4:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.16631393902935088,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/base"
      },
      "phase": "localization",
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20747426198795438,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/base/schema.py"
      },
      "phase": "localization",
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18402413302101195,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/base/schema.py",
        "view_range": [
          1225,
          1265
        ]
      },
      "phase": "localization",
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1800198198761791,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/base/schema.py",
        "old_str": "        if columns:\n            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)\n        else:",
        "new_str": "        if columns:\n            # Debug: Check the type of columns\n            if isinstance(columns, Table):\n                raise ValueError(\"Expected a list of column names, got a Table instance\")\n            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)\n        else:",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.18861333699896932,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "file_text": "from django.db.backends.base.schema import BaseDatabaseSchemaEditor\nfrom django.db.backends.ddl_references import Table\n\n# Mock model and schema editor\nclass MockModel:\n    class _meta:\n        db_table = \"test_table\"\n\nschema_editor = BaseDatabaseSchemaEditor(None)\n\n# Test case: Pass a Table instance to _create_unique_sql\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    result = schema_editor._create_unique_sql(MockModel, table)\n    print(\"Result:\", result)\nexcept Exception as e:\n    print(\"Error:\", e)"
      },
      "phase": "verification",
      "id": "9:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": 0.46235928498208523,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "10:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19477324397303164,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "old_str": "from django.db.backends.base.schema import BaseDatabaseSchemaEditor\nfrom django.db.backends.ddl_references import Table\n\n# Mock model and schema editor\nclass MockModel:\n    class _meta:\n        db_table = \"test_table\"\n\nschema_editor = BaseDatabaseSchemaEditor(None)\n\n# Test case: Pass a Table instance to _create_unique_sql\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    result = schema_editor._create_unique_sql(MockModel, table)\n    print(\"Result:\", result)\nexcept Exception as e:\n    print(\"Error:\", e)",
        "new_str": "from django.db.backends.base.schema import BaseDatabaseSchemaEditor\nfrom django.db.backends.ddl_references import Table\n\n# Mock model, connection, and schema editor\nclass MockModel:\n    class _meta:\n        db_table = \"test_table\"\n\nclass MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n\n    def quote_name(self, name):\n        return f'\"{name}\"'\n\nschema_editor = BaseDatabaseSchemaEditor(MockConnection())\n\n# Test case: Pass a Table instance to _create_unique_sql\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    result = schema_editor._create_unique_sql(MockModel, table)\n    print(\"Result:\", result)\nexcept Exception as e:\n    print(\"Error:\", e)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.2866076431237161,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "12:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19460667902603745,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "old_str": "class MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n\n    def quote_name(self, name):\n        return f'\"{name}\"'",
        "new_str": "class MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n        can_rollback_ddl = False\n\n    def quote_name(self, name):\n        return f'\"{name}\"'",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.29933819989673793,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "14:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19835097808390856,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "old_str": "class MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n        can_rollback_ddl = False\n\n    def quote_name(self, name):\n        return f'\"{name}\"'",
        "new_str": "class MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n        can_rollback_ddl = False\n\n    class ops:\n        def quote_name(self, name):\n            return f'\"{name}\"'\n\n    def quote_name(self, name):\n        return self.ops.quote_name(name)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.37374426587484777,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "16:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18634247011505067,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "old_str": "    class ops:\n        def quote_name(self, name):\n            return f'\"{name}\"'",
        "new_str": "    class ops:\n        def quote_name(self, name):\n            return f'\"{name}\"'\n\n        def compiler(self, compiler_name):\n            class MockCompiler:\n                def __init__(self, *args, **kwargs):\n                    pass\n\n                def as_sql(self):\n                    return \"\", ()\n\n            return MockCompiler",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.3105765781365335,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "18:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1826090991962701,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "old_str": "        def compiler(self, compiler_name):\n            class MockCompiler:\n                def __init__(self, *args, **kwargs):\n                    pass\n\n                def as_sql(self):\n                    return \"\", ()\n\n            return MockCompiler",
        "new_str": "        def compiler(self, compiler_name, *args, **kwargs):\n            class MockCompiler:\n                def __init__(self, *args, **kwargs):\n                    pass\n\n                def as_sql(self):\n                    return \"\", ()\n\n            return MockCompiler(*args, **kwargs)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.3117057520430535,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "20:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1932876689825207,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "old_str": "from django.db.backends.base.schema import BaseDatabaseSchemaEditor\nfrom django.db.backends.ddl_references import Table\n\n# Mock model, connection, and schema editor\nclass MockModel:\n    class _meta:\n        db_table = \"test_table\"\n\nclass MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n        can_rollback_ddl = False\n\n    class ops:\n        def quote_name(self, name):\n            return f'\"{name}\"'\n\n        def compiler(self, compiler_name, *args, **kwargs):\n            class MockCompiler:\n                def __init__(self, *args, **kwargs):\n                    pass\n\n                def as_sql(self):\n                    return \"\", ()\n\n            return MockCompiler(*args, **kwargs)\n\n    def quote_name(self, name):\n        return self.ops.quote_name(name)\n\nschema_editor = BaseDatabaseSchemaEditor(MockConnection())\n\n# Test case: Pass a Table instance to _create_unique_sql\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    result = schema_editor._create_unique_sql(MockModel, table)\n    print(\"Result:\", result)\nexcept Exception as e:\n    print(\"Error:\", e)",
        "new_str": "from django.db.backends.base.schema import BaseDatabaseSchemaEditor\nfrom django.db.backends.ddl_references import Table, Columns\n\n# Mock model, connection, and schema editor\nclass MockModel:\n    class _meta:\n        db_table = \"test_table\"\n\nclass MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n        can_rollback_ddl = False\n\n    class ops:\n        def quote_name(self, name):\n            return f'\"{name}\"'\n\n        def compiler(self, compiler_name, *args, **kwargs):\n            class MockCompiler:\n                def __init__(self, *args, **kwargs):\n                    pass\n\n                def as_sql(self):\n                    return \"\", ()\n\n            return MockCompiler(*args, **kwargs)\n\n    def quote_name(self, name):\n        return self.ops.quote_name(name)\n\nschema_editor = BaseDatabaseSchemaEditor(MockConnection())\n\n# Test case: Pass a Table instance to _create_unique_sql\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    result = schema_editor._create_unique_sql(MockModel, table)\n    print(\"Result:\", result)\nexcept Exception as e:\n    print(\"Error:\", e)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.31500863819383085,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "22:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1955240718089044,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "old_str": "from django.db.backends.base.schema import BaseDatabaseSchemaEditor\nfrom django.db.backends.ddl_references import Table, Columns\n\n# Mock model, connection, and schema editor\nclass MockModel:\n    class _meta:\n        db_table = \"test_table\"\n\nclass MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n        can_rollback_ddl = False\n\n    class ops:\n        def quote_name(self, name):\n            return f'\"{name}\"'\n\n        def compiler(self, compiler_name, *args, **kwargs):\n            class MockCompiler:\n                def __init__(self, *args, **kwargs):\n                    pass\n\n                def as_sql(self):\n                    return \"\", ()\n\n            return MockCompiler(*args, **kwargs)\n\n    def quote_name(self, name):\n        return self.ops.quote_name(name)\n\nschema_editor = BaseDatabaseSchemaEditor(MockConnection())\n\n# Test case: Pass a Table instance to _create_unique_sql\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    result = schema_editor._create_unique_sql(MockModel, table)\n    print(\"Result:\", result)\nexcept Exception as e:\n    print(\"Error:\", e)",
        "new_str": "from django.db.backends.ddl_references import Table, Columns\n\n# Test case: Pass a Table instance to Columns\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    columns = Columns(table, [\"column1\"], lambda x: x)\n    print(\"Result:\", columns)\nexcept Exception as e:\n    print(\"Error:\", e)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.2333418249618262,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "24:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18070837506093085,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/base/schema.py",
        "old_str": "        if columns:\n            # Debug: Check the type of columns\n            if isinstance(columns, Table):\n                raise ValueError(\"Expected a list of column names, got a Table instance\")\n            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)\n        else:",
        "new_str": "        if columns:\n            # Ensure columns is a list of strings (column names)\n            if isinstance(columns, Table):\n                columns = [columns.name]  # Replace with actual column names if needed\n            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)\n        else:",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20400123787112534,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_unique_sql.py",
        "old_str": "from django.db.backends.ddl_references import Table, Columns\n\n# Test case: Pass a Table instance to Columns\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    columns = Columns(table, [\"column1\"], lambda x: x)\n    print(\"Result:\", columns)\nexcept Exception as e:\n    print(\"Error:\", e)",
        "new_str": "from django.db.backends.ddl_references import Table\nfrom django.db.backends.base.schema import BaseDatabaseSchemaEditor\n\n# Mock model and schema editor\nclass MockModel:\n    class _meta:\n        db_table = \"test_table\"\n\nclass MockConnection:\n    class features:\n        supports_deferrable_unique_constraints = True\n        supports_partial_indexes = True\n        supports_covering_indexes = True\n        supports_expression_indexes = True\n        can_rollback_ddl = False\n\n    class ops:\n        def quote_name(self, name):\n            return f'\"{name}\"'\n\n        def compiler(self, compiler_name, *args, **kwargs):\n            class MockCompiler:\n                def __init__(self, *args, **kwargs):\n                    pass\n\n                def as_sql(self):\n                    return \"\", ()\n\n            return MockCompiler(*args, **kwargs)\n\n    def quote_name(self, name):\n        return self.ops.quote_name(name)\n\nschema_editor = BaseDatabaseSchemaEditor(MockConnection())\n\n# Test case: Pass a Table instance to _create_unique_sql\ntable = Table(\"test_table\", lambda x: x)\ntry:\n    result = schema_editor._create_unique_sql(MockModel, table)\n    print(\"Result:\", result)\nexcept Exception as e:\n    print(\"Error:\", e)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.2862748741172254,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_unique_sql.py"
      ],
      "phase": "verification",
      "id": "27:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "28:empty action"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:grep",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\ncreate",
      "target": "10:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:python",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:python",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "16:python",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:python",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "18:python",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:python",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "20:python",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "22:python",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "22:python",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "24:python",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "24:python",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "27:python",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "27:python",
      "target": "28:empty action",
      "key": 0
    }
  ]
}