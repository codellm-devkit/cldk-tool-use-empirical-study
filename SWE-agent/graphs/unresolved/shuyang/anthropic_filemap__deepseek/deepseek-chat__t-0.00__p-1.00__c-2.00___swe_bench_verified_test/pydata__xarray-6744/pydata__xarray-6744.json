{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pydata__xarray-6744"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1960211880505085
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20035557984374464
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/rolling.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1716754559893161
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/rolling.py",
        "view_range": [
          270,
          282
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1880237211007625
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/rolling.py",
        "old_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        stops = np.arange(1, len(self.window_labels) + 1)\n        starts = stops - int(self.window[0])\n        starts[: int(self.window[0])] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "new_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        stops = np.arange(1, len(self.window_labels) + 1)\n        starts = stops - int(self.window[0])\n        if self.center:\n            shift = int(self.window[0]) // 2\n            starts += shift\n            stops += shift\n        starts[: int(self.window[0])] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.19522481295280159
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "file_text": "import xarray as xr\nimport numpy as np\n\nmy_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n\n# Option 1: take a center-justified rolling average\nresult1 = my_data.rolling(x=3, center=True).mean().values\nprint(\"Result 1 (direct mean):\", result1)\n\n# Option 2: manually iterate\nmy_data_rolling = my_data.rolling(x=3, center=True)\nresult2 = [window.mean().values.item() for label, window in my_data_rolling]\nprint(\"Result 2 (manual iteration):\", result2)"
      },
      "phase": "verification",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        1.9787836449686438,
        1.6302594009321183,
        1.7443765888456255,
        1.6137933018617332,
        1.6392686828039587,
        1.6774160109926015,
        1.6730251018889248,
        1.9333538701757789,
        1.8402408079709858,
        1.6063584450166672,
        1.6337916280608624,
        1.8066843189299107,
        1.6595900729298592,
        1.6286753481253982,
        1.6286996360868216,
        1.6562616531737149,
        1.6497919359244406,
        1.64542430290021,
        1.8210055159870535,
        1.7003936811815947,
        1.6737385110463947,
        1.6145161450840533,
        1.6364829859230667,
        1.633585749892518,
        1.6737928688526154,
        1.619957708986476,
        1.6158355930820107,
        1.6875773549545556,
        1.615275562973693,
        1.6388324960134923,
        1.623721085023135,
        1.8150053771678358,
        1.7560271511320025,
        1.6204647121485323,
        1.6369371488690376,
        1.8132608539890498,
        1.7385520690586418,
        1.6225412220228463,
        1.6864454760216177,
        1.7290355041623116
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_issue.py"
      ],
      "phase": "verification",
      "step_indices": [
        5,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        43,
        45,
        47,
        49,
        51,
        53,
        55,
        57,
        59,
        61,
        63,
        65,
        67,
        69,
        71,
        73,
        75,
        77,
        79,
        81,
        83
      ],
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19050931395031512
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "import xarray as xr\nimport numpy as np\n\nmy_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n\n# Option 1: take a center-justified rolling average\nresult1 = my_data.rolling(x=3, center=True).mean().values\nprint(\"Result 1 (direct mean):\", result1)\n\n# Option 2: manually iterate\nmy_data_rolling = my_data.rolling(x=3, center=True)\nresult2 = [window.mean().values.item() for label, window in my_data_rolling]\nprint(\"Result 2 (manual iteration):\", result2)",
        "new_str": "import xarray as xr\nimport numpy as np\n\nmy_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n\n# Option 1: take a center-justified rolling average\nresult1 = my_data.rolling(x=3, center=True).mean().values\nprint(\"Result 1 (direct mean):\", result1)\n\n# Option 2: manually iterate\nmy_data_rolling = my_data.rolling(x=3, center=True)\nresult2 = []\nfor label, window in my_data_rolling:\n    print(f\"Label: {label}, Window: {window.values}\")\n    result2.append(window.mean().values.item())\nprint(\"Result 2 (manual iteration):\", result2)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20085857599042356
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/rolling.py",
        "old_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        stops = np.arange(1, len(self.window_labels) + 1)\n        starts = stops - int(self.window[0])\n        if self.center:\n            shift = int(self.window[0]) // 2\n            starts += shift\n            stops += shift\n        starts[: int(self.window[0])] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "new_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        stops = np.arange(1, len(self.window_labels) + 1)\n        starts = stops - int(self.window[0])\n        if self.center:\n            shift = int(self.window[0]) // 2\n            starts = np.maximum(starts + shift, 0)\n            stops = np.minimum(stops + shift, len(self.obj[self.dim[0]]))\n        starts[: int(self.window[0])] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21409359783865511
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/rolling.py",
        "old_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        stops = np.arange(1, len(self.window_labels) + 1)\n        starts = stops - int(self.window[0])\n        if self.center:\n            shift = int(self.window[0]) // 2\n            starts = np.maximum(starts + shift, 0)\n            stops = np.minimum(stops + shift, len(self.obj[self.dim[0]]))\n        starts[: int(self.window[0])] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "new_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        window_size = int(self.window[0])\n        stops = np.arange(window_size, len(self.window_labels) + window_size)\n        starts = stops - window_size\n        if self.center:\n            shift = window_size // 2\n            starts = np.maximum(starts - shift, 0)\n            stops = np.minimum(stops - shift, len(self.obj[self.dim[0]]))\n        starts[:window_size] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2009573660325259,
        0.18750899005681276,
        0.17749840603210032,
        0.20477000484243035,
        0.18807041179388762,
        0.19917547493241727,
        0.18483293685130775,
        0.19265315704979002,
        0.19676769897341728,
        0.20338408485986292,
        0.1968668238259852,
        0.20622305409051478,
        0.18908584606833756,
        0.19633914693258703,
        0.1915333739016205,
        0.21521773096174002,
        0.1871011508628726,
        0.19786514109000564,
        0.20103309792466462
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/rolling.py",
        "old_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        window_size = int(self.window[0])\n        stops = np.arange(window_size, len(self.window_labels) + window_size)\n        starts = stops - window_size\n        if self.center:\n            shift = window_size // 2\n            starts = np.maximum(starts - shift, 0)\n            stops = np.minimum(stops - shift, len(self.obj[self.dim[0]]))\n        starts[:window_size] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "new_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        window_size = int(self.window[0])\n        stops = np.arange(1, len(self.window_labels) + 1)\n        starts = stops - window_size\n        if self.center:\n            shift = window_size // 2\n            starts = np.maximum(starts + shift, 0)\n            stops = np.minimum(stops + shift, len(self.obj[self.dim[0]]))\n        starts[:window_size] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12,
        16,
        20,
        24,
        28,
        32,
        36,
        40,
        44,
        48,
        52,
        56,
        60,
        64,
        68,
        72,
        76,
        80,
        84
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19335629791021347,
        0.2077168368268758,
        0.20296385791152716,
        0.20697506004944444,
        0.1923012980259955,
        0.19225329090841115,
        0.1936370199546218,
        0.19347596098668873,
        0.20994127402082086,
        0.2067220478784293,
        0.18350683012977242,
        0.19004990090616047,
        0.1904324390925467,
        0.17517267796210945,
        0.19206449599005282,
        0.19002852798439562,
        0.20792595203965902,
        0.20203835307620466
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/rolling.py",
        "old_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        window_size = int(self.window[0])\n        stops = np.arange(1, len(self.window_labels) + 1)\n        starts = stops - window_size\n        if self.center:\n            shift = window_size // 2\n            starts = np.maximum(starts + shift, 0)\n            stops = np.minimum(stops + shift, len(self.obj[self.dim[0]]))\n        starts[:window_size] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "new_str": "    def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n        if self.ndim > 1:\n            raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n        window_size = int(self.window[0])\n        stops = np.arange(window_size, len(self.window_labels) + window_size)\n        starts = stops - window_size\n        if self.center:\n            shift = window_size // 2\n            starts = np.maximum(starts - shift, 0)\n            stops = np.minimum(stops - shift, len(self.obj[self.dim[0]]))\n        starts[:window_size] = 0\n        for (label, start, stop) in zip(self.window_labels, starts, stops):\n            window = self.obj.isel({self.dim[0]: slice(start, stop)})\n\n            counts = window.count(dim=self.dim[0])\n            window = window.where(counts >= self.min_periods)\n\n            yield (label, window)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14,
        18,
        22,
        26,
        30,
        34,
        38,
        42,
        46,
        50,
        54,
        58,
        62,
        66,
        70,
        74,
        78,
        82
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        85
      ],
      "id": "11:empty action"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "5:python",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "5:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "20",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "24",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "28",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "32",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 5
    },
    {
      "label": "36",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 6
    },
    {
      "label": "40",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 7
    },
    {
      "label": "44",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 8
    },
    {
      "label": "48",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 9
    },
    {
      "label": "52",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 10
    },
    {
      "label": "56",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 11
    },
    {
      "label": "60",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 12
    },
    {
      "label": "64",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 13
    },
    {
      "label": "68",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 14
    },
    {
      "label": "72",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 15
    },
    {
      "label": "76",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 16
    },
    {
      "label": "80",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 17
    },
    {
      "label": "84",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 18
    },
    {
      "label": "14",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "22",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "26",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "30",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "34",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 5
    },
    {
      "label": "38",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 6
    },
    {
      "label": "42",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 7
    },
    {
      "label": "46",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 8
    },
    {
      "label": "50",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 9
    },
    {
      "label": "54",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 10
    },
    {
      "label": "58",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 11
    },
    {
      "label": "62",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 12
    },
    {
      "label": "66",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 13
    },
    {
      "label": "70",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 14
    },
    {
      "label": "74",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 15
    },
    {
      "label": "78",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 16
    },
    {
      "label": "82",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 17
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 1
    },
    {
      "label": "21",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 2
    },
    {
      "label": "25",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 3
    },
    {
      "label": "29",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 4
    },
    {
      "label": "33",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 5
    },
    {
      "label": "37",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 6
    },
    {
      "label": "41",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 7
    },
    {
      "label": "45",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 8
    },
    {
      "label": "49",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 9
    },
    {
      "label": "53",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 10
    },
    {
      "label": "57",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 11
    },
    {
      "label": "61",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 12
    },
    {
      "label": "65",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 13
    },
    {
      "label": "69",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 14
    },
    {
      "label": "73",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 15
    },
    {
      "label": "77",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 16
    },
    {
      "label": "81",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 17
    },
    {
      "label": "85",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "11:empty action",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 1
    },
    {
      "label": "23",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 2
    },
    {
      "label": "27",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 3
    },
    {
      "label": "31",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 4
    },
    {
      "label": "35",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 5
    },
    {
      "label": "39",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 6
    },
    {
      "label": "43",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 7
    },
    {
      "label": "47",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 8
    },
    {
      "label": "51",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 9
    },
    {
      "label": "55",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 10
    },
    {
      "label": "59",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 11
    },
    {
      "label": "63",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 12
    },
    {
      "label": "67",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 13
    },
    {
      "label": "71",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 14
    },
    {
      "label": "75",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 15
    },
    {
      "label": "79",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 16
    },
    {
      "label": "83",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 17
    }
  ]
}