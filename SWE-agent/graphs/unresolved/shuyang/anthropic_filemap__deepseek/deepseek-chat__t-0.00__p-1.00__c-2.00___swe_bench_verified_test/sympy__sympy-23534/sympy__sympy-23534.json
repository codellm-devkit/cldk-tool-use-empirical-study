{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sympy__sympy-23534"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.22116161207668483
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20257979608140886
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21711508207954466
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19412867887876928
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "view_range": [
          586,
          796
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.17976570082828403
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "file_text": "import sympy as smp\n\nq, u = smp.symbols(('q:2', 'u:2'), cls=smp.Function)\nprint(type(q[0]))"
      },
      "phase": "verification",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        1.117771201999858,
        0.39614469395019114,
        0.39729439513757825,
        0.3907393580302596,
        0.39538486092351377,
        0.3961460259743035,
        0.4046658771112561,
        0.3889371322002262,
        0.4484266850631684,
        0.4047915560659021,
        0.4068914039526135,
        0.41458673286251724,
        0.41358191706240177,
        0.3987543338444084,
        0.3869646170642227,
        0.4423523969016969,
        0.41587712708860636,
        0.401354055153206,
        0.39832556596957147,
        0.3848252980969846,
        0.3868090519681573
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        5,
        7,
        9,
        12,
        15,
        18,
        21,
        24,
        27,
        30,
        33,
        36,
        39,
        42,
        45,
        48,
        51,
        54,
        57,
        60,
        63
      ],
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18755386187694967
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges\n            for i in range(len(split) - 1):\n                if i and ':' in split[i] and split[i] != ':' and \\\n                        split[i - 1].endswith('(') and \\\n                        split[i + 1].startswith(')'):\n                    split[i - 1] = split[i - 1][:-1]\n                    split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            if cls != Function:\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19085654406808317
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "from __future__ import annotations\n\nfrom .assumptions import StdFactKB, _assume_defined\nfrom .basic import Basic, Atom\nfrom .cache import cacheit\nfrom .containers import Tuple\nfrom .expr import Expr, AtomicExpr\nfrom .function import AppliedUndef, FunctionClass\nfrom .kind import NumberKind, UndefinedKind\nfrom .logic import fuzzy_bool\nfrom .singleton import S\nfrom .sorting import ordered\nfrom .sympify import sympify",
        "new_str": "from __future__ import annotations\n\nfrom .assumptions import StdFactKB, _assume_defined\nfrom .basic import Basic, Atom\nfrom .cache import cacheit\nfrom .containers import Tuple\nfrom .expr import Expr, AtomicExpr\nfrom .function import AppliedUndef, FunctionClass, Function\nfrom .kind import NumberKind, UndefinedKind\nfrom .logic import fuzzy_bool\nfrom .singleton import S\nfrom .sorting import ordered\nfrom .sympify import sympify",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20738286385312676
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/function.py"
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18919412815012038
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            if cls != Function:\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import Function as FunctionClass\n            if not (hasattr(cls, '__mro__') and FunctionClass in cls.__mro__):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19109630002640188,
        0.19006503303535283,
        0.16694510402157903,
        0.19712637783959508,
        0.18461671215482056,
        0.18815380008891225,
        0.19010188290849328,
        0.18436208716593683,
        0.20419186516664922
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/function.py",
        "view_range": [
          370,
          460
        ]
      },
      "phase": "localization",
      "step_indices": [
        13,
        19,
        25,
        31,
        37,
        43,
        49,
        55,
        61
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19747350318357348
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import Function as FunctionClass\n            if not (hasattr(cls, '__mro__') and FunctionClass in cls.__mro__):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not isinstance(cls, FunctionClass):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1881471818778664
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/function.py",
        "view_range": [
          893,
          929
        ]
      },
      "phase": "localization",
      "step_indices": [
        16
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17713887011632323
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not isinstance(cls, FunctionClass):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import UndefinedFunction\n            if not isinstance(cls, UndefinedFunction):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18758179480209947
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import UndefinedFunction\n            if not isinstance(cls, UndefinedFunction):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and FunctionClass in cls.__mro__):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1803011919837445,
        0.1864538190420717,
        0.18787263496778905,
        0.1846124141011387,
        0.19057178404182196,
        0.19846169278025627,
        0.18461073911748827,
        0.18421206483617425
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/function.py",
        "view_range": [
          152,
          200
        ]
      },
      "phase": "localization",
      "step_indices": [
        22,
        28,
        34,
        40,
        46,
        52,
        58,
        64
      ],
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1886284330394119
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and FunctionClass in cls.__mro__):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and any(issubclass(base, FunctionClass) for base in cls.__mro__)):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1822642229963094
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and any(issubclass(base, FunctionClass) for base in cls.__mro__)):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and FunctionClass in cls.__mro__):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20321640488691628,
        0.19813221297226846,
        0.18363785301335156,
        0.18758288910612464,
        0.20187037787400186,
        0.18637133808806539
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and FunctionClass in cls.__mro__):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not isinstance(cls, FunctionClass):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        29,
        41,
        47,
        53,
        59,
        65
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19336332194507122
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not isinstance(cls, FunctionClass):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and any(issubclass(base, FunctionClass) for base in cls.__mro__)):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        32
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1976187580730766
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and any(issubclass(base, FunctionClass) for base in cls.__mro__)):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not isinstance(cls, FunctionClass):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        35
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18943438003771007,
        0.18654193682596087,
        0.18946994212456048,
        0.17746528796851635,
        0.1853830988984555
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/symbol.py",
        "old_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not isinstance(cls, FunctionClass):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "new_str": "            # remove 1 layer of bounding parentheses around ranges, unless cls is Function\n            from .function import FunctionClass\n            if not (hasattr(cls, '__mro__') and FunctionClass in cls.__mro__):\n                for i in range(len(split) - 1):\n                    if i and ':' in split[i] and split[i] != ':' and \\\n                            split[i - 1].endswith('(') and \\\n                            split[i + 1].startswith(')'):\n                        split[i - 1] = split[i - 1][:-1]\n                        split[i + 1] = split[i + 1][1:]",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        38,
        44,
        50,
        56,
        62
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        66
      ],
      "id": "22:empty action"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "5:python",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "5:python",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "25",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 2
    },
    {
      "label": "31",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 3
    },
    {
      "label": "37",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 4
    },
    {
      "label": "43",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 5
    },
    {
      "label": "49",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 6
    },
    {
      "label": "55",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 7
    },
    {
      "label": "61",
      "type": "exec",
      "source": "5:python",
      "target": "10:str_replace_editor\nview",
      "key": 8
    },
    {
      "label": "16",
      "type": "exec",
      "source": "5:python",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "5:python",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "5:python",
      "target": "15:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "34",
      "type": "exec",
      "source": "5:python",
      "target": "15:str_replace_editor\nview",
      "key": 2
    },
    {
      "label": "40",
      "type": "exec",
      "source": "5:python",
      "target": "15:str_replace_editor\nview",
      "key": 3
    },
    {
      "label": "46",
      "type": "exec",
      "source": "5:python",
      "target": "15:str_replace_editor\nview",
      "key": 4
    },
    {
      "label": "52",
      "type": "exec",
      "source": "5:python",
      "target": "15:str_replace_editor\nview",
      "key": 5
    },
    {
      "label": "58",
      "type": "exec",
      "source": "5:python",
      "target": "15:str_replace_editor\nview",
      "key": 6
    },
    {
      "label": "64",
      "type": "exec",
      "source": "5:python",
      "target": "15:str_replace_editor\nview",
      "key": 7
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "44",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "50",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "56",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "62",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "15",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "47",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "53",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "59",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "65",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 5
    },
    {
      "label": "35",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 1
    },
    {
      "label": "48",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 2
    },
    {
      "label": "54",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 3
    },
    {
      "label": "60",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 4
    },
    {
      "label": "66",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "22:empty action",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "45",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 1
    },
    {
      "label": "51",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 2
    },
    {
      "label": "57",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 3
    },
    {
      "label": "63",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 4
    }
  ]
}