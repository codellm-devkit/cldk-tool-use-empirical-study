{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sympy__sympy-13878"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18936380301602185,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/continuous.py"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19306302582845092,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19388321205042303,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.2135535478591919,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py"
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18775707110762596,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          150,
          200
        ]
      },
      "phase": "localization",
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1936147331725806,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))",
        "new_str": "class ArcsinDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    def pdf(self, x):\n        return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        return (2/pi)*asin(sqrt((x - a)/(b - a)))",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1796247260645032,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          660,
          720
        ]
      },
      "phase": "localization",
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18822650285437703,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class DagumDistribution(SingleContinuousDistribution):\n    _argnames = ('p', 'a', 'b')\n\n    def pdf(self, x):\n        p, a, b = self.p, self.a, self.b\n        return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))",
        "new_str": "class DagumDistribution(SingleContinuousDistribution):\n    _argnames = ('p', 'a', 'b')\n\n    def pdf(self, x):\n        p, a, b = self.p, self.a, self.b\n        return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n\n    def _cdf(self, x):\n        p, a, b = self.p, self.a, self.b\n        return (1 + (x/b)**(-a))**(-p)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19079220411367714,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          720,
          790
        ]
      },
      "phase": "localization",
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17898406297899783,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          1090,
          1185
        ]
      },
      "phase": "localization",
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18378300894983113,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          1027,
          1100
        ]
      },
      "phase": "localization",
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.2046599320601672,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))",
        "new_str": "class FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    set = Interval(0, oo)\n\n    def __new__(cls, a, s=1, m=0):\n        a, s, m = list(map(sympify, (a, s, m)))\n        return Basic.__new__(cls, a, s, m)\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return exp(-((x - m)/s)**(-a))",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17789950803853571,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          1185,
          1254
        ]
      },
      "phase": "localization",
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18531840108335018,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class GammaInverseDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"alpha must be positive\")\n        _value_check(b > 0, \"beta must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return b**a/gamma(a) * x**(-a-1) * exp(-b/x)",
        "new_str": "class GammaInverseDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"alpha must be positive\")\n        _value_check(b > 0, \"beta must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return b**a/gamma(a) * x**(-a-1) * exp(-b/x)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        return uppergamma(a, b/x)/gamma(a)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18535299296490848,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          1369,
          1436
        ]
      },
      "phase": "localization",
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1815358130261302,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)",
        "new_str": "class KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    set = Interval(0, oo)\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a-1) * (1-x**a)**(b-1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        return 1 - (1 - x**a)**b",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18540235003456473,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          1436,
          1492
        ]
      },
      "phase": "localization",
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1907047179993242,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)",
        "new_str": "class LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return 1/(2*b)*exp(-Abs(x - mu)/b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        return Piecewise(\n            (S.Half * exp((x - mu)/b), x < mu),\n            (1 - S.Half * exp(-(x - mu)/b), x >= mu)\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.16886503784917295,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          1492,
          1550
        ]
      },
      "phase": "localization",
      "id": "18:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19189589098095894,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class LogisticDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 's')\n\n    def pdf(self, x):\n        mu, s = self.mu, self.s\n        return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)",
        "new_str": "class LogisticDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 's')\n\n    def pdf(self, x):\n        mu, s = self.mu, self.s\n        return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n\n    def _cdf(self, x):\n        mu, s = self.mu, self.s\n        return 1 / (1 + exp(-(x - mu)/s))",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18490640609525144,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          1550,
          1600
        ]
      },
      "phase": "localization",
      "id": "20:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": 0.12089142692275345,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/sympy/stats/crv_types.py"
      ],
      "phase": "general",
      "id": "21:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19071701099164784,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          1736,
          1780
        ]
      },
      "phase": "localization",
      "id": "22:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19527075090445578,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class NakagamiDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'omega')\n\n    set = Interval(0, oo)\n\n    def pdf(self, x):\n        mu, omega = self.mu, self.omega\n        return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)",
        "new_str": "class NakagamiDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'omega')\n\n    set = Interval(0, oo)\n\n    def pdf(self, x):\n        mu, omega = self.mu, self.omega\n        return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)\n\n    def _cdf(self, x):\n        mu, omega = self.mu, self.omega\n        return lowergamma(mu, (mu/omega)*x**2)/gamma(mu)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "grep",
      "execution_time": 0.13391041499562562,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/sympy/stats/crv_types.py"
      ],
      "phase": "general",
      "id": "24:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17138877883553505,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          2258,
          2300
        ]
      },
      "phase": "localization",
      "id": "25:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19368908205069602,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class StudentTDistribution(SingleContinuousDistribution):\n    _argnames = ('nu',)\n\n    def pdf(self, x):\n        nu = self.nu\n        return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)",
        "new_str": "class StudentTDistribution(SingleContinuousDistribution):\n    _argnames = ('nu',)\n\n    def pdf(self, x):\n        nu = self.nu\n        return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)\n\n    def _cdf(self, x):\n        nu = self.nu\n        return S.Half + x*gamma((nu + 1)/2)*hyper((S.Half, (nu + 1)/2), (S(3)/2,), -x**2/nu)/(sqrt(pi*nu)*gamma(nu/2))",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "grep",
      "execution_time": 0.12045474187470973,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/sympy/stats/crv_types.py"
      ],
      "phase": "general",
      "id": "27:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18310467386618257,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "view_range": [
          2583,
          2630
        ]
      },
      "phase": "localization",
      "id": "28:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19391894806176424,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/stats/crv_types.py",
        "old_str": "class UniformSumDistribution(SingleContinuousDistribution):\n    _argnames = ('n',)\n\n    @property\n    def set(self):\n        return Interval(0, self.n)\n\n    def pdf(self, x):\n        n = self.n\n        k = Dummy(\"k\")\n        return 1/factorial(\n            n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x))",
        "new_str": "class UniformSumDistribution(SingleContinuousDistribution):\n    _argnames = ('n',)\n\n    @property\n    def set(self):\n        return Interval(0, self.n)\n\n    def pdf(self, x):\n        n = self.n\n        k = Dummy(\"k\")\n        return 1/factorial(\n            n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x))\n\n    def _cdf(self, x):\n        n = self.n\n        k = Dummy(\"k\")\n        return 1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x)))",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "30:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2129456668626517,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "31:submit"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "32:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.19977421616204083,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "33:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "0:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "22:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "25:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "28:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "18:str_replace_editor\nview",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "20:str_replace_editor\nview",
      "target": "21:grep",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "21:grep",
      "target": "22:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "22:str_replace_editor\nview",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "24:grep",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "24:grep",
      "target": "25:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "25:str_replace_editor\nview",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "27:grep",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "27:grep",
      "target": "28:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "28:str_replace_editor\nview",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:empty action",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "30:empty action",
      "target": "31:submit",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "31:submit",
      "target": "32:empty action",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "32:empty action",
      "target": "33:submit",
      "key": 0
    }
  ]
}