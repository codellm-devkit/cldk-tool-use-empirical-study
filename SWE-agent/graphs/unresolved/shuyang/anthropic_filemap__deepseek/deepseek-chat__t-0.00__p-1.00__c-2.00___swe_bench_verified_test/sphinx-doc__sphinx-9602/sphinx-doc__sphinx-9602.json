{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sphinx-doc__sphinx-9602"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20688852691091597
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19195813802070916
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1820847128983587
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/typehints.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1961865071207285
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20513760694302619
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/environment"
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.23198733595199883
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/environment/collectors"
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1930988598614931
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/builders"
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20777605404146016
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/application.py"
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20734549197368324
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/config.py"
      },
      "phase": "localization",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1748085089493543
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py"
      },
      "phase": "localization",
      "step_indices": [
        9
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1785512671340257
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "view_range": [
          295,
          332
        ]
      },
      "phase": "localization",
      "step_indices": [
        10
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "echo",
      "execution_time": [
        0.11787623702548444
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/reproduce.py"
      ],
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "11:echo"
    },
    {
      "label": "cd",
      "execution_time": [
        0.07988435204606503,
        0.2380999765591696
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        12,
        13
      ],
      "id": "12:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.07988435204606503
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce.py"
      ],
      "phase": "verification",
      "step_indices": [
        12
      ],
      "id": "13:python"
    },
    {
      "label": "sphinx-quickstart",
      "execution_time": [
        0.2380999765591696
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "docs"
      ],
      "phase": "general",
      "step_indices": [
        13
      ],
      "id": "14:sphinx-quickstart"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.17701577791012824
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/docs/conf.py",
        "file_text": "import os\nimport sys\nsys.path.insert(0, os.path.abspath('..'))\n\nextensions = ['sphinx.ext.autodoc']\nnitpicky = True\n\nproject = 'test'\ncopyright = '2023, test'\nauthor = 'test'\nrelease = '1.0'"
      },
      "phase": "verification",
      "step_indices": [
        14
      ],
      "id": "15:str_replace_editor\ncreate"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18852831795811653
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/docs/conf.py"
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17811546311713755
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/docs/conf.py",
        "old_str": "# import os\n# import sys\n# sys.path.insert(0, os.path.abspath('.'))",
        "new_str": "import os\nimport sys\nsys.path.insert(0, os.path.abspath('..'))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19084185105748475
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/docs/conf.py",
        "old_str": "extensions = [\n]",
        "new_str": "extensions = [\n    'sphinx.ext.autodoc',\n]\nnitpicky = True",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.19355875486508012
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/docs/index.rst",
        "file_text": ".. test documentation master file, created by\n   sphinx-quickstart on Tue Oct 10 10:00:00 2023.\n\nWelcome to test's documentation!\n================================\n\n.. automodule:: reproduce\n   :members:\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`"
      },
      "phase": "verification",
      "step_indices": [
        18
      ],
      "id": "19:str_replace_editor\ncreate"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19463890395127237
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/docs/index.rst"
      },
      "phase": "localization",
      "step_indices": [
        19
      ],
      "id": "20:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18762899190187454
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/docs/index.rst",
        "old_str": "Welcome to test's documentation!\n================================\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n\n\nIndices and tables",
        "new_str": "Welcome to test's documentation!\n================================\n\n.. automodule:: reproduce\n   :members:\n\nIndices and tables",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": [
        0.4428235189989209,
        0.31408353394363075,
        0.31138098053634167,
        0.31108419003430754,
        0.3289484614506364,
        0.39373872545547783,
        0.321864789002575,
        0.3251081019407138,
        0.32621517952065915,
        0.33000157901551574,
        0.3165075924480334
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": [
        "/testbed/docs"
      ],
      "phase": "general",
      "step_indices": [
        21,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        43
      ],
      "id": "22:cd"
    },
    {
      "label": "sphinx-build",
      "execution_time": [
        0.4428235189989209,
        0.31408353394363075,
        0.31138098053634167,
        0.31108419003430754,
        0.3289484614506364,
        0.39373872545547783,
        0.321864789002575,
        0.3251081019407138,
        0.32621517952065915,
        0.33000157901551574,
        0.3165075924480334
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": [
        "_build/html"
      ],
      "phase": "general",
      "step_indices": [
        21,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        43
      ],
      "id": "23:sphinx-build"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2605324680916965
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "\"\"\"Stringify type annotation object.\"\"\"\n    from sphinx.util import inspect  # lazy loading\n\n    if isinstance(annotation, str):\n        if annotation.startswith(\"'\" and annotation.endswith(\"'\"):\n            # might be a double Forward-ref'ed type.  Go unquoting.\n            return annotation[1:-1]\n        else:\n            return annotation\n    elif isinstance(annotation, TypeVar):\n        if annotation.__module__ == 'typing':\n            return annotation.__name__\n        else:\n            return '.'.join([annotation.__module__, annotation.__name__])\n    elif inspect.isNewType(annotation):\n        # Could not get the module where it defined\n        return annotation.__name__\n    elif not annotation:\n        return repr(annotation)\n    elif annotation is NoneType:\n        return 'None'\n    elif annotation in INVALID_BUILTIN_CLASSES:\n        return INVALID_BUILTIN_CLASSES[annotation]\n    elif str(annotation).startswith('typing.Annotated'):  # for py310+\n        pass\n    elif (getattr(annotation, '__module__', None) == 'builtins' and\n          getattr(annotation, '__qualname__', None)):\n        if hasattr(annotation, '__args__'):  # PEP 585 generic\n            return repr(annotation)\n        else:\n            return annotation.__qualname__\n    elif annotation is Ellipsis:\n        return '...'\n\n    if sys.version_info >= (3, 7):  # py37+\n        return _stringify_py37(annotation)\n    else:\n        return _stringify_py36(annotation)",
        "new_str": "\"\"\"Stringify type annotation object.\"\"\"\n    from sphinx.util import inspect  # lazy loading\n\n    if isinstance(annotation, str):\n        if annotation.startswith(\"'\" and annotation.endswith(\"'\"):\n            # might be a double Forward-ref'ed type.  Go unquoting.\n            return annotation[1:-1]\n        else:\n            return annotation\n    elif isinstance(annotation, TypeVar):\n        if annotation.__module__ == 'typing':\n            return annotation.__name__\n        else:\n            return '.'.join([annotation.__module__, annotation.__name__])\n    elif inspect.isNewType(annotation):\n        # Could not get the module where it defined\n        return annotation.__name__\n    elif not annotation:\n        return repr(annotation)\n    elif annotation is NoneType:\n        return 'None'\n    elif annotation in INVALID_BUILTIN_CLASSES:\n        return INVALID_BUILTIN_CLASSES[annotation]\n    elif str(annotation).startswith('typing.Annotated'):  # for py310+\n        pass\n    elif (getattr(annotation, '__module__', None) == 'builtins' and\n          getattr(annotation, '__qualname__', None)):\n        if hasattr(annotation, '__args__'):  # PEP 585 generic\n            return repr(annotation)\n        else:\n            return annotation.__qualname__\n    elif annotation is Ellipsis:\n        return '...'\n    elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: skip nitpick for Literal values\n        return str(annotation)\n\n    if sys.version_info >= (3, 7):  # py37+\n        return _stringify_py37(annotation)\n    else:\n        return _stringify_py36(annotation)",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        22
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19332374492660165
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif annotation is Ellipsis:\n        return '...'\n\n    if sys.version_info >= (3, 7):  # py37+\n        return _stringify_py37(annotation)\n    else:\n        return _stringify_py36(annotation)",
        "new_str": "elif annotation is Ellipsis:\n        return '...'\n    elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: skip nitpick for Literal values\n        return str(annotation)\n\n    if sys.version_info >= (3, 7):  # py37+\n        return _stringify_py37(annotation)\n    else:\n        return _stringify_py36(annotation)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17792140692472458
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "\"\"\"Stringify type annotation object.\"\"\"\n    from sphinx.util import inspect  # lazy loading",
        "new_str": "\"\"\"Stringify type annotation object.\"\"\"\n    from sphinx.util import inspect  # lazy loading\n    import typing  # for Literal support",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        25
      ],
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18615775415673852
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: skip nitpick for Literal values\n        return str(annotation)",
        "new_str": "elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: return a string representation that doesn't trigger nitpick\n        args = annotation.__args__\n        if len(args) == 1:\n            return 'Literal[%r]' % args[0]\n        else:\n            return 'Literal[%s]' % ', '.join(repr(arg) for arg in args)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        27
      ],
      "id": "27:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1826203188393265
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: return a string representation that doesn't trigger nitpick\n        args = annotation.__args__\n        if len(args) == 1:\n            return 'Literal[%r]' % args[0]\n        else:\n            return 'Literal[%s]' % ', '.join(repr(arg) for arg in args)",
        "new_str": "elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: return a string representation that doesn't trigger nitpick\n        args = annotation.__args__\n        if len(args) == 1:\n            return 'Literal[%r]' % args[0]\n        else:\n            return 'Literal[%s]' % ', '.join(repr(arg) for arg in args)\n    elif isinstance(annotation, type) and annotation.__module__ == 'builtins' and annotation.__qualname__ in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation.__qualname__",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17674479889683425
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, type) and annotation.__module__ == 'builtins' and annotation.__qualname__ in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation.__qualname__",
        "new_str": "elif isinstance(annotation, type) and annotation.__module__ == 'builtins' and annotation.__qualname__ in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation.__qualname__\n    elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: return a string representation that doesn't trigger nitpick\n        args = annotation.__args__\n        if len(args) == 1:\n            return 'Literal[%r]' % args[0]\n        else:\n            return 'Literal[%s]' % ', '.join(repr(arg) for arg in args)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        31
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2060527978464961
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, type) and annotation.__module__ == 'builtins' and annotation.__qualname__ in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation.__qualname__\n    elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: return a string representation that doesn't trigger nitpick\n        args = annotation.__args__\n        if len(args) == 1:\n            return 'Literal[%r]' % args[0]\n        else:\n            return 'Literal[%s]' % ', '.join(repr(arg) for arg in args)",
        "new_str": "elif isinstance(annotation, type) and annotation.__module__ == 'builtins' and annotation.__qualname__ in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation.__qualname__\n    elif hasattr(annotation, '__origin__') and annotation.__origin__ is typing.Literal:\n        # Handle Literal annotations: return a string representation that doesn't trigger nitpick\n        args = annotation.__args__\n        if len(args) == 1:\n            return 'Literal[%r]' % args[0]\n        else:\n            return 'Literal[%s]' % ', '.join(repr(arg) for arg in args)\n    elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        33
      ],
      "id": "30:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18130343407392502
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation",
        "new_str": "elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        35
      ],
      "id": "31:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19337468221783638
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation",
        "new_str": "elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation\n    elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        37
      ],
      "id": "32:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1939953959081322
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation",
        "new_str": "elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        39
      ],
      "id": "33:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1933255090843886
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation",
        "new_str": "elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation\n    elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation",
        "edit_status": "failure: multiple occurrences"
      },
      "phase": "patch",
      "step_indices": [
        41
      ],
      "id": "34:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18944072700105608
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation",
        "new_str": "elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation\n    elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        42
      ],
      "id": "35:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1974819959141314,
        0.19563077995553613,
        0.19827538100071251,
        0.19707050803117454,
        0.19697642303071916,
        0.18961882614530623,
        0.20010671787895262,
        0.18580595590174198,
        0.19454717705957592,
        0.18844611011445522,
        0.18563766800798476,
        0.18908086395822465,
        0.18881143280304968,
        0.18119855993427336,
        0.19305285904556513,
        0.1881938329897821,
        0.19018811592832208,
        0.18428598390892148,
        0.19025821913965046,
        0.1982464729808271,
        0.18095476808957756,
        0.19542747898958623,
        0.2119397739879787,
        0.18917307001538575,
        0.18432630086317658,
        0.19918426498770714,
        0.2121463930234313,
        0.18570233788341284,
        0.19840950798243284,
        0.18467160919681191,
        0.18944318708963692,
        0.19488885393366218,
        0.19433519802987576,
        0.19821218587458134,
        0.19816144998185337,
        0.18218097114004195,
        0.19793069292791188,
        0.19321798090822995,
        0.20124688185751438,
        0.19895163597539067,
        0.1819950460921973,
        0.20432583498768508,
        0.1799061361234635,
        0.1861895709298551,
        0.18505797907710075,
        0.18547974107787013,
        0.19675474194809794,
        0.18270272808149457,
        0.20512680895626545,
        0.1887903199531138
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation",
        "new_str": "elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation",
        "edit_status": "failure: multiple occurrences"
      },
      "phase": "patch",
      "step_indices": [
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        130,
        132,
        134,
        136,
        138,
        140,
        142
      ],
      "id": "36:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18954716296866536,
        0.1882607159204781,
        0.19621743191964924,
        0.18956849700771272,
        0.18855737801641226,
        0.1873051051516086,
        0.18344433302991092,
        0.1932954080402851,
        0.21141273411922157,
        0.18288690084591508,
        0.21764848590828478,
        0.1881253521423787,
        0.19286034093238413,
        0.18824452813714743,
        0.20087922387756407,
        0.1889146901667118,
        0.19812514889054,
        0.17772857891395688,
        0.20761080412194133,
        0.19168529193848372,
        0.20109550282359123,
        0.2126356370281428,
        0.18938383390195668,
        0.18220754293724895,
        0.18652733298949897,
        0.20260409102775156,
        0.19108507595956326,
        0.1985922500025481,
        0.194025648990646,
        0.19587294501252472,
        0.18233823403716087,
        0.1821267248596996,
        0.18860378093086183,
        0.19337603286840022,
        0.1924142357893288,
        0.19388442602939904,
        0.19397860602475703,
        0.1768891690298915,
        0.18439349508844316,
        0.19364960910752416,
        0.18764865305274725,
        0.18329383595846593,
        0.20204500295221806,
        0.18718060990795493,
        0.18082807888276875,
        0.19801181415095925,
        0.19889386394061148,
        0.18444192386232316,
        0.1922338700387627,
        0.1839183911215514
      ],
      "state": {
        "working_dir": "/testbed/docs"
      },
      "args": {
        "path": "/testbed/sphinx/util/typing.py",
        "old_str": "elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation",
        "new_str": "elif isinstance(annotation, str) and annotation.startswith('typing.Literal['):\n        # Handle stringified Literal annotations\n        return annotation\n    elif isinstance(annotation, str) and annotation.startswith('Literal['):\n        # Handle stringified Literal annotations without the 'typing.' prefix\n        return annotation\n    elif isinstance(annotation, str) and annotation in ('True', 'False', 'None'):\n        # Handle builtin constants like True, False, None\n        return annotation",
        "edit_status": "failure: multiple occurrences"
      },
      "phase": "patch",
      "step_indices": [
        45,
        47,
        49,
        51,
        53,
        55,
        57,
        59,
        61,
        63,
        65,
        67,
        69,
        71,
        73,
        75,
        77,
        79,
        81,
        83,
        85,
        87,
        89,
        91,
        93,
        95,
        97,
        99,
        101,
        103,
        105,
        107,
        109,
        111,
        113,
        115,
        117,
        119,
        121,
        123,
        125,
        127,
        129,
        131,
        133,
        135,
        137,
        139,
        141,
        143
      ],
      "id": "37:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        144
      ],
      "id": "38:empty action"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "9:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:echo",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:echo",
      "target": "12:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:cd",
      "target": "13:python",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:cd",
      "target": "14:sphinx-quickstart",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "13:python",
      "target": "12:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "14:sphinx-quickstart",
      "target": "15:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "15:str_replace_editor\ncreate",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "19:str_replace_editor\ncreate",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "20:str_replace_editor\nview",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 1
    },
    {
      "label": "26",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 2
    },
    {
      "label": "28",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 3
    },
    {
      "label": "30",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 4
    },
    {
      "label": "32",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 5
    },
    {
      "label": "34",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 6
    },
    {
      "label": "36",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 7
    },
    {
      "label": "38",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 8
    },
    {
      "label": "40",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 9
    },
    {
      "label": "43",
      "type": "exec",
      "source": "22:cd",
      "target": "23:sphinx-build",
      "key": 10
    },
    {
      "label": "22",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "27:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "31:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "32:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "33:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "34:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "44",
      "type": "exec",
      "source": "23:sphinx-build",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "27:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "31:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "32:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "33:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "34:str_replace_editor\nstr_replace",
      "target": "35:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "43",
      "type": "exec",
      "source": "35:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "45",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "47",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "49",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "51",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "53",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "55",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 5
    },
    {
      "label": "57",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 6
    },
    {
      "label": "59",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 7
    },
    {
      "label": "61",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 8
    },
    {
      "label": "63",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 9
    },
    {
      "label": "65",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 10
    },
    {
      "label": "67",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 11
    },
    {
      "label": "69",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 12
    },
    {
      "label": "71",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 13
    },
    {
      "label": "73",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 14
    },
    {
      "label": "75",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 15
    },
    {
      "label": "77",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 16
    },
    {
      "label": "79",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 17
    },
    {
      "label": "81",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 18
    },
    {
      "label": "83",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 19
    },
    {
      "label": "85",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 20
    },
    {
      "label": "87",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 21
    },
    {
      "label": "89",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 22
    },
    {
      "label": "91",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 23
    },
    {
      "label": "93",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 24
    },
    {
      "label": "95",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 25
    },
    {
      "label": "97",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 26
    },
    {
      "label": "99",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 27
    },
    {
      "label": "101",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 28
    },
    {
      "label": "103",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 29
    },
    {
      "label": "105",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 30
    },
    {
      "label": "107",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 31
    },
    {
      "label": "109",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 32
    },
    {
      "label": "111",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 33
    },
    {
      "label": "113",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 34
    },
    {
      "label": "115",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 35
    },
    {
      "label": "117",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 36
    },
    {
      "label": "119",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 37
    },
    {
      "label": "121",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 38
    },
    {
      "label": "123",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 39
    },
    {
      "label": "125",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 40
    },
    {
      "label": "127",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 41
    },
    {
      "label": "129",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 42
    },
    {
      "label": "131",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 43
    },
    {
      "label": "133",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 44
    },
    {
      "label": "135",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 45
    },
    {
      "label": "137",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 46
    },
    {
      "label": "139",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 47
    },
    {
      "label": "141",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 48
    },
    {
      "label": "143",
      "type": "exec",
      "source": "36:str_replace_editor\nstr_replace",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 49
    },
    {
      "label": "46",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "48",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "50",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "52",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "54",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "56",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 5
    },
    {
      "label": "58",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 6
    },
    {
      "label": "60",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 7
    },
    {
      "label": "62",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 8
    },
    {
      "label": "64",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 9
    },
    {
      "label": "66",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 10
    },
    {
      "label": "68",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 11
    },
    {
      "label": "70",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 12
    },
    {
      "label": "72",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 13
    },
    {
      "label": "74",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 14
    },
    {
      "label": "76",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 15
    },
    {
      "label": "78",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 16
    },
    {
      "label": "80",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 17
    },
    {
      "label": "82",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 18
    },
    {
      "label": "84",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 19
    },
    {
      "label": "86",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 20
    },
    {
      "label": "88",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 21
    },
    {
      "label": "90",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 22
    },
    {
      "label": "92",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 23
    },
    {
      "label": "94",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 24
    },
    {
      "label": "96",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 25
    },
    {
      "label": "98",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 26
    },
    {
      "label": "100",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 27
    },
    {
      "label": "102",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 28
    },
    {
      "label": "104",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 29
    },
    {
      "label": "106",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 30
    },
    {
      "label": "108",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 31
    },
    {
      "label": "110",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 32
    },
    {
      "label": "112",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 33
    },
    {
      "label": "114",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 34
    },
    {
      "label": "116",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 35
    },
    {
      "label": "118",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 36
    },
    {
      "label": "120",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 37
    },
    {
      "label": "122",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 38
    },
    {
      "label": "124",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 39
    },
    {
      "label": "126",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 40
    },
    {
      "label": "128",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 41
    },
    {
      "label": "130",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 42
    },
    {
      "label": "132",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 43
    },
    {
      "label": "134",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 44
    },
    {
      "label": "136",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 45
    },
    {
      "label": "138",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 46
    },
    {
      "label": "140",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 47
    },
    {
      "label": "142",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "36:str_replace_editor\nstr_replace",
      "key": 48
    },
    {
      "label": "144",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "38:empty action",
      "key": 0
    }
  ]
}