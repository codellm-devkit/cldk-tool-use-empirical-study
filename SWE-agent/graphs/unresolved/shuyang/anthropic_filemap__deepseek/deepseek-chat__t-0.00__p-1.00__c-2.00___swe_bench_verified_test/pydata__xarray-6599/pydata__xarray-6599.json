{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pydata__xarray-6599"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2083444599993527
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.2122385900001973
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_polyval_error.py",
        "file_text": "import xarray as xr\nimport numpy as np\n\nvalues = np.array(\n    [\n        \"2021-04-01T05:25:19.000000000\",\n        \"2021-04-01T05:25:29.000000000\",\n        \"2021-04-01T05:25:39.000000000\",\n        \"2021-04-01T05:25:49.000000000\",\n        \"2021-04-01T05:25:59.000000000\",\n        \"2021-04-01T05:26:09.000000000\",\n    ],\n    dtype=\"datetime64[ns]\",\n)\nazimuth_time = xr.DataArray(\n    values, name=\"azimuth_time\", coords={\"azimuth_time\": values - values[0]}\n)\n\npolyfit_coefficients = xr.DataArray(\n    [\n        [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n        [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n        [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n        [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n        [4.44739216e06, 1.45053974e06, 5.29960857e06],\n    ],\n    dims=(\"degree\", \"axis\"),\n    coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n)\n\nprint(xr.polyval(azimuth_time, polyfit_coefficients))"
      },
      "phase": "verification",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        1.921666843816638,
        1.5831473988946527,
        1.6053154820110649,
        1.4443317798431963,
        1.5085026719607413,
        1.5279724928550422,
        1.4623920018784702,
        1.6177034799475223,
        1.5014979999978095
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_polyval_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        2,
        5,
        8,
        10,
        12,
        14,
        16,
        18,
        20
      ],
      "id": "2:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20932820695452392
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "view_range": [
          1921,
          1949
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20114012900739908
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "old_str": "    def to_floatable(x: DataArray) -> DataArray:\n        if x.dtype.kind in \"mM\":\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    offset=np.datetime64(\"1970-01-01\"),\n                    datetime_unit=\"ns\",\n                ),\n            )\n        return x",
        "new_str": "    def to_floatable(x: DataArray) -> DataArray:\n        if x.dtype.kind == \"M\":  # datetime64\n            return x.copy(\n                data=datetime_to_numeric(\n                    x.data,\n                    offset=np.datetime64(\"1970-01-01\"),\n                    datetime_unit=\"ns\",\n                ),\n            )\n        elif x.dtype.kind == \"m\":  # timedelta64\n            return x.copy(data=x.data.astype(\"timedelta64[ns]\").astype(\"float64\"))\n        return x",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19211712991818786
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "view_range": [
          1847,
          1917
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.16649358090944588
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "old_str": "    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n\n    # using Horner's method\n    # https://en.wikipedia.org/wiki/Horner%27s_method\n    res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)\n    for deg in range(max_deg - 1, -1, -1):\n        res *= coord\n        res += coeffs.isel({degree_dim: deg}, drop=True)",
        "new_str": "    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n\n    # using Horner's method\n    # https://en.wikipedia.org/wiki/Horner%27s_method\n    res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)\n    for deg in range(max_deg - 1, -1, -1):\n        res = res * coord  # Use explicit multiplication to avoid in-place operations\n        res = res + coeffs.isel({degree_dim: deg}, drop=True)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20089275599457324
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_polyval_error.py",
        "old_str": "print(xr.polyval(azimuth_time, polyfit_coefficients))",
        "new_str": "azimuth_time_numeric = azimuth_time.copy(data=azimuth_time.data.astype(\"timedelta64[ns]\").astype(\"float64\"))\nprint(xr.polyval(azimuth_time_numeric, polyfit_coefficients))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2000798040535301
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "old_str": "    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n\n    # using Horner's method\n    # https://en.wikipedia.org/wiki/Horner%27s_method\n    res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)\n    for deg in range(max_deg - 1, -1, -1):\n        res = res * coord  # Use explicit multiplication to avoid in-place operations\n        res = res + coeffs.isel({degree_dim: deg}, drop=True)",
        "new_str": "    if hasattr(coord, \"dtype\") and coord.dtype.kind == \"m\":\n        raise TypeError(\n            \"`polyval` does not support `timedelta64` inputs. \"\n            \"Convert to numeric values (e.g., nanoseconds) first.\"\n        )\n    coord = _ensure_numeric(coord)  # type: ignore # https://github.com/python/mypy/issues/1533 ?\n\n    # using Horner's method\n    # https://en.wikipedia.org/wiki/Horner%27s_method\n    res = coeffs.isel({degree_dim: max_deg}, drop=True) + zeros_like(coord)\n    for deg in range(max_deg - 1, -1, -1):\n        res = res * coord  # Use explicit multiplication to avoid in-place operations\n        res = res + coeffs.isel({degree_dim: deg}, drop=True)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20794870099052787
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "old_str": "    if hasattr(coord, \"dtype\") and coord.dtype.kind == \"m\":\n        raise TypeError(\n            \"`polyval` does not support `timedelta64` inputs. \"\n            \"Convert to numeric values (e.g., nanoseconds) first.\"\n        )",
        "new_str": "    if isinstance(coord, (xr.DataArray, xr.Dataset)) and coord.dtype.kind == \"m\":\n        raise TypeError(\n            \"`polyval` does not support `timedelta64` inputs. \"\n            \"Convert to numeric values (e.g., nanoseconds) first.\"\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19277777592651546
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "old_str": "from __future__ import annotations\n\nimport functools\nimport itertools\nimport operator\nimport warnings\nfrom collections import Counter\nfrom typing import (\n    TYPE_CHECKING,\n    AbstractSet,\n    Any,\n    Callable,\n    Hashable,\n    Iterable,\n    Mapping,\n    Sequence,\n    overload,\n)",
        "new_str": "from __future__ import annotations\n\nimport functools\nimport itertools\nimport operator\nimport warnings\nfrom collections import Counter\nfrom typing import (\n    TYPE_CHECKING,\n    AbstractSet,\n    Any,\n    Callable,\n    Hashable,\n    Iterable,\n    Mapping,\n    Sequence,\n    overload,\n)\nimport xarray as xr",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2103464058600366
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "old_str": "    if isinstance(coord, (xr.DataArray, xr.Dataset)) and coord.dtype.kind == \"m\":\n        raise TypeError(\n            \"`polyval` does not support `timedelta64` inputs. \"\n            \"Convert to numeric values (e.g., nanoseconds) first.\"\n        )",
        "new_str": "    if hasattr(coord, \"dtype\") and getattr(coord, \"dtype\", None) and coord.dtype.kind == \"m\":\n        raise TypeError(\n            \"`polyval` does not support `timedelta64` inputs. \"\n            \"Convert to numeric values (e.g., nanoseconds) first.\"\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1862148258369416
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_polyval_error.py",
        "old_str": "azimuth_time_numeric = azimuth_time.copy(data=azimuth_time.data.astype(\"timedelta64[ns]\").astype(\"float64\"))\nprint(xr.polyval(azimuth_time_numeric, polyfit_coefficients))",
        "new_str": "azimuth_time_numeric = azimuth_time.copy(data=azimuth_time.data.astype(\"timedelta64[ns]\").astype(\"float64\"))\nprint(xr.polyval(azimuth_time_numeric, polyfit_coefficients))",
        "edit_status": "failure: no change"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2009591651149094
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/xarray/core/computation.py",
        "old_str": "    \"\"\"Evaluate a polynomial at specific values\n\n    Parameters\n    ----------\n    coord : DataArray or Dataset\n        Values at which to evaluate the polynomial.\n    coeffs : DataArray or Dataset\n        Coefficients of the polynomial.\n    degree_dim : Hashable, default: \"degree\"\n        Name of the polynomial degree dimension in `coeffs`.\n\n    Returns\n    -------\n    DataArray or Dataset\n        Evaluated polynomial.\n\n    See Also\n    --------\n    xarray.DataArray.polyfit\n    numpy.polynomial.polynomial.polyval\n    \"\"\"",
        "new_str": "    \"\"\"Evaluate a polynomial at specific values\n\n    Parameters\n    ----------\n    coord : DataArray or Dataset\n        Values at which to evaluate the polynomial. If the input is `timedelta64`,\n        it must be explicitly converted to numeric values (e.g., nanoseconds) first.\n    coeffs : DataArray or Dataset\n        Coefficients of the polynomial.\n    degree_dim : Hashable, default: \"degree\"\n        Name of the polynomial degree dimension in `coeffs`.\n\n    Returns\n    -------\n    DataArray or Dataset\n        Evaluated polynomial.\n\n    See Also\n    --------\n    xarray.DataArray.polyfit\n    numpy.polynomial.polynomial.polyval\n    \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        22
      ],
      "id": "14:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.21047925599850714,
        0.20461010606959462
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        23,
        25
      ],
      "id": "15:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.1196129301097244
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_polyval_error.py"
      ],
      "phase": "general",
      "step_indices": [
        24
      ],
      "id": "16:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\ncreate",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:python",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "2:python",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "2:python",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "2:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "2:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "2:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "2:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "2:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "2:python",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:empty action",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "14:empty action",
      "target": "15:submit",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "15:submit",
      "target": "16:rm",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "16:rm",
      "target": "15:submit",
      "key": 0
    }
  ]
}