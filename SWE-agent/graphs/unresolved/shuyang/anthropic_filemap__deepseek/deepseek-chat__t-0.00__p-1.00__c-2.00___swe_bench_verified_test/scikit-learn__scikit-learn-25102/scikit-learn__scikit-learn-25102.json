{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "scikit-learn__scikit-learn-25102"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1945943720638752,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20720601896755397,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/base.py"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1818877428304404,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20748418709263206,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py",
        "old_str": "def _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n\n    columns : callable, ndarray, or None\n        The column names or a callable that returns the column names. The\n        callable is useful if the column names require some computation.\n        If `columns` is a callable that raises an error, `columns` will have\n        the same semantics as `None`. If `None` and `data_to_wrap` is already a\n        dataframe, then the column names are not changed. If `None` and\n        `data_to_wrap` is **not** a dataframe, then columns are\n        `range(n_features)`.\n\n    index : array-like, default=None\n        Index for data.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            data_to_wrap.index = index\n        return data_to_wrap\n\n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)",
        "new_str": "def _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n    dtypes=None,\n):\n    \"\"\"Create a Pandas DataFrame.\n\n    If `data_to_wrap` is a DataFrame, then the `columns` and `index` will be changed\n    inplace. If `data_to_wrap` is a ndarray, then a new DataFrame is created with\n    `columns` and `index`.\n\n    Parameters\n    ----------\n    data_to_wrap : {ndarray, dataframe}\n        Data to be wrapped as pandas dataframe.\n\n    columns : callable, ndarray, or None\n        The column names or a callable that returns the column names. The\n        callable is useful if the column names require some computation.\n        If `columns` is a callable that raises an error, `columns` will have\n        the same semantics as `None`. If `None` and `data_to_wrap` is already a\n        dataframe, then the column names are not changed. If `None` and\n        `data_to_wrap` is **not** a dataframe, then columns are\n        `range(n_features)`.\n\n    index : array-like, default=None\n        Index for data.\n\n    dtypes : dict, default=None\n        If not None, specifies the dtypes for the output DataFrame.\n        Keys are column names, and values are the corresponding dtypes.\n\n    Returns\n    -------\n    dataframe : DataFrame\n        Container with column names or unchanged `output`.\n    \"\"\"\n    if issparse(data_to_wrap):\n        raise ValueError(\"Pandas output does not support sparse data.\")\n\n    if callable(columns):\n        try:\n            columns = columns()\n        except Exception:\n            columns = None\n\n    pd = check_pandas_support(\"Setting output container to 'pandas'\")\n\n    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            data_to_wrap.index = index\n        if dtypes is not None:\n            data_to_wrap = data_to_wrap.astype(dtypes)\n        return data_to_wrap\n\n    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n    if dtypes is not None:\n        df = df.astype(dtypes)\n    return df",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.2011607070453465,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py",
        "old_str": "def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : {\"transform\"}\n        Estimator's method to get container output for.\n\n    data_to_wrap : {ndarray, dataframe}\n        Data to wrap with container.\n\n    original_input : {ndarray, dataframe}\n        Original input of function.\n\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=getattr(original_input, \"index\", None),\n        columns=estimator.get_feature_names_out,\n    )",
        "new_str": "def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n    \"\"\"Wrap output with container based on an estimator's or global config.\n\n    Parameters\n    ----------\n    method : {\"transform\"}\n        Estimator's method to get container output for.\n\n    data_to_wrap : {ndarray, dataframe}\n        Data to wrap with container.\n\n    original_input : {ndarray, dataframe}\n        Original input of function.\n\n    estimator : estimator instance\n        Estimator with to get the output configuration from.\n\n    Returns\n    -------\n    output : {ndarray, dataframe}\n        If the output config is \"default\" or the estimator is not configured\n        for wrapping return `data_to_wrap` unchanged.\n        If the output config is \"pandas\", return `data_to_wrap` as a pandas\n        DataFrame.\n    \"\"\"\n    output_config = _get_output_config(method, estimator)\n\n    if output_config[\"dense\"] == \"default\" or not _auto_wrap_is_configured(estimator):\n        return data_to_wrap\n\n    # dense_config == \"pandas\"\n    preserve_dtypes = getattr(estimator, \"_sklearn_output_config\", {}).get(\"preserve_dtypes\", False)\n    dtypes = None\n    if preserve_dtypes and hasattr(original_input, \"dtypes\"):\n        dtypes = original_input.dtypes.to_dict()\n\n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=getattr(original_input, \"index\", None),\n        columns=estimator.get_feature_names_out,\n        dtypes=dtypes,\n    )",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19863934093154967,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py",
        "old_str": "    @available_if(_auto_wrap_is_configured)\n    def set_output(self, *, transform=None):\n        \"\"\"Set output container.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        Parameters\n        ----------\n        transform : {\"default\", \"pandas\"}, default=None\n            Configure output of `transform` and `fit_transform`.\n\n            - `\"default\"`: Default output format of a transformer\n            - `\"pandas\"`: DataFrame output\n            - `None`: Transform configuration is unchanged\n\n        Returns\n        -------\n        self : estimator instance\n            Estimator instance.\n        \"\"\"\n        if transform is None:\n            return self\n\n        if not hasattr(self, \"_sklearn_output_config\"):\n            self._sklearn_output_config = {}\n\n        self._sklearn_output_config[\"transform\"] = transform\n        return self",
        "new_str": "    @available_if(_auto_wrap_is_configured)\n    def set_output(self, *, transform=None, preserve_dtypes=False):\n        \"\"\"Set output container.\n\n        See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n        for an example on how to use the API.\n\n        Parameters\n        ----------\n        transform : {\"default\", \"pandas\"}, default=None\n            Configure output of `transform` and `fit_transform`.\n\n            - `\"default\"`: Default output format of a transformer\n            - `\"pandas\"`: DataFrame output\n            - `None`: Transform configuration is unchanged\n\n        preserve_dtypes : bool, default=False\n            If True, the output DataFrame will preserve the dtypes of the input DataFrame.\n            Only applicable if `transform=\"pandas\"`.\n\n        Returns\n        -------\n        self : estimator instance\n            Estimator instance.\n        \"\"\"\n        if transform is None and not preserve_dtypes:\n            return self\n\n        if not hasattr(self, \"_sklearn_output_config\"):\n            self._sklearn_output_config = {}\n\n        if transform is not None:\n            self._sklearn_output_config[\"transform\"] = transform\n        if preserve_dtypes:\n            self._sklearn_output_config[\"preserve_dtypes\"] = True\n\n        return self",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.19058513594791293,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_preserve_dtypes.py",
        "file_text": "import numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n# Load data and set dtypes\nX, y = load_iris(return_X_y=True, as_frame=True)\nX = X.astype(\n    {\n        \"petal width (cm)\": np.float16,\n        \"petal length (cm)\": np.float16,\n    }\n)\nX[\"cat\"] = y.astype(\"category\")\n\n# Configure transformer to preserve dtypes\nselector = SelectKBest(chi2, k=2)\nselector.set_output(transform=\"pandas\", preserve_dtypes=True)\n\n# Transform and print dtypes\nX_out = selector.fit_transform(X, y)\nprint(\"Output dtypes with preserve_dtypes=True:\")\nprint(X_out.dtypes)\n\n# Test without preserving dtypes\nselector.set_output(transform=\"pandas\", preserve_dtypes=False)\nX_out = selector.fit_transform(X, y)\nprint(\"\\nOutput dtypes with preserve_dtypes=False:\")\nprint(X_out.dtypes)"
      },
      "phase": "verification",
      "id": "6:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.5465393960475922,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "7:cd"
    },
    {
      "label": "python",
      "execution_time": 0.5465393960475922,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_preserve_dtypes.py"
      ],
      "phase": "verification",
      "id": "8:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.21497415308840573,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py",
        "old_str": "    # dense_config == \"pandas\"\n    preserve_dtypes = getattr(estimator, \"_sklearn_output_config\", {}).get(\"preserve_dtypes\", False)\n    dtypes = None\n    if preserve_dtypes and hasattr(original_input, \"dtypes\"):\n        dtypes = original_input.dtypes.to_dict()\n\n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=getattr(original_input, \"index\", None),\n        columns=estimator.get_feature_names_out,\n        dtypes=dtypes,\n    )",
        "new_str": "    # dense_config == \"pandas\"\n    preserve_dtypes = getattr(estimator, \"_sklearn_output_config\", {}).get(\"preserve_dtypes\", False)\n    dtypes = None\n    if preserve_dtypes and hasattr(original_input, \"dtypes\"):\n        dtypes = original_input.dtypes.to_dict()\n        # Ensure dtypes only includes columns present in the output\n        if isinstance(data_to_wrap, np.ndarray):\n            # If data_to_wrap is an ndarray, columns will be set by get_feature_names_out\n            # So we cannot filter dtypes here; skip preserving dtypes\n            dtypes = None\n        elif hasattr(estimator, \"get_feature_names_out\"):\n            try:\n                output_columns = estimator.get_feature_names_out()\n                dtypes = {col: dtypes[col] for col in output_columns if col in dtypes}\n            except Exception:\n                dtypes = None\n\n    return _wrap_in_pandas_container(\n        data_to_wrap=data_to_wrap,\n        index=getattr(original_input, \"index\", None),\n        columns=estimator.get_feature_names_out,\n        dtypes=dtypes,\n    )",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.4180762964533642,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "10:cd"
    },
    {
      "label": "python",
      "execution_time": 0.4180762964533642,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_preserve_dtypes.py"
      ],
      "phase": "verification",
      "id": "11:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19820069102570415,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py",
        "old_str": "from functools import wraps\n\nfrom scipy.sparse import issparse\n\nfrom . import check_pandas_support\nfrom .._config import get_config\nfrom ._available_if import available_if",
        "new_str": "from functools import wraps\n\nimport numpy as np\nfrom scipy.sparse import issparse\n\nfrom . import check_pandas_support\nfrom .._config import get_config\nfrom ._available_if import available_if",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.4730398714309558,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "13:cd"
    },
    {
      "label": "python",
      "execution_time": 0.4730398714309558,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_preserve_dtypes.py"
      ],
      "phase": "verification",
      "id": "14:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18641132791526616,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_preserve_dtypes.py",
        "old_str": "# Configure transformer to preserve dtypes\nselector = SelectKBest(chi2, k=2)\nselector.set_output(transform=\"pandas\", preserve_dtypes=True)\n\n# Transform and print dtypes\nX_out = selector.fit_transform(X, y)\nprint(\"Output dtypes with preserve_dtypes=True:\")\nprint(X_out.dtypes)\n\n# Test without preserving dtypes\nselector.set_output(transform=\"pandas\", preserve_dtypes=False)\nX_out = selector.fit_transform(X, y)\nprint(\"\\nOutput dtypes with preserve_dtypes=False:\")\nprint(X_out.dtypes)",
        "new_str": "# Configure transformer to preserve dtypes\nselector = SelectKBest(chi2, k=2)\nselector.set_output(transform=\"pandas\", preserve_dtypes=True)\nprint(\"Config with preserve_dtypes=True:\", selector._sklearn_output_config)\n\n# Transform and print dtypes\nX_out = selector.fit_transform(X, y)\nprint(\"Output dtypes with preserve_dtypes=True:\")\nprint(X_out.dtypes)\n\n# Test without preserving dtypes\nselector.set_output(transform=\"pandas\", preserve_dtypes=False)\nprint(\"\\nConfig with preserve_dtypes=False:\", selector._sklearn_output_config)\nX_out = selector.fit_transform(X, y)\nprint(\"Output dtypes with preserve_dtypes=False:\")\nprint(X_out.dtypes)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.41517912701237947,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "16:cd"
    },
    {
      "label": "python",
      "execution_time": 0.41517912701237947,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_preserve_dtypes.py"
      ],
      "phase": "verification",
      "id": "17:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18187120696529746,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py",
        "old_str": "        if transform is None and not preserve_dtypes:\n            return self\n\n        if not hasattr(self, \"_sklearn_output_config\"):\n            self._sklearn_output_config = {}\n\n        if transform is not None:\n            self._sklearn_output_config[\"transform\"] = transform\n        if preserve_dtypes:\n            self._sklearn_output_config[\"preserve_dtypes\"] = True\n\n        return self",
        "new_str": "        if transform is None and not preserve_dtypes:\n            return self\n\n        if not hasattr(self, \"_sklearn_output_config\"):\n            self._sklearn_output_config = {}\n\n        if transform is not None:\n            self._sklearn_output_config[\"transform\"] = transform\n        if preserve_dtypes:\n            self._sklearn_output_config[\"preserve_dtypes\"] = True\n        else:\n            self._sklearn_output_config.pop(\"preserve_dtypes\", None)\n\n        return self",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.422884309431538,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "19:cd"
    },
    {
      "label": "python",
      "execution_time": 0.422884309431538,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_preserve_dtypes.py"
      ],
      "phase": "verification",
      "id": "20:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "21:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2247365778312087,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "22:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.11930433101952076,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_preserve_dtypes.py"
      ],
      "phase": "general",
      "id": "23:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.20443724794313312,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "24:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\ncreate",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "11:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "13:cd",
      "target": "14:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "14:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "17:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "20:python",
      "target": "21:empty action",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "21:empty action",
      "target": "22:submit",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "22:submit",
      "target": "23:rm",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "23:rm",
      "target": "24:submit",
      "key": 0
    }
  ]
}