{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-13568"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19882228504866362
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18684854893945158
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/auth/checks.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21765581099316478
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/auth/checks.py",
        "old_str": "    # Check that the username field is unique\n    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n        if (settings.AUTHENTICATION_BACKENDS ==\n                ['django.contrib.auth.backends.ModelBackend']):\n            errors.append(\n                checks.Error(\n                    \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    obj=cls,\n                    id='auth.E003',\n                )\n            )\n        else:\n            errors.append(\n                checks.Warning(\n                    \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n                    obj=cls,\n                    id='auth.W004',\n                )\n            )",
        "new_str": "    # Check that the username field is unique\n    username_field = cls._meta.get_field(cls.USERNAME_FIELD)\n    is_unique_in_constraints = any(\n        constraint.fields == [cls.USERNAME_FIELD] for constraint in cls._meta.constraints\n        if hasattr(constraint, 'fields') and isinstance(constraint, models.UniqueConstraint)\n    )\n    if not username_field.unique and not is_unique_in_constraints:\n        if (settings.AUTHENTICATION_BACKENDS ==\n                ['django.contrib.auth.backends.ModelBackend']):\n            errors.append(\n                checks.Error(\n                    \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    obj=cls,\n                    id='auth.E003',\n                )\n            )\n        else:\n            errors.append(\n                checks.Warning(\n                    \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n                    obj=cls,\n                    id='auth.W004',\n                )\n            )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "3:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.2475294831674546,
        0.2570776871871203
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        4,
        6
      ],
      "id": "4:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nstr_replace",
      "target": "3:empty action",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:empty action",
      "target": "4:submit",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "3:empty action",
      "target": "4:submit",
      "key": 1
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:submit",
      "target": "3:empty action",
      "key": 0
    }
  ]
}