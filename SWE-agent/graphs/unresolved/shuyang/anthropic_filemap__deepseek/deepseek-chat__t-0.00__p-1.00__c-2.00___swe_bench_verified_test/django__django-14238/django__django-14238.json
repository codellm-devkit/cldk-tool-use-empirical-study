{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-14238"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.2278775570448488,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": 0.12251714593730867,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/django/db/models/fields/__init__.py"
      ],
      "phase": "general",
      "id": "1:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1765790949575603,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "view_range": [
          2500,
          2525
        ]
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18508648104034364,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "@property\n    def _subclasses(self):\n        return (BigAutoField, SmallAutoField)",
        "new_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.17947022919543087,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_fix.py",
        "file_text": "import os\nimport sys\nfrom django.conf import settings\nfrom django.apps import apps\n\n# Configure Django settings\nsettings.configure(\n    DEFAULT_AUTO_FIELD=\"example.core.models.MyBigAutoField\",\n    INSTALLED_APPS=[\"example.core\"],\n)\n\n# Define the models\nfrom django.db import models\n\nclass MyBigAutoField(models.BigAutoField):\n    pass\n\nclass MyModel(models.Model):\n    pass\n\n# Simulate Django setup\ntry:\n    apps.populate(settings.INSTALLED_APPS)\n    print(\"Success: No error raised.\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    sys.exit(1)"
      },
      "phase": "verification",
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.25773930200375617,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "5:cd"
    },
    {
      "label": "python",
      "execution_time": 0.25773930200375617,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "6:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18477084208279848,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_fix.py",
        "old_str": "import os\nimport sys\nfrom django.conf import settings\nfrom django.apps import apps\n\n# Configure Django settings\nsettings.configure(\n    DEFAULT_AUTO_FIELD=\"example.core.models.MyBigAutoField\",\n    INSTALLED_APPS=[\"example.core\"],\n)\n\n# Define the models\nfrom django.db import models\n\nclass MyBigAutoField(models.BigAutoField):\n    pass\n\nclass MyModel(models.Model):\n    pass\n\n# Simulate Django setup\ntry:\n    apps.populate(settings.INSTALLED_APPS)\n    print(\"Success: No error raised.\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    sys.exit(1)",
        "new_str": "import os\nimport sys\nfrom django.conf import settings\nfrom django.apps import apps\n\n# Configure Django settings\nsettings.configure(\n    DEFAULT_AUTO_FIELD=\"example.core.models.MyBigAutoField\",\n    INSTALLED_APPS=[\"example.core\"],\n)\n\n# Initialize Django\nimport django\ndjango.setup()\n\n# Define the models\nfrom django.db import models\n\nclass MyBigAutoField(models.BigAutoField):\n    pass\n\nclass MyModel(models.Model):\n    pass\n\n# Simulate Django setup\ntry:\n    apps.populate(settings.INSTALLED_APPS)\n    print(\"Success: No error raised.\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    sys.exit(1)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.2390023785410449,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "8:cd"
    },
    {
      "label": "python",
      "execution_time": 0.2390023785410449,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "9:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20243205199949443,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_fix.py",
        "old_str": "import os\nimport sys\nfrom django.conf import settings\nfrom django.apps import apps\n\n# Configure Django settings\nsettings.configure(\n    DEFAULT_AUTO_FIELD=\"example.core.models.MyBigAutoField\",\n    INSTALLED_APPS=[\"example.core\"],\n)\n\n# Initialize Django\nimport django\ndjango.setup()\n\n# Define the models\nfrom django.db import models\n\nclass MyBigAutoField(models.BigAutoField):\n    pass\n\nclass MyModel(models.Model):\n    pass\n\n# Simulate Django setup\ntry:\n    apps.populate(settings.INSTALLED_APPS)\n    print(\"Success: No error raised.\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    sys.exit(1)",
        "new_str": "import os\nimport sys\nfrom django.conf import settings\nfrom django.apps import apps\n\n# Configure Django settings\nsettings.configure(\n    DEFAULT_AUTO_FIELD=\"__main__.MyBigAutoField\",\n    INSTALLED_APPS=[\"__main__\"],\n)\n\n# Initialize Django\nimport django\ndjango.setup()\n\n# Define the models\nfrom django.db import models\n\nclass MyBigAutoField(models.BigAutoField):\n    pass\n\nclass MyModel(models.Model):\n    pass\n\n# Simulate Django setup\ntry:\n    apps.populate(settings.INSTALLED_APPS)\n    print(\"Success: No error raised.\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    sys.exit(1)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.19574696256313473,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "11:cd"
    },
    {
      "label": "python",
      "execution_time": 0.19574696256313473,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "12:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.16690735891461372,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)",
        "new_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and issubclass(instance, self._subclasses) or\n            super().__instancecheck__(instance)\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.2257061239797622,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "14:cd"
    },
    {
      "label": "python",
      "execution_time": 0.2257061239797622,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "15:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18284592288546264,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/options.py",
        "view_range": [
          240,
          260
        ]
      },
      "phase": "localization",
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18962692096829414,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and issubclass(instance, self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        return subclass in self._subclasses or super().__subclasscheck__(subclass)",
        "new_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and issubclass(instance, self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        return (\n            subclass in self._subclasses or\n            issubclass(subclass, self._subclasses) or\n            super().__subclasscheck__(subclass)\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.1986054435838014,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "18:cd"
    },
    {
      "label": "python",
      "execution_time": 0.1986054435838014,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "19:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1953496451023966,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and issubclass(instance, self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        return (\n            subclass in self._subclasses or\n            issubclass(subclass, self._subclasses) or\n            super().__subclasscheck__(subclass)\n        )",
        "new_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and any(issubclass(instance, cls) for cls in self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        return (\n            subclass in self._subclasses or\n            any(issubclass(subclass, cls) for cls in self._subclasses) or\n            super().__subclasscheck__(subclass)\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.2890201745321974,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "21:cd"
    },
    {
      "label": "python",
      "execution_time": 0.2890201745321974,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "22:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20319150108844042,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and any(issubclass(instance, cls) for cls in self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        return (\n            subclass in self._subclasses or\n            any(issubclass(subclass, cls) for cls in self._subclasses) or\n            super().__subclasscheck__(subclass)\n        )",
        "new_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and any(issubclass(instance, cls) for cls in self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        if subclass in self._subclasses:\n            return True\n        for cls in self._subclasses:\n            if issubclass(subclass, cls):\n                return True\n        return super().__subclasscheck__(subclass)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.2061791259329766,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "24:cd"
    },
    {
      "label": "python",
      "execution_time": 0.2061791259329766,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "25:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18803674401715398,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and any(issubclass(instance, cls) for cls in self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        if subclass in self._subclasses:\n            return True\n        for cls in self._subclasses:\n            if issubclass(subclass, cls):\n                return True\n        return super().__subclasscheck__(subclass)",
        "new_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and any(cls.__subclasscheck__(instance) for cls in self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        if subclass in self._subclasses:\n            return True\n        for cls in self._subclasses:\n            if cls is not subclass and issubclass(subclass, cls):\n                return True\n        return super().__subclasscheck__(subclass)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.20255132555030286,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "27:cd"
    },
    {
      "label": "python",
      "execution_time": 0.20255132555030286,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "28:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19865982816554606,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and any(cls.__subclasscheck__(instance) for cls in self._subclasses) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        if subclass in self._subclasses:\n            return True\n        for cls in self._subclasses:\n            if cls is not subclass and issubclass(subclass, cls):\n                return True\n        return super().__subclasscheck__(subclass)",
        "new_str": "@property\n    def _subclasses(self):\n        return (AutoField, BigAutoField, SmallAutoField)\n\n    def __instancecheck__(self, instance):\n        return (\n            isinstance(instance, self._subclasses) or\n            isinstance(instance, type) and any(cls in self._subclasses for cls in instance.__mro__) or\n            super().__instancecheck__(instance)\n        )\n\n    def __subclasscheck__(self, subclass):\n        if subclass in self._subclasses:\n            return True\n        for cls in self._subclasses:\n            if cls in subclass.__mro__:\n                return True\n        return super().__subclasscheck__(subclass)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.22443562000989914,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "30:cd"
    },
    {
      "label": "python",
      "execution_time": 0.22443562000989914,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_fix.py"
      ],
      "phase": "verification",
      "id": "31:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "32:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.26262609707191586,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "33:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.11695654201321304,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_fix.py"
      ],
      "phase": "general",
      "id": "34:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.24115372984670103,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "35:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:grep",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:grep",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:python",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "9:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "11:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "11:cd",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "12:python",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "14:cd",
      "target": "15:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "15:python",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "18:cd",
      "target": "19:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "19:python",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "21:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "21:cd",
      "target": "22:python",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "22:python",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "24:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "24:cd",
      "target": "25:python",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "25:python",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "27:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "27:cd",
      "target": "28:python",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "28:python",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "30:cd",
      "target": "31:python",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "31:python",
      "target": "32:empty action",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "32:empty action",
      "target": "33:submit",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "33:submit",
      "target": "34:rm",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "34:rm",
      "target": "35:submit",
      "key": 0
    }
  ]
}