{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pytest-dev__pytest-5840"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18256813497282565,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18245540792122483,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18513080989941955,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/pathlib.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17398194689303637,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/config/findpaths.py"
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "echo",
      "execution_time": 0.07871230901218951,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import os; print(os.path.exists('c:\\azure\\kms\\componenttest\\python\\pisys\\conftest.py'))",
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "id": "4:echo"
    },
    {
      "label": "python",
      "execution_time": 0.07871230901218951,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1747025588992983,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/config/findpaths.py",
        "old_str": "import os\n\nimport py\n\nfrom .exceptions import UsageError\nfrom _pytest.outcomes import fail",
        "new_str": "import os\nfrom os.path import normcase\n\nimport py\n\nfrom .exceptions import UsageError\nfrom _pytest.outcomes import fail",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.17746220785193145,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/config/findpaths.py",
        "old_str": "def exists(path, ignore=EnvironmentError):\n    try:\n        return path.check()\n    except ignore:\n        return False",
        "new_str": "def exists(path, ignore=EnvironmentError):\n    try:\n        if sys.platform.startswith(\"win\"):\n            path = py.path.local(normcase(str(path)))\n        return path.check()\n    except ignore:\n        return False",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19026228715665638,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/config/findpaths.py",
        "old_str": "import os\nfrom os.path import normcase\n\nimport py\n\nfrom .exceptions import UsageError\nfrom _pytest.outcomes import fail",
        "new_str": "import os\nimport sys\nfrom os.path import normcase\n\nimport py\n\nfrom .exceptions import UsageError\nfrom _pytest.outcomes import fail",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.1486223468091339,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "9:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20889553800225258,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/main.py"
      },
      "phase": "localization",
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.2045431830920279,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py"
      },
      "phase": "localization",
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.210407055914402,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "view_range": [
          497,
          545
        ]
      },
      "phase": "localization",
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1810910189524293,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "old_str": "def _importtestmodule(self):\n        # we assume we are only called once per module\n        importmode = self.config.getoption(\"--import-mode\")\n        try:\n            mod = self.fspath.pyimport(ensuresyspath=importmode)\n        except SyntaxError:",
        "new_str": "def _importtestmodule(self):\n        # we assume we are only called once per module\n        importmode = self.config.getoption(\"--import-mode\")\n        try:\n            if sys.platform.startswith(\"win\"):\n                import py\n                self.fspath = py.path.local(normcase(str(self.fspath)))\n            mod = self.fspath.pyimport(ensuresyspath=importmode)\n        except SyntaxError:",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.1479838660452515,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "14:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17500999313779175,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/pathlib.py",
        "view_range": [
          340,
          346
        ]
      },
      "phase": "localization",
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.177291908999905,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "old_str": "def _importtestmodule(self):\n        # we assume we are only called once per module\n        importmode = self.config.getoption(\"--import-mode\")\n        try:\n            if sys.platform.startswith(\"win\"):\n                import py\n                self.fspath = py.path.local(normcase(str(self.fspath)))\n            mod = self.fspath.pyimport(ensuresyspath=importmode)\n        except SyntaxError:",
        "new_str": "def _importtestmodule(self):\n        # we assume we are only called once per module\n        importmode = self.config.getoption(\"--import-mode\")\n        try:\n            if sys.platform.startswith(\"win\"):\n                from _pytest.pathlib import unique_path\n                self.fspath = unique_path(self.fspath)\n            mod = self.fspath.pyimport(ensuresyspath=importmode)\n        except SyntaxError:",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.14441323489882052,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "17:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19282456790097058,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/pathlib.py",
        "view_range": [
          340,
          346
        ]
      },
      "phase": "localization",
      "id": "18:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18401752295903862,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "old_str": "def _importtestmodule(self):\n        # we assume we are only called once per module\n        importmode = self.config.getoption(\"--import-mode\")\n        try:\n            if sys.platform.startswith(\"win\"):\n                from _pytest.pathlib import unique_path\n                self.fspath = unique_path(self.fspath)\n            mod = self.fspath.pyimport(ensuresyspath=importmode)\n        except SyntaxError:",
        "new_str": "def _importtestmodule(self):\n        # we assume we are only called once per module\n        importmode = self.config.getoption(\"--import-mode\")\n        try:\n            if sys.platform.startswith(\"win\"):\n                from _pytest.pathlib import unique_path\n                self.fspath = unique_path(self.fspath)\n            mod = self.fspath.pyimport(ensuresyspath=importmode)\n        except SyntaxError:",
        "edit_status": "failure: no change"
      },
      "phase": "patch",
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1998027260415256,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/config.py"
      },
      "phase": "localization",
      "id": "20:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20665645110420883,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/config/__init__.py"
      },
      "phase": "localization",
      "id": "21:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18328891298733652,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/config/__init__.py",
        "view_range": [
          434,
          466
        ]
      },
      "phase": "localization",
      "id": "22:str_replace_editor\nview"
    },
    {
      "label": "echo",
      "execution_time": 0.07468810153659433,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import os; print(os.path.exists('c:\\azure\\kms\\componenttest\\python\\pisys\\conftest.py'))",
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "id": "23:echo"
    },
    {
      "label": "python",
      "execution_time": 0.07468810153659433,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "24:python"
    },
    {
      "label": "ls",
      "execution_time": 0.1211903200019151,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "id": "25:ls"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "26:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2124894589651376,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "27:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.1202412392012775,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "id": "28:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.16167021403089166,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "29:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:echo",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:echo",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:python",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:python",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "14:python",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "17:python",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "17:python",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "18:str_replace_editor\nview",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "20:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "22:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "21:str_replace_editor\nview",
      "target": "22:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "22",
      "type": "exec",
      "source": "22:str_replace_editor\nview",
      "target": "23:echo",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "23:echo",
      "target": "24:python",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "24:python",
      "target": "25:ls",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "25:ls",
      "target": "26:empty action",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "26:empty action",
      "target": "27:submit",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "27:submit",
      "target": "28:rm",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "28:rm",
      "target": "29:submit",
      "key": 0
    }
  ]
}