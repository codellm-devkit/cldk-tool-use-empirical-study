{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "sphinx-doc__sphinx-9281"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19773911708034575,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18959177401848137,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17777120601385832,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/preserve_defaults.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19075928907841444,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/preserve_defaults.py",
        "old_str": "class DefaultValue:\n    def __init__(self, name: str) -> None:\n        self.name = name\n\n    def __repr__(self) -> str:\n        return self.name",
        "new_str": "import enum\n\nclass DefaultValue:\n    def __init__(self, name: str) -> None:\n        self.name = name\n\n    def __repr__(self) -> str:\n        # Check if the name represents an Enum value (e.g., \"MyEnum.ValueA\")\n        parts = self.name.split('.')\n        if len(parts) > 1:\n            try:\n                module = __import__(parts[0])\n                obj = getattr(module, parts[1])\n                if isinstance(obj, enum.Enum):\n                    return self.name\n            except (ImportError, AttributeError):\n                pass\n        return self.name",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20403946307487786,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/preserve_defaults.py",
        "old_str": "\"\"\"\n    sphinx.ext.autodoc.preserve_defaults\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Preserve the default argument values of function signatures in source code\n    and keep them not evaluated for readability.\n\n    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport ast\nimport inspect\nfrom typing import Any, Dict\n\nfrom sphinx.application import Sphinx\nfrom sphinx.locale import __\nfrom sphinx.pycode.ast import parse as ast_parse\nfrom sphinx.pycode.ast import unparse as ast_unparse\nfrom sphinx.util import logging",
        "new_str": "\"\"\"\n    sphinx.ext.autodoc.preserve_defaults\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Preserve the default argument values of function signatures in source code\n    and keep them not evaluated for readability.\n\n    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport ast\nimport enum\nimport inspect\nfrom typing import Any, Dict\n\nfrom sphinx.application import Sphinx\nfrom sphinx.locale import __\nfrom sphinx.pycode.ast import parse as ast_parse\nfrom sphinx.pycode.ast import unparse as ast_unparse\nfrom sphinx.util import logging",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "echo",
      "execution_time": 0.08681432099547237,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/test_enum.py"
      ],
      "phase": "general",
      "id": "5:echo"
    },
    {
      "label": "python",
      "execution_time": 0.08681432099547237,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_enum.py"
      ],
      "phase": "verification",
      "id": "6:python"
    },
    {
      "label": "echo",
      "execution_time": 0.23655645607504994,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/test_enum.py"
      ],
      "phase": "general",
      "id": "7:echo"
    },
    {
      "label": "python",
      "execution_time": 0.23655645607504994,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_enum.py"
      ],
      "phase": "verification",
      "id": "8:python"
    },
    {
      "label": "echo",
      "execution_time": 0.1672973670065403,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/test_enum.py"
      ],
      "phase": "general",
      "id": "9:echo"
    },
    {
      "label": "python",
      "execution_time": 0.1672973670065403,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_enum.py"
      ],
      "phase": "verification",
      "id": "10:python"
    },
    {
      "label": "echo",
      "execution_time": 0.1845805156044662,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/test_nested_enum.py"
      ],
      "phase": "general",
      "id": "11:echo"
    },
    {
      "label": "python",
      "execution_time": 0.1845805156044662,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_nested_enum.py"
      ],
      "phase": "verification",
      "id": "12:python"
    },
    {
      "label": "echo",
      "execution_time": 0.17323422548361123,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/test_nested_enum.py"
      ],
      "phase": "general",
      "id": "13:echo"
    },
    {
      "label": "python",
      "execution_time": 0.17323422548361123,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_nested_enum.py"
      ],
      "phase": "verification",
      "id": "14:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "15:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2279773959890008,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "16:submit"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20303304004482925,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/ext/autodoc/preserve_defaults.py",
        "old_str": "import enum\n\nclass DefaultValue:\n    def __init__(self, name: str) -> None:\n        self.name = name\n\n    def __repr__(self) -> str:\n        # Check if the name represents an Enum value (e.g., \"MyEnum.ValueA\")\n        parts = self.name.split('.')\n        if len(parts) > 1:\n            try:\n                module = __import__(parts[0])\n                obj = getattr(module, parts[1])\n                if isinstance(obj, enum.Enum):\n                    return self.name\n            except (ImportError, AttributeError):\n                pass\n        return self.name",
        "new_str": "class DefaultValue:\n    def __init__(self, name: str) -> None:\n        self.name = name\n\n    def __repr__(self) -> str:\n        # Check if the name represents an Enum value (e.g., \"MyEnum.ValueA\")\n        parts = self.name.split('.')\n        if len(parts) > 1:\n            try:\n                module = __import__(parts[0])\n                obj = getattr(module, parts[1])\n                if isinstance(obj, enum.Enum):\n                    return self.name\n            except (ImportError, AttributeError):\n                pass\n        return self.name",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "rm",
      "execution_time": 0.11995188891887665,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_enum.py",
        "/testbed/test_nested_enum.py"
      ],
      "phase": "general",
      "id": "18:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.21569432294927537,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "19:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:echo",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:echo",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:python",
      "target": "7:echo",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "7:echo",
      "target": "8:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "8:python",
      "target": "9:echo",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "9:echo",
      "target": "10:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "10:python",
      "target": "11:echo",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "11:echo",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "12:python",
      "target": "13:echo",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "13:echo",
      "target": "14:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "14:python",
      "target": "15:empty action",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "15:empty action",
      "target": "16:submit",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "16:submit",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:rm",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "18:rm",
      "target": "19:submit",
      "key": 0
    }
  ]
}