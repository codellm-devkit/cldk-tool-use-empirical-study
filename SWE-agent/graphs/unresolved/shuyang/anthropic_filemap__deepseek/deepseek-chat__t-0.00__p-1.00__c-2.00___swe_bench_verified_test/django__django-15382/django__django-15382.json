{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-15382"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.24057574500329792,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18654613196849823,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "view_range": [
          22,
          24
        ]
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18704025191254914,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "view_range": [
          1247,
          1384
        ]
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.21325209899805486,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "file_text": "from django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)"
      },
      "phase": "verification",
      "id": "3:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.22012865345459431,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "4:cd"
    },
    {
      "label": "python",
      "execution_time": 0.22012865345459431,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19575779302977026,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "from django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)",
        "new_str": "import os\nimport django\nfrom django.db import models\n\n# Minimal Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')\ndjango.setup()\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n# Ensure the model is registered\n__import__('django.apps').apps.ready = True\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.21225203853100538,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "7:cd"
    },
    {
      "label": "python",
      "execution_time": 0.21225203853100538,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "8:python"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.1906493059359491,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/settings.py",
        "file_text": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\nINSTALLED_APPS = ['testbed']\nSECRET_KEY = 'dummy'"
      },
      "phase": "verification",
      "id": "9:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.1493673830991611,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "10:cd"
    },
    {
      "label": "python",
      "execution_time": 0.1493673830991611,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "11:python"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.1755555651616305,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/__init__.py",
        "file_text": ""
      },
      "phase": "verification",
      "id": "12:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.15933976252563298,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "13:cd"
    },
    {
      "label": "python",
      "execution_time": 0.15933976252563298,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "14:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18740126793272793,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "import os\nimport django\nfrom django.db import models\n\n# Minimal Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')\ndjango.setup()\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n# Ensure the model is registered\n__import__('django.apps').apps.ready = True\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)",
        "new_str": "from django.db import models, connection\nfrom django.db.models import Exists\n\n# Define a minimal model\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        app_label = 'testbed'\n\n# Create the table\nwith connection.schema_editor() as editor:\n    editor.create_model(MyModel)\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.14788787253201008,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "16:cd"
    },
    {
      "label": "python",
      "execution_time": 0.14788787253201008,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "17:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.21239515184424818,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "from django.db import models, connection\nfrom django.db.models import Exists\n\n# Define a minimal model\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        app_label = 'testbed'\n\n# Create the table\nwith connection.schema_editor() as editor:\n    editor.create_model(MyModel)\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)",
        "new_str": "import os\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import Exists\n\n# Configure minimal Django settings\nif not settings.configured:\n    settings.configure(\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        INSTALLED_APPS=[],\n    )\n\n# Define a minimal model\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        app_label = 'testbed'\n\n# Create the table\nwith connection.schema_editor() as editor:\n    editor.create_model(MyModel)\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.14684264501556754,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "19:cd"
    },
    {
      "label": "python",
      "execution_time": 0.14684264501556754,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "20:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.2001048510428518,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "import os\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import Exists\n\n# Configure minimal Django settings\nif not settings.configured:\n    settings.configure(\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        INSTALLED_APPS=[],\n    )\n\n# Define a minimal model\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        app_label = 'testbed'\n\n# Create the table\nwith connection.schema_editor() as editor:\n    editor.create_model(MyModel)\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)",
        "new_str": "import os\nfrom django.conf import settings\nfrom django.db import models, connection\nfrom django.db.models import Exists\nimport django\n\n# Configure minimal Django settings\nif not settings.configured:\n    settings.configure(\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        INSTALLED_APPS=[],\n    )\n    django.setup()\n\n# Define a minimal model\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        app_label = 'testbed'\n\n# Create the table\nwith connection.schema_editor() as editor:\n    editor.create_model(MyModel)\n\n# Reproduce the issue\nqs = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')\nprint(qs)\nprint(qs.query)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.19014369207434356,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "22:cd"
    },
    {
      "label": "python",
      "execution_time": 0.19014369207434356,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "23:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18241822789423168,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "view_range": [
          1290,
          1310
        ]
      },
      "phase": "localization",
      "id": "24:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1898105179425329,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "old_str": "if hasattr(filter_expr, 'resolve_expression'):\n            if not getattr(filter_expr, 'conditional', False):\n                raise TypeError('Cannot filter against a non-conditional expression.')\n            condition = filter_expr.resolve_expression(self, allow_joins=allow_joins)\n            if not isinstance(condition, Lookup):\n                condition = self.build_lookup(['exact'], condition, True)\n            return WhereNode([condition], connector=AND), []",
        "new_str": "if hasattr(filter_expr, 'resolve_expression'):\n            if not getattr(filter_expr, 'conditional', False):\n                raise TypeError('Cannot filter against a non-conditional expression.')\n            condition = filter_expr.resolve_expression(self, allow_joins=allow_joins)\n            if not isinstance(condition, Lookup):\n                condition = self.build_lookup(['exact'], condition, True)\n            # Preserve WHERE block for negated Exists with empty querysets\n            if isinstance(filter_expr, Exists) and current_negated and getattr(condition.rhs, 'empty_result_set', False):\n                return WhereNode([condition], connector=AND), []\n            return WhereNode([condition], connector=AND), []",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.17856503499206156,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "26:cd"
    },
    {
      "label": "python",
      "execution_time": 0.17856503499206156,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "27:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1912562579382211,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "old_str": "# Preserve WHERE block for negated Exists with empty querysets\n            if isinstance(filter_expr, Exists) and current_negated and getattr(condition.rhs, 'empty_result_set', False):\n                return WhereNode([condition], connector=AND), []\n            return WhereNode([condition], connector=AND), []",
        "new_str": "# Preserve WHERE block for negated Exists with empty querysets\n            if isinstance(filter_expr, Exists) and current_negated:\n                try:\n                    condition.rhs.as_sql(self, self.connection)\n                except EmptyResultSet:\n                    return WhereNode([condition], connector=AND), []\n            return WhereNode([condition], connector=AND), []",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.16014678846113384,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "29:cd"
    },
    {
      "label": "python",
      "execution_time": 0.16014678846113384,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "30:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17719871597364545,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          1,
          50
        ]
      },
      "phase": "localization",
      "id": "31:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1953751149121672,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          500,
          550
        ]
      },
      "phase": "localization",
      "id": "32:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19320616987533867,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          1000,
          1050
        ]
      },
      "phase": "localization",
      "id": "33:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1899016711395234,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          1500,
          1550
        ]
      },
      "phase": "localization",
      "id": "34:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": 0.12072809599339962,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/django/db/models/expressions.py"
      ],
      "phase": "general",
      "id": "35:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17236107704229653,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          1199,
          1250
        ]
      },
      "phase": "localization",
      "id": "36:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18928397190757096,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "old_str": "def as_sql(self, compiler, connection, template=None, **extra_context):\n        query = self.query.exists(using=connection.alias)\n        sql, params = super().as_sql(\n            compiler,\n            connection,\n            template=template,\n            query=query,\n            **extra_context,\n        )\n        if self.negated:\n            sql = 'NOT {}'.format(sql)\n        return sql, params",
        "new_str": "def as_sql(self, compiler, connection, template=None, **extra_context):\n        try:\n            query = self.query.exists(using=connection.alias)\n            sql, params = super().as_sql(\n                compiler,\n                connection,\n                template=template,\n                query=query,\n                **extra_context,\n            )\n            if self.negated:\n                sql = 'NOT {}'.format(sql)\n            return sql, params\n        except EmptyResultSet:\n            if self.negated:\n                # Return a dummy SQL for negated Exists with empty queryset\n                return '1=1', []\n            raise",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "37:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.1830019395565614,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "38:cd"
    },
    {
      "label": "python",
      "execution_time": 0.1830019395565614,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "39:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "40:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.6585369899403304,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "41:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.11955576692707837,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_issue.py",
        "/testbed/settings.py"
      ],
      "phase": "general",
      "id": "42:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.2568197059445083,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "43:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "24:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\ncreate",
      "target": "4:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:cd",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "8:python",
      "target": "9:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "9:str_replace_editor\ncreate",
      "target": "10:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "11:python",
      "target": "12:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "12:str_replace_editor\ncreate",
      "target": "13:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "13:cd",
      "target": "14:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "14:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "16:cd",
      "target": "17:python",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "17:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "19:cd",
      "target": "20:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "20:python",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "22:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "22:cd",
      "target": "23:python",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "23:python",
      "target": "24:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "24:str_replace_editor\nview",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "26:cd",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "26:cd",
      "target": "27:python",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "27:python",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "29:cd",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "29:cd",
      "target": "30:python",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "30:python",
      "target": "31:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "31:str_replace_editor\nview",
      "target": "32:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "32:str_replace_editor\nview",
      "target": "33:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "33:str_replace_editor\nview",
      "target": "34:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "34:str_replace_editor\nview",
      "target": "35:grep",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "35:grep",
      "target": "36:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "36:str_replace_editor\nview",
      "target": "37:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "37:str_replace_editor\nstr_replace",
      "target": "38:cd",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "38:cd",
      "target": "39:python",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "39:python",
      "target": "40:empty action",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "40:empty action",
      "target": "41:submit",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "41:submit",
      "target": "42:rm",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "42:rm",
      "target": "43:submit",
      "key": 0
    }
  ]
}