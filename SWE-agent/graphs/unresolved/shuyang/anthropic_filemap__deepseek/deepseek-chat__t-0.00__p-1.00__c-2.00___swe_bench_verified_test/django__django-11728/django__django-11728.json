{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-11728"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.21796016301959753,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20106740482151508,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/urls"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1953796069137752,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/urls/utils.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20557959796860814,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/utils"
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19441957911476493,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/utils/regex_helper.py"
      },
      "phase": "localization",
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.21389581495895982,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/core"
      },
      "phase": "localization",
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.21690947888419032,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/http"
      },
      "phase": "localization",
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18831419083289802,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib"
      },
      "phase": "localization",
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.2162761241197586,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": 0.33778574503958225,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "9:grep"
    },
    {
      "label": "grep",
      "execution_time": 0.32452622102573514,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "10:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18569877790287137,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admindocs/utils.py"
      },
      "phase": "localization",
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.2000395900104195,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admindocs/utils.py",
        "old_str": "def replace_named_groups(pattern):\n    r\"\"\"\n    Find named groups in `pattern` and replace them with the group name. E.g.,\n    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n    2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n    \"\"\"\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n\n    # Replace the string for named capture groups with their group names.\n    for group_pattern, group_name in group_pattern_and_name:\n        pattern = pattern.replace(group_pattern, group_name)\n    return pattern",
        "new_str": "def replace_named_groups(pattern):\n    r\"\"\"\n    Find named groups in `pattern` and replace them with the group name. E.g.,\n    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n    2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n    \"\"\"\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # Handle the case where the group ends at the end of the string.\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n\n    # Replace the string for named capture groups with their group names.\n    for group_pattern, group_name in group_pattern_and_name:\n        pattern = pattern.replace(group_pattern, group_name)\n    return pattern",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "echo",
      "execution_time": 0.23717527405824512,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/test_replace_named_groups.py"
      ],
      "phase": "general",
      "id": "13:echo"
    },
    {
      "label": "python",
      "execution_time": 0.23717527405824512,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_replace_named_groups.py"
      ],
      "phase": "verification",
      "id": "14:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.22740769083611667,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admindocs/utils.py",
        "old_str": "def replace_named_groups(pattern):\n    r\"\"\"\n    Find named groups in `pattern` and replace them with the group name. E.g.,\n    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n    2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n    \"\"\"\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # Handle the case where the group ends at the end of the string.\n            if unmatched_open_brackets > 0:\n                group_pattern_and_name.append((pattern[start:], group_name))\n\n    # Replace the string for named capture groups with their group names.\n    for group_pattern, group_name in group_pattern_and_name:\n        pattern = pattern.replace(group_pattern, group_name)\n    return pattern",
        "new_str": "def replace_named_groups(pattern):\n    r\"\"\"\n    Find named groups in `pattern` and replace them with the group name. E.g.,\n    1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n    2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n    \"\"\"\n    named_group_indices = [\n        (m.start(0), m.end(0), m.group(1))\n        for m in named_group_matcher.finditer(pattern)\n    ]\n    # Tuples of (named capture group pattern, group name).\n    group_pattern_and_name = []\n    # Loop over the groups and their start and end indices.\n    for start, end, group_name in named_group_indices:\n        # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n        unmatched_open_brackets, prev_char = 1, None\n        for idx, val in enumerate(pattern[end:]):\n            # If brackets are balanced, the end of the string for the current\n            # named capture group pattern has been reached.\n            if unmatched_open_brackets == 0:\n                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n                break\n\n            # Check for unescaped `(` and `)`. They mark the start and end of a\n            # nested group.\n            if val == '(' and prev_char != '\\\\':\n                unmatched_open_brackets += 1\n            elif val == ')' and prev_char != '\\\\':\n                unmatched_open_brackets -= 1\n            prev_char = val\n        else:\n            # Handle the case where the group ends at the end of the string.\n            group_pattern_and_name.append((pattern[start:], group_name))\n\n    # Replace the string for named capture groups with their group names.\n    for group_pattern, group_name in group_pattern_and_name:\n        pattern = pattern.replace(group_pattern, group_name)\n    return pattern",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.37842727289535105,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_replace_named_groups.py"
      ],
      "phase": "verification",
      "id": "16:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "17:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2676899190992117,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "18:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.119971820153296,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_replace_named_groups.py"
      ],
      "phase": "general",
      "id": "19:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.3067007861100137,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "20:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "7:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:grep",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:grep",
      "target": "10:grep",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:grep",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:echo",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "13:echo",
      "target": "14:python",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "14:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:python",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "16:python",
      "target": "17:empty action",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "17:empty action",
      "target": "18:submit",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "18:submit",
      "target": "19:rm",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "19:rm",
      "target": "20:submit",
      "key": 0
    }
  ]
}