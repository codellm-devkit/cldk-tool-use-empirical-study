{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pytest-dev__pytest-10356"
  },
  "nodes": [
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1712848988827318
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_markers.py",
        "file_text": "import pytest\n\nclass Base(object):\n    pass\n\n@pytest.mark.foo\nclass Foo(Base):\n    pass\n\n@pytest.mark.bar\nclass Bar(Base):\n    pass\n\nclass TestDings(Foo, Bar):\n    def test_dings(self):\n        pass\n\n# Print markers for TestDings\nprint(\"Markers for TestDings:\", getattr(TestDings, 'pytestmark', []))"
      },
      "phase": "verification",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.34007467702031136,
        0.2494402478914708,
        0.2555135970469564,
        0.25376357906498015,
        0.2698852769099176,
        0.14164946507662535,
        0.2520768060348928
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_markers.py"
      ],
      "phase": "verification",
      "step_indices": [
        1,
        5,
        9,
        11,
        13,
        20,
        23
      ],
      "id": "1:python"
    },
    {
      "label": "find",
      "execution_time": [
        0.1370335218962282
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed",
        "f",
        "*.py",
        "|",
        "xargs",
        "grep",
        "||",
        "echo",
        "No files found with 'pytestmark'"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "2:find"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1833021689672023
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/mark/structures.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17952838400378823
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/mark/structures.py",
        "old_str": "def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n    mark_list = getattr(obj, \"pytestmark\", [])\n    if not isinstance(mark_list, list):\n        mark_list = [mark_list]\n    return normalize_mark_list(mark_list)",
        "new_str": "def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n    mark_list = []\n    if isinstance(obj, type):\n        # For classes, collect markers from the MRO chain\n        for base in obj.__mro__:\n            base_marks = getattr(base, \"pytestmark\", [])\n            if not isinstance(base_marks, list):\n                base_marks = [base_marks]\n            mark_list.extend(base_marks)\n    else:\n        # For non-class objects (e.g., functions), use the existing logic\n        obj_marks = getattr(obj, \"pytestmark\", [])\n        if not isinstance(obj_marks, list):\n            obj_marks = [obj_marks]\n        mark_list.extend(obj_marks)\n    return normalize_mark_list(mark_list)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21531595988199115
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py"
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.177548622014001
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "view_range": [
          800,
          840
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20488614216446877
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_markers.py",
        "old_str": "import pytest\n\nclass Base(object):\n    pass\n\n@pytest.mark.foo\nclass Foo(Base):\n    pass\n\n@pytest.mark.bar\nclass Bar(Base):\n    pass\n\nclass TestDings(Foo, Bar):\n    def test_dings(self):\n        pass\n\n# Print markers for TestDings\nprint(\"Markers for TestDings:\", getattr(TestDings, 'pytestmark', []))",
        "new_str": "import pytest\n\nclass Base(object):\n    pass\n\n@pytest.mark.foo\nclass Foo(Base):\n    pass\n\n@pytest.mark.bar\nclass Bar(Base):\n    pass\n\nclass TestDings(Foo, Bar):\n    def test_dings(self):\n        pass\n\n# Print markers for each class in MRO\nprint(\"MRO for TestDings:\", TestDings.__mro__)\nfor base in TestDings.__mro__:\n    print(f\"Markers for {base.__name__}:\", getattr(base, 'pytestmark', []))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20307116792537272
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "old_str": "class Class(PyCollector):\n    \"\"\"Collector for test methods.\"\"\"\n\n    @classmethod\n    def from_parent(cls, parent, *, name, obj=None, **kw):\n        \"\"\"The public constructor.\"\"\"\n        return super().from_parent(name=name, parent=parent, **kw)\n\n    def newinstance(self):\n        return self.obj()\n\n    def collect(self) -> Iterable[Union[nodes.Item, nodes.Collector]]:\n        if not safe_getattr(self.obj, \"__test__\", True):\n            return []\n        if hasinit(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    \"cannot collect test class %r because it has a \"\n                    \"__init__ constructor (from: %s)\"\n                    % (self.obj.__name__, self.parent.nodeid)\n                )\n            )\n            return []\n        elif hasnew(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    \"cannot collect test class %r because it has a \"\n                    \"__new__ constructor (from: %s)\"\n                    % (self.obj.__name__, self.parent.nodeid)\n                )\n            )\n            return []\n\n        self._inject_setup_class_fixture()\n        self._inject_setup_method_fixture()\n\n        self.session._fixturemanager.parsefactories(self.newinstance(), self.nodeid)\n\n        return super().collect()",
        "new_str": "class Class(PyCollector):\n    \"\"\"Collector for test methods.\"\"\"\n\n    @classmethod\n    def from_parent(cls, parent, *, name, obj=None, **kw):\n        \"\"\"The public constructor.\"\"\"\n        return super().from_parent(name=name, parent=parent, **kw)\n\n    def newinstance(self):\n        return self.obj()\n\n    def collect(self) -> Iterable[Union[nodes.Item, nodes.Collector]]:\n        if not safe_getattr(self.obj, \"__test__\", True):\n            return []\n        if hasinit(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    \"cannot collect test class %r because it has a \"\n                    \"__init__ constructor (from: %s)\"\n                    % (self.obj.__name__, self.parent.nodeid)\n                )\n            )\n            return []\n        elif hasnew(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    \"cannot collect test class %r because it has a \"\n                    \"__new__ constructor (from: %s)\"\n                    % (self.obj.__name__, self.parent.nodeid)\n                )\n            )\n            return []\n\n        # Aggregate markers from the MRO chain\n        if not hasattr(self.obj, \"pytestmark\"):\n            mark_list = []\n            for base in self.obj.__mro__[1:]:  # Skip the current class\n                base_marks = getattr(base, \"pytestmark\", [])\n                if not isinstance(base_marks, list):\n                    base_marks = [base_marks]\n                mark_list.extend(base_marks)\n            if mark_list:\n                self.obj.pytestmark = mark_list\n\n        self._inject_setup_class_fixture()\n        self._inject_setup_method_fixture()\n\n        self.session._fixturemanager.parsefactories(self.newinstance(), self.nodeid)\n\n        return super().collect()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1832151198759675
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "old_str": "# Aggregate markers from the MRO chain\n        if not hasattr(self.obj, \"pytestmark\"):\n            mark_list = []\n            for base in self.obj.__mro__[1:]:  # Skip the current class\n                base_marks = getattr(base, \"pytestmark\", [])\n                if not isinstance(base_marks, list):\n                    base_marks = [base_marks]\n                mark_list.extend(base_marks)\n            if mark_list:\n                self.obj.pytestmark = mark_list",
        "new_str": "# Aggregate markers from the MRO chain\n        mark_list = []\n        for base in self.obj.__mro__[1:]:  # Skip the current class\n            base_marks = getattr(base, \"pytestmark\", [])\n            if not isinstance(base_marks, list):\n                base_marks = [base_marks]\n            mark_list.extend(base_marks)\n        if mark_list:\n            existing_marks = getattr(self.obj, \"pytestmark\", [])\n            if not isinstance(existing_marks, list):\n                existing_marks = [existing_marks]\n            self.obj.pytestmark = existing_marks + mark_list",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.202842241153121
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "view_range": [
          235,
          275
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17347787879407406
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "view_range": [
          1000,
          1050
        ]
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18874304904602468
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "view_range": [
          500,
          550
        ]
      },
      "phase": "localization",
      "step_indices": [
        16
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.11995206493884325
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/src/_pytest/python.py"
      ],
      "phase": "general",
      "step_indices": [
        17
      ],
      "id": "13:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1767990931402892
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "view_range": [
          1670,
          1720
        ]
      },
      "phase": "localization",
      "step_indices": [
        18
      ],
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18249499797821045
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_markers.py",
        "old_str": "import pytest\n\nclass Base(object):\n    pass\n\n@pytest.mark.foo\nclass Foo(Base):\n    pass\n\n@pytest.mark.bar\nclass Bar(Base):\n    pass\n\nclass TestDings(Foo, Bar):\n    def test_dings(self):\n        pass\n\n# Print markers for each class in MRO\nprint(\"MRO for TestDings:\", TestDings.__mro__)\nfor base in TestDings.__mro__:\n    print(f\"Markers for {base.__name__}:\", getattr(base, 'pytestmark', []))",
        "new_str": "import itertools\nimport pytest\n\nclass BaseMeta(type):\n    @property\n    def pytestmark(self):\n        return (\n            getattr(self, \"_pytestmark\", []) +\n            list(itertools.chain.from_iterable(getattr(x, \"_pytestmark\", []) for x in self.__mro__))\n\n    @pytestmark.setter\n    def pytestmark(self, value):\n        self._pytestmark = value\n\nclass Base(object, metaclass=BaseMeta):\n    pass\n\n@pytest.mark.foo\nclass Foo(Base):\n    pass\n\n@pytest.mark.bar\nclass Bar(Base):\n    pass\n\nclass TestDings(Foo, Bar):\n    def test_dings(self):\n        pass\n\n# Print markers for each class in MRO\nprint(\"MRO for TestDings:\", TestDings.__mro__)\nfor base in TestDings.__mro__:\n    print(f\"Markers for {base.__name__}:\", getattr(base, 'pytestmark', []))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1771162380464375
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_markers.py",
        "old_str": "class BaseMeta(type):\n    @property\n    def pytestmark(self):\n        return (\n            getattr(self, \"_pytestmark\", []) +\n            list(itertools.chain.from_iterable(getattr(x, \"_pytestmark\", []) for x in self.__mro__))\n\n    @pytestmark.setter\n    def pytestmark(self, value):\n        self._pytestmark = value",
        "new_str": "class BaseMeta(type):\n    @property\n    def pytestmark(self):\n        return (\n            getattr(self, \"_pytestmark\", []) +\n            list(itertools.chain.from_iterable(getattr(x, \"_pytestmark\", []) for x in self.__mro__))\n\n    @pytestmark.setter\n    def pytestmark(self, value):\n        self._pytestmark = value",
        "edit_status": "failure: no change"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.191227613016963
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_markers.py",
        "old_str": "class BaseMeta(type):\n    @property\n    def pytestmark(self):\n        return (\n            getattr(self, \"_pytestmark\", []) +\n            list(itertools.chain.from_iterable(getattr(x, \"_pytestmark\", []) for x in self.__mro__))\n\n    @pytestmark.setter\n    def pytestmark(self, value):\n        self._pytestmark = value",
        "new_str": "class BaseMeta(type):\n    def __init__(cls, name, bases, namespace):\n        super().__init__(name, bases, namespace)\n        cls._pytestmark = []\n\n    @property\n    def pytestmark(cls):\n        return (\n            getattr(cls, \"_pytestmark\", []) +\n            list(itertools.chain.from_iterable(getattr(x, \"_pytestmark\", []) for x in cls.__mro__[1:])))\n\n    @pytestmark.setter\n    def pytestmark(cls, value):\n        cls._pytestmark = value",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        22
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2103579097893089
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/python.py",
        "old_str": "class Class(PyCollector):\n    \"\"\"Collector for test methods.\"\"\"\n\n    @classmethod\n    def from_parent(cls, parent, *, name, obj=None, **kw):\n        \"\"\"The public constructor.\"\"\"\n        return super().from_parent(name=name, parent=parent, **kw)\n\n    def newinstance(self):\n        return self.obj()\n\n    def collect(self) -> Iterable[Union[nodes.Item, nodes.Collector]]:\n        if not safe_getattr(self.obj, \"__test__\", True):\n            return []\n        if hasinit(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    \"cannot collect test class %r because it has a \"\n                    \"__init__ constructor (from: %s)\"\n                    % (self.obj.__name__, self.parent.nodeid)\n                )\n            )\n            return []\n        elif hasnew(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    \"cannot collect test class %r because it has a \"\n                    \"__new__ constructor (from: %s)\"\n                    % (self.obj.__name__, self.parent.nodeid)\n                )\n            )\n            return []\n\n        # Aggregate markers from the MRO chain\n        mark_list = []\n        for base in self.obj.__mro__[1:]:  # Skip the current class\n            base_marks = getattr(base, \"pytestmark\", [])\n            if not isinstance(base_marks, list):\n                base_marks = [base_marks]\n            mark_list.extend(base_marks)\n        if mark_list:\n            existing_marks = getattr(self.obj, \"pytestmark\", [])\n            if not isinstance(existing_marks, list):\n                existing_marks = [existing_marks]\n            self.obj.pytestmark = existing_marks + mark_list\n\n        self._inject_setup_class_fixture()\n        self._inject_setup_method_fixture()\n\n        self.session._fixturemanager.parsefactories(self.newinstance(), self.nodeid)\n\n        return super().collect()",
        "new_str": "class Class(PyCollector):\n    \"\"\"Collector for test methods.\"\"\"\n\n    @classmethod\n    def from_parent(cls, parent, *, name, obj=None, **kw):\n        \"\"\"The public constructor.\"\"\"\n        return super().from_parent(name=name, parent=parent, **kw)\n\n    def newinstance(self):\n        return self.obj()\n\n    def collect(self) -> Iterable[Union[nodes.Item, nodes.Collector]]:\n        if not safe_getattr(self.obj, \"__test__\", True):\n            return []\n        if hasinit(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    \"cannot collect test class %r because it has a \"\n                    \"__init__ constructor (from: %s)\"\n                    % (self.obj.__name__, self.parent.nodeid)\n                )\n            )\n            return []\n        elif hasnew(self.obj):\n            assert self.parent is not None\n            self.warn(\n                PytestCollectionWarning(\n                    \"cannot collect test class %r because it has a \"\n                    \"__new__ constructor (from: %s)\"\n                    % (self.obj.__name__, self.parent.nodeid)\n                )\n            )\n            return []\n\n        # Aggregate markers from the MRO chain\n        mark_list = []\n        for base in self.obj.__mro__[1:]:  # Skip the current class\n            base_marks = getattr(base, \"pytestmark\", [])\n            if not isinstance(base_marks, list):\n                base_marks = [base_marks]\n            mark_list.extend(base_marks)\n        if mark_list:\n            existing_marks = getattr(self.obj, \"pytestmark\", [])\n            if not isinstance(existing_marks, list):\n                existing_marks = [existing_marks]\n            self.obj.pytestmark = existing_marks + mark_list\n\n        self._inject_setup_class_fixture()\n        self._inject_setup_method_fixture()\n\n        self.session._fixturemanager.parsefactories(self.newinstance(), self.nodeid)\n\n        return super().collect()",
        "edit_status": "failure: no change"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        25
      ],
      "id": "19:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.22312004794366658,
        0.20325035392306745
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        26,
        28
      ],
      "id": "20:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11928509711287916
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_markers.py"
      ],
      "phase": "general",
      "step_indices": [
        27
      ],
      "id": "21:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\ncreate",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:python",
      "target": "2:find",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "1:python",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "1:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "1:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "1:python",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "1:python",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "1:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:find",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:grep",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "13:grep",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "19:empty action",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "19:empty action",
      "target": "20:submit",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "20:submit",
      "target": "21:rm",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "21:rm",
      "target": "20:submit",
      "key": 0
    }
  ]
}