{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pytest-dev__pytest-5787"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18713996978476644,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17687346413731575,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1866825041361153,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/runner.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17442322405986488,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/reports.py"
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19449062715284526,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/reports.py",
        "old_str": "def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n            new_entries = []\n            for entry in reprtraceback[\"reprentries\"]:\n                entry_data = {\n                    \"type\": type(entry).__name__,\n                    \"data\": entry.__dict__.copy(),\n                }\n                for key, value in entry_data[\"data\"].items():\n                    if hasattr(value, \"__dict__\"):\n                        entry_data[\"data\"][key] = value.__dict__.copy()\n                new_entries.append(entry_data)\n\n            reprtraceback[\"reprentries\"] = new_entries\n\n            return {\n                \"reprcrash\": reprcrash,\n                \"reprtraceback\": reprtraceback,\n                \"sections\": rep.longrepr.sections,\n            }",
        "new_str": "def _to_json(self):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Returns the contents of this report as a dict of builtin entries, suitable for\n        serialization.\n\n        Experimental method.\n        \"\"\"\n\n        def disassembled_report(rep):\n            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n\n            new_entries = []\n            for entry in reprtraceback[\"reprentries\"]:\n                entry_data = {\n                    \"type\": type(entry).__name__,\n                    \"data\": entry.__dict__.copy(),\n                }\n                for key, value in entry_data[\"data\"].items():\n                    if hasattr(value, \"__dict__\"):\n                        entry_data[\"data\"][key] = value.__dict__.copy()\n                new_entries.append(entry_data)\n\n            reprtraceback[\"reprentries\"] = new_entries\n\n            # Include chained exceptions\n            if hasattr(rep.longrepr, 'chain'):\n                chain = []\n                for exc_info in rep.longrepr.chain:\n                    chain_entry = {\n                        \"reprtraceback\": exc_info.reprtraceback.__dict__.copy(),\n                        \"reprcrash\": exc_info.reprcrash.__dict__.copy(),\n                    }\n                    chain.append(chain_entry)\n                reprtraceback[\"chain\"] = chain\n\n            return {\n                \"reprcrash\": reprcrash,\n                \"reprtraceback\": reprtraceback,\n                \"sections\": rep.longrepr.sections,\n            }",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1937856120057404,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/reports.py",
        "old_str": "    @classmethod\n    def _from_json(cls, reportdict):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Factory method that returns either a TestReport or CollectReport, depending on the calling\n        class. It's the callers responsibility to know which class to pass here.\n\n        Experimental method.\n        \"\"\"\n        if reportdict[\"longrepr\"]:\n            if (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n\n                unserialized_entries = []\n                reprentry = None\n                for entry_data in reprtraceback[\"reprentries\"]:\n                    data = entry_data[\"data\"]\n                    entry_type = entry_data[\"type\"]\n                    if entry_type == \"ReprEntry\":\n                        reprfuncargs = None\n                        reprfileloc = None\n                        reprlocals = None\n                        if data[\"reprfuncargs\"]:\n                            reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n                        if data[\"reprfileloc\"]:\n                            reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n                        if data[\"reprlocals\"]:\n                            reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n\n                        reprentry = ReprEntry(\n                            lines=data[\"lines\"],\n                            reprfuncargs=reprfuncargs,\n                            reprlocals=reprlocals,\n                            filelocrepr=reprfileloc,\n                            style=data[\"style\"],\n                        )\n                    elif entry_type == \"ReprEntryNative\":\n                        reprentry = ReprEntryNative(data[\"lines\"])\n                    else:\n                        _report_unserialization_failure(entry_type, cls, reportdict)\n                    unserialized_entries.append(reprentry)\n                reprtraceback[\"reprentries\"] = unserialized_entries\n\n                exception_info = ReprExceptionInfo(\n                    reprtraceback=ReprTraceback(**reprtraceback),\n                    reprcrash=ReprFileLocation(**reprcrash),\n                )\n\n                for section in reportdict[\"longrepr\"][\"sections\"]:\n                    exception_info.addsection(*section)\n                reportdict[\"longrepr\"] = exception_info",
        "new_str": "    @classmethod\n    def _from_json(cls, reportdict):\n        \"\"\"\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Factory method that returns either a TestReport or CollectReport, depending on the calling\n        class. It's the callers responsibility to know which class to pass here.\n\n        Experimental method.\n        \"\"\"\n        if reportdict[\"longrepr\"]:\n            if (\n                \"reprcrash\" in reportdict[\"longrepr\"]\n                and \"reprtraceback\" in reportdict[\"longrepr\"]\n            ):\n\n                reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n\n                unserialized_entries = []\n                reprentry = None\n                for entry_data in reprtraceback[\"reprentries\"]:\n                    data = entry_data[\"data\"]\n                    entry_type = entry_data[\"type\"]\n                    if entry_type == \"ReprEntry\":\n                        reprfuncargs = None\n                        reprfileloc = None\n                        reprlocals = None\n                        if data[\"reprfuncargs\"]:\n                            reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n                        if data[\"reprfileloc\"]:\n                            reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n                        if data[\"reprlocals\"]:\n                            reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n\n                        reprentry = ReprEntry(\n                            lines=data[\"lines\"],\n                            reprfuncargs=reprfuncargs,\n                            reprlocals=reprlocals,\n                            filelocrepr=reprfileloc,\n                            style=data[\"style\"],\n                        )\n                    elif entry_type == \"ReprEntryNative\":\n                        reprentry = ReprEntryNative(data[\"lines\"])\n                    else:\n                        _report_unserialization_failure(entry_type, cls, reportdict)\n                    unserialized_entries.append(reprentry)\n                reprtraceback[\"reprentries\"] = unserialized_entries\n\n                # Reconstruct chained exceptions if present\n                chain = []\n                if \"chain\" in reprtraceback:\n                    for chain_entry in reprtraceback[\"chain\"]:\n                        chain_exc_info = ReprExceptionInfo(\n                            reprtraceback=ReprTraceback(**chain_entry[\"reprtraceback\"]),\n                            reprcrash=ReprFileLocation(**chain_entry[\"reprcrash\"]),\n                        )\n                        chain.append(chain_exc_info)\n\n                exception_info = ReprExceptionInfo(\n                    reprtraceback=ReprTraceback(**reprtraceback),\n                    reprcrash=ReprFileLocation(**reprcrash),\n                )\n\n                if chain:\n                    exception_info.chain = chain\n\n                for section in reportdict[\"longrepr\"][\"sections\"]:\n                    exception_info.addsection(*section)\n                reportdict[\"longrepr\"] = exception_info",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.18018574197776616,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "6:cd"
    },
    {
      "label": "python",
      "execution_time": 0.18018574197776616,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "testing/test_basic.py"
      ],
      "phase": "verification",
      "id": "7:python"
    },
    {
      "label": "pip",
      "execution_time": 0.5030034860440841,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "install",
        "pytest-xdist"
      ],
      "phase": "general",
      "id": "8:pip"
    },
    {
      "label": "cd",
      "execution_time": 0.5030034860440841,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "9:cd"
    },
    {
      "label": "python",
      "execution_time": 0.5030034860440841,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "testing/test_basic.py"
      ],
      "phase": "verification",
      "id": "10:python"
    },
    {
      "label": "cd",
      "execution_time": 0.15213936241343617,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "11:cd"
    },
    {
      "label": "python",
      "execution_time": 0.15213936241343617,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "testing/test_basic.py"
      ],
      "phase": "verification",
      "id": "12:python"
    },
    {
      "label": "cd",
      "execution_time": 0.15116649644915015,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "13:cd"
    },
    {
      "label": "python",
      "execution_time": 0.15116649644915015,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "testing/test_basic.py"
      ],
      "phase": "verification",
      "id": "14:python"
    },
    {
      "label": "cd",
      "execution_time": 0.1530440514907241,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "15:cd"
    },
    {
      "label": "python",
      "execution_time": 0.1530440514907241,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "testing/test_basic.py"
      ],
      "phase": "verification",
      "id": "16:python"
    },
    {
      "label": "cd",
      "execution_time": 0.15003995748702437,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "17:cd"
    },
    {
      "label": "python",
      "execution_time": 0.15003995748702437,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "testing/test_basic.py"
      ],
      "phase": "verification",
      "id": "18:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18247990682721138,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/testing"
      },
      "phase": "localization",
      "id": "19:str_replace_editor\nview"
    },
    {
      "label": "find",
      "execution_time": 0.12377633503638208,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed",
        "test_basic.py"
      ],
      "phase": "general",
      "id": "20:find"
    },
    {
      "label": "cd",
      "execution_time": 0.14699183346237987,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "21:cd"
    },
    {
      "label": "python",
      "execution_time": 0.14699183346237987,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "testing/example_scripts/collect/package_infinite_recursion/tests/test_basic.py"
      ],
      "phase": "verification",
      "id": "22:python"
    },
    {
      "label": "find",
      "execution_time": 0.12480173911899328,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed",
        "basic",
        "d"
      ],
      "phase": "general",
      "id": "23:find"
    },
    {
      "label": "submit",
      "execution_time": 0.173474274110049,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "24:submit"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "25:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.19210999109782279,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "26:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "19:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:python",
      "target": "8:pip",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "8:pip",
      "target": "9:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "9:cd",
      "target": "10:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "10:python",
      "target": "11:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "11:cd",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "12:python",
      "target": "13:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "13:cd",
      "target": "14:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "14:python",
      "target": "15:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "15:cd",
      "target": "16:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "16:python",
      "target": "17:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "17:cd",
      "target": "18:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "18:python",
      "target": "19:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "19:str_replace_editor\nview",
      "target": "20:find",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "20:find",
      "target": "21:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "21:cd",
      "target": "22:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "22:python",
      "target": "23:find",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "23:find",
      "target": "24:submit",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "24:submit",
      "target": "25:empty action",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "25:empty action",
      "target": "26:submit",
      "key": 0
    }
  ]
}