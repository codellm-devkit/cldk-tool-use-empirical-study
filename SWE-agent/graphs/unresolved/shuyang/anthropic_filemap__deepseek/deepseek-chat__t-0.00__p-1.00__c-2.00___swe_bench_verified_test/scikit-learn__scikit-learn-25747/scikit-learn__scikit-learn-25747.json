{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "scikit-learn__scikit-learn-25747"
  },
  "nodes": [
    {
      "label": "echo",
      "execution_time": [
        0.3410191109869629
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import pandas as pd\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn import set_config\nfrom sklearn.pipeline import make_union\n\nindex = pd.date_range(start='2020-01-01', end='2020-01-05', inclusive='left', freq='H')\ndata = pd.DataFrame(index=index, data=[10] * len(index), columns=['value'])\ndata['date'] = index.date\n\n\nclass MyTransformer(BaseEstimator, TransformerMixin):\n    def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n        return self\n\n    def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n        return X['value'].groupby(X['date']).sum()\n\n\n# This works.\nset_config(transform_output='default')\nprint(make_union(MyTransformer()).fit_transform(data))\n\n# This does not work.\nset_config(transform_output='pandas')\nprint(make_union(MyTransformer()).fit_transform(data))",
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:echo"
    },
    {
      "label": "python",
      "execution_time": [
        0.3410191109869629,
        0.32681461446918547,
        0.6433824840933084
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        0,
        1,
        4
      ],
      "id": "1:python"
    },
    {
      "label": "echo",
      "execution_time": [
        0.32681461446918547
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import pandas as pd\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn import set_config\nfrom sklearn.pipeline import make_union\nfrom typing import Optional\n\nindex = pd.date_range(start='2020-01-01', end='2020-01-05', inclusive='left', freq='H')\ndata = pd.DataFrame(index=index, data=[10] * len(index), columns=['value'])\ndata['date'] = index.date\n\n\nclass MyTransformer(BaseEstimator, TransformerMixin):\n    def fit(self, X: pd.DataFrame, y: Optional[pd.Series] = None, **kwargs):\n        return self\n\n    def transform(self, X: pd.DataFrame, y: Optional[pd.Series] = None) -> pd.DataFrame:\n        return X['value'].groupby(X['date']).sum()\n\n\n# This works.\nset_config(transform_output='default')\nprint(make_union(MyTransformer()).fit_transform(data))\n\n# This does not work.\nset_config(transform_output='pandas')\nprint(make_union(MyTransformer()).fit_transform(data))",
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "2:echo"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17667146096937358
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2039217099081725
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/utils/_set_output.py",
        "old_str": "    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None:\n            data_to_wrap.index = index\n        return data_to_wrap",
        "new_str": "    if isinstance(data_to_wrap, pd.DataFrame):\n        if columns is not None:\n            data_to_wrap.columns = columns\n        if index is not None and (data_to_wrap.index is None or len(data_to_wrap.index) == len(index)):\n            data_to_wrap.index = index\n        return data_to_wrap",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "submit",
      "execution_time": [
        0.2080800230614841,
        0.22293932712636888
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        5,
        7
      ],
      "id": "5:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.13069190504029393
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "6:rm"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:echo",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:python",
      "target": "2:echo",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:python",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "1:python",
      "target": "5:submit",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "2:echo",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:submit",
      "target": "6:rm",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:rm",
      "target": "5:submit",
      "key": 0
    }
  ]
}