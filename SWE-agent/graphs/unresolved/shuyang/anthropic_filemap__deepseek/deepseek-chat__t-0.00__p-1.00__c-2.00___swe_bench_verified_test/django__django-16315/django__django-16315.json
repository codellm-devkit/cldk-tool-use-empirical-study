{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-16315"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.21317588910460472,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.21599839185364544,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/query.py"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1997776310890913,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/postgresql"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1739800269715488,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/postgresql/base.py"
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.184365495108068,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/postgresql/operations.py"
      },
      "phase": "localization",
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1850502179004252,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/backends/postgresql/operations.py",
        "old_str": "    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        if on_conflict == OnConflict.IGNORE:\n            return \"ON CONFLICT DO NOTHING\"\n        if on_conflict == OnConflict.UPDATE:\n            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n                \", \".join(map(self.quote_name, unique_fields)),\n                \", \".join(\n                    [\n                        f\"{field} = EXCLUDED.{field}\"\n                        for field in map(self.quote_name, update_fields)\n                    ]\n                ),\n            )\n        return super().on_conflict_suffix_sql(\n            fields,\n            on_conflict,\n            update_fields,\n            unique_fields,\n        )",
        "new_str": "    def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n        if on_conflict == OnConflict.IGNORE:\n            return \"ON CONFLICT DO NOTHING\"\n        if on_conflict == OnConflict.UPDATE:\n            # Resolve db_column values for unique_fields\n            unique_columns = []\n            for field_name in unique_fields:\n                field = next((f for f in fields if f.name == field_name), None)\n                if field:\n                    unique_columns.append(field.db_column or field_name)\n                else:\n                    unique_columns.append(field_name)\n            # Resolve db_column values for update_fields\n            update_columns = []\n            for field_name in update_fields:\n                field = next((f for f in fields if f.name == field_name), None)\n                if field:\n                    update_columns.append(field.db_column or field_name)\n                else:\n                    update_columns.append(field_name)\n            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n                \", \".join(map(self.quote_name, unique_columns)),\n                \", \".join(\n                    [\n                        f\"{self.quote_name(col)} = EXCLUDED.{self.quote_name(col)}\"\n                        for col in update_columns\n                    ]\n                ),\n            )\n        return super().on_conflict_suffix_sql(\n            fields,\n            on_conflict,\n            update_fields,\n            unique_fields,\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.3079079204471782,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "6:cd"
    },
    {
      "label": "python",
      "execution_time": 0.3079079204471782,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "verification",
      "id": "7:python"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.20417557191103697,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_bulk_create.py",
        "file_text": "import os\nimport django\nfrom django.db import models\nfrom django.conf import settings\n\n# Configure minimal Django settings\nsettings.configure(\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.postgresql',\n            'NAME': 'test_db',\n            'USER': 'postgres',\n            'PASSWORD': 'postgres',\n            'HOST': 'localhost',\n            'PORT': '5432',\n        }\n    },\n    INSTALLED_APPS=[],\n)\ndjango.setup()\n\n# Define the model\nclass ActivityBlackListed(models.Model):\n    class Meta:\n        db_table = 'Activity_BlackListed'\n    blacklistid = models.IntegerField(primary_key=True, db_column='BlacklistID')\n    sectorid = models.IntegerField(null=True, blank=True, db_column='SectorID')\n\n# Create the table (for testing purposes)\nwith django.db.connection.cursor() as cursor:\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS \"Activity_BlackListed\" (\n            \"BlacklistID\" INTEGER PRIMARY KEY,\n            \"SectorID\" INTEGER\n        )\n    \"\"\")\n\n# Create instances\ninstances = [ActivityBlackListed(blacklistid=1, sectorid=100)]\n\n# Perform bulk_create with update_conflicts\ntry:\n    ActivityBlackListed.objects.bulk_create(\n        instances,\n        update_conflicts=True,\n        update_fields=['sectorid'],\n        unique_fields=['blacklistid']\n    )\n    print('Success: No errors encountered.')\nexcept Exception as e:\n    print(f'Error: {e}')\nfinally:\n    # Clean up (drop the table)\n    with django.db.connection.cursor() as cursor:\n        cursor.execute('DROP TABLE IF EXISTS \"Activity_BlackListed\"')"
      },
      "phase": "verification",
      "id": "8:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.18626698292791843,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "9:cd"
    },
    {
      "label": "python",
      "execution_time": 0.18626698292791843,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_bulk_create.py"
      ],
      "phase": "verification",
      "id": "10:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.17305973800830543,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_bulk_create.py",
        "old_str": "class ActivityBlackListed(models.Model):\n    class Meta:\n        db_table = 'Activity_BlackListed'\n    blacklistid = models.IntegerField(primary_key=True, db_column='BlacklistID')\n    sectorid = models.IntegerField(null=True, blank=True, db_column='SectorID')",
        "new_str": "class ActivityBlackListed(models.Model):\n    class Meta:\n        db_table = 'Activity_BlackListed'\n        app_label = 'test_app'\n    blacklistid = models.IntegerField(primary_key=True, db_column='BlacklistID')\n    sectorid = models.IntegerField(null=True, blank=True, db_column='SectorID')",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.15723805304151028,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "12:cd"
    },
    {
      "label": "python",
      "execution_time": 0.15723805304151028,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_bulk_create.py"
      ],
      "phase": "verification",
      "id": "13:python"
    },
    {
      "label": "pip",
      "execution_time": 0.8282013759016991,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "install",
        "psycopg2-binary"
      ],
      "phase": "general",
      "id": "14:pip"
    },
    {
      "label": "cd",
      "execution_time": 0.18159083742648363,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "15:cd"
    },
    {
      "label": "python",
      "execution_time": 0.18159083742648363,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_bulk_create.py"
      ],
      "phase": "verification",
      "id": "16:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19051743391901255,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_bulk_create.py",
        "old_str": "# Configure minimal Django settings\nsettings.configure(\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.postgresql',\n            'NAME': 'test_db',\n            'USER': 'postgres',\n            'PASSWORD': 'postgres',\n            'HOST': 'localhost',\n            'PORT': '5432',\n        }\n    },\n    INSTALLED_APPS=[],\n)",
        "new_str": "# Configure minimal Django settings\nsettings.configure(\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    },\n    INSTALLED_APPS=[],\n)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.17404677195008844,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "18:cd"
    },
    {
      "label": "python",
      "execution_time": 0.17404677195008844,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_bulk_create.py"
      ],
      "phase": "verification",
      "id": "19:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "20:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.23936641518957913,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "21:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.1196808919776231,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_bulk_create.py"
      ],
      "phase": "general",
      "id": "22:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.2733661839738488,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "23:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:python",
      "target": "8:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\ncreate",
      "target": "9:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "9:cd",
      "target": "10:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "10:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "12:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "12:cd",
      "target": "13:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "13:python",
      "target": "14:pip",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "14:pip",
      "target": "15:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "15:cd",
      "target": "16:python",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "16:python",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "18:cd",
      "target": "19:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "19:python",
      "target": "20:empty action",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "20:empty action",
      "target": "21:submit",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "21:submit",
      "target": "22:rm",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "22:rm",
      "target": "23:submit",
      "key": 0
    }
  ]
}