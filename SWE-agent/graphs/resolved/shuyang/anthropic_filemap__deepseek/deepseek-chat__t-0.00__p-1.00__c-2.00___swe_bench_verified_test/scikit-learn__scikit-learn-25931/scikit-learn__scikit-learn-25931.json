{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "scikit-learn__scikit-learn-25931"
  },
  "nodes": [
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.1875109300017357,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "file_text": "from sklearn.ensemble import IsolationForest\nimport pandas as pd\n\nX = pd.DataFrame({\"a\": [-1.1, 0.3, 0.5, 100]})\nclf = IsolationForest(random_state=0, contamination=0.05).fit(X)"
      },
      "phase": "verification",
      "id": "0:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": 1.097266610013321,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "1:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1955973100848496,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19041353301145136,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "view_range": [
          330,
          340
        ]
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18560253200121224,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "view_range": [
          250,
          300
        ]
      },
      "phase": "localization",
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.16811127797700465,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "view_range": [
          350,
          400
        ]
      },
      "phase": "localization",
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18298090482130647,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "view_range": [
          400,
          450
        ]
      },
      "phase": "localization",
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18259596289135516,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "view_range": [
          300,
          350
        ]
      },
      "phase": "localization",
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19205884099937975,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "old_str": "        # else, define offset_ wrt contamination parameter\n        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n\n        return self",
        "new_str": "        # else, define offset_ wrt contamination parameter\n        # Store feature names to avoid losing them during score_samples\n        feature_names_in = getattr(self, 'feature_names_in_', None)\n        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n        # Restore feature names if they were present\n        if feature_names_in is not None:\n            self.feature_names_in_ = feature_names_in\n\n        return self",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.9122740600723773,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "9:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18058627611026168,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "view_range": [
          400,
          450
        ]
      },
      "phase": "localization",
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18861087504774332,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "view_range": [
          440,
          490
        ]
      },
      "phase": "localization",
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18211441510356963,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "view_range": [
          475,
          525
        ]
      },
      "phase": "localization",
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1875103220809251,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "old_str": "        # else, define offset_ wrt contamination parameter\n        # Store feature names to avoid losing them during score_samples\n        feature_names_in = getattr(self, 'feature_names_in_', None)\n        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n        # Restore feature names if they were present\n        if feature_names_in is not None:\n            self.feature_names_in_ = feature_names_in\n\n        return self",
        "new_str": "        # else, define offset_ wrt contamination parameter\n        # Store feature names to avoid losing them during score_samples\n        feature_names_in = getattr(self, 'feature_names_in_', None)\n        # Temporarily disable feature name validation during score_samples\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", UserWarning)\n            self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n        # Restore feature names if they were present\n        if feature_names_in is not None:\n            self.feature_names_in_ = feature_names_in\n\n        return self",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.9733555980492383,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "14:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20377376303076744,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_iforest.py",
        "old_str": "import numbers\nimport numpy as np\nfrom scipy.sparse import issparse\nfrom warnings import warn\nfrom numbers import Integral, Real",
        "new_str": "import numbers\nimport numpy as np\nfrom scipy.sparse import issparse\nimport warnings\nfrom warnings import warn\nfrom numbers import Integral, Real",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": 0.9694622531533241,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "id": "16:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "17:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.20697268191725016,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "18:submit"
    },
    {
      "label": "str_replace_editor\nundo_edit",
      "execution_time": 0.19658601004630327,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py"
      },
      "phase": "general",
      "id": "19:str_replace_editor\nundo_edit"
    },
    {
      "label": "rm",
      "execution_time": 0.11923029413446784,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "id": "20:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.208903948077932,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "21:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\ncreate",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:python",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:python",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:python",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "16:python",
      "target": "17:empty action",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "17:empty action",
      "target": "18:submit",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "18:submit",
      "target": "19:str_replace_editor\nundo_edit",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "19:str_replace_editor\nundo_edit",
      "target": "20:rm",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "20:rm",
      "target": "21:submit",
      "key": 0
    }
  ]
}