{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-17029"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20315322885289788,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1987366529647261,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/apps"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.2154207699932158,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/apps/registry.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17708302894607186,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/apps/registry.py",
        "view_range": [
          370,
          384
        ]
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19659996684640646,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/apps/registry.py",
        "old_str": "    def clear_cache(self):\n        \"\"\"\n        Clear all internal caches, for methods that alter the app registry.\n\n        This is mostly used in tests.\n        \"\"\"\n        # Call expire cache on each model. This will purge\n        # the relation tree and the fields cache.\n        self.get_models.cache_clear()\n        if self.ready:\n            # Circumvent self.get_models() to prevent that the cache is refilled.\n            # This particularly prevents that an empty value is cached while cloning.\n            for app_config in self.app_configs.values():\n                for model in app_config.get_models(include_auto_created=True):\n                    model._meta._expire_cache()",
        "new_str": "    def clear_cache(self):\n        \"\"\"\n        Clear all internal caches, for methods that alter the app registry.\n\n        This is mostly used in tests.\n        \"\"\"\n        # Call expire cache on each model. This will purge\n        # the relation tree and the fields cache.\n        self.get_models.cache_clear()\n        self.get_swappable_settings_name.cache_clear()\n        if self.ready:\n            # Circumvent self.get_models() to prevent that the cache is refilled.\n            # This particularly prevents that an empty value is cached while cloning.\n            for app_config in self.app_configs.values():\n                for model in app_config.get_models(include_auto_created=True):\n                    model._meta._expire_cache()",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "5:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.25584971182979643,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "6:submit"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "7:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2482992068398744,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "8:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:empty action",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:empty action",
      "target": "6:submit",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:submit",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 0
    }
  ]
}