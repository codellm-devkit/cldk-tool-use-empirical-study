{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "matplotlib__matplotlib-26342"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21224860497750342
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21064876997843385
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21945021604187787
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19178105192258954
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "view_range": [
          700,
          800
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17827162984758615
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "view_range": [
          900,
          1000
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20136748300865293
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "view_range": [
          1300,
          1400
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18092317087575793,
        0.19648287585005164
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "view_range": [
          1100,
          1200
        ]
      },
      "phase": "localization",
      "step_indices": [
        6,
        10
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19358875695616007
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "view_range": [
          500,
          600
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.12212151405401528,
        0.12059075990691781,
        0.12019006488844752
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/lib/matplotlib/contour.py"
      ],
      "phase": "general",
      "step_indices": [
        8,
        9,
        15
      ],
      "id": "8:grep"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20201627095229924
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "old_str": "    def _make_paths_from_contour_generator(self):\n        \"\"\"\n        Generate paths for all levels.\n        \"\"\"\n        paths = []\n        empty_path = Path(np.empty((0, 2)))\n        if self.filled:\n            lowers, uppers = self._get_lowers_and_uppers()\n            for level, level_upper in zip(lowers, uppers):\n                vertices, kinds = \\\n                    self._contour_generator.create_filled_contour(\n                        level, level_upper)\n                paths.append(Path(np.concatenate(vertices), np.concatenate(kinds))\n                             if len(vertices) else empty_path)\n        else:\n            for level in self.levels:\n                vertices, kinds = self._contour_generator.create_contour(level)\n                paths.append(Path(np.concatenate(vertices), np.concatenate(kinds))\n                             if len(vertices) else empty_path)\n        return paths",
        "new_str": "    def _make_paths_from_contour_generator(self):\n        \"\"\"\n        Generate paths for all levels.\n        \"\"\"\n        paths = []\n        empty_path = Path(np.empty((0, 2)))\n        if self.filled:\n            lowers, uppers = self._get_lowers_and_uppers()\n            for level, level_upper in zip(lowers, uppers):\n                vertices, kinds = \\\n                    self._contour_generator.create_filled_contour(\n                        level, level_upper)\n                paths.append(Path(np.concatenate(vertices), np.concatenate(kinds))\n                             if len(vertices) else empty_path)\n        else:\n            for level in self.levels:\n                vertices, kinds = self._contour_generator.create_contour(level)\n                paths.append(Path(np.concatenate(vertices), np.concatenate(kinds))\n                             if len(vertices) else empty_path)\n        return paths\n\n    def set_paths(self, paths):\n        \"\"\"\n        Set the paths for the ContourSet.\n\n        Parameters\n        ----------\n        paths : list of `~matplotlib.path.Path`\n            The paths to set.\n        \"\"\"\n        self._paths = paths\n        self.changed()",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18653593212366104
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "old_str": "    def _make_paths_from_contour_generator(self):\n        \"\"\"\n        Generate paths for all levels.\n        \"\"\"\n        paths = []\n        empty_path = Path(np.empty((0, 2)))",
        "new_str": "    def _make_paths_from_contour_generator(self):\n        \"\"\"\n        Generate paths for all levels.\n        \"\"\"\n        paths = []\n        empty_path = Path(np.empty((0, 2)))\n\n    def set_paths(self, paths):\n        \"\"\"\n        Set the paths for the ContourSet.\n\n        Parameters\n        ----------\n        paths : list of `~matplotlib.path.Path`\n            The paths to set.\n        \"\"\"\n        self._paths = paths\n        self.changed()",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ninsert",
      "execution_time": [
        0.20670793810859323
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "new_str": "    def set_paths(self, paths):\n        \"\"\"\n        Set the paths for the ContourSet.\n\n        Parameters\n        ----------\n        paths : list of `~matplotlib.path.Path`\n            The paths to set.\n        \"\"\"\n        self._paths = paths\n        self.changed()",
        "insert_line": 1115
      },
      "phase": "general",
      "step_indices": [
        13
      ],
      "id": "11:str_replace_editor\ninsert"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1878090112004429
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "view_range": [
          1440,
          1460
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19833647087216377
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/contour.py",
        "old_str": "@_docstring.dedent_interpd\nclass ContourSet(ContourLabeler, mcoll.Collection):\n    \"\"\"\n    Store a set of contour lines or filled regions.\n\n    User-callable method: `~.Axes.clabel`\n\n    Parameters\n    ----------\n    ax : `~matplotlib.axes.Axes`\n\n    levels : [level0, level1, ..., leveln]\n        A list of floating point numbers indicating the contour levels.\n\n    allsegs : [level0segs, level1segs, ...]\n        List of all the polygon segments for all the *levels*.\n        For contour lines ``len(allsegs) == len(levels)``, and for\n        filled contour regions ``len(allsegs) = len(levels)-1``. The lists\n        should look like ::\n\n            level0segs = [polygon0, polygon1, ...]\n            polygon0 = [[x0, y0], [x1, y1], ...]\n\n    allkinds : ``None`` or [level0kinds, level1kinds, ...]\n        Optional list of all the polygon vertex kinds (code types), as\n        described and used in Path. This is used to allow multiply-\n        connected paths such as holes within filled polygons.\n        If not ``None``, ``len(allkinds) == len(allsegs)``. The lists\n        should look like ::\n\n            level0kinds = [polygon0kinds, ...]\n            polygon0kinds = [vertexcode0, vertexcode1, ...]\n\n        If *allkinds* is not ``None``, usually all polygons for a\n        particular contour level are grouped together so that\n        ``level0segs = [polygon0]`` and ``level0kinds = [polygon0kinds]``.\n\n    **kwargs\n        Keyword arguments are as described in the docstring of\n        `~.Axes.contour`.\n\n    %(contour_set_attributes)s\n    \"\"\"",
        "new_str": "@_docstring.dedent_interpd\nclass ContourSet(ContourLabeler, mcoll.Collection):\n    \"\"\"\n    Store a set of contour lines or filled regions.\n\n    User-callable method: `~.Axes.clabel`\n\n    Parameters\n    ----------\n    ax : `~matplotlib.axes.Axes`\n\n    levels : [level0, level1, ..., leveln]\n        A list of floating point numbers indicating the contour levels.\n\n    allsegs : [level0segs, level1segs, ...]\n        List of all the polygon segments for all the *levels*.\n        For contour lines ``len(allsegs) == len(levels)``, and for\n        filled contour regions ``len(allsegs) = len(levels)-1``. The lists\n        should look like ::\n\n            level0segs = [polygon0, polygon1, ...]\n            polygon0 = [[x0, y0], [x1, y1], ...]\n\n    allkinds : ``None`` or [level0kinds, level1kinds, ...]\n        Optional list of all the polygon vertex kinds (code types), as\n        described and used in Path. This is used to allow multiply-\n        connected paths such as holes within filled polygons.\n        If not ``None``, ``len(allkinds) == len(allsegs)``. The lists\n        should look like ::\n\n            level0kinds = [polygon0kinds, ...]\n            polygon0kinds = [vertexcode0, vertexcode1, ...]\n\n        If *allkinds* is not ``None``, usually all polygons for a\n        particular contour level are grouped together so that\n        ``level0segs = [polygon0]`` and ``level0kinds = [polygon0kinds]``.\n\n    **kwargs\n        Keyword arguments are as described in the docstring of\n        `~.Axes.contour`.\n\n    %(contour_set_attributes)s\n\n    Methods\n    -------\n    set_paths(paths)\n        Set the paths for the ContourSet.\n        Parameters\n        ----------\n        paths : list of `~matplotlib.path.Path`\n            The paths to set.\n    \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        17
      ],
      "id": "14:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.22919384692795575,
        0.21460647298954427
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        18,
        20
      ],
      "id": "15:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:grep",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:grep",
      "target": "8:grep",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:grep",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "8:grep",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "11:str_replace_editor\ninsert",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "11:str_replace_editor\ninsert",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "8:grep",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:empty action",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "14:empty action",
      "target": "15:submit",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "14:empty action",
      "target": "15:submit",
      "key": 1
    },
    {
      "label": "19",
      "type": "exec",
      "source": "15:submit",
      "target": "14:empty action",
      "key": 0
    }
  ]
}