{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-13590"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21615551901049912
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.22460655006580055
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1869290010072291
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "view_range": [
          1070,
          1085
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2417306099087
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "old_str": "    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            return type(value)(\n                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                for sub_value in value\n            )\n        return value",
        "new_str": "    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            resolved_values = [\n                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                for sub_value in value\n            ]\n            if hasattr(value, '_fields'):  # Check if it's a named tuple\n                return type(value)(*resolved_values)  # Expand the iterator\n            return type(value)(resolved_values)\n        return value",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "echo",
      "execution_time": [
        0.2103454334428534
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "from django.db.models import Q; from collections import namedtuple; RangeTuple = namedtuple('RangeTuple', ['near', 'far']); q = Q(some_field__range=RangeTuple(1, 10))",
        ">",
        "/testbed/test_namedtuple_range.py"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "4:echo"
    },
    {
      "label": "python",
      "execution_time": [
        0.2103454334428534
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_namedtuple_range.py"
      ],
      "phase": "verification",
      "step_indices": [
        4
      ],
      "id": "5:python"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "6:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.27516194782219827,
        0.2728065599221736
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        6,
        8
      ],
      "id": "7:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11824776302091777
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_namedtuple_range.py"
      ],
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "8:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:echo",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:echo",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:python",
      "target": "6:empty action",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:empty action",
      "target": "7:submit",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:submit",
      "target": "8:rm",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:rm",
      "target": "7:submit",
      "key": 0
    }
  ]
}