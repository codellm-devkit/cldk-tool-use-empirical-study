{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "pytest-dev__pytest-7236"
  },
  "nodes": [
    {
      "label": "cd",
      "execution_time": 0.19852021499536932,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "0:cd"
    },
    {
      "label": "pytest",
      "execution_time": 0.19852021499536932,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "id": "1:pytest"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.1655869351234287,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_repro.py",
        "file_text": "import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def setUp(self):\n        xxx\n    @unittest.skip(\"hello\")\n    def test_one(self):\n        pass\n    def tearDown(self):\n        xxx"
      },
      "phase": "verification",
      "id": "2:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 16.006455357535742,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "3:cd"
    },
    {
      "label": "pytest",
      "execution_time": 16.006455357535742,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "id": "4:pytest"
    },
    {
      "label": "cd",
      "execution_time": 0.13019495247863233,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "5:cd"
    },
    {
      "label": "pytest",
      "execution_time": 0.13019495247863233,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_repro.py"
      ],
      "phase": "general",
      "id": "6:pytest"
    },
    {
      "label": "cd",
      "execution_time": 15.99914359941613,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "7:cd"
    },
    {
      "label": "pytest",
      "execution_time": 15.99914359941613,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "id": "8:pytest"
    },
    {
      "label": "cd",
      "execution_time": 5.062822659499943,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "9:cd"
    },
    {
      "label": "timeout",
      "execution_time": 5.062822659499943,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "10",
        "pytest"
      ],
      "phase": "general",
      "id": "10:timeout"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20046141115017235,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19039697712287307,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/unittest.py"
      },
      "phase": "localization",
      "id": "12:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19795770081691444,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/unittest.py",
        "old_str": "            # when --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug\n            # arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed\n            if self.config.getoption(\"usepdb\"):\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)",
        "new_str": "            # when --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug\n            # arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed\n            if self.config.getoption(\"usepdb\") and not getattr(self._testcase, \"__unittest_skip__\", False):\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 5.062599082477391,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "14:cd"
    },
    {
      "label": "timeout",
      "execution_time": 5.062599082477391,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "10",
        "pytest"
      ],
      "phase": "general",
      "id": "15:timeout"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.16436523594893515,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/unittest.py",
        "old_str": "            # when --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug\n            # arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed\n            if self.config.getoption(\"usepdb\") and not getattr(self._testcase, \"__unittest_skip__\", False):\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)",
        "new_str": "            # when --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug\n            # arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed\n            if self.config.getoption(\"usepdb\") and not self._store.get(skipped_by_mark_key, False):\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 5.060182297951542,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "17:cd"
    },
    {
      "label": "timeout",
      "execution_time": 5.060182297951542,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "10",
        "pytest"
      ],
      "phase": "general",
      "id": "18:timeout"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20425508194603026,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/unittest.py",
        "old_str": "@hookimpl(tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    if isinstance(item, TestCaseFunction):\n        if item._excinfo:\n            call.excinfo = item._excinfo.pop(0)\n            try:\n                del call.result\n            except AttributeError:\n                pass\n\n    unittest = sys.modules.get(\"unittest\")\n    if unittest and call.excinfo and call.excinfo.errisinstance(unittest.SkipTest):\n        # let's substitute the excinfo with a pytest.skip one\n        call2 = CallInfo.from_call(\n            lambda: pytest.skip(str(call.excinfo.value)), call.when\n        )\n        call.excinfo = call2.excinfo",
        "new_str": "@hookimpl(tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    if isinstance(item, TestCaseFunction):\n        if item._excinfo:\n            call.excinfo = item._excinfo.pop(0)\n            try:\n                del call.result\n            except AttributeError:\n                pass\n\n        # Ensure tearDown is not postponed for skipped tests\n        if call.when == \"call\" and hasattr(item, \"_explicit_tearDown\") and item._store.get(skipped_by_mark_key, False):\n            item._explicit_tearDown = None\n            setattr(item._testcase, \"tearDown\", item._testcase.tearDown)\n\n    unittest = sys.modules.get(\"unittest\")\n    if unittest and call.excinfo and call.excinfo.errisinstance(unittest.SkipTest):\n        # let's substitute the excinfo with a pytest.skip one\n        call2 = CallInfo.from_call(\n            lambda: pytest.skip(str(call.excinfo.value)), call.when\n        )\n        call.excinfo = call2.excinfo",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.15251109295058995,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "20:cd"
    },
    {
      "label": "timeout",
      "execution_time": 0.15251109295058995,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "10",
        "pytest"
      ],
      "phase": "general",
      "id": "21:timeout"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.1946168679278344,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_non_skipped.py",
        "file_text": "import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def setUp(self):\n        print(\"setUp executed\")\n    def test_one(self):\n        print(\"test_one executed\")\n    def tearDown(self):\n        print(\"tearDown executed\")"
      },
      "phase": "verification",
      "id": "22:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.16492602392099798,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "23:cd"
    },
    {
      "label": "timeout",
      "execution_time": 0.16492602392099798,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "10",
        "pytest"
      ],
      "phase": "general",
      "id": "24:timeout"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "25:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.19428235199302435,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "26:submit"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "27:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.20598009112291038,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "28:submit"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:pytest",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:pytest",
      "target": "2:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:str_replace_editor\ncreate",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:cd",
      "target": "4:pytest",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "4:pytest",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "5:cd",
      "target": "6:pytest",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "6:pytest",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "7:cd",
      "target": "8:pytest",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "8:pytest",
      "target": "9:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "9:cd",
      "target": "10:timeout",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "10:timeout",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "8",
      "type": "exec",
      "source": "12:str_replace_editor\nview",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "14:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "14:cd",
      "target": "15:timeout",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "15:timeout",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "17:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "17:cd",
      "target": "18:timeout",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "18:timeout",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "20:cd",
      "target": "21:timeout",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "21:timeout",
      "target": "22:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "22:str_replace_editor\ncreate",
      "target": "23:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "23:cd",
      "target": "24:timeout",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "24:timeout",
      "target": "25:empty action",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "25:empty action",
      "target": "26:submit",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "26:submit",
      "target": "27:empty action",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "27:empty action",
      "target": "28:submit",
      "key": 0
    }
  ]
}