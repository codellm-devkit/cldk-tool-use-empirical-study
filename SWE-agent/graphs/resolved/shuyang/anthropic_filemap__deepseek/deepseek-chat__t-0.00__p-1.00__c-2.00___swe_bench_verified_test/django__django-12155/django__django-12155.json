{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-12155"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19901297194883227,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19630905706435442,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admindocs"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1939055440016091,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admindocs/utils.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.2113254799041897,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admindocs/utils.py",
        "old_str": "lines = docstring.expandtabs().splitlines()\n    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())",
        "new_str": "lines = docstring.expandtabs().splitlines()\n    indent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.20386586198583245,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_trim_docstring.py",
        "file_text": "from django.contrib.admindocs.utils import trim_docstring\n\n# Test case: docstring with first line not empty\ndocstring = \"\"\"test tests something.\n    This is a test docstring.\n    \"\"\"\nprint(trim_docstring(docstring))"
      },
      "phase": "verification",
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": 0.5215578640345484,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_trim_docstring.py"
      ],
      "phase": "verification",
      "id": "5:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "6:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2678202639799565,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "7:submit"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1903932448476553,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_trim_docstring.py",
        "old_str": "from django.contrib.admindocs.utils import trim_docstring\n\n# Test case: docstring with first line not empty\ndocstring = \"\"\"test tests something.\n    This is a test docstring.\n    \"\"\"\nprint(trim_docstring(docstring))",
        "new_str": "",
        "edit_status": "failure: unknown"
      },
      "phase": "patch",
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "rm",
      "execution_time": 0.11650187196210027,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_trim_docstring.py"
      ],
      "phase": "general",
      "id": "9:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.2872378209140152,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "10:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:python",
      "target": "6:empty action",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:empty action",
      "target": "7:submit",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:submit",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:rm",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:rm",
      "target": "10:submit",
      "key": 0
    }
  ]
}