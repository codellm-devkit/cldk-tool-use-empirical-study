{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-14053"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19161781715229154,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1879509959835559,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/staticfiles"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.2110431028995663,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/staticfiles/storage.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.18521754397079349,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "file_text": "import os\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Configure Django settings\nsettings.configure(\n    STATIC_ROOT=os.path.join(os.path.dirname(__file__),  # Temporary static root\n    STATIC_URL='/static/',\n)\n\n# Simulate collectstatic behavior\nstorage = ManifestStaticFilesStorage()\npaths = {'admin/css/base.css': None}  # Example file from the PR description\n\nprint(\"Simulating collectstatic...\")\nfor processed in storage.post_process(paths):\n    print(processed)"
      },
      "phase": "verification",
      "id": "3:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.08346583344973624,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "4:cd"
    },
    {
      "label": "python",
      "execution_time": 0.08346583344973624,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.18619723292067647,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "import os\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Configure Django settings\nsettings.configure(\n    STATIC_ROOT=os.path.join(os.path.dirname(__file__),  # Temporary static root\n    STATIC_URL='/static/',\n)\n\n# Simulate collectstatic behavior\nstorage = ManifestStaticFilesStorage()\npaths = {'admin/css/base.css': None}  # Example file from the PR description\n\nprint(\"Simulating collectstatic...\")\nfor processed in storage.post_process(paths):\n    print(processed)",
        "new_str": "import os\nimport sys\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        STATIC_ROOT=os.path.join(os.path.dirname(__file__),  # Temporary static root\n        STATIC_URL='/static/',\n    )\n\n# Simulate collectstatic behavior\ntry:\n    storage = ManifestStaticFilesStorage()\n    paths = {'admin/css/base.css': None}  # Example file from the PR description\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)\nexcept Exception as e:\n    print(f\"Error: {e}\", file=sys.stderr)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1771836900152266,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "    settings.configure(\n        STATIC_ROOT=os.path.join(os.path.dirname(__file__),  # Temporary static root\n        STATIC_URL='/static/',\n    )",
        "new_str": "    settings.configure(\n        STATIC_ROOT=os.path.join(os.path.dirname(__file__)),  # Temporary static root\n        STATIC_URL='/static/',\n    )",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.2783557060174644,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "8:cd"
    },
    {
      "label": "python",
      "execution_time": 0.2783557060174644,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "9:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.21317284018732607,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "import os\nimport sys\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        STATIC_ROOT=os.path.join(os.path.dirname(__file__)),  # Temporary static root\n        STATIC_URL='/static/',\n    )\n\n# Simulate collectstatic behavior\ntry:\n    storage = ManifestStaticFilesStorage()\n    paths = {'admin/css/base.css': None}  # Example file from the PR description\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)\nexcept Exception as e:\n    print(f\"Error: {e}\", file=sys.stderr)",
        "new_str": "import os\nimport sys\nimport tempfile\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Create a temporary directory for STATIC_ROOT\nstatic_root = tempfile.mkdtemp()\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        STATIC_ROOT=static_root,\n        STATIC_URL='/static/',\n    )\n\n# Simulate collectstatic behavior\ntry:\n    storage = ManifestStaticFilesStorage()\n    paths = {'admin/css/base.css': None}  # Example file from the PR description\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)\nexcept Exception as e:\n    print(f\"Error: {e}\", file=sys.stderr)\nfinally:\n    # Clean up the temporary directory\n    import shutil\n    shutil.rmtree(static_root)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.17353196849580854,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "11:cd"
    },
    {
      "label": "python",
      "execution_time": 0.17353196849580854,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "12:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19430986884981394,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/staticfiles/storage.py",
        "view_range": [
          203,
          249
        ]
      },
      "phase": "localization",
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.21949630393646657,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/staticfiles/storage.py",
        "old_str": "    def post_process(self, paths, dry_run=False, **options):\n        \"\"\"\n        Post process the given dictionary of files (called from collectstatic).\n\n        Processing is actually two separate operations:\n\n        1. renaming files to include a hash of their content for cache-busting,\n           and copying those files to the target storage.\n        2. adjusting files which contain references to other files so they\n           refer to the cache-busting filenames.\n\n        If either of these are performed on a file, then that file is considered\n        post-processed.\n        \"\"\"\n        # don't even dare to process the files if we're in dry run mode\n        if dry_run:\n            return\n\n        # where to store the new paths\n        hashed_files = {}\n\n        # build a list of adjustable files\n        adjustable_paths = [\n            path for path in paths\n            if matches_patterns(path, self._patterns)\n        ]\n        # Do a single pass first. Post-process all files once, then repeat for\n        # adjustable files.\n        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n            yield name, hashed_name, processed\n\n        paths = {path: paths[path] for path in adjustable_paths}\n\n        for i in range(self.max_post_process_passes):\n            substitutions = False\n            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n                yield name, hashed_name, processed\n                substitutions = substitutions or subst\n\n            if not substitutions:\n                break\n\n        if substitutions:\n            yield 'All', None, RuntimeError('Max post-process passes exceeded.')\n\n        # Store the processed paths\n        self.hashed_files.update(hashed_files)",
        "new_str": "    def post_process(self, paths, dry_run=False, **options):\n        \"\"\"\n        Post process the given dictionary of files (called from collectstatic).\n\n        Processing is actually two separate operations:\n\n        1. renaming files to include a hash of their content for cache-busting,\n           and copying those files to the target storage.\n        2. adjusting files which contain references to other files so they\n           refer to the cache-busting filenames.\n\n        If either of these are performed on a file, then that file is considered\n        post-processed.\n        \"\"\"\n        # don't even dare to process the files if we're in dry run mode\n        if dry_run:\n            return\n\n        # where to store the new paths\n        hashed_files = {}\n\n        # build a list of adjustable files\n        adjustable_paths = [\n            path for path in paths\n            if matches_patterns(path, self._patterns)\n        ]\n        \n        # Track yielded files to avoid duplicates\n        yielded_files = set()\n        \n        # Do a single pass first. Post-process all files once, then repeat for\n        # adjustable files.\n        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n            if name not in yielded_files:\n                yield name, hashed_name, processed\n                yielded_files.add(name)\n\n        paths = {path: paths[path] for path in adjustable_paths}\n\n        for i in range(self.max_post_process_passes):\n            substitutions = False\n            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n                if name not in yielded_files:\n                    yield name, hashed_name, processed\n                    yielded_files.add(name)\n                substitutions = substitutions or subst\n\n            if not substitutions:\n                break\n\n        if substitutions:\n            yield 'All', None, RuntimeError('Max post-process passes exceeded.')\n\n        # Store the processed paths\n        self.hashed_files.update(hashed_files)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.20974196947645396,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "15:cd"
    },
    {
      "label": "python",
      "execution_time": 0.20974196947645396,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "16:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.20147208706475794,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "import os\nimport sys\nimport tempfile\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Create a temporary directory for STATIC_ROOT\nstatic_root = tempfile.mkdtemp()\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        STATIC_ROOT=static_root,\n        STATIC_URL='/static/',\n    )\n\n# Simulate collectstatic behavior\ntry:\n    storage = ManifestStaticFilesStorage()\n    paths = {'admin/css/base.css': None}  # Example file from the PR description\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)\nexcept Exception as e:\n    print(f\"Error: {e}\", file=sys.stderr)\nfinally:\n    # Clean up the temporary directory\n    import shutil\n    shutil.rmtree(static_root)",
        "new_str": "import os\nimport sys\nimport tempfile\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Create a temporary directory for STATIC_ROOT\nstatic_root = tempfile.mkdtemp()\n\n# Create a mock file (admin/css/base.css)\nos.makedirs(os.path.join(static_root, 'admin/css'), exist_ok=True)\nwith open(os.path.join(static_root, 'admin/css/base.css'), 'w') as f:\n    f.write(\"/* Mock CSS file */\")\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        STATIC_ROOT=static_root,\n        STATIC_URL='/static/',\n        INSTALLED_APPS=['django.contrib.staticfiles'],\n    )\n\n# Simulate collectstatic behavior\ntry:\n    storage = ManifestStaticFilesStorage()\n    paths = {'admin/css/base.css': None}  # Example file from the PR description\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)\nexcept Exception as e:\n    print(f\"Error: {e}\", file=sys.stderr)\nfinally:\n    # Clean up the temporary directory\n    import shutil\n    shutil.rmtree(static_root)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.18896871502511203,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "18:cd"
    },
    {
      "label": "python",
      "execution_time": 0.18896871502511203,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "19:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.1892536492086947,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "    storage = ManifestStaticFilesStorage()\n    paths = {'admin/css/base.css': None}  # Example file from the PR description\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)",
        "new_str": "    storage = ManifestStaticFilesStorage()\n    \n    # Read the mock file content\n    with open(os.path.join(static_root, 'admin/css/base.css'), 'rb') as f:\n        content = f.read()\n    \n    paths = {'admin/css/base.css': (None, content)}  # Example file with content\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.17515119502786547,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "21:cd"
    },
    {
      "label": "python",
      "execution_time": 0.17515119502786547,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "22:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.205880788853392,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "import os\nimport sys\nimport tempfile\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Create a temporary directory for STATIC_ROOT\nstatic_root = tempfile.mkdtemp()\n\n# Create a mock file (admin/css/base.css)\nos.makedirs(os.path.join(static_root, 'admin/css'), exist_ok=True)\nwith open(os.path.join(static_root, 'admin/css/base.css'), 'w') as f:\n    f.write(\"/* Mock CSS file */\")\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        STATIC_ROOT=static_root,\n        STATIC_URL='/static/',\n        INSTALLED_APPS=['django.contrib.staticfiles'],\n    )\n\n# Simulate collectstatic behavior\ntry:\n    storage = ManifestStaticFilesStorage()\n    \n    # Read the mock file content\n    with open(os.path.join(static_root, 'admin/css/base.css'), 'rb') as f:\n        content = f.read()\n    \n    paths = {'admin/css/base.css': (None, content)}  # Example file with content\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)\nexcept Exception as e:\n    print(f\"Error: {e}\", file=sys.stderr)\nfinally:\n    # Clean up the temporary directory\n    import shutil\n    shutil.rmtree(static_root)",
        "new_str": "import os\nimport sys\nimport tempfile\nimport django\nfrom django.conf import settings\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n\n# Create a temporary directory for STATIC_ROOT\nstatic_root = tempfile.mkdtemp()\n\n# Create a mock file (admin/css/base.css)\nos.makedirs(os.path.join(static_root, 'admin/css'), exist_ok=True)\nwith open(os.path.join(static_root, 'admin/css/base.css'), 'w') as f:\n    f.write(\"/* Mock CSS file */\")\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        STATIC_ROOT=static_root,\n        STATIC_URL='/static/',\n        INSTALLED_APPS=['django.contrib.staticfiles'],\n    )\n    django.setup()\n\n# Simulate collectstatic behavior\ntry:\n    storage = ManifestStaticFilesStorage()\n    \n    # Read the mock file content\n    with open(os.path.join(static_root, 'admin/css/base.css'), 'rb') as f:\n        content = f.read()\n    \n    paths = {'admin/css/base.css': (None, content)}  # Example file with content\n\n    print(\"Simulating collectstatic...\")\n    for processed in storage.post_process(paths):\n        print(processed)\nexcept Exception as e:\n    print(f\"Error: {e}\", file=sys.stderr)\nfinally:\n    # Clean up the temporary directory\n    import shutil\n    shutil.rmtree(static_root)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.20890784251969308,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "24:cd"
    },
    {
      "label": "python",
      "execution_time": 0.20890784251969308,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "id": "25:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "26:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.24649430299177766,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "27:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.1180548151023686,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_issue.py"
      ],
      "phase": "general",
      "id": "28:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.24674895592033863,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "29:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\ncreate",
      "target": "4:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:cd",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "9:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "11:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "11:cd",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "12:python",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "15:cd",
      "target": "16:python",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "16:python",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "18:cd",
      "target": "19:python",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "19:python",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "21:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "21:cd",
      "target": "22:python",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "22:python",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "24:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "24:cd",
      "target": "25:python",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "25:python",
      "target": "26:empty action",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "26:empty action",
      "target": "27:submit",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "27:submit",
      "target": "28:rm",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "28:rm",
      "target": "29:submit",
      "key": 0
    }
  ]
}