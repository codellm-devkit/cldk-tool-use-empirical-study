{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-14752"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19425701396539807
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19314276706427336
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18991322512738407
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/views/autocomplete.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2053204718977213
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/views/autocomplete.py",
        "old_str": "    def get(self, request, *args, **kwargs):\n        \"\"\"\n        Return a JsonResponse with search results of the form:\n        {\n            results: [{id: \"123\" text: \"foo\"}],\n            pagination: {more: true}\n        }\n        \"\"\"\n        self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)\n\n        if not self.has_perm(request):\n            raise PermissionDenied\n\n        self.object_list = self.get_queryset()\n        context = self.get_context_data()\n        return JsonResponse({\n            'results': [\n                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n                for obj in context['object_list']\n            ],\n            'pagination': {'more': context['page_obj'].has_next()},\n        })",
        "new_str": "    def serialize_result(self, obj, to_field_name):\n        \"\"\"Serialize an object to a dictionary for the autocomplete response.\"\"\"\n        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        Return a JsonResponse with search results of the form:\n        {\n            results: [{id: \"123\" text: \"foo\"}],\n            pagination: {more: true}\n        }\n        \"\"\"\n        self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)\n\n        if not self.has_perm(request):\n            raise PermissionDenied\n\n        self.object_list = self.get_queryset()\n        context = self.get_context_data()\n        return JsonResponse({\n            'results': [\n                self.serialize_result(obj, to_field_name) for obj in context['object_list']\n            ],\n            'pagination': {'more': context['page_obj'].has_next()},\n        })",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "4:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.25124022201634943,
        0.24513575807213783
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        5,
        7
      ],
      "id": "5:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:empty action",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:empty action",
      "target": "5:submit",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "4:empty action",
      "target": "5:submit",
      "key": 1
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:submit",
      "target": "4:empty action",
      "key": 0
    }
  ]
}