{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-13012"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.2162593100219965,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19484741310589015,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.20900757401250303,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19295666902326047,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          500,
          600
        ]
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.1807394758798182,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          600,
          700
        ]
      },
      "phase": "localization",
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19561636284925044,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          700,
          800
        ]
      },
      "phase": "localization",
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19992428785189986,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          800,
          900
        ]
      },
      "phase": "localization",
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.22001312603242695,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "old_str": "class ExpressionWrapper(Expression):\n    \"\"\"\n    An expression that can wrap another expression so that it can provide\n    extra context to the inner expression, such as the output_field.\n    \"\"\"\n\n    def __init__(self, expression, output_field):\n        super().__init__(output_field=output_field)\n        self.expression = expression\n\n    def set_source_expressions(self, exprs):\n        self.expression = exprs[0]\n\n    def get_source_expressions(self):\n        return [self.expression]\n\n    def as_sql(self, compiler, connection):\n        return self.expression.as_sql(compiler, connection)\n\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.expression)",
        "new_str": "class ExpressionWrapper(Expression):\n    \"\"\"\n    An expression that can wrap another expression so that it can provide\n    extra context to the inner expression, such as the output_field.\n    \"\"\"\n\n    def __init__(self, expression, output_field):\n        super().__init__(output_field=output_field)\n        self.expression = expression\n\n    def set_source_expressions(self, exprs):\n        self.expression = exprs[0]\n\n    def get_source_expressions(self):\n        return [self.expression]\n\n    def as_sql(self, compiler, connection):\n        return self.expression.as_sql(compiler, connection)\n\n    def get_group_by_cols(self, alias=None):\n        # Delegate to the wrapped expression to determine GROUP BY columns.\n        # This ensures constants are excluded, similar to Value.\n        return self.expression.get_group_by_cols(alias)\n\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.expression)",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "8:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.2589174509048462,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "9:submit"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "10:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.24539637309499085,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "11:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:empty action",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:empty action",
      "target": "9:submit",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:submit",
      "target": "10:empty action",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:empty action",
      "target": "11:submit",
      "key": 0
    }
  ]
}