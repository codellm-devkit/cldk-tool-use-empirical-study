{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "sympy__sympy-12096"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.19146275287494063,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.17968907300382853,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core"
      },
      "phase": "localization",
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.21161797386594117,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/function.py"
      },
      "phase": "localization",
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": 0.18692529015243053,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/function.py",
        "view_range": [
          500,
          550
        ]
      },
      "phase": "localization",
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19921624497510493,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sympy/core/function.py",
        "old_str": "            try:\n                return Float(self._imp_(*self.args), prec)\n            except (AttributeError, TypeError, ValueError):\n                return",
        "new_str": "            try:\n                result = self._imp_(*self.args)\n                if hasattr(result, 'evalf'):\n                    return result.evalf(prec)\n                return Float(result, prec)\n            except (AttributeError, TypeError, ValueError):\n                return",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": 0.18060404085554183,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_evalf_recursion.py",
        "file_text": "from sympy.utilities.lambdify import implemented_function\nfrom sympy import print\n\nf = implemented_function('f', lambda x: x ** 2)\ng = implemented_function('g', lambda x: 2 * x)\n\nprint(\"f(2).evalf():\", f(2).evalf())\nprint(\"g(2).evalf():\", g(2).evalf())\nprint(\"f(g(2)).evalf():\", f(g(2)).evalf())"
      },
      "phase": "verification",
      "id": "5:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": 0.47970521997194737,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "6:cd"
    },
    {
      "label": "python",
      "execution_time": 0.47970521997194737,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_evalf_recursion.py"
      ],
      "phase": "verification",
      "id": "7:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": 0.19444169919006526,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_evalf_recursion.py",
        "old_str": "from sympy.utilities.lambdify import implemented_function\nfrom sympy import print\n\nf = implemented_function('f', lambda x: x ** 2)\ng = implemented_function('g', lambda x: 2 * x)\n\nprint(\"f(2).evalf():\", f(2).evalf())\nprint(\"g(2).evalf():\", g(2).evalf())\nprint(\"f(g(2)).evalf():\", f(g(2)).evalf())",
        "new_str": "from sympy.utilities.lambdify import implemented_function\n\nf = implemented_function('f', lambda x: x ** 2)\ng = implemented_function('g', lambda x: 2 * x)\n\nprint(\"f(2).evalf():\", f(2).evalf())\nprint(\"g(2).evalf():\", g(2).evalf())\nprint(\"f(g(2)).evalf():\", f(g(2)).evalf())",
        "edit_status": "success"
      },
      "phase": "patch",
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": 0.202339002978988,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "id": "9:cd"
    },
    {
      "label": "python",
      "execution_time": 0.202339002978988,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_evalf_recursion.py"
      ],
      "phase": "verification",
      "id": "10:python"
    },
    {
      "label": "empty action",
      "execution_time": 0.0,
      "state": {},
      "args": {},
      "phase": "general",
      "id": "11:empty action"
    },
    {
      "label": "submit",
      "execution_time": 0.213178853970021,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "12:submit"
    },
    {
      "label": "rm",
      "execution_time": 0.11873297300189734,
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_evalf_recursion.py"
      ],
      "phase": "general",
      "id": "13:rm"
    },
    {
      "label": "submit",
      "execution_time": 0.21811103611253202,
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "id": "14:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\ncreate",
      "target": "6:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:cd",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "9:cd",
      "target": "10:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "10:python",
      "target": "11:empty action",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "11:empty action",
      "target": "12:submit",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "12:submit",
      "target": "13:rm",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "13:rm",
      "target": "14:submit",
      "key": 0
    }
  ]
}