{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-14608"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18799749296158552
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "1:empty action"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21010134811513126
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1902438849210739
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py",
        "view_range": [
          290,
          298
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18994382210075855
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/utils.py"
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18679096782580018
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py",
        "old_str": "    def non_form_errors(self):\n        \"\"\"\n        Return an ErrorList of errors that aren't associated with a particular\n        form -- i.e., from formset.clean(). Return an empty ErrorList if there\n        are none.\n        \"\"\"\n        if self._non_form_errors is None:\n            self.full_clean()\n        return self._non_form_errors",
        "new_str": "    def non_form_errors(self):\n        \"\"\"\n        Return an ErrorList of errors that aren't associated with a particular\n        form -- i.e., from formset.clean(). Return an empty ErrorList if there\n        are none.\n        \"\"\"\n        if self._non_form_errors is None:\n            self.full_clean()\n        if not hasattr(self._non_form_errors, 'error_class'):\n            self._non_form_errors.error_class = 'errorlist nonform'\n        return self._non_form_errors",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1947568911127746
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_formset_nonform_errors.py",
        "file_text": "from django import forms\nfrom django.forms import formset_factory\n\nclass SampleForm(forms.Form):\n    name = forms.CharField()\n\nSampleFormSet = formset_factory(SampleForm, extra=1)\n\n# Create a formset with a non-form error\nformset = SampleFormSet(data={\n    'form-TOTAL_FORMS': '1',\n    'form-INITIAL_FORMS': '0',\n    'form-0-name': '',\n})\n\n# Trigger validation to generate non-form errors\nformset.full_clean()\n\n# Print the non-form errors and their HTML output\nprint(\"Non-form errors:\", formset.non_form_errors())\nprint(\"Non-form errors HTML:\", str(formset.non_form_errors()))"
      },
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": [
        0.1495384849840775,
        0.24471747397910804,
        0.17583275097422302,
        0.1772121210815385,
        0.19685388647485524,
        0.18381061451509595,
        0.16972321853972971,
        0.1679685595445335,
        0.1773334025638178,
        0.17121595551725477,
        0.16430157993454486,
        0.1364317329134792
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        7,
        9,
        11,
        13,
        15,
        18,
        20,
        24,
        26,
        28,
        30,
        32
      ],
      "id": "7:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.1495384849840775,
        0.24471747397910804,
        0.17583275097422302,
        0.1772121210815385,
        0.19685388647485524,
        0.18381061451509595,
        0.16972321853972971,
        0.1679685595445335,
        0.1773334025638178,
        0.17121595551725477,
        0.16430157993454486,
        0.1364317329134792
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_formset_nonform_errors.py"
      ],
      "phase": "verification",
      "step_indices": [
        7,
        9,
        11,
        13,
        15,
        18,
        20,
        24,
        26,
        28,
        30,
        32
      ],
      "id": "8:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19001507805660367
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_formset_nonform_errors.py",
        "old_str": "from django import forms\nfrom django.forms import formset_factory\n\nclass SampleForm(forms.Form):\n    name = forms.CharField()\n\nSampleFormSet = formset_factory(SampleForm, extra=1)\n\n# Create a formset with a non-form error\nformset = SampleFormSet(data={\n    'form-TOTAL_FORMS': '1',\n    'form-INITIAL_FORMS': '0',\n    'form-0-name': '',\n})\n\n# Trigger validation to generate non-form errors\nformset.full_clean()\n\n# Print the non-form errors and their HTML output\nprint(\"Non-form errors:\", formset.non_form_errors())\nprint(\"Non-form errors HTML:\", str(formset.non_form_errors()))",
        "new_str": "import os\nimport django\nfrom django import forms\nfrom django.forms import formset_factory\nfrom django.conf import settings\n\n# Minimal Django settings configuration\nsettings.configure(\n    SECRET_KEY='dummy',\n    USE_I18N=False,\n)\ndjango.setup()\n\nclass SampleForm(forms.Form):\n    name = forms.CharField()\n\nSampleFormSet = formset_factory(SampleForm, extra=1)\n\n# Create a formset with a non-form error\nformset = SampleFormSet(data={\n    'form-TOTAL_FORMS': '1',\n    'form-INITIAL_FORMS': '0',\n    'form-0-name': '',\n})\n\n# Trigger validation to generate non-form errors\nformset.full_clean()\n\n# Print the non-form errors and their HTML output\nprint(\"Non-form errors:\", formset.non_form_errors())\nprint(\"Non-form errors HTML:\", str(formset.non_form_errors()))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19099814910441637
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_formset_nonform_errors.py",
        "old_str": "# Create a formset with a non-form error\nformset = SampleFormSet(data={\n    'form-TOTAL_FORMS': '1',\n    'form-INITIAL_FORMS': '0',\n    'form-0-name': '',\n})\n\n# Trigger validation to generate non-form errors\nformset.full_clean()",
        "new_str": "# Create a formset with a non-form error\nformset = SampleFormSet(data={\n    'form-TOTAL_FORMS': '1',\n    'form-INITIAL_FORMS': '0',\n    'form-0-name': '',\n})\n\n# Add a non-form error\nformset._non_form_errors = forms.utils.ErrorList([\"This is a non-form error.\"])\n\n# Trigger validation to generate non-form errors\nformset.full_clean()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20828519691713154
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_formset_nonform_errors.py",
        "old_str": "# Print the non-form errors and their HTML output\nprint(\"Non-form errors:\", formset.non_form_errors())\nprint(\"Non-form errors HTML:\", str(formset.non_form_errors()))",
        "new_str": "# Print the non-form errors and their HTML output\nnon_form_errors = formset.non_form_errors()\nprint(\"Non-form errors:\", non_form_errors)\nprint(\"Non-form errors HTML:\", str(non_form_errors))\nprint(\"Error class:\", getattr(non_form_errors, 'error_class', 'Not set'))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19427737803198397
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py",
        "old_str": "    def non_form_errors(self):\n        \"\"\"\n        Return an ErrorList of errors that aren't associated with a particular\n        form -- i.e., from formset.clean(). Return an empty ErrorList if there\n        are none.\n        \"\"\"\n        if self._non_form_errors is None:\n            self.full_clean()\n        if not hasattr(self._non_form_errors, 'error_class'):\n            self._non_form_errors.error_class = 'errorlist nonform'\n        return self._non_form_errors",
        "new_str": "    def non_form_errors(self):\n        \"\"\"\n        Return an ErrorList of errors that aren't associated with a particular\n        form -- i.e., from formset.clean(). Return an empty ErrorList if there\n        are none.\n        \"\"\"\n        if self._non_form_errors is None:\n            self.full_clean()\n        if self._non_form_errors:\n            self._non_form_errors.error_class = 'errorlist nonform'\n        return self._non_form_errors",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17767044412903488
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py",
        "view_range": [
          330,
          383
        ]
      },
      "phase": "localization",
      "step_indices": [
        16
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19715346209704876
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py",
        "old_str": "    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 initial=None, error_class=ErrorList, form_kwargs=None,\n                 error_messages=None):",
        "new_str": "    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 initial=None, error_class=None, form_kwargs=None,\n                 error_messages=None):\n        if error_class is None:\n            error_class = ErrorList\n            error_class.error_class = 'errorlist nonform'",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1941548038739711
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py",
        "old_str": "    def non_form_errors(self):\n        \"\"\"\n        Return an ErrorList of errors that aren't associated with a particular\n        form -- i.e., from formset.clean(). Return an empty ErrorList if there\n        are none.\n        \"\"\"\n        if self._non_form_errors is None:\n            self.full_clean()\n        if self._non_form_errors:\n            self._non_form_errors.error_class = 'errorlist nonform'\n        return self._non_form_errors",
        "new_str": "    def non_form_errors(self):\n        \"\"\"\n        Return an ErrorList of errors that aren't associated with a particular\n        form -- i.e., from formset.clean(). Return an empty ErrorList if there\n        are none.\n        \"\"\"\n        if self._non_form_errors is None:\n            self.full_clean()\n        if self._non_form_errors:\n            # Create a new ErrorList with the nonform class\n            non_form_errors = ErrorList(self._non_form_errors, error_class='nonform')\n            return non_form_errors\n        return self._non_form_errors",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1920983858872205
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/utils.py",
        "view_range": [
          79,
          91
        ]
      },
      "phase": "localization",
      "step_indices": [
        21
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18631403893232346
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py",
        "old_str": "            # Create a new ErrorList with the nonform class\n            non_form_errors = ErrorList(self._non_form_errors, error_class='nonform')\n            return non_form_errors",
        "new_str": "            # Create a new ErrorList with the nonform class\n            non_form_errors = ErrorList(self._non_form_errors, error_class='nonform')\n            return non_form_errors",
        "edit_status": "failure: no change"
      },
      "phase": "patch",
      "step_indices": [
        22
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1894368091598153
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_formset_nonform_errors.py",
        "old_str": "# Print the non-form errors and their HTML output\nnon_form_errors = formset.non_form_errors()\nprint(\"Non-form errors:\", non_form_errors)\nprint(\"Non-form errors HTML:\", str(non_form_errors))\nprint(\"Error class:\", getattr(non_form_errors, 'error_class', 'Not set'))",
        "new_str": "# Print the non-form errors and their HTML output\nnon_form_errors = formset.non_form_errors()\nprint(\"Non-form errors:\", non_form_errors)\nprint(\"Non-form errors HTML:\", str(non_form_errors))\nprint(\"Error class:\", getattr(non_form_errors, 'error_class', 'Not set'))\nprint(\"Raw HTML:\", non_form_errors.as_ul())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20274656801484525
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/formsets.py",
        "old_str": "        self._errors = []\n        self._non_form_errors = self.error_class()",
        "new_str": "        self._errors = []\n        self._non_form_errors = self.error_class(error_class='nonform')",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        25
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17191174114122987
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_formset_nonform_errors.py",
        "old_str": "# Add a non-form error\nformset._non_form_errors = forms.utils.ErrorList([\"This is a non-form error.\"])",
        "new_str": "# Add a non-form error\nformset._non_form_errors = forms.utils.ErrorList([\"This is a non-form error.\"], error_class='nonform')",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        27
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18749131495133042
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_formset_nonform_errors.py",
        "old_str": "# Add a non-form error\nformset._non_form_errors = forms.utils.ErrorList([\"This is a non-form error.\"], error_class='nonform')",
        "new_str": "# Add a non-form error\nformset._non_form_errors = forms.utils.ErrorList([\"This is a non-form error.\"], error_class='nonform')\nformset._non_form_errors.error_class = 'errorlist nonform'",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18544620904140174
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_formset_nonform_errors.py",
        "old_str": "import os\nimport django\nfrom django import forms\nfrom django.forms import formset_factory\nfrom django.conf import settings\n\n# Minimal Django settings configuration\nsettings.configure(\n    SECRET_KEY='dummy',\n    USE_I18N=False,\n)\ndjango.setup()\n\nclass SampleForm(forms.Form):\n    name = forms.CharField()\n\nSampleFormSet = formset_factory(SampleForm, extra=1)\n\n# Create a formset with a non-form error\nformset = SampleFormSet(data={\n    'form-TOTAL_FORMS': '1',\n    'form-INITIAL_FORMS': '0',\n    'form-0-name': '',\n})\n\n# Add a non-form error\nformset._non_form_errors = forms.utils.ErrorList([\"This is a non-form error.\"], error_class='nonform')\nformset._non_form_errors.error_class = 'errorlist nonform'\n\n# Trigger validation to generate non-form errors\nformset.full_clean()\n\n# Print the non-form errors and their HTML output\nnon_form_errors = formset.non_form_errors()\nprint(\"Non-form errors:\", non_form_errors)\nprint(\"Non-form errors HTML:\", str(non_form_errors))\nprint(\"Error class:\", getattr(non_form_errors, 'error_class', 'Not set'))\nprint(\"Raw HTML:\", non_form_errors.as_ul())",
        "new_str": "from django.forms.utils import ErrorList\n\n# Directly test ErrorList with nonform class\nerror_list = ErrorList([\"This is a non-form error.\"], error_class='nonform')\nprint(\"Error class:\", error_list.error_class)\nprint(\"Raw HTML:\", error_list.as_ul())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        31
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "submit",
      "execution_time": [
        0.252721366006881,
        0.2520473119802773
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        34,
        36
      ],
      "id": "23:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11972354003228247
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_formset_nonform_errors.py"
      ],
      "phase": "general",
      "step_indices": [
        35
      ],
      "id": "24:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:empty action",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:empty action",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "1:empty action",
      "target": "23:submit",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\ncreate",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 2
    },
    {
      "label": "13",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 3
    },
    {
      "label": "15",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 4
    },
    {
      "label": "18",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 5
    },
    {
      "label": "20",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 6
    },
    {
      "label": "24",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 7
    },
    {
      "label": "26",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 8
    },
    {
      "label": "28",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 9
    },
    {
      "label": "30",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 10
    },
    {
      "label": "32",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 11
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "8:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "8:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "8:python",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "8:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "8:python",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "8:python",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "8:python",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "8:python",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "8:python",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "8:python",
      "target": "1:empty action",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "23:submit",
      "target": "24:rm",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "24:rm",
      "target": "23:submit",
      "key": 0
    }
  ]
}