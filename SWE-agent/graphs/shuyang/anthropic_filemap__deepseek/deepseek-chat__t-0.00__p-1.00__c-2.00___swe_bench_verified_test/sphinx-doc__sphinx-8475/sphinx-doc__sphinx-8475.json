{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "sphinx-doc__sphinx-8475",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 3
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18103840900585055
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19242548500187695
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/builders"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18138325307518244
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/builders/linkcheck.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1803337619639933
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/builders/linkcheck.py",
        "old_str": "from requests.exceptions import HTTPError",
        "new_str": "from requests.exceptions import HTTPError, TooManyRedirects",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20188359706662595
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/builders/linkcheck.py",
        "old_str": "                    except HTTPError:\n                        # retry with GET request if that fails, some servers\n                        # don't like HEAD requests.\n                        response = requests.get(req_url, stream=True, config=self.app.config,\n                                                auth=auth_info, **kwargs)\n                        response.raise_for_status()",
        "new_str": "                    except (HTTPError, TooManyRedirects):\n                        # retry with GET request if that fails, some servers\n                        # don't like HEAD requests or have too many redirects.\n                        response = requests.get(req_url, stream=True, config=self.app.config,\n                                                auth=auth_info, **kwargs)\n                        response.raise_for_status()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.18872585403732955
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_linkcheck_fix.py",
        "file_text": "import requests\nfrom requests.exceptions import TooManyRedirects\n\n# Test URL known to cause infinite redirects with HEAD requests\nTEST_URL = \"https://idr.openmicroscopy.org/webclient/?show=well-119093\"\n\ndef test_linkcheck():\n    try:\n        # Attempt HEAD request\n        response = requests.head(TEST_URL, allow_redirects=True)\n        response.raise_for_status()\n        print(\"HEAD request successful\")\n    except TooManyRedirects:\n        print(\"HEAD request failed with TooManyRedirects. Falling back to GET...\")\n        try:\n            # Fallback to GET request\n            response = requests.get(TEST_URL, allow_redirects=True)\n            response.raise_for_status()\n            print(\"GET request successful\")\n        except Exception as e:\n            print(f\"GET request failed: {e}\")\n    except Exception as e:\n        print(f\"HEAD request failed: {e}\")\n\nif __name__ == \"__main__\":\n    test_linkcheck()"
      },
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        4.703207747079432
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_linkcheck_fix.py"
      ],
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "6:python"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "7:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.22631890093907714,
        0.21881237789057195
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        8,
        10
      ],
      "id": "8:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11966452491469681
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_linkcheck_fix.py"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "9:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\ncreate",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:python",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:submit",
      "target": "9:rm",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:rm",
      "target": "8:submit",
      "key": 0
    }
  ]
}