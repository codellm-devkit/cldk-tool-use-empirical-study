{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-10554",
    "difficulty": "1-4 hours",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 2,
    "patch_difficulty": "easy",
    "files_change": 0
  },
  "nodes": [
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.21355071500875056
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "file_text": "from django.db import models\n\nclass Dimension(models.Model):\n    id = models.IntegerField(primary_key=True)\n    order = models.IntegerField()\n\n# Simulate the issue\nqs = (\n    Dimension.objects.filter(pk__in=[10, 11])\n    .union(Dimension.objects.filter(pk__in=[16, 17]))\n    .order_by('order')\n)\n\n# This will break\nprint(qs.order_by().values_list('pk', flat=True))"
      },
      "phase": "verification",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": [
        0.24760416301432997,
        0.213812718517147,
        0.1956287844805047,
        0.1903056961018592,
        0.17099015694111586,
        0.16722859651781619,
        0.17076062608975917,
        0.18787689448799938,
        0.07488796801771969,
        0.07407538394909352
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        1,
        4,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19
      ],
      "id": "1:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.24760416301432997,
        0.213812718517147,
        0.1956287844805047,
        0.17099015694111586,
        0.16722859651781619,
        0.17076062608975917,
        0.18787689448799938,
        0.07488796801771969,
        0.07407538394909352
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        1,
        4,
        6,
        9,
        11,
        13,
        15,
        17,
        19
      ],
      "id": "2:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1994496351107955
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "from django.db import models\n\nclass Dimension(models.Model):\n    id = models.IntegerField(primary_key=True)\n    order = models.IntegerField()\n\n# Simulate the issue\nqs = (\n    Dimension.objects.filter(pk__in=[10, 11])\n    .union(Dimension.objects.filter(pk__in=[16, 17]))\n    .order_by('order')\n)\n\n# This will break\nprint(qs.order_by().values_list('pk', flat=True))",
        "new_str": "import os\nimport django\nfrom django.db import models\n\n# Minimal Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')\ndjango.setup()\n\nclass Dimension(models.Model):\n    id = models.IntegerField(primary_key=True)\n    order = models.IntegerField()\n\n# Simulate the issue\nqs = (\n    Dimension.objects.filter(pk__in=[10, 11])\n    .union(Dimension.objects.filter(pk__in=[16, 17]))\n    .order_by('order')\n)\n\n# This will break\nprint(qs.order_by().values_list('pk', flat=True))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.19115884392522275
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/settings.py",
        "file_text": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\nINSTALLED_APPS = ['testbed']"
      },
      "phase": "verification",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1905122639145702
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/__init__.py",
        "file_text": ""
      },
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\ncreate"
    },
    {
      "label": "set_env",
      "execution_time": [
        0.1903056961018592
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "PYTHONPATH=/testbed python reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "6:set_env"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1968140401877463
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "import os\nimport django\nfrom django.db import models\n\n# Minimal Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testbed.settings')\ndjango.setup()\n\nclass Dimension(models.Model):\n    id = models.IntegerField(primary_key=True)\n    order = models.IntegerField()\n\n# Simulate the issue\nqs = (\n    Dimension.objects.filter(pk__in=[10, 11])\n    .union(Dimension.objects.filter(pk__in=[16, 17]))\n    .order_by('order')\n)\n\n# This will break\nprint(qs.order_by().values_list('pk', flat=True))",
        "new_str": "from django.db import models\nfrom django.db.models import QuerySet\n\nclass MockQuerySet(QuerySet):\n    def __init__(self, model=None, query=None, using=None, hints=None):\n        super().__init__(model, query, using, hints)\n        self._result_cache = None\n\n    def _fetch_all(self):\n        if self._result_cache is None:\n            self._result_cache = list(self._iterable_class(self))\n\n    def union(self, *other_qs, **kwargs):\n        combined = list(self) + [item for qs in other_qs for item in qs]\n        return MockQuerySet()._clone(_result_cache=combined)\n\nclass Dimension:\n    def __init__(self, id, order):\n        self.id = id\n        self.order = order\n\n    def __repr__(self):\n        return f\"<Dimension: {self.id}>\"\n\n# Simulate the issue\nobjects = [Dimension(id=i, order=i) for i in range(10, 20)]\nqs = MockQuerySet()._clone(_result_cache=objects)\n\nunion_qs = (\n    qs.filter(lambda x: x.id in [10, 11])\n    .union(qs.filter(lambda x: x.id in [16, 17]))\n    .order_by('order')\n)\n\n# This should not break\nprint([item.id for item in union_qs.order_by()])",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1936785241123289
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "from django.db import models\nfrom django.db.models import QuerySet\n\nclass MockQuerySet(QuerySet):\n    def __init__(self, model=None, query=None, using=None, hints=None):\n        super().__init__(model, query, using, hints)\n        self._result_cache = None\n\n    def _fetch_all(self):\n        if self._result_cache is None:\n            self._result_cache = list(self._iterable_class(self))\n\n    def union(self, *other_qs, **kwargs):\n        combined = list(self) + [item for qs in other_qs for item in qs]\n        return MockQuerySet()._clone(_result_cache=combined)\n\nclass Dimension:\n    def __init__(self, id, order):\n        self.id = id\n        self.order = order\n\n    def __repr__(self):\n        return f\"<Dimension: {self.id}>\"\n\n# Simulate the issue\nobjects = [Dimension(id=i, order=i) for i in range(10, 20)]\nqs = MockQuerySet()._clone(_result_cache=objects)\n\nunion_qs = (\n    qs.filter(lambda x: x.id in [10, 11])\n    .union(qs.filter(lambda x: x.id in [16, 17]))\n    .order_by('order')\n)\n\n# This should not break\nprint([item.id for item in union_qs.order_by()])",
        "new_str": "from django.db.models import QuerySet\n\nclass MockQuerySet(QuerySet):\n    def __init__(self, model=None, query=None, using=None, hints=None):\n        super().__init__(model, query, using, hints)\n        self._result_cache = None\n\n    def _fetch_all(self):\n        if self._result_cache is None:\n            self._result_cache = list(self._iterable_class(self))\n\n    def union(self, *other_qs, **kwargs):\n        combined = list(self) + [item for qs in other_qs for item in qs]\n        qs = MockQuerySet()\n        qs._result_cache = combined\n        return qs\n\nclass Dimension:\n    def __init__(self, id, order):\n        self.id = id\n        self.order = order\n\n    def __repr__(self):\n        return f\"<Dimension: {self.id}>\"\n\n# Simulate the issue\nobjects = [Dimension(id=i, order=i) for i in range(10, 20)]\nqs = MockQuerySet()\nqs._result_cache = objects\n\nunion_qs = (\n    MockQuerySet()._clone().filter(lambda x: x.id in [10, 11])\n    .union(MockQuerySet()._clone().filter(lambda x: x.id in [16, 17]))\n    .order_by('order')\n)\n\n# This should not break\nprint([item.id for item in union_qs.order_by()])",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21655026194639504
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "from django.db.models import QuerySet\n\nclass MockQuerySet(QuerySet):\n    def __init__(self, model=None, query=None, using=None, hints=None):\n        super().__init__(model, query, using, hints)\n        self._result_cache = None\n\n    def _fetch_all(self):\n        if self._result_cache is None:\n            self._result_cache = list(self._iterable_class(self))\n\n    def union(self, *other_qs, **kwargs):\n        combined = list(self) + [item for qs in other_qs for item in qs]\n        qs = MockQuerySet()\n        qs._result_cache = combined\n        return qs\n\nclass Dimension:\n    def __init__(self, id, order):\n        self.id = id\n        self.order = order\n\n    def __repr__(self):\n        return f\"<Dimension: {self.id}>\"\n\n# Simulate the issue\nobjects = [Dimension(id=i, order=i) for i in range(10, 20)]\nqs = MockQuerySet()\nqs._result_cache = objects\n\nunion_qs = (\n    MockQuerySet()._clone().filter(lambda x: x.id in [10, 11])\n    .union(MockQuerySet()._clone().filter(lambda x: x.id in [16, 17]))\n    .order_by('order')\n)\n\n# This should not break\nprint([item.id for item in union_qs.order_by()])",
        "new_str": "from django.db.models import QuerySet\n\nclass MockQuerySet(QuerySet):\n    def __init__(self, model=None, query=None, using=None, hints=None):\n        super().__init__(model, query, using, hints)\n        self._result_cache = None\n\n    def _fetch_all(self):\n        if self._result_cache is None:\n            self._result_cache = list(self._iterable_class(self))\n\n    def union(self, *other_qs, **kwargs):\n        combined = list(self) + [item for qs in other_qs for item in qs]\n        qs = MockQuerySet()\n        qs._result_cache = combined\n        return qs\n\n    def filter(self, **kwargs):\n        if not self._result_cache:\n            return self._clone()\n        filtered = [item for item in self._result_cache if all(getattr(item, k) == v for k, v in kwargs.items())]\n        qs = MockQuerySet()\n        qs._result_cache = filtered\n        return qs\n\nclass Dimension:\n    def __init__(self, id, order):\n        self.id = id\n        self.order = order\n\n    def __repr__(self):\n        return f\"<Dimension: {self.id}>\"\n\n# Simulate the issue\nobjects = [Dimension(id=i, order=i) for i in range(10, 20)]\nqs = MockQuerySet()\nqs._result_cache = objects\n\nunion_qs = (\n    qs.filter(id__in=[10, 11])\n    .union(qs.filter(id__in=[16, 17]))\n    .order_by('order')\n)\n\n# This should not break\nprint([item.id for item in union_qs.order_by()])",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20385431707836688
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "    def filter(self, **kwargs):\n        if not self._result_cache:\n            return self._clone()\n        filtered = [item for item in self._result_cache if all(getattr(item, k) == v for k, v in kwargs.items())]\n        qs = MockQuerySet()\n        qs._result_cache = filtered\n        return qs",
        "new_str": "    def filter(self, **kwargs):\n        if not self._result_cache:\n            return self._clone()\n        filtered = []\n        for item in self._result_cache:\n            match = True\n            for key, value in kwargs.items():\n                if '__in' in key:\n                    field = key.split('__')[0]\n                    if getattr(item, field) not in value:\n                        match = False\n                        break\n                elif getattr(item, key) != value:\n                    match = False\n                    break\n            if match:\n                filtered.append(item)\n        qs = MockQuerySet()\n        qs._result_cache = filtered\n        return qs",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18037293013185263
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "from django.db.models import QuerySet\n\nclass MockQuerySet(QuerySet):\n    def __init__(self, model=None, query=None, using=None, hints=None):\n        super().__init__(model, query, using, hints)\n        self._result_cache = None\n\n    def _fetch_all(self):\n        if self._result_cache is None:\n            self._result_cache = list(self._iterable_class(self))\n\n    def union(self, *other_qs, **kwargs):\n        combined = list(self) + [item for qs in other_qs for item in qs]\n        qs = MockQuerySet()\n        qs._result_cache = combined\n        return qs\n\n    def filter(self, **kwargs):\n        if not self._result_cache:\n            return self._clone()\n        filtered = []\n        for item in self._result_cache:\n            match = True\n            for key, value in kwargs.items():\n                if '__in' in key:\n                    field = key.split('__')[0]\n                    if getattr(item, field) not in value:\n                        match = False\n                        break\n                elif getattr(item, key) != value:\n                    match = False\n                    break\n            if match:\n                filtered.append(item)\n        qs = MockQuerySet()\n        qs._result_cache = filtered\n        return qs\n\nclass Dimension:\n    def __init__(self, id, order):\n        self.id = id\n        self.order = order\n\n    def __repr__(self):\n        return f\"<Dimension: {self.id}>\"\n\n# Simulate the issue\nobjects = [Dimension(id=i, order=i) for i in range(10, 20)]\nqs = MockQuerySet()\nqs._result_cache = objects\n\nunion_qs = (\n    qs.filter(id__in=[10, 11])\n    .union(qs.filter(id__in=[16, 17]))\n    .order_by('order')\n)\n\n# This should not break\nprint([item.id for item in union_qs.order_by()])",
        "new_str": "class MockQuerySet:\n    def __init__(self):\n        self._result_cache = None\n\n    def _clone(self):\n        qs = MockQuerySet()\n        qs._result_cache = self._result_cache\n        return qs\n\n    def union(self, *other_qs):\n        combined = (self._result_cache or []) + [item for qs in other_qs for item in (qs._result_cache or [])]\n        qs = MockQuerySet()\n        qs._result_cache = combined\n        return qs\n\n    def filter(self, **kwargs):\n        if not self._result_cache:\n            return self._clone()\n        filtered = []\n        for item in self._result_cache:\n            match = True\n            for key, value in kwargs.items():\n                if '__in' in key:\n                    field = key.split('__')[0]\n                    if getattr(item, field) not in value:\n                        match = False\n                        break\n                elif getattr(item, key) != value:\n                    match = False\n                    break\n            if match:\n                filtered.append(item)\n        qs = MockQuerySet()\n        qs._result_cache = filtered\n        return qs\n\n    def order_by(self, *fields):\n        if not self._result_cache:\n            return self._clone()\n        if not fields:\n            return self._clone()\n        # Simple ordering by the first field\n        field = fields[0]\n        ordered = sorted(self._result_cache, key=lambda x: getattr(x, field))\n        qs = MockQuerySet()\n        qs._result_cache = ordered\n        return qs\n\nclass Dimension:\n    def __init__(self, id, order):\n        self.id = id\n        self.order = order\n\n    def __repr__(self):\n        return f\"<Dimension: {self.id}>\"\n\n# Simulate the issue\nobjects = [Dimension(id=i, order=i) for i in range(10, 20)]\nqs = MockQuerySet()\nqs._result_cache = objects\n\nunion_qs = (\n    qs.filter(id__in=[10, 11])\n    .union(qs.filter(id__in=[16, 17]))\n    .order_by('order')\n)\n\n# This should not break\nprint([item.id for item in union_qs.order_by()])",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19826823193579912
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "    def order_by(self, *fields):\n        if not self._result_cache:\n            return self._clone()\n        if not fields:\n            return self._clone()\n        # Simple ordering by the first field\n        field = fields[0]\n        ordered = sorted(self._result_cache, key=lambda x: getattr(x, field))\n        qs = MockQuerySet()\n        qs._result_cache = ordered\n        return qs",
        "new_str": "    def order_by(self, *fields):\n        if not self._result_cache:\n            return self._clone()\n        if not fields:\n            return self._clone()\n        # Simple ordering by the first field\n        field = fields[0]\n        ordered = sorted(self._result_cache, key=lambda x: getattr(x, field))\n        qs = MockQuerySet()\n        qs._result_cache = ordered\n        return qs\n\n    def __iter__(self):\n        if self._result_cache is None:\n            self._result_cache = []\n        return iter(self._result_cache)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        20
      ],
      "id": "13:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.677783003076911,
        0.26137090800330043
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        21,
        23
      ],
      "id": "14:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11735987616702914
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py",
        "/testbed/settings.py"
      ],
      "phase": "general",
      "step_indices": [
        22
      ],
      "id": "15:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\ncreate",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 1
    },
    {
      "label": "6",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 2
    },
    {
      "label": "9",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 3
    },
    {
      "label": "11",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 4
    },
    {
      "label": "13",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 5
    },
    {
      "label": "15",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 6
    },
    {
      "label": "17",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 7
    },
    {
      "label": "19",
      "type": "exec",
      "source": "1:cd",
      "target": "2:python",
      "key": 8
    },
    {
      "label": "7",
      "type": "exec",
      "source": "1:cd",
      "target": "6:set_env",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:python",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "2:python",
      "target": "5:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "2:python",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "2:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "2:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "2:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "2:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "2:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "2:python",
      "target": "13:empty action",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\ncreate",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:set_env",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "1:cd",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "13:empty action",
      "target": "14:submit",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "14:submit",
      "target": "15:rm",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "15:rm",
      "target": "14:submit",
      "key": 0
    }
  ]
}