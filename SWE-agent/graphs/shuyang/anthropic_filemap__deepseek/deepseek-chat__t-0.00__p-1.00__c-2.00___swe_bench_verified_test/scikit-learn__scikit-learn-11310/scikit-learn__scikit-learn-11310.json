{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "scikit-learn__scikit-learn-11310",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "python",
      "execution_time": [
        0.150803656084463
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_refit_time.py"
      ],
      "phase": "verification",
      "step_indices": [
        0
      ],
      "id": "0:python"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.2087045891676098
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_refit_time.py",
        "file_text": "import sklearn.datasets\nimport sklearn.model_selection\nimport sklearn.ensemble\n\nX, y = sklearn.datasets.load_iris(return_X_y=True)\n\nrs = sklearn.model_selection.GridSearchCV(\n    estimator=sklearn.ensemble.RandomForestClassifier(),\n    param_grid={'n_estimators': [2, 3, 4, 5]},\n    refit=True\n)\nrs.fit(X, y)\n\n# Check if refit_time_ exists\nprint(hasattr(rs, 'refit_time_'))  # Expected: False"
      },
      "phase": "verification",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.8727400728967041,
        0.6987228631041944
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_refit_time.py"
      ],
      "phase": "verification",
      "step_indices": [
        2,
        8
      ],
      "id": "2:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21017717709764838
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_search.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.12027404014952481
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/sklearn/model_selection/_search.py"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "4:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19935755501501262
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_search.py",
        "view_range": [
          579,
          700
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20202836906537414
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_search.py",
        "view_range": [
          700,
          800
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2211936810053885
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_search.py",
        "old_str": "if self.refit:\n            self.best_estimator_ = clone(base_estimator).set_params(\n                **self.best_params_)\n            if y is not None:\n                self.best_estimator_.fit(X, y, **fit_params)\n            else:\n                self.best_estimator_.fit(X, **fit_params)",
        "new_str": "if self.refit:\n            import time\n            start_time = time.time()\n            self.best_estimator_ = clone(base_estimator).set_params(\n                **self.best_params_)\n            if y is not None:\n                self.best_estimator_.fit(X, y, **fit_params)\n            else:\n                self.best_estimator_.fit(X, **fit_params)\n            self.refit_time_ = time.time() - start_time",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "8:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.22800735011696815,
        0.21856228285469115
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        10,
        12
      ],
      "id": "9:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:python",
      "target": "1:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\ncreate",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:python",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "2:python",
      "target": "8:empty action",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:grep",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:grep",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "2:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:empty action",
      "target": "9:submit",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "8:empty action",
      "target": "9:submit",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:submit",
      "target": "8:empty action",
      "key": 0
    }
  ]
}