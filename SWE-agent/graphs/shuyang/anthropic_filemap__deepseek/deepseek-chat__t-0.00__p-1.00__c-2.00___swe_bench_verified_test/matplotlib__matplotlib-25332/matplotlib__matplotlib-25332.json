{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "matplotlib__matplotlib-25332",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "echo",
      "execution_time": [
        1.303729041479528
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import matplotlib.pyplot as plt\nimport pickle\n\nfig = plt.figure()\nax1 = fig.add_subplot(211)\nax2 = fig.add_subplot(212)\ntime=[0,1,2,3,4]\nspeed=[40000,4300,4500,4700,4800]\nacc=[10,11,12,13,14]\nax1.plot(time,speed)\nax1.set_ylabel(\"speed\")\nax2.plot(time,acc)\nax2.set_ylabel(\"acc\")\n\nfig.align_labels()\n\npickle.dumps(fig)\nplt.show()",
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:echo"
    },
    {
      "label": "python",
      "execution_time": [
        1.303729041479528,
        0.5743393290322274,
        0.610174756962806,
        0.646071539958939,
        0.6300456870812923
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        0,
        10,
        18,
        22,
        27
      ],
      "id": "1:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21666049887426198
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19155696919187903
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20430507604032755
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18875830410979688
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          1456,
          1478
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.15318457316607237
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          1335,
          1394
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19689203100278974
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          1396,
          1454
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20230686897411942
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          1,
          200
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19143476500175893
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "old_str": "        # groupers to keep track of x and y labels we want to align.\n        # see self.align_xlabels and self.align_ylabels and\n        # axis._get_tick_boxes_siblings\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n\n        self.figure = self",
        "new_str": "        # groupers to keep track of x and y labels we want to align.\n        # see self.align_xlabels and self.align_ylabels and\n        # axis._get_tick_boxes_siblings\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n\n        # Make _align_label_groups transient to avoid pickling issues\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n\n        self.figure = self",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2095297679770738
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "old_str": "    def __init__(self, **kwargs):\n        super().__init__()\n        # remove the non-figure artist _axes property\n        # as it makes no sense for a figure to be _in_ an Axes\n        # this is used by the property methods in the artist base class\n        # which are over-ridden in this class\n        del self._axes\n\n        self._suptitle = None\n        self._supxlabel = None\n        self._supylabel = None\n\n        # groupers to keep track of x and y labels we want to align.\n        # see self.align_xlabels and self.align_ylabels and\n        # axis._get_tick_boxes_siblings\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n\n        # Make _align_label_groups transient to avoid pickling issues\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n\n        self.figure = self",
        "new_str": "    def __init__(self, **kwargs):\n        super().__init__()\n        # remove the non-figure artist _axes property\n        # as it makes no sense for a figure to be _in_ an Axes\n        # this is used by the property methods in the artist base class\n        # which are over-ridden in this class\n        del self._axes\n\n        self._suptitle = None\n        self._supxlabel = None\n        self._supylabel = None\n\n        # groupers to keep track of x and y labels we want to align.\n        # see self.align_xlabels and self.align_ylabels and\n        # axis._get_tick_boxes_siblings\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n\n        # Make _align_label_groups transient to avoid pickling issues\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n\n        self.figure = self\n\n    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20730605581775308
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          2100,
          2200
        ]
      },
      "phase": "localization",
      "step_indices": [
        11
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.11883626482449472
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/lib/matplotlib/figure.py"
      ],
      "phase": "general",
      "step_indices": [
        12
      ],
      "id": "12:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18644534796476364
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          2343,
          2400
        ]
      },
      "phase": "localization",
      "step_indices": [
        13
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18618793389759958
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          2374,
          2500
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19259397918358445
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "old_str": "    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []",
        "new_str": "    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []\n        self.patches = []\n        self.texts = []\n        self.images = []\n        self.legends = []\n        self.subfigs = []",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.22205766383558512
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "old_str": "    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []\n        self.patches = []\n        self.texts = []\n        self.images = []\n        self.legends = []\n        self.subfigs = []\n        self.patches = []\n        self.texts = []\n        self.images = []",
        "new_str": "    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []\n        self.patches = []\n        self.texts = []\n        self.images = []\n        self.legends = []\n        self.subfigs = []",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1910804088693112
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "old_str": "    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []\n        self.patches = []\n        self.texts = []\n        self.images = []\n        self.legends = []\n        self.subfigs = []\n        self.legends = []\n        self.subfigs = []\n        self.stale = True",
        "new_str": "    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []\n        self.patches = []\n        self.texts = []\n        self.images = []\n        self.legends = []\n        self.subfigs = []\n        self.stale = True",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1893893349915743
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          2471,
          2500
        ]
      },
      "phase": "localization",
      "step_indices": [
        19
      ],
      "id": "18:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.16865660110488534
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "view_range": [
          169,
          200
        ]
      },
      "phase": "localization",
      "step_indices": [
        20
      ],
      "id": "19:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20078851096332073
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/figure.py",
        "old_str": "        self.figure = self\n\n    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []\n        self.patches = []\n        self.texts = []\n        self.images = []\n        self.legends = []\n        self.subfigs = []\n        self.stale = True",
        "new_str": "        self.figure = self\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []\n        self.patches = []\n        self.texts = []\n        self.images = []\n        self.legends = []\n        self.subfigs = []\n        self.stale = True\n\n    def __setstate__(self, state):\n        # Reinitialize transient attributes after unpickling\n        super().__setstate__(state)\n        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n        self.__dict__[\"_align_label_groups\"] = self._align_label_groups\n        self._localaxes = []  # track all axes\n        self.artists = []\n        self.lines = []\n        self.patches = []\n        self.texts = []\n        self.images = []\n        self.legends = []\n        self.subfigs = []\n        self.stale = True",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19004226801916957
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/cbook.py",
        "view_range": [
          1,
          100
        ]
      },
      "phase": "localization",
      "step_indices": [
        23
      ],
      "id": "21:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.11966976802796125
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/lib/matplotlib/cbook.py"
      ],
      "phase": "general",
      "step_indices": [
        24
      ],
      "id": "22:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19530319492332637
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/cbook.py",
        "view_range": [
          754,
          850
        ]
      },
      "phase": "localization",
      "step_indices": [
        25
      ],
      "id": "23:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21121075912378728
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/cbook.py",
        "old_str": "class Grouper:\n    \"\"\"\n    A disjoint-set data structure.\n\n    Objects can be joined using :meth:`join`, tested for connectedness\n    using :meth:`joined`, and all disjoint sets can be retrieved by\n    using the object as an iterator.\n\n    The objects being joined must be hashable and weak-referenceable.\n\n    Examples\n    --------\n    >>> from matplotlib.cbook import Grouper\n    >>> class Foo:\n    ...     def __init__(self, s):\n    ...         self.s = s\n    ...     def __repr__(self):\n    ...         return self.s\n    ...\n    >>> a, b, c, d, e, f = [Foo(x) for x in 'abcdef']\n    >>> grp = Grouper()\n    >>> grp.join(a, b)\n    >>> grp.join(b, c)\n    >>> grp.join(d, e)\n    >>> list(grp)\n    [[a, b, c], [d, e]]\n    >>> grp.joined(a, b)\n    True\n    >>> grp.joined(a, c)\n    True\n    >>> grp.joined(a, d)\n    False\n    \"\"\"\n\n    def __init__(self, init=()):\n        self._mapping = {weakref.ref(x): [weakref.ref(x)] for x in init}\n\n    def __contains__(self, item):\n        return weakref.ref(item) in self._mapping\n\n    def clean(self):\n        \"\"\"Clean dead weak references from the dictionary.\"\"\"\n        mapping = self._mapping\n        to_drop = [key for key in mapping if key() is None]\n        for key in to_drop:\n            val = mapping.pop(key)\n            val.remove(key)\n\n    def join(self, a, *args):\n        \"\"\"\n        Join given arguments into the same set.  Accepts one or more arguments.\n        \"\"\"\n        mapping = self._mapping\n        set_a = mapping.setdefault(weakref.ref(a), [weakref.ref(a)])\n\n        for arg in args:\n            set_b = mapping.get(weakref.ref(arg), [weakref.ref(arg)])\n            if set_b is not set_a:\n                if len(set_b) > len(set_a):\n                    set_a, set_b = set_b, set_a\n                set_a.extend(set_b)\n                for elem in set_b:\n                    mapping[elem] = set_a\n\n        self.clean()\n\n    def joined(self, a, b):\n        \"\"\"Return whether *a* and *b* are members of the same set.\"\"\"\n        self.clean()\n        return (self._mapping.get(weakref.ref(a), object())\n                is self._mapping.get(weakref.ref(b)))\n\n    def remove(self, a):\n        self.clean()\n        set_a = self._mapping.pop(weakref.ref(a), None)\n        if set_a:\n            set_a.remove(weakref.ref(a))\n\n    def __iter__(self):\n        \"\"\"\n        Iterate over each of the disjoint sets as a list.\n\n        The iterator is invalid if interleaved with calls to join().\n        \"\"\"\n        self.clean()\n        unique_groups = {id(group): group for group in self._mapping.values()}\n        for group in unique_groups.values():\n            yield [x() for x in group]\n\n    def get_siblings(self, a):\n        \"\"\"Return all of the items joined with *a*, including itself.\"\"\"\n        self.clean()\n        siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])\n        return [x() for x in siblings]",
        "new_str": "class Grouper:\n    \"\"\"\n    A disjoint-set data structure.\n\n    Objects can be joined using :meth:`join`, tested for connectedness\n    using :meth:`joined`, and all disjoint sets can be retrieved by\n    using the object as an iterator.\n\n    The objects being joined must be hashable.\n\n    Examples\n    --------\n    >>> from matplotlib.cbook import Grouper\n    >>> class Foo:\n    ...     def __init__(self, s):\n    ...         self.s = s\n    ...     def __repr__(self):\n    ...         return self.s\n    ...\n    >>> a, b, c, d, e, f = [Foo(x) for x in 'abcdef']\n    >>> grp = Grouper()\n    >>> grp.join(a, b)\n    >>> grp.join(b, c)\n    >>> grp.join(d, e)\n    >>> list(grp)\n    [[a, b, c], [d, e]]\n    >>> grp.joined(a, b)\n    True\n    >>> grp.joined(a, c)\n    True\n    >>> grp.joined(a, d)\n    False\n    \"\"\"\n\n    def __init__(self, init=()):\n        self._mapping = {x: [x] for x in init}\n\n    def __contains__(self, item):\n        return item in self._mapping\n\n    def clean(self):\n        \"\"\"Clean dead references from the dictionary.\"\"\"\n        pass  # No cleanup needed for strong references\n\n    def join(self, a, *args):\n        \"\"\"\n        Join given arguments into the same set.  Accepts one or more arguments.\n        \"\"\"\n        mapping = self._mapping\n        set_a = mapping.setdefault(a, [a])\n\n        for arg in args:\n            set_b = mapping.get(arg, [arg])\n            if set_b is not set_a:\n                if len(set_b) > len(set_a):\n                    set_a, set_b = set_b, set_a\n                set_a.extend(set_b)\n                for elem in set_b:\n                    mapping[elem] = set_a\n\n    def joined(self, a, b):\n        \"\"\"Return whether *a* and *b* are members of the same set.\"\"\"\n        return (self._mapping.get(a, object())\n                is self._mapping.get(b))\n\n    def remove(self, a):\n        set_a = self._mapping.pop(a, None)\n        if set_a:\n            set_a.remove(a)\n\n    def __iter__(self):\n        \"\"\"\n        Iterate over each of the disjoint sets as a list.\n\n        The iterator is invalid if interleaved with calls to join().\n        \"\"\"\n        unique_groups = {id(group): group for group in self._mapping.values()}\n        for group in unique_groups.values():\n            yield group\n\n    def get_siblings(self, a):\n        \"\"\"Return all of the items joined with *a*, including itself.\"\"\"\n        siblings = self._mapping.get(a, [a])\n        return siblings",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        28
      ],
      "id": "25:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.25998055492527783,
        0.24346584314480424
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        29,
        31
      ],
      "id": "26:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11885057087056339
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        30
      ],
      "id": "27:rm"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:echo",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:python",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "1:python",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "1:python",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "1:python",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "1:python",
      "target": "25:empty action",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "21:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "23:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "19:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:grep",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:grep",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "14:str_replace_editor\nview",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "18:str_replace_editor\nview",
      "target": "19:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "19:str_replace_editor\nview",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "21:str_replace_editor\nview",
      "target": "22:grep",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "22:grep",
      "target": "23:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "23:str_replace_editor\nview",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "25:empty action",
      "target": "26:submit",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "26:submit",
      "target": "27:rm",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "27:rm",
      "target": "26:submit",
      "key": 0
    }
  ]
}