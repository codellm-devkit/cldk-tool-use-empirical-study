{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "scikit-learn__scikit-learn-13439",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "easy",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21068991487845778
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2211694149300456
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/pipeline.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "echo",
      "execution_time": [
        0.5019668259192258
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "from sklearn import svm\nfrom sklearn.datasets import samples_generator\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression\nfrom sklearn.pipeline import Pipeline\n\n# generate some data to play with\nX, y = samples_generator.make_classification(\n    n_informative=5, n_redundant=0, random_state=42)\n\nanova_filter = SelectKBest(f_regression, k=5)\nclf = svm.SVC(kernel='linear')\npipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n\nlen(pipe)",
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "2:echo"
    },
    {
      "label": "python",
      "execution_time": [
        0.5019668259192258,
        0.6519668181426823
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        2,
        6
      ],
      "id": "3:python"
    },
    {
      "label": "using",
      "execution_time": [
        0.17317880783230066
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "a",
        "slice",
        "returns",
        "another",
        "Pipeline",
        "instance",
        "which",
        "copies",
        "a",
        "slice",
        "of",
        "this",
        "Pipeline.",
        "This",
        "copy",
        "is",
        "shallow:",
        "modifying",
        "(or",
        "fitting)",
        "estimators",
        "in",
        "the",
        "sub-pipeline",
        "will",
        "affect",
        "the",
        "larger",
        "pipeline",
        "and",
        "vice-versa.",
        "However,",
        "replacing",
        "a",
        "value",
        "in",
        "`steps`",
        "will",
        "not",
        "affect",
        "a",
        "copy.",
        "\n        if isinstance(ind, slice):\n            if ind.step not in (1, None):\n                raise ValueError('\"Pipeline",
        "slicing",
        "only",
        "supports",
        "a",
        "step",
        "of",
        "1\"')\n            return self.__class__(self.steps[ind])\n        try:\n            name, est = self.steps[ind]\n        except TypeError:\n            # Not an int, try get step by name\n            return self.named_steps[ind]\n        return est' --new_str '    def __getitem__(self, ind):\n        Returns",
        "a",
        "sub-pipeline",
        "or",
        "a",
        "single",
        "estimator",
        "in",
        "the",
        "pipeline",
        "Indexing",
        "with",
        "an",
        "integer",
        "will",
        "return",
        "an",
        "estimator"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "4:using"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1951886829920113
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/pipeline.py",
        "view_range": [
          200,
          220
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "using",
      "execution_time": [
        0.2207137648947537
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "a",
        "slice",
        "returns",
        "another",
        "Pipeline",
        "instance",
        "which",
        "copies",
        "a",
        "slice",
        "of",
        "this",
        "Pipeline.",
        "This",
        "copy",
        "is",
        "shallow:",
        "modifying",
        "(or",
        "fitting)",
        "estimators",
        "in",
        "the",
        "sub-pipeline",
        "will",
        "affect",
        "the",
        "larger",
        "pipeline",
        "and",
        "vice-versa.",
        "However,",
        "replacing",
        "a",
        "value",
        "in",
        "`step`",
        "will",
        "not",
        "affect",
        "a",
        "copy.",
        "\n        if isinstance(ind, slice):\n            if ind.step not in (1, None):\n                raise ValueError('\"Pipeline",
        "slicing",
        "only",
        "supports",
        "a",
        "step",
        "of",
        "1\"')\n            return self.__class__(self.steps[ind])\n        try:\n            name, est = self.steps[ind]\n        except TypeError:\n            # Not an int, try get step by name\n            return self.named_steps[ind]\n        return est' --new_str '    def __getitem__(self, ind):\n        Returns",
        "a",
        "sub-pipeline",
        "or",
        "a",
        "single",
        "esimtator",
        "in",
        "the",
        "pipeline",
        "Indexing",
        "with",
        "an",
        "integer",
        "will",
        "return",
        "an",
        "estimator"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "6:using"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "7:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.231413914822042,
        0.21818429697304964
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        8,
        10
      ],
      "id": "8:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.13372586388140917
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "9:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:echo",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:echo",
      "target": "3:python",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:python",
      "target": "4:using",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "3:python",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:using",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:using",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:using",
      "target": "3:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:submit",
      "target": "9:rm",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:rm",
      "target": "8:submit",
      "key": 0
    }
  ]
}