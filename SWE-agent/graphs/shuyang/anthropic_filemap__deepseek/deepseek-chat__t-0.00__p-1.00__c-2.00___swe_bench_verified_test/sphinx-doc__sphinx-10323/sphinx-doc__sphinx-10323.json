{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "sphinx-doc__sphinx-10323",
    "difficulty": "<15 min fix"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2008823840878904
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18242556997574866
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/directives"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19073353777639568
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/directives/code.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1956335329450667
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/directives/code.py",
        "view_range": [
          343,
          361
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19441552786156535
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/directives/code.py",
        "old_str": "    def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n        if 'dedent' in self.options:\n            return dedent_lines(lines, self.options.get('dedent'), location=location)\n        else:\n            return lines",
        "new_str": "    def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n        if 'dedent' in self.options:\n            # Skip dedent for prepend and append lines\n            prepend = self.options.get('prepend')\n            append = self.options.get('append')\n            if prepend or append:\n                # Separate prepend/append lines from the rest\n                main_lines = lines[1:-1] if append else lines[1:]\n                main_lines = dedent_lines(main_lines, self.options.get('dedent'), location=location)\n                if prepend:\n                    main_lines.insert(0, lines[0])\n                if append:\n                    main_lines.append(lines[-1])\n                return main_lines\n            else:\n                return dedent_lines(lines, self.options.get('dedent'), location=location)\n        else:\n            return lines",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.20218592090532184
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_literalinclude.py",
        "file_text": "from sphinx.directives.code import LiteralInclude, LiteralIncludeReader\nfrom sphinx.config import Config\n\n# Example from the PR\noptions = {\n    'prepend': '      </plugin>',\n    'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n    'end-at': '</plugin>',\n    'language': 'xml',\n}\n\n# Simulate the behavior\nreader = LiteralIncludeReader('pom.xml', options, Config())\nlines = [\n    '      <plugin>',\n    '        <groupId>com.github.ekryd.sortpom</groupId>',\n    '        <artifactId>sortpom-maven-plugin</artifactId>',\n    '        <version>2.15.0</version>',\n    '        <configuration>',\n    '          <verifyFailOn>strict</verifyFailOn>',\n    '        </configuration>',\n    '      </plugin>',\n]\n\n# Apply filters\nlines = reader.prepend_filter(lines)\nlines = reader.dedent_filter(lines)\n\n# Print the result\nprint('\\n'.join(lines))"
      },
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.3373650920111686,
        0.30777523200958967,
        0.2804972759913653
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_literalinclude.py"
      ],
      "phase": "verification",
      "step_indices": [
        6,
        8,
        10
      ],
      "id": "6:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20966201508417726
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_literalinclude.py",
        "old_str": "# Example from the PR\noptions = {\n    'prepend': '      </plugin>',\n    'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n    'end-at': '</plugin>',\n    'language': 'xml',\n}",
        "new_str": "# Test cases\n# Case 1: Original PR example\noptions1 = {\n    'prepend': '      </plugin>',\n    'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n    'end-at': '</plugin>',\n    'language': 'xml',\n}\n\n# Case 2: Empty prepend\noptions2 = {\n    'prepend': '',\n    'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n    'end-at': '</plugin>',\n    'language': 'xml',\n}\n\n# Case 3: No dedent\noptions3 = {\n    'prepend': '      </plugin>',\n    'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n    'end-at': '</plugin>',\n    'language': 'xml',\n    'dedent': None,\n}\n\n# Simulate the behavior for each case\nfor i, options in enumerate([options1, options2, options3], 1):\n    print(f\"\\nCase {i}:\")\n    reader = LiteralIncludeReader('pom.xml', options, Config())\n    lines = [\n        '      <plugin>',\n        '        <groupId>com.github.ekryd.sortpom</groupId>',\n        '        <artifactId>sortpom-maven-plugin</artifactId>',\n        '        <version>2.15.0</version>',\n        '        <configuration>',\n        '          <verifyFailOn>strict</verifyFailOn>',\n        '        </configuration>',\n        '      </plugin>',\n    ]\n\n    # Apply filters\n    lines = reader.prepend_filter(lines)\n    lines = reader.dedent_filter(lines)\n\n    # Print the result\n    print('\\n'.join(lines))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19232574081979692
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_literalinclude.py",
        "old_str": "# Case 3: No dedent\noptions3 = {\n    'prepend': '      </plugin>',\n    'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n    'end-at': '</plugin>',\n    'language': 'xml',\n    'dedent': None,\n}",
        "new_str": "# Case 3: No dedent\noptions3 = {\n    'prepend': '      </plugin>',\n    'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n    'end-at': '</plugin>',\n    'language': 'xml',\n    # 'dedent' is intentionally omitted to test the absence of the option\n}",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "submit",
      "execution_time": [
        0.21517743379808962,
        0.2075530190486461
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        11,
        14
      ],
      "id": "9:submit"
    },
    {
      "label": "str_replace_editor\nundo_edit",
      "execution_time": [
        0.18739555194042623
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_literalinclude.py"
      },
      "phase": "general",
      "step_indices": [
        12
      ],
      "id": "10:str_replace_editor\nundo_edit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.24767090496607125
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_literalinclude.py"
      ],
      "phase": "general",
      "step_indices": [
        13
      ],
      "id": "11:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\ncreate",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:python",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "6:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "6:python",
      "target": "9:submit",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:submit",
      "target": "10:str_replace_editor\nundo_edit",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:str_replace_editor\nundo_edit",
      "target": "11:rm",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "11:rm",
      "target": "9:submit",
      "key": 0
    }
  ]
}