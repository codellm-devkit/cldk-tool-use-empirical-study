{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "scikit-learn__scikit-learn-13124",
    "difficulty": "15 min - 1 hour"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21249749418348074
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18984238198027015
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.23437999095767736
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_split.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19023953517898917
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_split.py",
        "view_range": [
          559,
          700
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.192960785003379
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_split.py",
        "old_str": "        # pre-assign each sample to a test fold index using individual KFold\n        # splitting strategies for each class so as to respect the balance of\n        # classes\n        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n        # will break when the data is not 100% stratifiable for all classes.\n        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n        per_cls_cvs = [\n            KFold(self.n_splits, shuffle=self.shuffle,\n                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n            for count in y_counts]\n\n        test_folds = np.zeros(n_samples, dtype=np.int)\n        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n            for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n                cls_test_folds = test_folds[y == cls]\n                # the test split can be too big because we used\n                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%\n                # stratifiable for all the classes\n                # (we use a warning instead of raising an exception)\n                # If this is the case, let's trim it:\n                test_split = test_split[test_split < len(cls_test_folds)]\n                cls_test_folds[test_split] = test_fold_indices\n                test_folds[y == cls] = cls_test_folds",
        "new_str": "        # Shuffle the samples within each stratum if shuffle is True\n        if self.shuffle:\n            for cls in unique_y:\n                cls_indices = np.where(y == cls)[0]\n                rng.shuffle(cls_indices)\n                y[cls_indices] = cls\n\n        # Assign samples to folds while preserving the stratification\n        test_folds = np.zeros(n_samples, dtype=np.int)\n        for cls in unique_y:\n            cls_indices = np.where(y == cls)[0]\n            n_cls_samples = len(cls_indices)\n            n_cls_splits = min(self.n_splits, n_cls_samples)\n            fold_sizes = np.full(n_cls_splits, n_cls_samples // n_cls_splits, dtype=np.int)\n            fold_sizes[:n_cls_samples % n_cls_splits] += 1\n            current = 0\n            for fold_size in fold_sizes:\n                start, stop = current, current + fold_size\n                test_folds[cls_indices[start:stop]] = np.arange(n_cls_splits)[fold_size - 1]\n                current = stop",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "echo",
      "execution_time": [
        0.12701125093735754
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import numpy as np\nfrom sklearn.model_selection import StratifiedKFold\n\nRANDOM_SEED = 1\n\nsamples_per_class = 10\nX = np.linspace(0, samples_per_class*2-1, samples_per_class * 2)\ny = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)\n\nprint(X, '\\n', y, '\\n')\n\nprint('\\nshuffle = False\\n')\n\nk_fold = StratifiedKFold(n_splits=10, shuffle=False, random_state=RANDOM_SEED)\nresult = 0\nfor fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):\n    print(train_idx, '\\n', test_idx)\n\nprint('\\nshuffle = True, Random seed =', RANDOM_SEED, '\\n')\n\nk_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)\nresult = 0\nfor fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):\n    print(train_idx, '\\n', test_idx)\n\nRANDOM_SEED += 1\nprint('\\nshuffle = True, Random seed =', RANDOM_SEED, '\\n')\n  \nk_fold = StratifiedKFold(n_splits=10, shuffle=False, random_state=RANDOM_SEED)\nresult = 0\nfor fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):\n    print(train_idx, '\\n', test_idx)",
        ">",
        "/testbed/test_stratified_kfold.py"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "5:echo"
    },
    {
      "label": "python",
      "execution_time": [
        0.7220686790533364,
        0.6039049490354955,
        0.6198603329248726
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_stratified_kfold.py"
      ],
      "phase": "verification",
      "step_indices": [
        6,
        8,
        10
      ],
      "id": "6:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20143257500603795
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_split.py",
        "old_str": "        # Shuffle the samples within each stratum if shuffle is True\n        if self.shuffle:\n            for cls in unique_y:\n                cls_indices = np.where(y == cls)[0]\n                rng.shuffle(cls_indices)\n                y[cls_indices] = cls",
        "new_str": "        # Shuffle the samples within each stratum if shuffle is True\n        if self.shuffle:\n            rng = check_random_state(self.random_state)\n            for cls in unique_y:\n                cls_indices = np.where(y == cls)[0]\n                rng.shuffle(cls_indices)\n                y[cls_indices] = cls",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18581456993706524
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/model_selection/_split.py",
        "old_str": "        # Assign samples to folds while preserving the stratification\n        test_folds = np.zeros(n_samples, dtype=np.int)\n        for cls in unique_y:\n            cls_indices = np.where(y == cls)[0]\n            n_cls_samples = len(cls_indices)\n            n_cls_splits = min(self.n_splits, n_cls_samples)\n            fold_sizes = np.full(n_cls_splits, n_cls_samples // n_cls_splits, dtype=np.int)\n            fold_sizes[:n_cls_samples % n_cls_splits] += 1\n            current = 0\n            for fold_size in fold_sizes:\n                start, stop = current, current + fold_size\n                test_folds[cls_indices[start:stop]] = np.arange(n_cls_splits)[fold_size - 1]\n                current = stop",
        "new_str": "        # Assign samples to folds while preserving the stratification\n        test_folds = np.zeros(n_samples, dtype=np.int)\n        for cls in unique_y:\n            cls_indices = np.where(y == cls)[0]\n            n_cls_samples = len(cls_indices)\n            n_cls_splits = min(self.n_splits, n_cls_samples)\n            fold_sizes = np.full(n_cls_splits, n_cls_samples // n_cls_splits, dtype=np.int)\n            fold_sizes[:n_cls_samples % n_cls_splits] += 1\n            current = 0\n            for fold_idx, fold_size in enumerate(fold_sizes):\n                start, stop = current, current + fold_size\n                test_folds[cls_indices[start:stop]] = fold_idx\n                current = stop",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "9:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.24088507797569036,
        0.20932764885947108
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        12,
        14
      ],
      "id": "10:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11823414103128016
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_stratified_kfold.py"
      ],
      "phase": "general",
      "step_indices": [
        13
      ],
      "id": "11:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:echo",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:echo",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:python",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "6:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "6:python",
      "target": "9:empty action",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:empty action",
      "target": "10:submit",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:submit",
      "target": "11:rm",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "11:rm",
      "target": "10:submit",
      "key": 0
    }
  ]
}