{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "pylint-dev__pylint-6903",
    "difficulty": "<15 min fix"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18177160015329719
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/pylint/lint/run.py"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "echo",
      "execution_time": [
        0.26806656492408365
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "2",
        ">",
        "/tmp/cpu.shares"
      ],
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "1:echo"
    },
    {
      "label": "python3",
      "execution_time": [
        0.26806656492408365,
        0.16062686871737242,
        0.15801931902145347,
        0.15840753765466312,
        0.47362293186597526
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "step_indices": [
        1,
        2,
        4,
        8,
        10
      ],
      "id": "2:python3"
    },
    {
      "label": "mkdir",
      "execution_time": [
        0.16062686871737242,
        0.15801931902145347,
        0.15840753765466312
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "step_indices": [
        2,
        4,
        8
      ],
      "id": "3:mkdir"
    },
    {
      "label": "echo",
      "execution_time": [
        0.16062686871737242,
        0.15801931902145347,
        0.15840753765466312
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "2",
        ">",
        "/tmp/sys/fs/cgroup/cpu/cpu.shares"
      ],
      "phase": "general",
      "step_indices": [
        2,
        4,
        8
      ],
      "id": "4:echo"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18549963692203164
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/pylint/lint/run.py",
        "old_str": "    if Path(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = int(cpu_shares / 1024)",
        "new_str": "    if Path(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = int(cpu_shares / 1024)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18993772310204804
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/pylint/lint/run.py",
        "old_str": "    elif Path(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = int(cpu_shares / 1024)",
        "new_str": "    elif Path(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = max(1, int(cpu_shares / 1024))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1876502640079707,
        0.18300347495824099
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/pylint/lint/run.py",
        "old_str": "    if Path(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = max(1, int(cpu_shares / 1024))",
        "new_str": "    if Path(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = max(1, int(cpu_shares / 1024))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6,
        9
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2041741309221834
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/pylint/lint/run.py",
        "old_str": "    if Path(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = max(1, int(cpu_shares / 1024))",
        "new_str": "    if Path(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_quota_us\").is_file():\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_quota_us\", encoding=\"utf-8\") as file:\n            # Not useful for AWS Batch based jobs as result is -1, but works on local linux systems\n            cpu_quota = int(file.read().rstrip())\n\n    if (\n        cpu_quota\n        and cpu_quota != -1\n        and Path(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_period_us\").is_file()\n    ):\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n            cpu_period = int(file.read().rstrip())\n        # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n        avail_cpu = int(cpu_quota / cpu_period)\n    elif Path(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n        with open(\"/tmp/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n            cpu_shares = int(file.read().rstrip())\n        # For AWS, gives correct value * 1024.\n        avail_cpu = max(1, int(cpu_shares / 1024))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "9:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.23489360488019884,
        0.22517503704875708
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        12,
        14
      ],
      "id": "10:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:echo",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:echo",
      "target": "2:python3",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:python3",
      "target": "3:mkdir",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:python3",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "2:python3",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "2:python3",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "2:python3",
      "target": "9:empty action",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "3:mkdir",
      "target": "4:echo",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:mkdir",
      "target": "4:echo",
      "key": 1
    },
    {
      "label": "8",
      "type": "exec",
      "source": "3:mkdir",
      "target": "4:echo",
      "key": 2
    },
    {
      "label": "2",
      "type": "exec",
      "source": "4:echo",
      "target": "2:python3",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:echo",
      "target": "2:python3",
      "key": 1
    },
    {
      "label": "8",
      "type": "exec",
      "source": "4:echo",
      "target": "2:python3",
      "key": 2
    },
    {
      "label": "4",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "3:mkdir",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "2:python3",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "3:mkdir",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:empty action",
      "target": "10:submit",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "9:empty action",
      "target": "10:submit",
      "key": 1
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:submit",
      "target": "9:empty action",
      "key": 0
    }
  ]
}