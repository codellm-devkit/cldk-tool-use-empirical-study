{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "scikit-learn__scikit-learn-15100",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.22017802903428674
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2809983869083226
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/feature_extraction/text.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19822636502794921
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/feature_extraction/text.py",
        "view_range": [
          114,
          136
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.22002877900376916
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/feature_extraction/text.py",
        "old_str": "def strip_accents_unicode(s):\n    \"\"\"Transform accentuated unicode symbols into their simple counterpart\n\n    Warning: the python-level loop and join operations make this\n    implementation 20 times slower than the strip_accents_ascii basic\n    normalization.\n\n    Parameters\n    ----------\n    s : string\n        The string to strip\n\n    See also\n    --------\n    strip_accents_ascii\n        Remove accentuated char for any unicode symbol that has a direct\n        ASCII equivalent.\n    \"\"\"\n    normalized = unicodedata.normalize('NFKD', s)\n    if normalized == s:\n        return s\n    else:\n        return ''.join([c for c in normalized if not unicodedata.combining(c)])",
        "new_str": "def strip_accents_unicode(s):\n    \"\"\"Transform accentuated unicode symbols into their simple counterpart\n\n    Warning: the python-level loop and join operations make this\n    implementation 20 times slower than the strip_accents_ascii basic\n    normalization.\n\n    Parameters\n    ----------\n    s : string\n        The string to strip\n\n    See also\n    --------\n    strip_accents_ascii\n        Remove accentuated char for any unicode symbol that has a direct\n        ASCII equivalent.\n    \"\"\"\n    normalized = unicodedata.normalize('NFKD', s)\n    return ''.join([c for c in normalized if not unicodedata.combining(c)])",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.20035077608190477
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_strip_accents.py",
        "file_text": "from sklearn.feature_extraction.text import strip_accents_unicode\n\n# Test case from the PR description\ns1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\ns2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n\nprint(f\"Original s1: {s1}\")\nprint(f\"Original s2: {s2}\")\n\n# Stripped versions\nstripped_s1 = strip_accents_unicode(s1)\nstripped_s2 = strip_accents_unicode(s2)\n\nprint(f\"Stripped s1: {stripped_s1}\")\nprint(f\"Stripped s2: {stripped_s2}\")\n\n# Check if both are normalized to 'n'\nassert stripped_s1 == stripped_s2 == 'n', \"Both strings should be normalized to 'n'\"\nprint(\"Test passed: Both strings are normalized to 'n'\")"
      },
      "phase": "verification",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.6499998150393367,
        0.5195737050380558
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_strip_accents.py"
      ],
      "phase": "verification",
      "step_indices": [
        5,
        7
      ],
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2115085779223591
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_strip_accents.py",
        "old_str": "from sklearn.feature_extraction.text import strip_accents_unicode\n\n# Test case from the PR description\ns1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\ns2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n\nprint(f\"Original s1: {s1}\")\nprint(f\"Original s2: {s2}\")\n\n# Stripped versions\nstripped_s1 = strip_accents_unicode(s1)\nstripped_s2 = strip_accents_unicode(s2)\n\nprint(f\"Stripped s1: {stripped_s1}\")\nprint(f\"Stripped s2: {stripped_s2}\")\n\n# Check if both are normalized to 'n'\nassert stripped_s1 == stripped_s2 == 'n', \"Both strings should be normalized to 'n'\"\nprint(\"Test passed: Both strings are normalized to 'n'\")",
        "new_str": "from sklearn.feature_extraction.text import strip_accents_unicode\n\n# Test case from the PR description\ns1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\ns2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n\nprint(f\"Original s1: {s1}\")\nprint(f\"Original s2: {s2}\")\n\n# Stripped versions\nstripped_s1 = strip_accents_unicode(s1)\nstripped_s2 = strip_accents_unicode(s2)\n\nprint(f\"Stripped s1: {stripped_s1}\")\nprint(f\"Stripped s2: {stripped_s2}\")\n\n# Check if both are normalized to 'n'\nassert stripped_s1 == stripped_s2 == 'n', \"Both strings should be normalized to 'n'\"\nprint(\"Test passed: Both strings are normalized to 'n'\")\n\n# Edge case: Empty string\nempty_str = \"\"\nassert strip_accents_unicode(empty_str) == \"\", \"Empty string should return empty\"\nprint(\"Test passed: Empty string handled correctly\")\n\n# Edge case: String with no accents\nno_accents = \"hello\"\nassert strip_accents_unicode(no_accents) == \"hello\", \"String with no accents should be unchanged\"\nprint(\"Test passed: String with no accents handled correctly\")\n\n# Edge case: Mixed characters\nmixed = \"h\u00e9ll\u00f6\"\nassert strip_accents_unicode(mixed) == \"hello\", \"Mixed characters should be stripped\"\nprint(\"Test passed: Mixed characters handled correctly\")",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        8
      ],
      "id": "7:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.24501948081888258,
        0.23893067589960992
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        9,
        11
      ],
      "id": "8:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "5:python",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 1
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:submit",
      "target": "7:empty action",
      "key": 0
    }
  ]
}