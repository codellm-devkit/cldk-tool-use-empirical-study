{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-15252",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "easy",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1754050930030644
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/migrations/recorder.py"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1973075899295509
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/migrations/recorder.py",
        "old_str": "def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)",
        "new_str": "def ensure_schema(self):\n        \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n        # If the table's there, that's fine - we've never changed its schema\n        # in the codebase.\n        if self.has_table():\n            return\n\n        # Check if the router allows migrations for this database\n        from django.db import router\n        if hasattr(router, 'allow_migrate'):\n            if not router.allow_migrate(self.connection.alias, self.Migration):\n                return\n\n        # Make the table\n        try:\n            with self.connection.schema_editor() as editor:\n                editor.create_model(self.Migration)\n        except DatabaseError as exc:\n            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "2:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.24373496789485216,
        0.25894007086753845
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        3,
        5
      ],
      "id": "3:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nstr_replace",
      "target": "2:empty action",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:empty action",
      "target": "3:submit",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "2:empty action",
      "target": "3:submit",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:submit",
      "target": "2:empty action",
      "key": 0
    }
  ]
}