{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-11299",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "easy",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20326143596321344
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2027731139678508
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19449592498131096
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/constraints.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "echo",
      "execution_time": [
        0.12763630808331072
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "from django.db import models\n\nclass TestConstraint(models.Model):\n    field_1 = models.IntegerField(blank=True, null=True)\n    flag = models.BooleanField(blank=False, null=False)\n    class Meta:\n        constraints = [\n            models.CheckConstraint(\n                check=models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False),\n                name='field_1_has_value_if_flag_set',\n            ),\n        ]\n\n# Print the SQL for the constraint\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\n    sql = TestConstraint._meta.constraints[0].constraint_sql(TestConstraint, schema_editor)\n    print(sql)",
        ">",
        "/testbed/reproduce_check_constraint.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "3:echo"
    },
    {
      "label": "cd",
      "execution_time": [
        0.24565519602037966,
        0.17602721450384706,
        0.2542125490726903,
        0.20646658597979695
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        4,
        6,
        8,
        10
      ],
      "id": "4:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.24565519602037966,
        0.17602721450384706,
        0.2542125490726903,
        0.20646658597979695
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_check_constraint.py"
      ],
      "phase": "verification",
      "step_indices": [
        4,
        6,
        8,
        10
      ],
      "id": "5:python"
    },
    {
      "label": "echo",
      "execution_time": [
        0.12543847085908055
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import os\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\nfrom django.conf import settings\nsettings.configure(INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'])\n\nfrom django.db import models\n\nclass TestConstraint(models.Model):\n    field_1 = models.IntegerField(blank=True, null=True)\n    flag = models.BooleanField(blank=False, null=False)\n    class Meta:\n        constraints = [\n            models.CheckConstraint(\n                check=models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False),\n                name='field_1_has_value_if_flag_set',\n            ),\n        ]\n\n# Print the SQL for the constraint\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\n    sql = TestConstraint._meta.constraints[0].constraint_sql(TestConstraint, schema_editor)\n    print(sql)",
        ">",
        "/testbed/reproduce_check_constraint.py"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "6:echo"
    },
    {
      "label": "echo",
      "execution_time": [
        0.12441935390233994
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import os\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\nfrom django.conf import settings\nsettings.configure(INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'])\n\nimport django\ndjango.setup()\n\nfrom django.db import models\n\nclass TestConstraint(models.Model):\n    field_1 = models.IntegerField(blank=True, null=True)\n    flag = models.BooleanField(blank=False, null=False)\n    class Meta:\n        constraints = [\n            models.CheckConstraint(\n                check=models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False),\n                name='field_1_has_value_if_flag_set',\n            ),\n        ]\n\n# Print the SQL for the constraint\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\n    sql = TestConstraint._meta.constraints[0].constraint_sql(TestConstraint, schema_editor)\n    print(sql)",
        ">",
        "/testbed/reproduce_check_constraint.py"
      ],
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "7:echo"
    },
    {
      "label": "echo",
      "execution_time": [
        0.12588877300731838
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import os\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\nfrom django.conf import settings\nsettings.configure(INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'])\n\nimport django\ndjango.setup()\n\nfrom django.db import models\n\nclass TestConstraint(models.Model):\n    field_1 = models.IntegerField(blank=True, null=True)\n    flag = models.BooleanField(blank=False, null=False)\n    class Meta:\n        app_label = 'test_app'\n        constraints = [\n            models.CheckConstraint(\n                check=models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False),\n                name='field_1_has_value_if_flag_set',\n            ),\n        ]\n\n# Print the SQL for the constraint\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\n    sql = TestConstraint._meta.constraints[0].constraint_sql(TestConstraint, schema_editor)\n    print(sql)",
        ">",
        "/testbed/reproduce_check_constraint.py"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "8:echo"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19969214289449155
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/constraints.py",
        "old_str": "    def _get_check_sql(self, model, schema_editor):\n        query = Query(model=model)\n        where = query.build_where(self.check)\n        compiler = query.get_compiler(connection=schema_editor.connection)\n        sql, params = where.as_sql(compiler, schema_editor.connection)\n        return sql % tuple(schema_editor.quote_value(p) for p in params)",
        "new_str": "    def _get_check_sql(self, model, schema_editor):\n        query = Query(model=model)\n        where = query.build_where(self.check)\n        compiler = query.get_compiler(connection=schema_editor.connection)\n        sql, params = where.as_sql(compiler, schema_editor.connection)\n        # Remove table qualifiers from the SQL\n        sql = sql.replace(f'\"{model._meta.db_table}\".', '')\n        return sql % tuple(schema_editor.quote_value(p) for p in params)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        12
      ],
      "id": "10:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.26411127601750195,
        0.2736090898979455
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        13,
        16
      ],
      "id": "11:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11904204892925918
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_check_constraint.py"
      ],
      "phase": "general",
      "step_indices": [
        14
      ],
      "id": "12:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:echo",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:echo",
      "target": "4:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:cd",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "4:cd",
      "target": "5:python",
      "key": 1
    },
    {
      "label": "8",
      "type": "exec",
      "source": "4:cd",
      "target": "5:python",
      "key": 2
    },
    {
      "label": "10",
      "type": "exec",
      "source": "4:cd",
      "target": "5:python",
      "key": 3
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:python",
      "target": "6:echo",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:python",
      "target": "7:echo",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "5:python",
      "target": "8:echo",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "5:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:echo",
      "target": "4:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:echo",
      "target": "4:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:echo",
      "target": "4:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "10:empty action",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:empty action",
      "target": "11:submit",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "10:empty action",
      "target": "11:submit",
      "key": 1
    },
    {
      "label": "14",
      "type": "exec",
      "source": "11:submit",
      "target": "12:rm",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "12:rm",
      "target": "10:empty action",
      "key": 0
    }
  ]
}