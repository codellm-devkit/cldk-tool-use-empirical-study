{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-13569",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20979813509620726
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.24205713183619082
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/compiler.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19338611187413335
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/compiler.py",
        "view_range": [
          63,
          147
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19007092295214534
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/compiler.py",
        "old_str": "for expr, (sql, params, is_ref) in order_by:\n            # Skip References to the select clause, as all expressions in the\n            # select clause are already part of the group by.\n            if not is_ref:\n                expressions.extend(expr.get_group_by_cols())",
        "new_str": "for expr, (sql, params, is_ref) in order_by:\n            # Skip References to the select clause, as all expressions in the\n            # select clause are already part of the group by.\n            if not is_ref and not isinstance(expr, Random):\n                expressions.extend(expr.get_group_by_cols())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1854938471224159
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "file_text": "from django.db import models\nfrom django.db.models import Count\n\nclass Thing(models.Model):\n    pass\n\nclass Related(models.Model):\n    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n\n# Create test data\nt = Thing.objects.create()\nrs = [Related.objects.create(thing=t) for _ in range(2)]\n\n# Test queries\nprint(\"Expected behavior (order_by('rc')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc'))\n\nprint(\"\\nExpected behavior (order_by('related')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc'))\n\nprint(\"\\nIssue (order_by('?')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc'))"
      },
      "phase": "verification",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": [
        0.22633808851242065,
        0.23789973196107894,
        0.16394817200489342,
        0.16926343843806535,
        0.17640612507238984,
        0.19893880654126406,
        0.1953421989455819,
        0.1976213704328984,
        0.1913530700840056,
        0.1858147269813344,
        0.18949417339172214,
        0.19781492347829044
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        5,
        7,
        10,
        12,
        14,
        16,
        17,
        19,
        21,
        23,
        25,
        27
      ],
      "id": "5:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.22633808851242065,
        0.23789973196107894,
        0.16394817200489342,
        0.16926343843806535,
        0.17640612507238984,
        0.19893880654126406,
        0.1953421989455819
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_issue.py"
      ],
      "phase": "verification",
      "step_indices": [
        5,
        7,
        10,
        12,
        14,
        16,
        17
      ],
      "id": "6:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2445223859976977
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "from django.db import models\nfrom django.db.models import Count\n\nclass Thing(models.Model):\n    pass\n\nclass Related(models.Model):\n    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n\n# Create test data\nt = Thing.objects.create()\nrs = [Related.objects.create(thing=t) for _ in range(2)]\n\n# Test queries\nprint(\"Expected behavior (order_by('rc')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc'))\n\nprint(\"\\nExpected behavior (order_by('related')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc'))\n\nprint(\"\\nIssue (order_by('?')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc'))",
        "new_str": "import os\nimport django\nfrom django.conf import settings\n\n# Configure minimal Django settings\nsettings.configure(\n    INSTALLED_APPS=[\n        'django.contrib.contenttypes',\n        'django.contrib.auth',\n    ],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\n\ndjango.setup()\n\nfrom django.db import models\nfrom django.db.models import Count\n\nclass Thing(models.Model):\n    pass\n\nclass Related(models.Model):\n    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n\n# Create database tables\nmodels.Model.metadata.create_all()\n\n# Create test data\nt = Thing.objects.create()\nrs = [Related.objects.create(thing=t) for _ in range(2)]\n\n# Test queries\nprint(\"Expected behavior (order_by('rc')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc'))\n\nprint(\"\\nExpected behavior (order_by('related')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc'))\n\nprint(\"\\nIssue (order_by('?')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc'))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17408226896077394
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "class Thing(models.Model):\n    pass\n\nclass Related(models.Model):\n    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)",
        "new_str": "class Thing(models.Model):\n    class Meta:\n        app_label = 'test_app'\n\nclass Related(models.Model):\n    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n\n    class Meta:\n        app_label = 'test_app'",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18368498794734478
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "settings.configure(\n    INSTALLED_APPS=[\n        'django.contrib.contenttypes',\n        'django.contrib.auth',\n    ],",
        "new_str": "settings.configure(\n    INSTALLED_APPS=[\n        'django.contrib.contenttypes',\n        'django.contrib.auth',\n        'test_app',\n    ],",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19303338695317507
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "class Thing(models.Model):\n    class Meta:\n        app_label = 'test_app'\n\nclass Related(models.Model):\n    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n\n    class Meta:\n        app_label = 'test_app'",
        "new_str": "class Thing(models.Model):\n    class Meta:\n        app_label = 'contenttypes'\n\nclass Related(models.Model):\n    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n\n    class Meta:\n        app_label = 'contenttypes'",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20121456892229617
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "import os\nimport django\nfrom django.conf import settings\n\n# Configure minimal Django settings\nsettings.configure(\n    INSTALLED_APPS=[\n        'django.contrib.contenttypes',\n        'django.contrib.auth',\n        'test_app',\n    ],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\n\ndjango.setup()",
        "new_str": "import os\nimport django\nfrom django.conf import settings\nfrom django.apps import apps\n\n# Configure minimal Django settings\nsettings.configure(\n    INSTALLED_APPS=[\n        'django.contrib.contenttypes',\n        'django.contrib.auth',\n    ],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\n\ndjango.setup()\napps.ready = True  # Bypass app registry check",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.186944339890033
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "# Create database tables\nmodels.Model.metadata.create_all()",
        "new_str": "# Create database tables\nfrom django.db import connection\nwith connection.schema_editor() as schema_editor:\n    schema_editor.create_model(Thing)\n    schema_editor.create_model(Related)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20149990101344883
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/compiler.py",
        "view_range": [
          128,
          132
        ]
      },
      "phase": "localization",
      "step_indices": [
        18
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "set_env",
      "execution_time": [
        0.1976213704328984,
        0.1913530700840056,
        0.1858147269813344,
        0.18949417339172214,
        0.19781492347829044
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "PYTHONPATH=/testbed python reproduce_issue.py"
      ],
      "phase": "general",
      "step_indices": [
        19,
        21,
        23,
        25,
        27
      ],
      "id": "14:set_env"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18295618100091815
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_issue.py",
        "old_str": "print(\"\\nIssue (order_by('?')):\")\nprint(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc'))",
        "new_str": "print(\"\\nIssue (order_by('?')):\")\nqueryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\nprint(queryset)\nprint(\"\\nSQL Query:\")\nprint(queryset.query)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20555628696456552
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/compiler.py",
        "old_str": "for expr, (sql, params, is_ref) in order_by:\n            # Skip References to the select clause, as all expressions in the\n            # select clause are already part of the group by.\n            if not is_ref and not isinstance(expr, Random):\n                expressions.extend(expr.get_group_by_cols())",
        "new_str": "for expr, (sql, params, is_ref) in order_by:\n            # Skip References to the select clause, as all expressions in the\n            # select clause are already part of the group by.\n            print(f\"Processing order_by expr: {expr}, is_ref: {is_ref}, is Random: {isinstance(expr, Random)}\")\n            if not is_ref and not isinstance(expr, Random):\n                expressions.extend(expr.get_group_by_cols())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        22
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19544890196993947
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/compiler.py",
        "old_str": "for expr, (sql, params, is_ref) in order_by:\n            # Skip References to the select clause, as all expressions in the\n            # select clause are already part of the group by.\n            print(f\"Processing order_by expr: {expr}, is_ref: {is_ref}, is Random: {isinstance(expr, Random)}\")\n            if not is_ref and not isinstance(expr, Random):\n                expressions.extend(expr.get_group_by_cols())",
        "new_str": "for expr, (sql, params, is_ref) in order_by:\n            # Skip References to the select clause, as all expressions in the\n            # select clause are already part of the group by.\n            inner_expr = expr.expression if hasattr(expr, 'expression') else expr\n            print(f\"Processing order_by expr: {expr}, inner_expr: {inner_expr}, is_ref: {is_ref}, is Random: {isinstance(inner_expr, Random)}\")\n            if not is_ref and not isinstance(inner_expr, Random):\n                expressions.extend(expr.get_group_by_cols())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1990129081532359
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/compiler.py",
        "old_str": "for expr, (sql, params, is_ref) in order_by:\n            # Skip References to the select clause, as all expressions in the\n            # select clause are already part of the group by.\n            inner_expr = expr.expression if hasattr(expr, 'expression') else expr\n            print(f\"Processing order_by expr: {expr}, inner_expr: {inner_expr}, is_ref: {is_ref}, is Random: {isinstance(inner_expr, Random)}\")\n            if not is_ref and not isinstance(inner_expr, Random):\n                expressions.extend(expr.get_group_by_cols())",
        "new_str": "for expr, (sql, params, is_ref) in order_by:\n            # Skip References to the select clause, as all expressions in the\n            # select clause are already part of the group by.\n            inner_expr = expr.expression if hasattr(expr, 'expression') else expr\n            if not is_ref and not isinstance(inner_expr, Random):\n                expressions.extend(expr.get_group_by_cols())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        28
      ],
      "id": "19:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.2712734891101718,
        0.28099280991591513
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        29,
        32
      ],
      "id": "20:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.12546094879508018
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_issue.py"
      ],
      "phase": "general",
      "step_indices": [
        30
      ],
      "id": "21:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\ncreate",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 1
    },
    {
      "label": "10",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 2
    },
    {
      "label": "12",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 3
    },
    {
      "label": "14",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 4
    },
    {
      "label": "16",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 5
    },
    {
      "label": "17",
      "type": "exec",
      "source": "5:cd",
      "target": "6:python",
      "key": 6
    },
    {
      "label": "19",
      "type": "exec",
      "source": "5:cd",
      "target": "14:set_env",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "5:cd",
      "target": "14:set_env",
      "key": 1
    },
    {
      "label": "23",
      "type": "exec",
      "source": "5:cd",
      "target": "14:set_env",
      "key": 2
    },
    {
      "label": "25",
      "type": "exec",
      "source": "5:cd",
      "target": "14:set_env",
      "key": 3
    },
    {
      "label": "27",
      "type": "exec",
      "source": "5:cd",
      "target": "14:set_env",
      "key": 4
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:python",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "6:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "6:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "6:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "6:python",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "6:python",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "14:set_env",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "14:set_env",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "14:set_env",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "14:set_env",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "14:set_env",
      "target": "19:empty action",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "5:cd",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "19:empty action",
      "target": "20:submit",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "19:empty action",
      "target": "20:submit",
      "key": 1
    },
    {
      "label": "30",
      "type": "exec",
      "source": "20:submit",
      "target": "21:rm",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "21:rm",
      "target": "19:empty action",
      "key": 0
    }
  ]
}