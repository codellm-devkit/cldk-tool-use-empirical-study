{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pytest-dev__pytest-7490",
    "difficulty": "15 min - 1 hour"
  },
  "nodes": [
    {
      "label": "pytest",
      "execution_time": [
        0.3979369190055877,
        0.31027448712848127,
        0.31306608696468174
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_foo.py"
      ],
      "phase": "general",
      "step_indices": [
        0,
        2,
        4
      ],
      "id": "0:pytest"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.2018643501214683
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_foo.py",
        "file_text": "import pytest\n\ndef test_xfail_test(request):\n    mark = pytest.mark.xfail(reason=\"xfail\")\n    request.node.add_marker(mark)\n    assert 0"
      },
      "phase": "verification",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\ncreate"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.17476296587847173
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/conftest.py",
        "file_text": "import pytest\n\n@pytest.fixture(autouse=True)\ndef auto_xfail(request):\n    if request.node.get_closest_marker('xfail') is None:\n        mark = pytest.mark.xfail(reason=\"xfail\")\n        request.node.add_marker(mark)"
      },
      "phase": "verification",
      "step_indices": [
        3
      ],
      "id": "2:str_replace_editor\ncreate"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.19085930101573467
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_multiple_markers.py",
        "file_text": "import pytest\n\ndef test_multiple_markers(request):\n    mark1 = pytest.mark.xfail(reason=\"first xfail\")\n    mark2 = pytest.mark.xfail(reason=\"second xfail\")\n    request.node.add_marker(mark1)\n    request.node.add_marker(mark2)\n    assert 0"
      },
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "3:str_replace_editor\ncreate"
    },
    {
      "label": "pytest",
      "execution_time": [
        0.31398905999958515
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_multiple_markers.py"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "4:pytest"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.18218443309888244
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_conditional_marker.py",
        "file_text": "import pytest\n\ndef test_conditional_marker(request, condition):\n    if condition:\n        mark = pytest.mark.xfail(reason=\"conditional xfail\")\n        request.node.add_marker(mark)\n    assert 0\n\n@pytest.fixture(params=[True, False])\ndef condition(request):\n    return request.param"
      },
      "phase": "verification",
      "step_indices": [
        7
      ],
      "id": "5:str_replace_editor\ncreate"
    },
    {
      "label": "pytest",
      "execution_time": [
        0.29006218491122127
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_conditional_marker.py"
      ],
      "phase": "general",
      "step_indices": [
        8
      ],
      "id": "6:pytest"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "7:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.20168844098225236,
        0.19736483320593834
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        10,
        12
      ],
      "id": "8:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:pytest",
      "target": "1:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "0:pytest",
      "target": "2:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "0:pytest",
      "target": "3:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\ncreate",
      "target": "0:pytest",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "2:str_replace_editor\ncreate",
      "target": "0:pytest",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "3:str_replace_editor\ncreate",
      "target": "4:pytest",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "4:pytest",
      "target": "5:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "5:str_replace_editor\ncreate",
      "target": "6:pytest",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "6:pytest",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "8:submit",
      "target": "7:empty action",
      "key": 0
    }
  ]
}