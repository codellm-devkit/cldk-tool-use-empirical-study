{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "scikit-learn__scikit-learn-14710",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "easy",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "echo",
      "execution_time": [
        0.5229662740603089
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import numpy as np\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\n\nX = np.random.randn(100, 10)\ny = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\ngbrt = HistGradientBoostingClassifier(n_iter_no_change=10)\ngbrt.fit(X, y)",
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:echo"
    },
    {
      "label": "python",
      "execution_time": [
        0.5229662740603089,
        0.6959264678880572
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        0,
        5
      ],
      "id": "1:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20290778810158372
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.11909889592789114
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py"
      ],
      "phase": "general",
      "step_indices": [
        2
      ],
      "id": "3:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18583656498230994
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py",
        "view_range": [
          423,
          439
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19620909309014678
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py",
        "old_str": "    def _check_early_stopping_scorer(self, X_binned_small_train, y_small_train,\n                                     X_binned_val, y_val):\n        \"\"\"Check if fitting should be early-stopped based on scorer.\n\n        Scores are computed on validation data or on training data.\n        \"\"\"\n        self.train_score_.append(\n            self.scorer_(self, X_binned_small_train, y_small_train)\n        )\n\n        if self._use_validation_data:\n            self.validation_score_.append(\n                self.scorer_(self, X_binned_val, y_val)\n            )\n            return self._should_stop(self.validation_score_)\n        else:\n            return self._should_stop(self.train_score_)",
        "new_str": "    def _check_early_stopping_scorer(self, X_binned_small_train, y_small_train,\n                                     X_binned_val, y_val):\n        \"\"\"Check if fitting should be early-stopped based on scorer.\n\n        Scores are computed on validation data or on training data.\n        \"\"\"\n        if hasattr(self, 'classes_'):\n            y_small_train = self.classes_[y_small_train.astype(int)]\n        self.train_score_.append(\n            self.scorer_(self, X_binned_small_train, y_small_train)\n        )\n\n        if self._use_validation_data:\n            if hasattr(self, 'classes_'):\n                y_val = self.classes_[y_val.astype(int)]\n            self.validation_score_.append(\n                self.scorer_(self, X_binned_val, y_val)\n            )\n            return self._should_stop(self.validation_score_)\n        else:\n            return self._should_stop(self.train_score_)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "6:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.22055296297185123,
        0.1980902999639511
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        7,
        9
      ],
      "id": "7:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.13322823401540518
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        8
      ],
      "id": "8:rm"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:echo",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:python",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "1:python",
      "target": "6:empty action",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:grep",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:grep",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:empty action",
      "target": "7:submit",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:submit",
      "target": "8:rm",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:rm",
      "target": "7:submit",
      "key": 0
    }
  ]
}