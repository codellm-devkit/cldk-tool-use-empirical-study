{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "astropy__astropy-8707",
    "difficulty": "15 min - 1 hour"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20295868208631873
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19737215689383447
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/astropy/io/fits"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.24960027216002345
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/astropy/io/fits/header.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.1166082751005888
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/astropy/io/fits/header.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "3:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17397784907370806
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/astropy/io/fits/header.py",
        "view_range": [
          330,
          400
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2025494168046862
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/astropy/io/fits/header.py",
        "old_str": "    def fromstring(cls, data, sep=''):\n        \"\"\"\n        Creates an HDU header from a byte string containing the entire header\n        data.\n\n        Parameters\n        ----------\n        data : str\n           String containing the entire header.\n\n        sep : str, optional\n            The string separating cards from each other, such as a newline.  By\n            default there is no card separator (as is the case in a raw FITS\n            file).\n\n        Returns\n        -------\n        header\n            A new `Header` instance.\n        \"\"\"\n\n        cards = []\n\n        # If the card separator contains characters that may validly appear in\n        # a card, the only way to unambiguously distinguish between cards is to\n        # require that they be Card.length long.  However, if the separator\n        # contains non-valid characters (namely \\n) the cards may be split\n        # immediately at the separator\n        require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n\n        # Split the header into individual cards\n        idx = 0\n        image = []\n\n        while idx < len(data):\n            if require_full_cardlength:\n                end_idx = idx + Card.length\n            else:\n                try:\n                    end_idx = data.index(sep, idx)\n                except ValueError:\n                    end_idx = len(data)\n\n            next_image = data[idx:end_idx]\n            idx = end_idx + len(sep)\n\n            if image:\n                if next_image[:8] == 'CONTINUE':\n                    image.append(next_image)\n                    continue\n                cards.append(Card.fromstring(''.join(image)))\n\n            if require_full_cardlength:\n                if next_image == END_CARD:\n                    image = []\n                    break\n            else:\n                if next_image.split(sep)[0].rstrip() == 'END':\n                    image = []\n                    break\n\n            image = [next_image]\n\n        # Add the last image that was found before the end, if any\n        if image:\n            cards.append(Card.fromstring(''.join(image)))\n\n        return cls._fromcards(cards)",
        "new_str": "    def fromstring(cls, data, sep=''):\n        \"\"\"\n        Creates an HDU header from a byte string containing the entire header\n        data.\n\n        Parameters\n        ----------\n        data : str or bytes\n           String or bytes containing the entire header. If bytes, it is assumed\n           to be ASCII-encoded.\n\n        sep : str, optional\n            The string separating cards from each other, such as a newline.  By\n            default there is no card separator (as is the case in a raw FITS\n            file).\n\n        Returns\n        -------\n        header\n            A new `Header` instance.\n        \"\"\"\n        if isinstance(data, bytes):\n            data = data.decode('ascii')\n\n        cards = []\n\n        # If the card separator contains characters that may validly appear in\n        # a card, the only way to unambiguously distinguish between cards is to\n        # require that they be Card.length long.  However, if the separator\n        # contains non-valid characters (namely \\n) the cards may be split\n        # immediately at the separator\n        require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n\n        # Split the header into individual cards\n        idx = 0\n        image = []\n\n        while idx < len(data):\n            if require_full_cardlength:\n                end_idx = idx + Card.length\n            else:\n                try:\n                    end_idx = data.index(sep, idx)\n                except ValueError:\n                    end_idx = len(data)\n\n            next_image = data[idx:end_idx]\n            idx = end_idx + len(sep)\n\n            if image:\n                if next_image[:8] == 'CONTINUE':\n                    image.append(next_image)\n                    continue\n                cards.append(Card.fromstring(''.join(image)))\n\n            if require_full_cardlength:\n                if next_image == END_CARD:\n                    image = []\n                    break\n            else:\n                if next_image.split(sep)[0].rstrip() == 'END':\n                    image = []\n                    break\n\n            image = [next_image]\n\n        # Add the last image that was found before the end, if any\n        if image:\n            cards.append(Card.fromstring(''.join(image)))\n\n        return cls._fromcards(cards)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "grep",
      "execution_time": [
        0.12077508703805506
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/astropy/io/fits/card.py"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "6:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18483077897690237
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/astropy/io/fits/card.py",
        "view_range": [
          548,
          600
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20546945207752287
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/astropy/io/fits/card.py",
        "old_str": "    def fromstring(cls, image):\n        \"\"\"\n        Construct a `Card` object from a (raw) string. It will pad the string\n        if it is not the length of a card image (80 columns).  If the card\n        image is longer than 80 columns, assume it contains ``CONTINUE``\n        card(s).\n        \"\"\"\n\n        card = cls()\n        card._image = _pad(image)\n        card._verified = False\n        return card",
        "new_str": "    def fromstring(cls, image):\n        \"\"\"\n        Construct a `Card` object from a (raw) string or bytes. It will pad the string\n        if it is not the length of a card image (80 columns).  If the card\n        image is longer than 80 columns, assume it contains ``CONTINUE``\n        card(s).\n\n        Parameters\n        ----------\n        image : str or bytes\n            The card image as a string or bytes. If bytes, it is assumed to be\n            ASCII-encoded.\n        \"\"\"\n        if isinstance(image, bytes):\n            image = image.decode('ascii')\n\n        card = cls()\n        card._image = _pad(image)\n        card._verified = False\n        return card",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.2065934429410845
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_header_fromstring.py",
        "file_text": "from astropy.io.fits import Header\n\n# Test with str input (existing behavior)\nheader_str = \"SIMPLE  =                    T / file does conform to FITS standard\"\nheader = Header.fromstring(header_str)\nprint(\"Header from str:\", header)\n\n# Test with bytes input (new behavior)\nheader_bytes = b\"SIMPLE  =                    T / file does conform to FITS standard\"\nheader = Header.fromstring(header_bytes)\nprint(\"Header from bytes:\", header)"
      },
      "phase": "verification",
      "step_indices": [
        9
      ],
      "id": "9:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.7960261120460927
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_header_fromstring.py"
      ],
      "phase": "verification",
      "step_indices": [
        10
      ],
      "id": "10:python"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "11:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.21954614599235356,
        0.22521860687993467
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        12,
        14
      ],
      "id": "12:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11676213494502008
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_header_fromstring.py"
      ],
      "phase": "general",
      "step_indices": [
        13
      ],
      "id": "13:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:grep",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:grep",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:grep",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:grep",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\ncreate",
      "target": "10:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:python",
      "target": "11:empty action",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:empty action",
      "target": "12:submit",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:submit",
      "target": "13:rm",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:rm",
      "target": "12:submit",
      "key": 0
    }
  ]
}