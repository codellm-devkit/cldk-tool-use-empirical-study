{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "sphinx-doc__sphinx-10673",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 3,
    "patch_difficulty": "medium",
    "files_change": 4
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19048219197429717
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2034576281439513
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/directives"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19384203501977026
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/environment"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20865777414292097
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/environment/adapters/toctree.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1757678370922804
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/environment/adapters/toctree.py",
        "view_range": [
          41,
          259
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20241140690632164
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/sphinx/environment/adapters/toctree.py",
        "old_str": "                except KeyError:\n                    # this is raised if the included file does not exist\n                    if excluded(self.env.doc2path(ref, False)):\n                        message = __('toctree contains reference to excluded document %r')\n                    elif not included(self.env.doc2path(ref, False)):\n                        message = __('toctree contains reference to non-included document %r')\n                    else:\n                        message = __('toctree contains reference to nonexisting document %r')\n\n                    logger.warning(message, ref, location=toctreenode)",
        "new_str": "                except KeyError:\n                    # this is raised if the included file does not exist\n                    if ref in ['genindex', 'modindex', 'search']:\n                        continue\n                    if excluded(self.env.doc2path(ref, False)):\n                        message = __('toctree contains reference to excluded document %r')\n                    elif not included(self.env.doc2path(ref, False)):\n                        message = __('toctree contains reference to non-included document %r')\n                    else:\n                        message = __('toctree contains reference to nonexisting document %r')\n\n                    logger.warning(message, ref, location=toctreenode)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.18044694396667182
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/doc/index.rst",
        "file_text": ".. toctree::\n   :maxdepth: 1\n   :caption: Indices and tables\n\n   genindex\n   modindex\n   search"
      },
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\ncreate"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17680271994322538
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/doc/index.rst"
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.191227818839252
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/doc/index.rst",
        "old_str": "   man/index\n   glossary\n   changes\n   examples",
        "new_str": "   man/index\n   glossary\n   changes\n   examples\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Indices and tables\n\n   genindex\n   modindex\n   search",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "cd",
      "execution_time": [
        10.442704658024013,
        0.7254411600297317,
        0.7339513470651582
      ],
      "state": {
        "working_dir": "/testbed/doc"
      },
      "args": [
        "/testbed/doc"
      ],
      "phase": "general",
      "step_indices": [
        9,
        11,
        15
      ],
      "id": "9:cd"
    },
    {
      "label": "make",
      "execution_time": [
        10.442704658024013,
        0.7254411600297317,
        0.7339513470651582
      ],
      "state": {
        "working_dir": "/testbed/doc"
      },
      "args": [
        "html"
      ],
      "phase": "general",
      "step_indices": [
        9,
        11,
        15
      ],
      "id": "10:make"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.22479155007749796
      ],
      "state": {
        "working_dir": "/testbed/doc"
      },
      "args": {
        "path": "/testbed/sphinx/environment/adapters/toctree.py",
        "old_str": "            for (title, ref) in refs:\n                try:\n                    refdoc = None\n                    if url_re.match(ref):\n                        if title is None:\n                            title = ref\n                        reference = nodes.reference('', '', internal=False,\n                                                    refuri=ref, anchorname='',\n                                                    *[nodes.Text(title)])\n                        para = addnodes.compact_paragraph('', '', reference)\n                        item = nodes.list_item('', para)\n                        toc = nodes.bullet_list('', item)\n                    elif ref == 'self':\n                        # 'self' refers to the document from which this\n                        # toctree originates\n                        ref = toctreenode['parent']\n                        if not title:\n                            title = clean_astext(self.env.titles[ref])\n                        reference = nodes.reference('', '', internal=True,\n                                                    refuri=ref,\n                                                    anchorname='',\n                                                    *[nodes.Text(title)])\n                        para = addnodes.compact_paragraph('', '', reference)\n                        item = nodes.list_item('', para)\n                        # don't show subitems\n                        toc = nodes.bullet_list('', item)\n                    else:\n                        if ref in parents:\n                            logger.warning(__('circular toctree references '\n                                              'detected, ignoring: %s <- %s'),\n                                           ref, ' <- '.join(parents),\n                                           location=ref, type='toc', subtype='circular')\n                            continue\n                        refdoc = ref\n                        toc = self.env.tocs[ref].deepcopy()\n                        maxdepth = self.env.metadata[ref].get('tocdepth', 0)\n                        if ref not in toctree_ancestors or (prune and maxdepth > 0):\n                            self._toctree_prune(toc, 2, maxdepth, collapse)\n                        process_only_nodes(toc, builder.tags)\n                        if title and toc.children and len(toc.children) == 1:\n                            child = toc.children[0]\n                            for refnode in child.findall(nodes.reference):\n                                if refnode['refuri'] == ref and \\\n                                   not refnode['anchorname']:\n                                    refnode.children = [nodes.Text(title)]\n                    if not toc.children:\n                        # empty toc means: no titles will show up in the toctree\n                        logger.warning(__('toctree contains reference to document %r that '\n                                          'doesn\\'t have a title: no link will be generated'),\n                                       ref, location=toctreenode)",
        "new_str": "            for (title, ref) in refs:\n                if ref in ['genindex', 'modindex', 'search']:\n                    continue\n                try:\n                    refdoc = None\n                    if url_re.match(ref):\n                        if title is None:\n                            title = ref\n                        reference = nodes.reference('', '', internal=False,\n                                                    refuri=ref, anchorname='',\n                                                    *[nodes.Text(title)])\n                        para = addnodes.compact_paragraph('', '', reference)\n                        item = nodes.list_item('', para)\n                        toc = nodes.bullet_list('', item)\n                    elif ref == 'self':\n                        # 'self' refers to the document from which this\n                        # toctree originates\n                        ref = toctreenode['parent']\n                        if not title:\n                            title = clean_astext(self.env.titles[ref])\n                        reference = nodes.reference('', '', internal=True,\n                                                    refuri=ref,\n                                                    anchorname='',\n                                                    *[nodes.Text(title)])\n                        para = addnodes.compact_paragraph('', '', reference)\n                        item = nodes.list_item('', para)\n                        # don't show subitems\n                        toc = nodes.bullet_list('', item)\n                    else:\n                        if ref in parents:\n                            logger.warning(__('circular toctree references '\n                                              'detected, ignoring: %s <- %s'),\n                                           ref, ' <- '.join(parents),\n                                           location=ref, type='toc', subtype='circular')\n                            continue\n                        refdoc = ref\n                        toc = self.env.tocs[ref].deepcopy()\n                        maxdepth = self.env.metadata[ref].get('tocdepth', 0)\n                        if ref not in toctree_ancestors or (prune and maxdepth > 0):\n                            self._toctree_prune(toc, 2, maxdepth, collapse)\n                        process_only_nodes(toc, builder.tags)\n                        if title and toc.children and len(toc.children) == 1:\n                            child = toc.children[0]\n                            for refnode in child.findall(nodes.reference):\n                                if refnode['refuri'] == ref and \\\n                                   not refnode['anchorname']:\n                                    refnode.children = [nodes.Text(title)]\n                    if not toc.children:\n                        # empty toc means: no titles will show up in the toctree\n                        logger.warning(__('toctree contains reference to document %r that '\n                                          'doesn\\'t have a title: no link will be generated'),\n                                       ref, location=toctreenode)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "grep",
      "execution_time": [
        0.14970900607295334
      ],
      "state": {
        "working_dir": "/testbed/doc"
      },
      "args": [
        "/testbed/sphinx"
      ],
      "phase": "general",
      "step_indices": [
        12
      ],
      "id": "12:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19090090412646532
      ],
      "state": {
        "working_dir": "/testbed/doc"
      },
      "args": {
        "path": "/testbed/sphinx/directives/other.py"
      },
      "phase": "localization",
      "step_indices": [
        13
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1886223889887333
      ],
      "state": {
        "working_dir": "/testbed/doc"
      },
      "args": {
        "path": "/testbed/sphinx/directives/other.py",
        "old_str": "                # absolutize filenames\n                docname = docname_join(self.env.docname, docname)\n                if url_re.match(ref) or ref == 'self':\n                    toctree['entries'].append((title, ref))\n                elif docname not in self.env.found_docs:\n                    if excluded(self.env.doc2path(docname, False)):\n                        message = __('toctree contains reference to excluded document %r')\n                        subtype = 'excluded'\n                    else:\n                        message = __('toctree contains reference to nonexisting document %r')\n                        subtype = 'not_readable'\n\n                    logger.warning(message, docname, type='toc', subtype=subtype,\n                                   location=toctree)\n                    self.env.note_reread()",
        "new_str": "                # absolutize filenames\n                docname = docname_join(self.env.docname, docname)\n                if docname in ['genindex', 'modindex', 'search']:\n                    toctree['entries'].append((title, docname))\n                    toctree['includefiles'].append(docname)\n                    continue\n                if url_re.match(ref) or ref == 'self':\n                    toctree['entries'].append((title, ref))\n                elif docname not in self.env.found_docs:\n                    if excluded(self.env.doc2path(docname, False)):\n                        message = __('toctree contains reference to excluded document %r')\n                        subtype = 'excluded'\n                    else:\n                        message = __('toctree contains reference to nonexisting document %r')\n                        subtype = 'not_readable'\n\n                    logger.warning(message, docname, type='toc', subtype=subtype,\n                                   location=toctree)\n                    self.env.note_reread()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        16
      ],
      "id": "15:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.21677693515084684,
        0.2090881410986185
      ],
      "state": {
        "working_dir": "/testbed/doc"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        17,
        19
      ],
      "id": "16:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "6:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\ncreate",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:cd",
      "target": "10:make",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:cd",
      "target": "10:make",
      "key": 1
    },
    {
      "label": "15",
      "type": "exec",
      "source": "9:cd",
      "target": "10:make",
      "key": 2
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:make",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:make",
      "target": "12:grep",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "10:make",
      "target": "15:empty action",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "9:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:grep",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "9:cd",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "15:empty action",
      "target": "16:submit",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "15:empty action",
      "target": "16:submit",
      "key": 1
    },
    {
      "label": "18",
      "type": "exec",
      "source": "16:submit",
      "target": "15:empty action",
      "key": 0
    }
  ]
}