{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-16950",
    "difficulty": "15 min - 1 hour"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2130836290307343
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        1
      ],
      "id": "1:empty action"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18673794600181282
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/tests/admin_inlines"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18816171889193356
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/tests/admin_inlines/models.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.3448658939450979
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "4:grep"
    },
    {
      "label": "find",
      "execution_time": [
        0.17535909498110414
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed",
        "bugapp",
        "d"
      ],
      "phase": "general",
      "step_indices": [
        5
      ],
      "id": "5:find"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.19421172281727195
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_bug.py",
        "file_text": "import uuid\nfrom django.db import models\nfrom django.contrib import admin\n\n# Define the models as described in the PR\nclass UUIDModel(models.Model):\n    pkid = models.BigAutoField(primary_key=True, editable=False)\n    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n\n    class Meta:\n        abstract = True\n\nclass Thing(UUIDModel):\n    name = models.CharField(max_length=191)\n\nclass SubThing(models.Model):\n    name = models.CharField(max_length=191)\n    thing = models.ForeignKey(\n        'Thing',\n        to_field='id',\n        on_delete=models.CASCADE,\n        related_name='subthings',\n    )\n\n# Define the admin as described in the PR\nclass SubThingInline(admin.StackedInline):\n    model = SubThing\n\n@admin.register(Thing)\nclass ThingAdmin(admin.ModelAdmin):\n    list_display = ('name',)\n    ordering = ('pkid',)\n    inlines = (SubThingInline,)\n\n# Simulate the admin save operation\ndef simulate_admin_save():\n    from django.test import RequestFactory\n    from django.contrib.admin.sites import AdminSite\n\n    # Create a Thing instance\n    thing = Thing(name=\"Test Thing\")\n    thing.save()\n\n    # Create a SubThing instance\n    subthing = SubThing(name=\"Test SubThing\", thing=thing)\n    subthing.save()\n\n    # Simulate admin save\n    admin_site = AdminSite()\n    request = RequestFactory().get('/admin/')\n    thing_admin = ThingAdmin(Thing, admin_site)\n\n    # Simulate saving the Thing with SubThing inline\n    form_data = {\n        'name': 'Updated Thing',\n        'subthings-TOTAL_FORMS': '1',\n        'subthings-INITIAL_FORMS': '1',\n        'subthings-MIN_NUM_FORMS': '0',\n        'subthings-MAX_NUM_FORMS': '1000',\n        'subthings-0-name': 'Updated SubThing',\n        'subthings-0-id': str(subthing.id),\n        'subthings-0-thing': str(thing.id),\n    }\n\n    form = thing_admin.get_form(request, thing)\n    form = form(data=form_data, instance=thing, files={})\n    if form.is_valid():\n        thing_admin.save_model(request, thing, form, change=True)\n        print(\"Save successful!\")\n    else:\n        print(\"Form errors:\", form.errors)\n\nif __name__ == \"__main__\":\n    simulate_admin_save()"
      },
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": [
        0.32318463653791696,
        0.21917345095425844,
        0.2125084635335952,
        0.20704683102667332,
        0.0893672660458833
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        7,
        9,
        11,
        13,
        14
      ],
      "id": "7:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.32318463653791696,
        0.21917345095425844,
        0.2125084635335952,
        0.20704683102667332
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_bug.py"
      ],
      "phase": "verification",
      "step_indices": [
        7,
        9,
        11,
        13
      ],
      "id": "8:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.23090771306306124
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_bug.py",
        "old_str": "import uuid\nfrom django.db import models\nfrom django.contrib import admin\n\n# Define the models as described in the PR\nclass UUIDModel(models.Model):\n    pkid = models.BigAutoField(primary_key=True, editable=False)\n    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n\n    class Meta:\n        abstract = True\n\nclass Thing(UUIDModel):\n    name = models.CharField(max_length=191)\n\nclass SubThing(models.Model):\n    name = models.CharField(max_length=191)\n    thing = models.ForeignKey(\n        'Thing',\n        to_field='id',\n        on_delete=models.CASCADE,\n        related_name='subthings',\n    )\n\n# Define the admin as described in the PR\nclass SubThingInline(admin.StackedInline):\n    model = SubThing\n\n@admin.register(Thing)\nclass ThingAdmin(admin.ModelAdmin):\n    list_display = ('name',)\n    ordering = ('pkid',)\n    inlines = (SubThingInline,)\n\n# Simulate the admin save operation\ndef simulate_admin_save():\n    from django.test import RequestFactory\n    from django.contrib.admin.sites import AdminSite\n\n    # Create a Thing instance\n    thing = Thing(name=\"Test Thing\")\n    thing.save()\n\n    # Create a SubThing instance\n    subthing = SubThing(name=\"Test SubThing\", thing=thing)\n    subthing.save()\n\n    # Simulate admin save\n    admin_site = AdminSite()\n    request = RequestFactory().get('/admin/')\n    thing_admin = ThingAdmin(Thing, admin_site)\n\n    # Simulate saving the Thing with SubThing inline\n    form_data = {\n        'name': 'Updated Thing',\n        'subthings-TOTAL_FORMS': '1',\n        'subthings-INITIAL_FORMS': '1',\n        'subthings-MIN_NUM_FORMS': '0',\n        'subthings-MAX_NUM_FORMS': '1000',\n        'subthings-0-name': 'Updated SubThing',\n        'subthings-0-id': str(subthing.id),\n        'subthings-0-thing': str(thing.id),\n    }\n\n    form = thing_admin.get_form(request, thing)\n    form = form(data=form_data, instance=thing, files={})\n    if form.is_valid():\n        thing_admin.save_model(request, thing, form, change=True)\n        print(\"Save successful!\")\n    else:\n        print(\"Form errors:\", form.errors)\n\nif __name__ == \"__main__\":\n    simulate_admin_save()",
        "new_str": "import os\nimport uuid\nimport django\nfrom django.db import models\nfrom django.contrib import admin\nfrom django.conf import settings\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        INSTALLED_APPS=[\n            'django.contrib.admin',\n            'django.contrib.auth',\n            'django.contrib.contenttypes',\n        ],\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        SECRET_KEY='secret',\n    )\n    django.setup()\n\n# Define the models as described in the PR\nclass UUIDModel(models.Model):\n    pkid = models.BigAutoField(primary_key=True, editable=False)\n    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n\n    class Meta:\n        abstract = True\n\nclass Thing(UUIDModel):\n    name = models.CharField(max_length=191)\n\nclass SubThing(models.Model):\n    name = models.CharField(max_length=191)\n    thing = models.ForeignKey(\n        'Thing',\n        to_field='id',\n        on_delete=models.CASCADE,\n        related_name='subthings',\n    )\n\n# Define the admin as described in the PR\nclass SubThingInline(admin.StackedInline):\n    model = SubThing\n\n@admin.register(Thing)\nclass ThingAdmin(admin.ModelAdmin):\n    list_display = ('name',)\n    ordering = ('pkid',)\n    inlines = (SubThingInline,)\n\n# Simulate the admin save operation\ndef simulate_admin_save():\n    from django.test import RequestFactory\n    from django.contrib.admin.sites import AdminSite\n\n    # Create a Thing instance\n    thing = Thing(name=\"Test Thing\")\n    thing.save()\n\n    # Create a SubThing instance\n    subthing = SubThing(name=\"Test SubThing\", thing=thing)\n    subthing.save()\n\n    # Simulate admin save\n    admin_site = AdminSite()\n    request = RequestFactory().get('/admin/')\n    thing_admin = ThingAdmin(Thing, admin_site)\n\n    # Simulate saving the Thing with SubThing inline\n    form_data = {\n        'name': 'Updated Thing',\n        'subthings-TOTAL_FORMS': '1',\n        'subthings-INITIAL_FORMS': '1',\n        'subthings-MIN_NUM_FORMS': '0',\n        'subthings-MAX_NUM_FORMS': '1000',\n        'subthings-0-name': 'Updated SubThing',\n        'subthings-0-id': str(subthing.id),\n        'subthings-0-thing': str(thing.id),\n    }\n\n    form = thing_admin.get_form(request, thing)\n    form = form(data=form_data, instance=thing, files={})\n    if form.is_valid():\n        thing_admin.save_model(request, thing, form, change=True)\n        print(\"Save successful!\")\n    else:\n        print(\"Form errors:\", form.errors)\n\nif __name__ == \"__main__\":\n    simulate_admin_save()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21764719509519637
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_bug.py",
        "old_str": "class UUIDModel(models.Model):\n    pkid = models.BigAutoField(primary_key=True, editable=False)\n    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n\n    class Meta:\n        abstract = True\n\nclass Thing(UUIDModel):\n    name = models.CharField(max_length=191)\n\nclass SubThing(models.Model):\n    name = models.CharField(max_length=191)\n    thing = models.ForeignKey(\n        'Thing',\n        to_field='id',\n        on_delete=models.CASCADE,\n        related_name='subthings',\n    )",
        "new_str": "class UUIDModel(models.Model):\n    pkid = models.BigAutoField(primary_key=True, editable=False)\n    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n\n    class Meta:\n        abstract = True\n        app_label = 'bugapp'\n\nclass Thing(UUIDModel):\n    name = models.CharField(max_length=191)\n\n    class Meta:\n        app_label = 'bugapp'\n\nclass SubThing(models.Model):\n    name = models.CharField(max_length=191)\n    thing = models.ForeignKey(\n        'Thing',\n        to_field='id',\n        on_delete=models.CASCADE,\n        related_name='subthings',\n    )\n\n    class Meta:\n        app_label = 'bugapp'",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18981511611491442
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_bug.py",
        "old_str": "if __name__ == \"__main__\":\n    simulate_admin_save()",
        "new_str": "if __name__ == \"__main__\":\n    from django.db import connection\n    with connection.schema_editor() as schema_editor:\n        schema_editor.create_model(Thing)\n        schema_editor.create_model(SubThing)\n    simulate_admin_save()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": [
        0.0893672660458833
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "verification",
      "step_indices": [
        14
      ],
      "id": "12:python"
    },
    {
      "label": "submit",
      "execution_time": [
        0.26547446893528104,
        0.2694417340680957
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        16,
        20
      ],
      "id": "13:submit"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18835270893760026
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/tests/admin_inlines/admin.py"
      },
      "phase": "localization",
      "step_indices": [
        17
      ],
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19207164691761136
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/tests/admin_inlines/admin.py",
        "old_str": "site4.register(SomeParentModel, inlines=[ChildHiddenFieldOnSingleLineStackedInline])",
        "new_str": "site4.register(SomeParentModel, inlines=[ChildHiddenFieldOnSingleLineStackedInline])\n\n\n# Admin for Thing and SubThing models\nclass SubThingInline(admin.StackedInline):\n    model = SubThing\n\n@admin.register(Thing)\nclass ThingAdmin(admin.ModelAdmin):\n    list_display = ('name',)\n    ordering = ('pkid',)\n    inlines = (SubThingInline,)\n\n    def save_model(self, request, obj, form, change):\n        # Ensure the UUIDField default value is applied if missing\n        if not obj.id:\n            obj.id = uuid.uuid4()\n        super().save_model(request, obj, form, change)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11949771200306714
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_bug.py"
      ],
      "phase": "general",
      "step_indices": [
        19
      ],
      "id": "16:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:empty action",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:empty action",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "1:empty action",
      "target": "13:submit",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:grep",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:grep",
      "target": "5:find",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:find",
      "target": "6:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\ncreate",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 2
    },
    {
      "label": "13",
      "type": "exec",
      "source": "7:cd",
      "target": "8:python",
      "key": 3
    },
    {
      "label": "14",
      "type": "exec",
      "source": "7:cd",
      "target": "12:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:python",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "8:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "8:python",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "7:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "12:python",
      "target": "1:empty action",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "13:submit",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:rm",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "16:rm",
      "target": "13:submit",
      "key": 0
    }
  ]
}