{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "pytest-dev__pytest-5262",
    "difficulty": "<15 min fix"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19089844496920705
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19601741689257324
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21419456601142883
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/capture.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17407190799713135
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/capture.py",
        "view_range": [
          425,
          453
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1973384718876332
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/capture.py",
        "old_str": "class EncodedFile(object):\n    errors = \"strict\"  # possibly needed by py3 code (issue555)\n\n    def __init__(self, buffer, encoding):\n        self.buffer = buffer\n        self.encoding = encoding\n\n    def write(self, obj):\n        if isinstance(obj, six.text_type):\n            obj = obj.encode(self.encoding, \"replace\")\n        elif _PY3:\n            raise TypeError(\n                \"write() argument must be str, not {}\".format(type(obj).__name__)\n            )\n        self.buffer.write(obj)\n\n    def writelines(self, linelist):\n        data = \"\".join(linelist)\n        self.write(data)\n\n    @property\n    def name(self):\n        \"\"\"Ensure that file.name is a string.\"\"\"\n        return repr(self.buffer)\n\n    def __getattr__(self, name):\n        return getattr(object.__getattribute__(self, \"buffer\"), name)",
        "new_str": "class EncodedFile(object):\n    errors = \"strict\"  # possibly needed by py3 code (issue555)\n\n    def __init__(self, buffer, encoding):\n        self.buffer = buffer\n        self.encoding = encoding\n\n    def write(self, obj):\n        if isinstance(obj, six.text_type):\n            obj = obj.encode(self.encoding, \"replace\")\n        elif _PY3:\n            raise TypeError(\n                \"write() argument must be str, not {}\".format(type(obj).__name__)\n            )\n        self.buffer.write(obj)\n\n    def writelines(self, linelist):\n        data = \"\".join(linelist)\n        self.write(data)\n\n    @property\n    def name(self):\n        \"\"\"Ensure that file.name is a string.\"\"\"\n        return repr(self.buffer)\n\n    @property\n    def mode(self):\n        \"\"\"Return the mode of the underlying buffer without 'b' (binary) flag.\"\"\"\n        buffer_mode = getattr(self.buffer, \"mode\", \"\")\n        return buffer_mode.replace(\"b\", \"\") if buffer_mode else buffer_mode\n\n    def __getattr__(self, name):\n        return getattr(object.__getattribute__(self, \"buffer\"), name)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": [
        0.14616009197197855
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_encodedfile.py"
      ],
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1974816438741982
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_encodedfile.py",
        "file_text": "# test_encodedfile.py\nimport io\nfrom _pytest.capture import EncodedFile\n\n# Create a buffer with binary mode\nbuffer = io.BytesIO()\nbuffer.mode = \"rb+\"  # Simulate the underlying buffer's mode\n\n# Create an EncodedFile instance\nencoded_file = EncodedFile(buffer, \"utf-8\")\n\n# Check the mode property\nprint(\"EncodedFile.mode:\", encoded_file.mode)  # Should print \"r+\" (no \"b\")\n\n# Test writing a string (should work)\nencoded_file.write(\"test string\")\n\n# Test writing bytes (should raise TypeError)\ntry:\n    encoded_file.write(b\"test bytes\")\nexcept TypeError as e:\n    print(\"Expected error:\", e)"
      },
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.2896308561321348
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_encodedfile.py"
      ],
      "phase": "verification",
      "step_indices": [
        7
      ],
      "id": "7:python"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        8
      ],
      "id": "8:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.19199146493338048,
        0.1946040610782802
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        9,
        12
      ],
      "id": "9:submit"
    },
    {
      "label": "str_replace_editor\nundo_edit",
      "execution_time": [
        0.18375964113511145
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_encodedfile.py"
      },
      "phase": "general",
      "step_indices": [
        10
      ],
      "id": "10:str_replace_editor\nundo_edit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11894842493347824
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_encodedfile.py"
      ],
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "11:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\ncreate",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:python",
      "target": "8:empty action",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:empty action",
      "target": "9:submit",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:submit",
      "target": "10:str_replace_editor\nundo_edit",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:str_replace_editor\nundo_edit",
      "target": "11:rm",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:rm",
      "target": "9:submit",
      "key": 0
    }
  ]
}