{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "django__django-16485",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19469330017454922
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20073297317139804
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/template/defaultfilters.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1868608130607754
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/template/defaultfilters.py",
        "view_range": [
          95,
          206
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19219076307490468
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/template/defaultfilters.py",
        "old_str": "    units = len(tupl[1])\n    units += -tupl[2] if m else tupl[2]\n    prec = abs(p) + units + 1\n\n    # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n    # and `exponent` from Decimal.as_tuple() directly.\n    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))",
        "new_str": "    units = len(tupl[1])\n    units += -tupl[2] if m else tupl[2]\n    prec = abs(p) + units + 1\n    # Ensure prec is at least 1 to avoid ValueError\n    prec = max(prec, 1)\n\n    # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n    # and `exponent` from Decimal.as_tuple() directly.\n    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "echo",
      "execution_time": [
        0.1471965400269255
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/reproduce_floatformat.py"
      ],
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "4:echo"
    },
    {
      "label": "python",
      "execution_time": [
        0.1471965400269255
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_floatformat.py"
      ],
      "phase": "verification",
      "step_indices": [
        4
      ],
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.20033322111703455
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_floatformat.py",
        "file_text": "from decimal import Decimal, ROUND_HALF_UP, Context, InvalidOperation\n\ndef floatformat(text, arg=-1):\n    \"\"\"\n    Simplified version of Django's floatformat filter for testing.\n    \"\"\"\n    force_grouping = False\n    use_l10n = False  # Disable localization for simplicity\n    if isinstance(arg, str):\n        last_char = arg[-1]\n        if arg[-2:] in {\"gu\", \"ug\"}:\n            force_grouping = True\n            use_l10n = False\n            arg = arg[:-2] or -1\n        elif last_char == \"g\":\n            force_grouping = True\n            arg = arg[:-1] or -1\n        elif last_char == \"u\":\n            use_l10n = False\n            arg = arg[:-1] or -1\n    try:\n        input_val = str(text)\n        d = Decimal(input_val)\n    except InvalidOperation:\n        try:\n            d = Decimal(str(float(text)))\n        except (ValueError, InvalidOperation, TypeError):\n            return \"\"\n    try:\n        p = int(arg)\n    except ValueError:\n        return input_val\n\n    try:\n        m = int(d) - d\n    except (ValueError, OverflowError, InvalidOperation):\n        return input_val\n\n    if not m and p < 0:\n        return \"%d\" % (int(d))\n\n    exp = Decimal(1).scaleb(-abs(p))\n    tupl = d.as_tuple()\n    units = len(tupl[1])\n    units += -tupl[2] if m else tupl[2]\n    prec = abs(p) + units + 1\n    prec = max(prec, 1)  # Ensure prec is at least 1\n\n    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))\n    sign, digits, exponent = rounded_d.as_tuple()\n    digits = [str(digit) for digit in reversed(digits)]\n    while len(digits) <= abs(exponent):\n        digits.append(\"0\")\n    digits.insert(-exponent, \".\")\n    if sign and rounded_d:\n        digits.append(\"-\")\n    return \"\".join(reversed(digits))\n\n# Test cases\nprint(floatformat(\"0.00\", 0))  # Should print \"0\"\nprint(floatformat(Decimal(\"0.00\"), 0))  # Should print \"0\""
      },
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.15729490900412202
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_floatformat.py"
      ],
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "7:python"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        7
      ],
      "id": "8:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.2485082841012627,
        0.24254201189614832
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        8,
        10
      ],
      "id": "9:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11894616391509771
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_floatformat.py"
      ],
      "phase": "general",
      "step_indices": [
        9
      ],
      "id": "10:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:echo",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:echo",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\ncreate",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:python",
      "target": "8:empty action",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:empty action",
      "target": "9:submit",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:submit",
      "target": "10:rm",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:rm",
      "target": "9:submit",
      "key": 0
    }
  ]
}