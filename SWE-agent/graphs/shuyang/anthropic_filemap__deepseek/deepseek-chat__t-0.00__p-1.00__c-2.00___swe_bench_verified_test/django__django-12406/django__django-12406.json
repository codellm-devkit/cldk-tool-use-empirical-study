{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-12406",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 2,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2080956851132214
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21883642603643239
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/widgets.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20166131015866995
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/widgets.py",
        "view_range": [
          600,
          650
        ]
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20054364297538996
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/widgets.py",
        "view_range": [
          650,
          700
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19370128097943962
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/widgets.py",
        "view_range": [
          700,
          750
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20845499401912093
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/widgets.py",
        "view_range": [
          750,
          800
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20109142805449665
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/widgets.py",
        "old_str": "class RadioSelect(ChoiceWidget):\n    input_type = 'radio'\n    template_name = 'django/forms/widgets/radio.html'\n    option_template_name = 'django/forms/widgets/radio_option.html'",
        "new_str": "class RadioSelect(ChoiceWidget):\n    input_type = 'radio'\n    template_name = 'django/forms/widgets/radio.html'\n    option_template_name = 'django/forms/widgets/radio_option.html'\n\n    def __init__(self, attrs=None, choices=()):\n        super().__init__(attrs, choices)\n        self.include_blank = getattr(self, 'include_blank', True)\n\n    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n        if value == '' and not self.include_blank:\n            return None\n        return super().create_option(name, value, label, selected, index, subindex, attrs)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.20663350098766387
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "file_text": "from django import forms\nfrom django.db import models\nfrom django.forms.widgets import RadioSelect\n\nclass BatchData(models.Model):\n    name = models.CharField(max_length=100)\n\nclass TestRun(models.Model):\n    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)\n\nclass TestRunForm(forms.ModelForm):\n    class Meta:\n        model = TestRun\n        fields = ['data_file']\n        widgets = {'data_file': RadioSelect(include_blank=False)}\n\n# Create some test data\nbatch1 = BatchData.objects.create(name=\"First Data File\")\nbatch2 = BatchData.objects.create(name=\"Second Data File\")\n\n# Render the form\nform = TestRunForm()\nprint(form.as_p())"
      },
      "phase": "verification",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": [
        0.2955861735390499,
        0.19671608053613454,
        0.22161399945616722,
        0.2134743545902893,
        0.2185254079522565,
        0.20438444800674915,
        0.18135685147717595,
        0.21316303801722825,
        0.18739718000870198,
        0.19802310189697891,
        0.23753762897104025,
        0.19260143546853215
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        23,
        25,
        27,
        29,
        31
      ],
      "id": "8:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.2955861735390499,
        0.19671608053613454,
        0.22161399945616722,
        0.2134743545902893,
        0.2185254079522565,
        0.20438444800674915,
        0.18135685147717595,
        0.21316303801722825,
        0.18739718000870198,
        0.19802310189697891,
        0.23753762897104025,
        0.19260143546853215
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_radioselect.py"
      ],
      "phase": "verification",
      "step_indices": [
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        23,
        25,
        27,
        29,
        31
      ],
      "id": "9:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19958838797174394
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "from django import forms\nfrom django.db import models\nfrom django.forms.widgets import RadioSelect\n\nclass BatchData(models.Model):\n    name = models.CharField(max_length=100)\n\nclass TestRun(models.Model):\n    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)\n\nclass TestRunForm(forms.ModelForm):\n    class Meta:\n        model = TestRun\n        fields = ['data_file']\n        widgets = {'data_file': RadioSelect(include_blank=False)}\n\n# Create some test data\nbatch1 = BatchData.objects.create(name=\"First Data File\")\nbatch2 = BatchData.objects.create(name=\"Second Data File\")\n\n# Render the form\nform = TestRunForm()\nprint(form.as_p())",
        "new_str": "import os\nimport django\nfrom django import forms\nfrom django.db import models\nfrom django.forms.widgets import RadioSelect\n\n# Minimal Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\ndjango.setup()\n\nclass BatchData(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        app_label = 'test_app'\n\nclass TestRun(models.Model):\n    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)\n\n    class Meta:\n        app_label = 'test_app'\n\nclass TestRunForm(forms.ModelForm):\n    class Meta:\n        model = TestRun\n        fields = ['data_file']\n        widgets = {'data_file': RadioSelect(include_blank=False)}\n\n# Create some test data\nbatch1 = BatchData.objects.create(name=\"First Data File\")\nbatch2 = BatchData.objects.create(name=\"Second Data File\")\n\n# Render the form\nform = TestRunForm()\nprint(form.as_p())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19897396699525416
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Minimal Django settings\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\ndjango.setup()",
        "new_str": "# Minimal Django settings\nfrom django.conf import settings\nsettings.configure(\n    SECRET_KEY='dummy',\n    INSTALLED_APPS=[],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\ndjango.setup()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20574150211177766
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/forms/widgets.py",
        "old_str": "class RadioSelect(ChoiceWidget):\n    input_type = 'radio'\n    template_name = 'django/forms/widgets/radio.html'\n    option_template_name = 'django/forms/widgets/radio_option.html'\n\n    def __init__(self, attrs=None, choices=()):\n        super().__init__(attrs, choices)\n        self.include_blank = getattr(self, 'include_blank', True)\n\n    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n        if value == '' and not self.include_blank:\n            return None\n        return super().create_option(name, value, label, selected, index, subindex, attrs)",
        "new_str": "class RadioSelect(ChoiceWidget):\n    input_type = 'radio'\n    template_name = 'django/forms/widgets/radio.html'\n    option_template_name = 'django/forms/widgets/radio_option.html'\n\n    def __init__(self, attrs=None, choices=(), include_blank=True):\n        super().__init__(attrs, choices)\n        self.include_blank = include_blank\n\n    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n        if value == '' and not self.include_blank:\n            return None\n        return super().create_option(name, value, label, selected, index, subindex, attrs)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1935195920523256
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Create some test data\nbatch1 = BatchData.objects.create(name=\"First Data File\")\nbatch2 = BatchData.objects.create(name=\"Second Data File\")\n\n# Render the form\nform = TestRunForm()\nprint(form.as_p())",
        "new_str": "# Create database tables\nfrom django.db import connection\nconnection.creation.create_test_db()\n\n# Create some test data\nbatch1 = BatchData.objects.create(name=\"First Data File\")\nbatch2 = BatchData.objects.create(name=\"Second Data File\")\n\n# Render the form\nform = TestRunForm()\nprint(form.as_p())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        15
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18240757891908288
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Create database tables\nfrom django.db import connection\nconnection.creation.create_test_db()\n\n# Create some test data\nbatch1 = BatchData.objects.create(name=\"First Data File\")\nbatch2 = BatchData.objects.create(name=\"Second Data File\")\n\n# Render the form\nform = TestRunForm()\nprint(form.as_p())",
        "new_str": "# Create database tables\nfrom django.db import connection\nfrom django.core.management import call_command\n\n# Create migrations and apply them\ncall_command('makemigrations', 'test_app', interactive=False)\ncall_command('migrate', interactive=False)\n\n# Create some test data\nbatch1 = BatchData.objects.create(name=\"First Data File\")\nbatch2 = BatchData.objects.create(name=\"Second Data File\")\n\n# Render the form\nform = TestRunForm()\nprint(form.as_p())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18257397413253784
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Minimal Django settings\nfrom django.conf import settings\nsettings.configure(\n    SECRET_KEY='dummy',\n    INSTALLED_APPS=[],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\ndjango.setup()",
        "new_str": "# Minimal Django settings\nfrom django.conf import settings\nsettings.configure(\n    SECRET_KEY='dummy',\n    INSTALLED_APPS=['test_app'],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\ndjango.setup()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19230591994710267
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Minimal Django settings\nfrom django.conf import settings\nsettings.configure(\n    SECRET_KEY='dummy',\n    INSTALLED_APPS=['test_app'],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\ndjango.setup()",
        "new_str": "# Minimal Django settings\nfrom django.conf import settings\nsettings.configure(\n    SECRET_KEY='dummy',\n    INSTALLED_APPS=[],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\ndjango.setup()\n\n# Register models dynamically\nfrom django.apps import apps\nfrom django.db.models import Model\n\nclass TestAppConfig:\n    name = 'test_app'\n    label = 'test_app'\n\napps.register_config(TestAppConfig)\napps.register_model('test_app', 'batchdata', BatchData)\napps.register_model('test_app', 'testrun', TestRun)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20269790687598288
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Register models dynamically\nfrom django.apps import apps\nfrom django.db.models import Model\n\nclass TestAppConfig:\n    name = 'test_app'\n    label = 'test_app'\n\napps.register_config(TestAppConfig)\napps.register_model('test_app', 'batchdata', BatchData)\napps.register_model('test_app', 'testrun', TestRun)\n\nclass BatchData(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        app_label = 'test_app'\n\nclass TestRun(models.Model):\n    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)\n\n    class Meta:\n        app_label = 'test_app'",
        "new_str": "class BatchData(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        app_label = 'test_app'\n\nclass TestRun(models.Model):\n    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)\n\n    class Meta:\n        app_label = 'test_app'\n\n# Register models dynamically\nfrom django.apps import apps\nfrom django.db.models import Model\n\nclass TestAppConfig:\n    name = 'test_app'\n    label = 'test_app'\n\napps.register_config(TestAppConfig)\napps.register_model('test_app', 'batchdata', BatchData)\napps.register_model('test_app', 'testrun', TestRun)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        22
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2048024998512119
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Register models dynamically\nfrom django.apps import apps\nfrom django.db.models import Model\n\nclass TestAppConfig:\n    name = 'test_app'\n    label = 'test_app'\n\napps.register_config(TestAppConfig)\napps.register_model('test_app', 'batchdata', BatchData)\napps.register_model('test_app', 'testrun', TestRun)",
        "new_str": "# Finalize the app registry\nfrom django.apps import apps\napps.ready()",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18928005103953183
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Finalize the app registry\nfrom django.apps import apps\napps.ready()",
        "new_str": "# Finalize the app registry\nfrom django.apps import apps\napps.populate(settings.INSTALLED_APPS)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20272527099587023
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Finalize the app registry\nfrom django.apps import apps\napps.populate(settings.INSTALLED_APPS)",
        "new_str": "",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        28
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18131785211153328
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_radioselect.py",
        "old_str": "# Create database tables\nfrom django.db import connection\nfrom django.core.management import call_command\n\n# Create migrations and apply them\ncall_command('makemigrations', 'test_app', interactive=False)\ncall_command('migrate', interactive=False)\n\n# Create some test data\nbatch1 = BatchData.objects.create(name=\"First Data File\")\nbatch2 = BatchData.objects.create(name=\"Second Data File\")\n\n# Render the form\nform = TestRunForm()\nprint(form.as_p())",
        "new_str": "# Render the form with mock choices\nform = TestRunForm()\nform.fields['data_file'].choices = [\n    (1, \"First Data File\"),\n    (2, \"Second Data File\"),\n]\nprint(form.as_p())",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        30
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        32
      ],
      "id": "22:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.25382944010198116,
        0.2744014768395573
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        33,
        35
      ],
      "id": "23:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11966865509748459
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_radioselect.py"
      ],
      "phase": "general",
      "step_indices": [
        34
      ],
      "id": "24:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\ncreate",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 1
    },
    {
      "label": "12",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 2
    },
    {
      "label": "14",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 3
    },
    {
      "label": "16",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 4
    },
    {
      "label": "18",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 5
    },
    {
      "label": "20",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 6
    },
    {
      "label": "23",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 7
    },
    {
      "label": "25",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 8
    },
    {
      "label": "27",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 9
    },
    {
      "label": "29",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 10
    },
    {
      "label": "31",
      "type": "exec",
      "source": "8:cd",
      "target": "9:python",
      "key": 11
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "9:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "9:python",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "9:python",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "9:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "9:python",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "9:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "9:python",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "9:python",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "9:python",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "9:python",
      "target": "22:empty action",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "8:cd",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "22:empty action",
      "target": "23:submit",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "23:submit",
      "target": "24:rm",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "24:rm",
      "target": "23:submit",
      "key": 0
    }
  ]
}