{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "pylint-dev__pylint-8898",
    "difficulty": "1-4 hours"
  },
  "nodes": [
    {
      "label": "echo",
      "execution_time": [
        0.14117710303980857
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:echo"
    },
    {
      "label": "python",
      "execution_time": [
        0.14117710303980857,
        0.2608773121610284
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        0,
        3
      ],
      "id": "1:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1774393601808697
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/pylint/config/argument.py"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1906873059924692
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/pylint/config/argument.py",
        "old_str": "def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    for pattern in _csv_transformer(value):\n        patterns.append(_regex_transformer(pattern))\n    return patterns",
        "new_str": "def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n    patterns: list[Pattern[str]] = []\n    # Escape commas in the regex pattern by replacing them with a temporary placeholder\n    escaped_value = value.replace(\",\", \"\\x00\")\n    for pattern in _csv_transformer(escaped_value):\n        # Restore commas in the pattern\n        restored_pattern = pattern.replace(\"\\x00\", \",\")\n        patterns.append(_regex_transformer(restored_pattern))\n    return patterns",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        4
      ],
      "id": "4:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.23391571803949773,
        0.2326062899082899
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        5,
        8
      ],
      "id": "5:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.12025612988509238
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        6
      ],
      "id": "6:rm"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:echo",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:python",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "1:python",
      "target": "4:empty action",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:empty action",
      "target": "5:submit",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "4:empty action",
      "target": "5:submit",
      "key": 1
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:submit",
      "target": "6:rm",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:rm",
      "target": "4:empty action",
      "key": 0
    }
  ]
}