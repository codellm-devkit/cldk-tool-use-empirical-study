{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-15503",
    "difficulty": "1-4 hours",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1930434179957956
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18495744606480002
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20536064798943698
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.188969356007874
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "class HasKeys(HasKeyLookup):\n    lookup_name = \"has_keys\"\n    postgres_operator = \"?&\"\n    logical_operator = \" AND \"\n\n    def get_prep_lookup(self):\n        return [str(item) for item in self.rhs]",
        "new_str": "class HasKeys(HasKeyLookup):\n    lookup_name = \"has_keys\"\n    postgres_operator = \"?&\"\n    logical_operator = \" AND \"\n\n    def get_prep_lookup(self):\n        return [str(item) for item in self.rhs]",
        "edit_status": "failure: no change"
      },
      "phase": "patch",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20451715192757547
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "def as_sqlite(self, compiler, connection):\n        return self.as_sql(\n            compiler, connection, template=\"JSON_TYPE(%s, %%s) IS NOT NULL\"\n        )",
        "new_str": "def as_sqlite(self, compiler, connection):\n        return self.as_sql(\n            compiler, connection, template=\"JSON_TYPE(%s, CAST(%%s AS TEXT)) IS NOT NULL\"\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nstr_replace"
    },
    {
      "label": "python",
      "execution_time": [
        0.17111331620253623
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/tests/test_sqlite.py"
      ],
      "phase": "verification",
      "step_indices": [
        5
      ],
      "id": "5:python"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.198071331018582
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_jsonfield_has_key.py",
        "file_text": "import os\nimport django\nfrom django.conf import settings\nfrom django.db import models\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        INSTALLED_APPS=['django.contrib.contenttypes'],\n    )\n    django.setup()\n\n# Define the model\nclass JsonFieldHasKeyTest(models.Model):\n    data = models.JSONField()\n\n    class Meta:\n        app_label = 'test_jsonfield_has_key'\n\n# Test the has_key lookup\ndef test_json_field_has_key():\n    # Create test data\n    test1 = JsonFieldHasKeyTest(data={'foo': 'bar'})\n    test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n    test1.save()\n    test2.save()\n\n    # Test has_key lookup\n    c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n    c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n\n    print(f\"Count for 'foo': {c1} (expected: 1)\")\n    print(f\"Count for '1111': {c2} (expected: 1)\")\n\n    assert c1 == 1, \"Should have found 1 entry with key 'foo'\"\n    assert c2 == 1, \"Should have found 1 entry with key '1111'\"\n\nif __name__ == '__main__':\n    test_json_field_has_key()\n    print(\"Test passed!\")"
      },
      "phase": "verification",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.5810542658437043,
        0.33195480704307556,
        0.3241932359524071,
        0.35847468907013535,
        0.3435380980372429,
        0.3785974581260234,
        0.3485420399811119,
        0.35780653008259833,
        0.34268964920192957,
        0.3042405201122165,
        0.3382575719151646,
        0.3061841079033911,
        0.34006972098723054
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_jsonfield_has_key.py"
      ],
      "phase": "verification",
      "step_indices": [
        7,
        9,
        14,
        16,
        18,
        20,
        22,
        24,
        27,
        29,
        31,
        33,
        35
      ],
      "id": "7:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21697147097438574
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_jsonfield_has_key.py",
        "old_str": "import os\nimport django\nfrom django.conf import settings\nfrom django.db import models\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        INSTALLED_APPS=['django.contrib.contenttypes'],\n    )\n    django.setup()\n\n# Define the model\nclass JsonFieldHasKeyTest(models.Model):\n    data = models.JSONField()\n\n    class Meta:\n        app_label = 'test_jsonfield_has_key'\n\n# Test the has_key lookup\ndef test_json_field_has_key():\n    # Create test data\n    test1 = JsonFieldHasKeyTest(data={'foo': 'bar'})\n    test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n    test1.save()\n    test2.save()\n\n    # Test has_key lookup\n    c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n    c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n\n    print(f\"Count for 'foo': {c1} (expected: 1)\")\n    print(f\"Count for '1111': {c2} (expected: 1)\")\n\n    assert c1 == 1, \"Should have found 1 entry with key 'foo'\"\n    assert c2 == 1, \"Should have found 1 entry with key '1111'\"\n\nif __name__ == '__main__':\n    test_json_field_has_key()\n    print(\"Test passed!\")",
        "new_str": "import os\nimport django\nfrom django.conf import settings\nfrom django.db import models, connection\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        INSTALLED_APPS=['django.contrib.contenttypes', 'test_jsonfield_has_key'],\n    )\n    django.setup()\n\n# Define the model\nclass JsonFieldHasKeyTest(models.Model):\n    data = models.JSONField()\n\n    class Meta:\n        app_label = 'test_jsonfield_has_key'\n\n# Create the database tables\ndef setup_database():\n    with connection.schema_editor() as schema_editor:\n        schema_editor.create_model(JsonFieldHasKeyTest)\n\n# Test the has_key lookup\ndef test_json_field_has_key():\n    # Create test data\n    test1 = JsonFieldHasKeyTest(data={'foo': 'bar'})\n    test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n    test1.save()\n    test2.save()\n\n    # Test has_key lookup\n    c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n    c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n\n    print(f\"Count for 'foo': {c1} (expected: 1)\")\n    print(f\"Count for '1111': {c2} (expected: 1)\")\n\n    assert c1 == 1, \"Should have found 1 entry with key 'foo'\"\n    assert c2 == 1, \"Should have found 1 entry with key '1111'\"\n\nif __name__ == '__main__':\n    setup_database()\n    test_json_field_has_key()\n    print(\"Test passed!\")",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1788497979287058,
        0.1857206372078508
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_jsonfield_has_key/models.py",
        "file_text": "from django.db import models\n\nclass JsonFieldHasKeyTest(models.Model):\n    data = models.JSONField()\n\n    class Meta:\n        app_label = 'test_jsonfield_has_key'"
      },
      "phase": "verification",
      "step_indices": [
        10,
        12
      ],
      "id": "9:str_replace_editor\ncreate"
    },
    {
      "label": "mkdir",
      "execution_time": [
        0.12054128502495587
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "step_indices": [
        11
      ],
      "id": "10:mkdir"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.218599395127967
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_jsonfield_has_key.py",
        "old_str": "import os\nimport django\nfrom django.conf import settings\nfrom django.db import models, connection\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        INSTALLED_APPS=['django.contrib.contenttypes', 'test_jsonfield_has_key'],\n    )\n    django.setup()\n\n# Define the model\nclass JsonFieldHasKeyTest(models.Model):\n    data = models.JSONField()\n\n    class Meta:\n        app_label = 'test_jsonfield_has_key'\n\n# Create the database tables\ndef setup_database():\n    with connection.schema_editor() as schema_editor:\n        schema_editor.create_model(JsonFieldHasKeyTest)\n\n# Test the has_key lookup\ndef test_json_field_has_key():\n    # Create test data\n    test1 = JsonFieldHasKeyTest(data={'foo': 'bar'})\n    test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n    test1.save()\n    test2.save()\n\n    # Test has_key lookup\n    c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n    c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n\n    print(f\"Count for 'foo': {c1} (expected: 1)\")\n    print(f\"Count for '1111': {c2} (expected: 1)\")\n\n    assert c1 == 1, \"Should have found 1 entry with key 'foo'\"\n    assert c2 == 1, \"Should have found 1 entry with key '1111'\"\n\nif __name__ == '__main__':\n    setup_database()\n    test_json_field_has_key()\n    print(\"Test passed!\")",
        "new_str": "import os\nimport django\nfrom django.conf import settings\nfrom django.db import connection\n\n# Configure Django settings\nif not settings.configured:\n    settings.configure(\n        DATABASES={\n            'default': {\n                'ENGINE': 'django.db.backends.sqlite3',\n                'NAME': ':memory:',\n            }\n        },\n        INSTALLED_APPS=['django.contrib.contenttypes', 'test_jsonfield_has_key'],\n    )\n    django.setup()\n\n# Import the model after Django is set up\nfrom test_jsonfield_has_key.models import JsonFieldHasKeyTest\n\n# Create the database tables\ndef setup_database():\n    with connection.schema_editor() as schema_editor:\n        schema_editor.create_model(JsonFieldHasKeyTest)\n\n# Test the has_key lookup\ndef test_json_field_has_key():\n    # Create test data\n    test1 = JsonFieldHasKeyTest(data={'foo': 'bar'})\n    test2 = JsonFieldHasKeyTest(data={'1111': 'bar'})\n    test1.save()\n    test2.save()\n\n    # Test has_key lookup\n    c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n    c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n\n    print(f\"Count for 'foo': {c1} (expected: 1)\")\n    print(f\"Count for '1111': {c2} (expected: 1)\")\n\n    assert c1 == 1, \"Should have found 1 entry with key 'foo'\"\n    assert c2 == 1, \"Should have found 1 entry with key '1111'\"\n\nif __name__ == '__main__':\n    setup_database()\n    test_json_field_has_key()\n    print(\"Test passed!\")",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        13
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1801135919522494
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_jsonfield_has_key/__init__.py",
        "file_text": ""
      },
      "phase": "verification",
      "step_indices": [
        15
      ],
      "id": "12:str_replace_editor\ncreate"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1903920960612595
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "def as_sqlite(self, compiler, connection):\n        return self.as_sql(\n            compiler, connection, template=\"JSON_TYPE(%s, CAST(%%s AS TEXT)) IS NOT NULL\"\n        )",
        "new_str": "def as_sqlite(self, compiler, connection):\n        return self.as_sql(\n            compiler, connection, template=\"JSON_EXTRACT(%s, %%s) IS NOT NULL\"\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        17
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18383459094911814
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "def as_sqlite(self, compiler, connection):\n        return self.as_sql(\n            compiler, connection, template=\"JSON_EXTRACT(%s, %%s) IS NOT NULL\"\n        )",
        "new_str": "def as_sqlite(self, compiler, connection):\n        print(f\"DEBUG: SQL template = JSON_EXTRACT(%s, %%s) IS NOT NULL\")\n        print(f\"DEBUG: Key = {self.rhs}\")\n        return self.as_sql(\n            compiler, connection, template=\"JSON_EXTRACT(%s, %%s) IS NOT NULL\"\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        19
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1790694030933082
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "def as_sqlite(self, compiler, connection):\n        print(f\"DEBUG: SQL template = JSON_EXTRACT(%s, %%s) IS NOT NULL\")\n        print(f\"DEBUG: Key = {self.rhs}\")\n        return self.as_sql(\n            compiler, connection, template=\"JSON_EXTRACT(%s, %%s) IS NOT NULL\"\n        )",
        "new_str": "def as_sqlite(self, compiler, connection):\n        return self.as_sql(\n            compiler, connection, template=\"JSON_EXTRACT(%s, '$.\\\"%s\\\"') IS NOT NULL\"\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18725541490130126
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "def as_sqlite(self, compiler, connection):\n        return self.as_sql(\n            compiler, connection, template=\"JSON_EXTRACT(%s, '$.\\\"%s\\\"') IS NOT NULL\"\n        )",
        "new_str": "def as_sqlite(self, compiler, connection):\n        return self.as_sql(\n            compiler, connection, template=\"JSON_EXTRACT(%s, '$.\\\"%%s\\\"') IS NOT NULL\"\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "%%s",
      "execution_time": [
        0.19487419608049095,
        0.18680544709786773,
        0.19525325996801257
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "step_indices": [
        25,
        26,
        28
      ],
      "id": "17:%%s"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18480639206245542
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "def as_sqlite(self, compiler, connection):\n        key = self.rhs\n        if isinstance(key, (int, float)):\n            key = str(key)\n        return self.as_sql(\n            compiler, connection, template=f\"JSON_EXTRACT(%s, '$.\"{key}\"') IS NOT NULL\"\n        )",
        "new_str": "def as_sqlite(self, compiler, connection):\n        key = self.rhs\n        if isinstance(key, (int, float)):\n            key = str(key)\n        return self.as_sql(\n            compiler, connection, template=f'JSON_EXTRACT(%s, \\'$.\"{key}\"\\') IS NOT NULL'\n        )",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        30
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17996969795785844
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "def as_sqlite(self, compiler, connection):\n        key = self.rhs\n        if isinstance(key, (int, float)):\n            key = str(key)\n        return self.as_sql(\n            compiler, connection, template=f'JSON_EXTRACT(%s, \\'$.\"{key}\"\\') IS NOT NULL'\n        )",
        "new_str": "def as_sqlite(self, compiler, connection):\n        key = self.rhs\n        if isinstance(key, (int, float)):\n            key = str(key)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        sql = f\"JSON_EXTRACT({lhs}, '$.\"{key}\"') IS NOT NULL\"\n        return sql, lhs_params",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        32
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18508271710015833
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/json.py",
        "old_str": "def as_sqlite(self, compiler, connection):\n        key = self.rhs\n        if isinstance(key, (int, float)):\n            key = str(key)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        sql = f\"JSON_EXTRACT({lhs}, '$.\"{key}\"') IS NOT NULL\"\n        return sql, lhs_params",
        "new_str": "def as_sqlite(self, compiler, connection):\n        key = self.rhs\n        if isinstance(key, (int, float)):\n            key = str(key)\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        sql = f'JSON_EXTRACT({lhs}, \\'$.\"{key}\"\\') IS NOT NULL'\n        return sql, lhs_params",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        34
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        36
      ],
      "id": "21:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.7325193791184574,
        0.2512528570368886
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        37,
        39
      ],
      "id": "22:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.12328590801917017
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_jsonfield_has_key.py",
        "/testbed/test_jsonfield_has_key"
      ],
      "phase": "general",
      "step_indices": [
        38
      ],
      "id": "23:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nstr_replace",
      "target": "5:python",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:python",
      "target": "6:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\ncreate",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "7:python",
      "target": "9:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "7:python",
      "target": "12:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "7:python",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "7:python",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "7:python",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "7:python",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "7:python",
      "target": "17:%%s",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "7:python",
      "target": "17:%%s",
      "key": 1
    },
    {
      "label": "30",
      "type": "exec",
      "source": "7:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "7:python",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "7:python",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "7:python",
      "target": "21:empty action",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:str_replace_editor\ncreate",
      "target": "10:mkdir",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "9:str_replace_editor\ncreate",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:mkdir",
      "target": "9:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "12:str_replace_editor\ncreate",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "17:%%s",
      "target": "17:%%s",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "17:%%s",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "17:%%s",
      "target": "7:python",
      "key": 1
    },
    {
      "label": "31",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "7:python",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "21:empty action",
      "target": "22:submit",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "22:submit",
      "target": "23:rm",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "23:rm",
      "target": "22:submit",
      "key": 0
    }
  ]
}