{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "matplotlib__matplotlib-14623",
    "difficulty": "15 min - 1 hour"
  },
  "nodes": [
    {
      "label": "echo",
      "execution_time": [
        1.4293062415672466
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "import numpy as np\nimport matplotlib.pyplot as plt\n\ny = np.linspace(1000e2, 1, 100)\nx = np.exp(-np.linspace(0, 1, y.size))\n\nfor yscale in (\"linear\", \"log\"):\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_yscale(yscale)\n    ax.set_ylim(y.max(), y.min())\nplt.show()",
        ">",
        "/testbed/reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        0
      ],
      "id": "0:echo"
    },
    {
      "label": "python",
      "execution_time": [
        1.4293062415672466,
        0.5226998808793724,
        0.7964703589677811,
        0.5600856731180102,
        0.5856900298967957,
        0.5432475360576063,
        0.49423364107497036,
        0.6484508151188493
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        0,
        17,
        19,
        21,
        24,
        26,
        28,
        30
      ],
      "id": "1:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19051912799477577
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1954944021999836
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20036299293860793
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/scale.py"
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20979485311545432
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axis.py"
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.22307324619032443
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py"
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18742573214694858
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/scale.py",
        "view_range": [
          294,
          314
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17786882095970213
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "view_range": [
          2200,
          2250
        ]
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.11885878397151828,
        0.1202978549990803
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/lib/matplotlib/axes/_base.py"
      ],
      "phase": "general",
      "step_indices": [
        8,
        13
      ],
      "id": "9:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20222331397235394
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "view_range": [
          3540,
          3560
        ]
      },
      "phase": "localization",
      "step_indices": [
        9
      ],
      "id": "10:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1813376029022038
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/scale.py",
        "old_str": "    def transform_non_affine(self, a):\n        # Ignore invalid values due to nans being passed to the transform.\n        with np.errstate(divide=\"ignore\", invalid=\"ignore\"):\n            log = {np.e: np.log, 2: np.log2, 10: np.log10}.get(self.base)\n            if log:  # If possible, do everything in a single call to Numpy.\n                out = log(a)\n            else:\n                out = np.log(a)\n                out /= np.log(self.base)\n            if self._clip:\n                # SVG spec says that conforming viewers must support values up\n                # to 3.4e38 (C float); however experiments suggest that\n                # Inkscape (which uses cairo for rendering) runs into cairo's\n                # 24-bit limit (which is apparently shared by Agg).\n                # Ghostscript (used for pdf rendering appears to overflow even\n                # earlier, with the max value around 2 ** 15 for the tests to\n                # pass. On the other hand, in practice, we want to clip beyond\n                #     np.log10(np.nextafter(0, 1)) ~ -323\n                # so 1000 seems safe.\n                out[a <= 0] = -1000\n        return out",
        "new_str": "    def transform_non_affine(self, a):\n        # Ignore invalid values due to nans being passed to the transform.\n        with np.errstate(divide=\"ignore\", invalid=\"ignore\"):\n            log = {np.e: np.log, 2: np.log2, 10: np.log10}.get(self.base)\n            if log:  # If possible, do everything in a single call to Numpy.\n                out = log(a)\n            else:\n                out = np.log(a)\n                out /= np.log(self.base)\n            if self._clip:\n                # SVG spec says that conforming viewers must support values up\n                # to 3.4e38 (C float); however experiments suggest that\n                # Inkscape (which uses cairo for rendering) runs into cairo's\n                # 24-bit limit (which is apparently shared by Agg).\n                # Ghostscript (used for pdf rendering appears to overflow even\n                # earlier, with the max value around 2 ** 15 for the tests to\n                # pass. On the other hand, in practice, we want to clip beyond\n                #     np.log10(np.nextafter(0, 1)) ~ -323\n                # so 1000 seems safe.\n                out[a <= 0] = -1000\n        return out",
        "edit_status": "failure: no change"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21425265190191567
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "    def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n                 *, ymin=None, ymax=None):\n        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.",
        "new_str": "    def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n                 *, ymin=None, ymax=None):\n        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        Notes\n        -----\n        For log scales, the inversion of limits (e.g., `set_ylim(y.max(), y.min())`)\n        is respected to ensure the axis is inverted correctly.\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        11
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17807125602848828
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "view_range": [
          3540,
          3600
        ]
      },
      "phase": "localization",
      "step_indices": [
        12
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18226199294440448
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "view_range": [
          3650,
          3670
        ]
      },
      "phase": "localization",
      "step_indices": [
        14
      ],
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20568131213076413
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/scale.py",
        "view_range": [
          420,
          430
        ]
      },
      "phase": "localization",
      "step_indices": [
        15
      ],
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18248578300699592
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/scale.py",
        "old_str": "    def limit_range_for_scale(self, vmin, vmax, minpos):\n        \"\"\"\n        Limit the domain to positive values.\n        \"\"\"\n        if not np.isfinite(minpos):\n            minpos = 1e-300  # This value should rarely if ever\n                             # end up with a visible effect.\n\n        return (minpos if vmin <= 0 else vmin,\n                minpos if vmax <= 0 else vmax)",
        "new_str": "    def limit_range_for_scale(self, vmin, vmax, minpos):\n        \"\"\"\n        Limit the domain to positive values and respect inversion.\n        \"\"\"\n        if not np.isfinite(minpos):\n            minpos = 1e-300  # This value should rarely if ever\n                             # end up with a visible effect.\n\n        vmin = minpos if vmin <= 0 else vmin\n        vmax = minpos if vmax <= 0 else vmax\n\n        # Ensure the order of vmin and vmax is preserved to respect inversion\n        if vmin > vmax:\n            return vmax, vmin\n        return vmin, vmax",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19864754285663366
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "    def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n                 *, ymin=None, ymax=None):\n        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        Notes\n        -----\n        For log scales, the inversion of limits (e.g., `set_ylim(y.max(), y.min())`)\n        is respected to ensure the axis is inverted correctly.\n        \"\"\"",
        "new_str": "    def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n                 *, ymin=None, ymax=None):\n        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        18
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19665361195802689
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n        \"\"\"\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        20
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20149313588626683
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n        \"\"\"\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        22
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19419810106046498
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n        \"\"\"\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "20:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2013493520207703
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n        \"\"\"\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        25
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.22011954500339925
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n        \"\"\"\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        27
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20421671704389155
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n        \"\"\"\n\n        Notes\n        -----\n        The *bottom* value may be greater than the *top* value, in which\n        case the y-axis values will decrease from *bottom* to *top*.",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n\n        Notes\n        -----\n        The *bottom* value may be greater than the *top* value, in which\n        case the y-axis values will decrease from *bottom* to *top*.\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        29
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2068468239158392
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n\n        Notes\n        -----\n        The *bottom* value may be greater than the *top* value, in which\n        case the y-axis values will decrease from *bottom* to *top*.\n        \"\"\"\n\n        Examples\n        --------\n        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n\n        Notes\n        -----\n        The *bottom* value may be greater than the *top* value, in which\n        case the y-axis values will decrease from *bottom* to *top*.\n\n        Examples\n        --------\n        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        31
      ],
      "id": "24:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19024804490618408
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"\n\n        One limit may be left unchanged.",
        "new_str": "        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        32
      ],
      "id": "25:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17817587521858513
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"\n\n        >>> set_ylim(top=top_lim)",
        "new_str": "        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        33
      ],
      "id": "26:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19196395808830857
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"\n\n        Limits may be passed in reverse order to flip the direction of\n        the y-axis. For example, suppose ``y`` represents depth of the",
        "new_str": "        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        34
      ],
      "id": "27:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1714876568876207
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"\n\n        ocean in m. The y-axis limits might be set like the following\n        so 5000 m depth is at the bottom of the plot and the surface,\n        0 m, is at the top.",
        "new_str": "        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        35
      ],
      "id": "28:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21021232288330793,
        0.19135699002072215,
        0.21627858304418623,
        0.19859765307046473,
        0.21063546906225383,
        0.20181391295045614
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n\n        Notes\n        -----\n        The *bottom* value may be greater than the *top* value, in which\n        case the y-axis values will decrease from *bottom* to *top*.\n\n        Examples\n        --------\n        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"\n\n        ocean in m. The y-axis limits might be set like the following\n        so 5000 m depth is at the bottom of the plot and the surface,\n        0 m, is at the top.",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n\n        Notes\n        -----\n        The *bottom* value may be greater than the *top* value, in which\n        case the y-axis values will decrease from *bottom* to *top*.\n\n        Examples\n        --------\n        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        36,
        38,
        40,
        42,
        44,
        46
      ],
      "id": "29:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21267415606416762,
        0.22227775398641825,
        0.2174574218224734,
        0.20953739993274212,
        0.21211330592632294
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/lib/matplotlib/axes/_base.py",
        "old_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n\n        Notes\n        -----\n        The *bottom* value may be greater than the *top* value, in which\n        case the y-axis values will decrease from *bottom* to *top*.\n\n        Examples\n        --------\n        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"",
        "new_str": "        \"\"\"\n        Set the y-axis view limits.\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n        Parameters\n        ----------\n        bottom : scalar, optional\n            The bottom ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n            The bottom and top ylims may be passed as the tuple\n            (*bottom*, *top*) as the first positional argument (or as\n            the *bottom* keyword argument).\n\n        top : scalar, optional\n            The top ylim in data coordinates. Passing *None* leaves the\n            limit unchanged.\n\n        emit : bool, optional\n            Whether to notify observers of limit change (default: ``True``).\n\n        auto : bool or None, optional\n            Whether to turn on autoscaling of the y-axis. *True* turns on,\n            *False* turns off (default action), *None* leaves unchanged.\n\n        ymin, ymax : scalar, optional\n            They are equivalent to bottom and top respectively,\n            and it is an error to pass both *ymin* and *bottom* or\n            *ymax* and *top*.\n\n        Returns\n        -------\n        bottom, top : (float, float)\n            The new y-axis limits in data coordinates.\n\n        See Also\n        --------\n        get_ylim\n        set_ybound, get_ybound\n        invert_yaxis, yaxis_inverted\n\n        Notes\n        -----\n        The *bottom* value may be greater than the *top* value, in which\n        case the y-axis values will decrease from *bottom* to *top*.\n\n        Examples\n        --------\n        >>> set_ylim(bottom, top)\n        >>> set_ylim((bottom, top))\n        >>> bottom, top = set_ylim(bottom, top)\n        \"\"\"",
        "edit_status": "failure: no change"
      },
      "phase": "patch",
      "step_indices": [
        37,
        39,
        41,
        43,
        45
      ],
      "id": "30:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        47
      ],
      "id": "31:empty action"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:echo",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:python",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "1:python",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "1:python",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "1:python",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "1:python",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "1:python",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "1:python",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "1:python",
      "target": "24:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "6:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:grep",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "9:grep",
      "target": "10:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "9:grep",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:str_replace_editor\nview",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "9:grep",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "20:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "24:str_replace_editor\nstr_replace",
      "target": "25:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "25:str_replace_editor\nstr_replace",
      "target": "26:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "26:str_replace_editor\nstr_replace",
      "target": "27:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "27:str_replace_editor\nstr_replace",
      "target": "28:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "28:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "41",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "43",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "45",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "30:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "47",
      "type": "exec",
      "source": "29:str_replace_editor\nstr_replace",
      "target": "31:empty action",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 1
    },
    {
      "label": "42",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 2
    },
    {
      "label": "44",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 3
    },
    {
      "label": "46",
      "type": "exec",
      "source": "30:str_replace_editor\nstr_replace",
      "target": "29:str_replace_editor\nstr_replace",
      "key": 4
    },
    {
      "label": "48",
      "type": "exec",
      "source": "31:empty action",
      "target": "31:empty action",
      "key": 0
    },
    {
      "label": "49",
      "type": "exec",
      "source": "31:empty action",
      "target": "31:empty action",
      "key": 1
    },
    {
      "label": "50",
      "type": "exec",
      "source": "31:empty action",
      "target": "31:empty action",
      "key": 2
    }
  ]
}