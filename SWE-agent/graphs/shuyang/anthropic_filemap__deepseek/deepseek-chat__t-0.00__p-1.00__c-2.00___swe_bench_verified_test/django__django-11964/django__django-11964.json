{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-11964",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "easy",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1996296939905733
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1968407321255654
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2271959229838103
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20334856491535902
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "view_range": [
          575,
          581
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20849464694038033,
        0.19721733406186104
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "view_range": [
          968,
          976
        ]
      },
      "phase": "localization",
      "step_indices": [
        4,
        30
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18402259680442512
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "view_range": [
          1,
          10
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21779270400293171
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "import collections.abc\nimport copy\nimport datetime\nimport decimal\nimport operator\nimport uuid\nimport warnings\nfrom base64 import b64decode, b64encode\nfrom functools import partialmethod, total_ordering",
        "new_str": "import collections.abc\nimport copy\nimport datetime\nimport decimal\nimport enum\nimport operator\nimport uuid\nimport warnings\nfrom base64 import b64decode, b64encode\nfrom functools import partialmethod, total_ordering",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2113926000893116
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "class CharField(Field):\n    description = _(\"String (up to %(max_length)s)\")\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.validators.append(validators.MaxLengthValidator(self.max_length))\n\n    def check(self, **kwargs):",
        "new_str": "class CharField(Field):\n    description = _(\"String (up to %(max_length)s)\")\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.validators.append(validators.MaxLengthValidator(self.max_length))\n\n    def to_python(self, value):\n        if isinstance(value, enum.Enum):\n            return value.value\n        return str(value) if value is not None else value\n\n    def check(self, **kwargs):",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1938205889891833
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "    def get_prep_value(self, value):\n        \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n        if isinstance(value, Promise):\n            value = value._proxy____cast()\n        return value",
        "new_str": "    def get_prep_value(self, value):\n        \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n        if isinstance(value, enum.Enum):\n            return value.value\n        if isinstance(value, Promise):\n            value = value._proxy____cast()\n        return value",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "echo",
      "execution_time": [
        0.12117526400834322,
        0.12354333512485027,
        0.12247768812812865,
        0.12504707695916295,
        0.13874807604588568,
        0.1276197680272162
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        ">",
        "/testbed/test_enum.py"
      ],
      "phase": "general",
      "step_indices": [
        9,
        11,
        13,
        15,
        17,
        19
      ],
      "id": "9:echo"
    },
    {
      "label": "cd",
      "execution_time": [
        0.2284622680163011,
        0.23197342548519373,
        0.19835386553313583,
        0.213279893505387,
        0.2150747759733349,
        0.20239430596120656,
        0.19202539406251162,
        0.20767696353141218,
        0.2250834059668705,
        0.2029537355992943
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        10,
        12,
        14,
        16,
        18,
        20,
        23,
        27,
        36,
        39
      ],
      "id": "10:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.2284622680163011,
        0.23197342548519373,
        0.19835386553313583,
        0.213279893505387,
        0.2150747759733349,
        0.20239430596120656,
        0.19202539406251162,
        0.20767696353141218,
        0.2250834059668705,
        0.2029537355992943
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_enum.py"
      ],
      "phase": "verification",
      "step_indices": [
        10,
        12,
        14,
        16,
        18,
        20,
        23,
        27,
        36,
        39
      ],
      "id": "11:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21260136109776795
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "class CharField(Field):\n    description = _(\"String (up to %(max_length)s)\")\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.validators.append(validators.MaxLengthValidator(self.max_length))\n\n    def to_python(self, value):\n        if isinstance(value, enum.Enum):\n            return value.value\n        return str(value) if value is not None else value\n\n    def check(self, **kwargs):",
        "new_str": "class CharField(Field):\n    description = _(\"String (up to %(max_length)s)\")\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.validators.append(validators.MaxLengthValidator(self.max_length))\n\n    def to_python(self, value):\n        if isinstance(value, enum.Enum):\n            return value.value\n        return str(value) if value is not None else value\n\n    def contribute_to_class(self, cls, name, private_only=False):\n        super().contribute_to_class(cls, name, private_only=private_only)\n        # Override the descriptor to ensure to_python is called on assignment\n        setattr(cls, self.name, EnumAwareDescriptor(self))\n\n    def check(self, **kwargs):",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        21
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18434726889245212
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "from django.utils.functional import Promise, cached_property\nfrom django.utils.ipv6 import clean_ipv6_address\nfrom django.utils.itercompat import is_iterable\nfrom django.utils.text import capfirst\nfrom django.utils.translation import gettext_lazy as _",
        "new_str": "from django.utils.functional import Promise, cached_property\nfrom django.utils.ipv6 import clean_ipv6_address\nfrom django.utils.itercompat import is_iterable\nfrom django.utils.text import capfirst\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass EnumAwareDescriptor:\n    \"\"\"\n    A descriptor that ensures to_python is called when assigning enum values to a field.\n    \"\"\"\n    def __init__(self, field):\n        self.field = field\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return instance.__dict__[self.field.name]\n\n    def __set__(self, instance, value):\n        instance.__dict__[self.field.name] = self.field.to_python(value)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        22
      ],
      "id": "13:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1995135759934783
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "class EnumAwareDescriptor:\n    \"\"\"\n    A descriptor that ensures to_python is called when assigning enum values to a field.\n    \"\"\"\n    def __init__(self, field):\n        self.field = field\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return instance.__dict__[self.field.name]\n\n    def __set__(self, instance, value):\n        instance.__dict__[self.field.name] = self.field.to_python(value)",
        "new_str": "",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        24
      ],
      "id": "14:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2007430549710989
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "    def contribute_to_class(self, cls, name, private_only=False):\n        super().contribute_to_class(cls, name, private_only=private_only)\n        # Override the descriptor to ensure to_python is called on assignment\n        setattr(cls, self.name, EnumAwareDescriptor(self))",
        "new_str": "",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        25
      ],
      "id": "15:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20763103384524584
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "    def value_from_object(self, obj):\n        \"\"\"Return the value of this field in the given model instance.\"\"\"\n        return getattr(obj, self.attname)",
        "new_str": "    def value_from_object(self, obj):\n        \"\"\"Return the value of this field in the given model instance.\"\"\"\n        value = getattr(obj, self.attname)\n        return self.to_python(value)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        26
      ],
      "id": "16:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19418246485292912,
        0.1915148771367967,
        0.19374362193048
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "class CharField(Field):\n    description = _(\"String (up to %(max_length)s)\")\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.validators.append(validators.MaxLengthValidator(self.max_length))\n\n    def to_python(self, value):\n        if isinstance(value, enum.Enum):\n            return value.value\n        return str(value) if value is not None else value\n\n    def check(self, **kwargs):",
        "new_str": "class CharField(Field):\n    description = _(\"String (up to %(max_length)s)\")\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.validators.append(validators.MaxLengthValidator(self.max_length))\n\n    def to_python(self, value):\n        if isinstance(value, enum.Enum):\n            return value.value\n        return str(value) if value is not None else value\n\n    def contribute_to_class(self, cls, name, private_only=False):\n        super().contribute_to_class(cls, name, private_only=private_only)\n        # Override the descriptor to ensure to_python is called on access\n        setattr(cls, self.name, EnumAwareDescriptor(self))\n\n    def check(self, **kwargs):",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        28,
        29,
        32
      ],
      "id": "17:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20019513904117048
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "view_range": [
          975,
          990
        ]
      },
      "phase": "localization",
      "step_indices": [
        31
      ],
      "id": "18:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.18607126409187913
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "    def to_python(self, value):\n        if isinstance(value, enum.Enum):\n            return value.value\n        return str(value) if value is not None else value\n\n    def check(self, **kwargs):",
        "new_str": "    def to_python(self, value):\n        if isinstance(value, enum.Enum):\n            return value.value\n        return str(value) if value is not None else value\n\n    def contribute_to_class(self, cls, name, private_only=False):\n        super().contribute_to_class(cls, name, private_only=private_only)\n        # Override the descriptor to ensure to_python is called on access\n        setattr(cls, self.name, EnumAwareDescriptor(self))\n\n    def check(self, **kwargs):",
        "edit_status": "failure: not found"
      },
      "phase": "patch",
      "step_indices": [
        33
      ],
      "id": "19:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ninsert",
      "execution_time": [
        0.21047098306007683
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "new_str": "    def contribute_to_class(self, cls, name, private_only=False):\n        super().contribute_to_class(cls, name, private_only=private_only)\n        # Override the descriptor to ensure to_python is called on access\n        setattr(cls, self.name, EnumAwareDescriptor(self))",
        "insert_line": 986
      },
      "phase": "general",
      "step_indices": [
        34
      ],
      "id": "20:str_replace_editor\ninsert"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1997847189195454
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "from django.utils.functional import Promise, cached_property\nfrom django.utils.ipv6 import clean_ipv6_address\nfrom django.utils.itercompat import is_iterable\nfrom django.utils.text import capfirst\nfrom django.utils.translation import gettext_lazy as _",
        "new_str": "from django.utils.functional import Promise, cached_property\nfrom django.utils.ipv6 import clean_ipv6_address\nfrom django.utils.itercompat import is_iterable\nfrom django.utils.text import capfirst\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass EnumAwareDescriptor:\n    \"\"\"\n    A descriptor that ensures to_python is called when accessing enum values.\n    \"\"\"\n    def __init__(self, field):\n        self.field = field\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        value = instance.__dict__[self.field.name]\n        return self.field.to_python(value)\n\n    def __set__(self, instance, value):\n        instance.__dict__[self.field.name] = value",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        35
      ],
      "id": "21:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20225788513198495
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "    def contribute_to_class(self, cls, name, private_only=False):\n        super().contribute_to_class(cls, name, private_only=private_only)\n        # Override the descriptor to ensure to_python is called on access\n        setattr(cls, self.name, EnumAwareDescriptor(self))",
        "new_str": "",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        37
      ],
      "id": "22:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.210691689979285
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/fields/__init__.py",
        "old_str": "class EnumAwareDescriptor:\n    \"\"\"\n    A descriptor that ensures to_python is called when accessing enum values.\n    \"\"\"\n    def __init__(self, field):\n        self.field = field\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        value = instance.__dict__[self.field.name]\n        return self.field.to_python(value)\n\n    def __set__(self, instance, value):\n        instance.__dict__[self.field.name] = value",
        "new_str": "",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        38
      ],
      "id": "23:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        40
      ],
      "id": "24:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.2716469559818506,
        0.25626405398361385
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        41,
        43
      ],
      "id": "25:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.11992716207168996
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_enum.py"
      ],
      "phase": "general",
      "step_indices": [
        42
      ],
      "id": "26:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "31",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "18:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:echo",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:echo",
      "target": "10:cd",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "9:echo",
      "target": "10:cd",
      "key": 1
    },
    {
      "label": "14",
      "type": "exec",
      "source": "9:echo",
      "target": "10:cd",
      "key": 2
    },
    {
      "label": "16",
      "type": "exec",
      "source": "9:echo",
      "target": "10:cd",
      "key": 3
    },
    {
      "label": "18",
      "type": "exec",
      "source": "9:echo",
      "target": "10:cd",
      "key": 4
    },
    {
      "label": "20",
      "type": "exec",
      "source": "9:echo",
      "target": "10:cd",
      "key": 5
    },
    {
      "label": "10",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 1
    },
    {
      "label": "14",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 2
    },
    {
      "label": "16",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 3
    },
    {
      "label": "18",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 4
    },
    {
      "label": "20",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 5
    },
    {
      "label": "23",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 6
    },
    {
      "label": "27",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 7
    },
    {
      "label": "36",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 8
    },
    {
      "label": "39",
      "type": "exec",
      "source": "10:cd",
      "target": "11:python",
      "key": 9
    },
    {
      "label": "11",
      "type": "exec",
      "source": "11:python",
      "target": "9:echo",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "11:python",
      "target": "9:echo",
      "key": 1
    },
    {
      "label": "15",
      "type": "exec",
      "source": "11:python",
      "target": "9:echo",
      "key": 2
    },
    {
      "label": "17",
      "type": "exec",
      "source": "11:python",
      "target": "9:echo",
      "key": 3
    },
    {
      "label": "19",
      "type": "exec",
      "source": "11:python",
      "target": "9:echo",
      "key": 4
    },
    {
      "label": "21",
      "type": "exec",
      "source": "11:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "11:python",
      "target": "14:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "11:python",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "37",
      "type": "exec",
      "source": "11:python",
      "target": "22:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "40",
      "type": "exec",
      "source": "11:python",
      "target": "24:empty action",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "13:str_replace_editor\nstr_replace",
      "target": "10:cd",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "14:str_replace_editor\nstr_replace",
      "target": "15:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "15:str_replace_editor\nstr_replace",
      "target": "16:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "16:str_replace_editor\nstr_replace",
      "target": "10:cd",
      "key": 0
    },
    {
      "label": "29",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "30",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "33",
      "type": "exec",
      "source": "17:str_replace_editor\nstr_replace",
      "target": "19:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "32",
      "type": "exec",
      "source": "18:str_replace_editor\nview",
      "target": "17:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "34",
      "type": "exec",
      "source": "19:str_replace_editor\nstr_replace",
      "target": "20:str_replace_editor\ninsert",
      "key": 0
    },
    {
      "label": "35",
      "type": "exec",
      "source": "20:str_replace_editor\ninsert",
      "target": "21:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "36",
      "type": "exec",
      "source": "21:str_replace_editor\nstr_replace",
      "target": "10:cd",
      "key": 0
    },
    {
      "label": "38",
      "type": "exec",
      "source": "22:str_replace_editor\nstr_replace",
      "target": "23:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "39",
      "type": "exec",
      "source": "23:str_replace_editor\nstr_replace",
      "target": "10:cd",
      "key": 0
    },
    {
      "label": "41",
      "type": "exec",
      "source": "24:empty action",
      "target": "25:submit",
      "key": 0
    },
    {
      "label": "42",
      "type": "exec",
      "source": "25:submit",
      "target": "26:rm",
      "key": 0
    },
    {
      "label": "43",
      "type": "exec",
      "source": "26:rm",
      "target": "25:submit",
      "key": 0
    }
  ]
}