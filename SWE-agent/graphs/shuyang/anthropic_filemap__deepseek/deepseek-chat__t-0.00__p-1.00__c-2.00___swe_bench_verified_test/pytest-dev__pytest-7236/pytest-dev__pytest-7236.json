{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "resolved",
    "instance_name": "pytest-dev__pytest-7236",
    "difficulty": "15 min - 1 hour",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "medium",
    "files_change": 2
  },
  "nodes": [
    {
      "label": "cd",
      "execution_time": [
        0.19852021499536932,
        16.006455357535742,
        0.13019495247863233,
        15.99914359941613,
        5.062822659499943,
        5.062599082477391,
        5.060182297951542,
        0.15251109295058995,
        0.16492602392099798
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        0,
        2,
        3,
        4,
        5,
        9,
        11,
        13,
        15
      ],
      "id": "0:cd"
    },
    {
      "label": "pytest",
      "execution_time": [
        0.19852021499536932,
        16.006455357535742,
        15.99914359941613
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [],
      "phase": "general",
      "step_indices": [
        0,
        2,
        4
      ],
      "id": "1:pytest"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1655869351234287
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_repro.py",
        "file_text": "import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def setUp(self):\n        xxx\n    @unittest.skip(\"hello\")\n    def test_one(self):\n        pass\n    def tearDown(self):\n        xxx"
      },
      "phase": "verification",
      "step_indices": [
        1
      ],
      "id": "2:str_replace_editor\ncreate"
    },
    {
      "label": "pytest",
      "execution_time": [
        0.13019495247863233
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "test_repro.py"
      ],
      "phase": "general",
      "step_indices": [
        3
      ],
      "id": "3:pytest"
    },
    {
      "label": "timeout",
      "execution_time": [
        5.062822659499943,
        5.062599082477391,
        5.060182297951542,
        0.15251109295058995,
        0.16492602392099798
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "10",
        "pytest"
      ],
      "phase": "general",
      "step_indices": [
        5,
        9,
        11,
        13,
        15
      ],
      "id": "4:timeout"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.20046141115017235
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19039697712287307
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/unittest.py"
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19795770081691444
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/unittest.py",
        "old_str": "            # when --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug\n            # arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed\n            if self.config.getoption(\"usepdb\"):\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)",
        "new_str": "            # when --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug\n            # arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed\n            if self.config.getoption(\"usepdb\") and not getattr(self._testcase, \"__unittest_skip__\", False):\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        8
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.16436523594893515
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/unittest.py",
        "old_str": "            # when --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug\n            # arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed\n            if self.config.getoption(\"usepdb\") and not getattr(self._testcase, \"__unittest_skip__\", False):\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)",
        "new_str": "            # when --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug\n            # arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed\n            if self.config.getoption(\"usepdb\") and not self._store.get(skipped_by_mark_key, False):\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.20425508194603026
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/src/_pytest/unittest.py",
        "old_str": "@hookimpl(tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    if isinstance(item, TestCaseFunction):\n        if item._excinfo:\n            call.excinfo = item._excinfo.pop(0)\n            try:\n                del call.result\n            except AttributeError:\n                pass\n\n    unittest = sys.modules.get(\"unittest\")\n    if unittest and call.excinfo and call.excinfo.errisinstance(unittest.SkipTest):\n        # let's substitute the excinfo with a pytest.skip one\n        call2 = CallInfo.from_call(\n            lambda: pytest.skip(str(call.excinfo.value)), call.when\n        )\n        call.excinfo = call2.excinfo",
        "new_str": "@hookimpl(tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    if isinstance(item, TestCaseFunction):\n        if item._excinfo:\n            call.excinfo = item._excinfo.pop(0)\n            try:\n                del call.result\n            except AttributeError:\n                pass\n\n        # Ensure tearDown is not postponed for skipped tests\n        if call.when == \"call\" and hasattr(item, \"_explicit_tearDown\") and item._store.get(skipped_by_mark_key, False):\n            item._explicit_tearDown = None\n            setattr(item._testcase, \"tearDown\", item._testcase.tearDown)\n\n    unittest = sys.modules.get(\"unittest\")\n    if unittest and call.excinfo and call.excinfo.errisinstance(unittest.SkipTest):\n        # let's substitute the excinfo with a pytest.skip one\n        call2 = CallInfo.from_call(\n            lambda: pytest.skip(str(call.excinfo.value)), call.when\n        )\n        call.excinfo = call2.excinfo",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.1946168679278344
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_non_skipped.py",
        "file_text": "import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def setUp(self):\n        print(\"setUp executed\")\n    def test_one(self):\n        print(\"test_one executed\")\n    def tearDown(self):\n        print(\"tearDown executed\")"
      },
      "phase": "verification",
      "step_indices": [
        14
      ],
      "id": "10:str_replace_editor\ncreate"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        16
      ],
      "id": "11:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.19428235199302435,
        0.20598009112291038
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        17,
        19
      ],
      "id": "12:submit"
    }
  ],
  "edges": [
    {
      "label": "0",
      "type": "exec",
      "source": "0:cd",
      "target": "1:pytest",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "0:cd",
      "target": "1:pytest",
      "key": 1
    },
    {
      "label": "4",
      "type": "exec",
      "source": "0:cd",
      "target": "1:pytest",
      "key": 2
    },
    {
      "label": "3",
      "type": "exec",
      "source": "0:cd",
      "target": "3:pytest",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "0:cd",
      "target": "4:timeout",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "0:cd",
      "target": "4:timeout",
      "key": 1
    },
    {
      "label": "11",
      "type": "exec",
      "source": "0:cd",
      "target": "4:timeout",
      "key": 2
    },
    {
      "label": "13",
      "type": "exec",
      "source": "0:cd",
      "target": "4:timeout",
      "key": 3
    },
    {
      "label": "15",
      "type": "exec",
      "source": "0:cd",
      "target": "4:timeout",
      "key": 4
    },
    {
      "label": "1",
      "type": "exec",
      "source": "1:pytest",
      "target": "2:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "1:pytest",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "1:pytest",
      "target": "0:cd",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "2:str_replace_editor\ncreate",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:pytest",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "4:timeout",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "4:timeout",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "4:timeout",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "4:timeout",
      "target": "10:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "4:timeout",
      "target": "11:empty action",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "8",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "10:str_replace_editor\ncreate",
      "target": "0:cd",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "11:empty action",
      "target": "12:submit",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "11:empty action",
      "target": "12:submit",
      "key": 1
    },
    {
      "label": "18",
      "type": "exec",
      "source": "12:submit",
      "target": "11:empty action",
      "key": 0
    }
  ]
}