{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "psf__requests-6028",
    "difficulty": "15 min - 1 hour"
  },
  "nodes": [
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.17902008001692593
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/test_proxy_auth.py",
        "file_text": "import requests\n\nproxies = {\n    'http': 'http://your-proxy-address:port',\n    'https': 'http://your-proxy-address:port'\n}\n\nr = requests.get('https://example.org/', proxies=proxies)\nprint(r.status_code)"
      },
      "phase": "verification",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\ncreate"
    },
    {
      "label": "python",
      "execution_time": [
        0.2593489319551736,
        0.22822220902889967
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed/test_proxy_auth.py"
      ],
      "phase": "verification",
      "step_indices": [
        1,
        7
      ],
      "id": "1:python"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.22660079901106656
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/requests/adapters.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18628958007320762
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/requests/adapters.py",
        "view_range": [
          293,
          318
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18557839607819915
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/requests/adapters.py",
        "view_range": [
          167,
          202
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18676545191556215
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/requests/adapters.py",
        "view_range": [
          373,
          393
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19660773989744484
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/requests/adapters.py",
        "old_str": "    def get_connection(self, url, proxies=None):\n        \"\"\"Returns a urllib3 connection for the given URL. This should not be\n        called from user code, and is only exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param url: The URL to connect to.\n        :param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n        :rtype: urllib3.ConnectionPool\n        \"\"\"\n        proxy = select_proxy(url, proxies)\n\n        if proxy:\n            proxy = prepend_scheme_if_needed(proxy, 'http')\n            proxy_url = parse_url(proxy)\n            if not proxy_url.host:\n                raise InvalidProxyURL(\"Please check proxy URL. It is malformed\"\n                                      \" and could be missing the host.\")\n            proxy_manager = self.proxy_manager_for(proxy)\n            conn = proxy_manager.connection_from_url(url)\n        else:\n            # Only scheme should be lower case\n            parsed = urlparse(url)\n            url = parsed.geturl()\n            conn = self.poolmanager.connection_from_url(url)\n\n        return conn",
        "new_str": "    def get_connection(self, url, proxies=None):\n        \"\"\"Returns a urllib3 connection for the given URL. This should not be\n        called from user code, and is only exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param url: The URL to connect to.\n        :param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n        :rtype: urllib3.ConnectionPool\n        \"\"\"\n        proxy = select_proxy(url, proxies)\n\n        if proxy:\n            proxy = prepend_scheme_if_needed(proxy, 'http')\n            # Ensure proxy URL includes credentials if provided\n            if '@' not in proxy and 'http://' in proxy:\n                from .utils import get_auth_from_url\n                auth = get_auth_from_url(proxy)\n                if auth[0]:\n                    proxy = proxy.replace('http://', f'http://{auth[0]}:{auth[1]}@')\n            proxy_url = parse_url(proxy)\n            if not proxy_url.host:\n                raise InvalidProxyURL(\"Please check proxy URL. It is malformed\"\n                                      \" and could be missing the host.\")\n            proxy_manager = self.proxy_manager_for(proxy)\n            conn = proxy_manager.connection_from_url(url)\n        else:\n            # Only scheme should be lower case\n            parsed = urlparse(url)\n            url = parsed.geturl()\n            conn = self.poolmanager.connection_from_url(url)\n\n        return conn",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        8
      ],
      "id": "7:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.20320671005174518,
        0.1994058210402727
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        9,
        11
      ],
      "id": "8:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\ncreate",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:python",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "1:python",
      "target": "7:empty action",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "1:python",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "7:empty action",
      "target": "8:submit",
      "key": 1
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:submit",
      "target": "7:empty action",
      "key": 0
    }
  ]
}