{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-16100",
    "difficulty": "<15 min fix",
    "golden_patch_difficulty": "medium",
    "golden_files_change": 1,
    "patch_difficulty": "hard",
    "files_change": 1
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2071292521432042
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2097644240129739
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2118666721507907
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/options.py"
      },
      "phase": "localization",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18965200893580914
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/options.py",
        "view_range": [
          1000,
          1500
        ]
      },
      "phase": "localization",
      "step_indices": [
        3
      ],
      "id": "3:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19862342718988657
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/options.py",
        "view_range": [
          1500,
          2000
        ]
      },
      "phase": "localization",
      "step_indices": [
        4
      ],
      "id": "4:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19172761612571776
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/options.py",
        "view_range": [
          2000,
          2500
        ]
      },
      "phase": "localization",
      "step_indices": [
        5
      ],
      "id": "5:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19111799402162433
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/options.py",
        "view_range": [
          2000,
          -1
        ]
      },
      "phase": "localization",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1998773319646716
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/views/main.py"
      },
      "phase": "localization",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.17828573286533356
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/views/main.py",
        "view_range": [
          500,
          1000
        ]
      },
      "phase": "localization",
      "step_indices": [
        8
      ],
      "id": "8:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.19428692292422056
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/views/main.py",
        "view_range": [
          500,
          -1
        ]
      },
      "phase": "localization",
      "step_indices": [
        9
      ],
      "id": "9:str_replace_editor\nview"
    },
    {
      "label": "grep",
      "execution_time": [
        0.14601285196840763
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "def changelist_view",
        "/testbed/django/contrib/admin"
      ],
      "phase": "general",
      "step_indices": [
        10
      ],
      "id": "10:grep"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.18525938782840967
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/options.py",
        "view_range": [
          1900,
          2000
        ]
      },
      "phase": "localization",
      "step_indices": [
        11
      ],
      "id": "11:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.22365300497040153
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/contrib/admin/options.py",
        "old_str": "    @csrf_protect_m\n    def changelist_view(self, request, extra_context=None):\n        \"\"\"\n        The 'change list' admin view for this model.\n        \"\"\"\n        from django.contrib.admin.views.main import ERROR_FLAG\n\n        app_label = self.opts.app_label\n        if not self.has_view_or_change_permission(request):\n            raise PermissionDenied\n\n        try:\n            cl = self.get_changelist_instance(request)\n        except IncorrectLookupParameters:\n            # Wacky lookup parameters were given, so redirect to the main\n            # changelist page, without parameters, and pass an 'invalid=1'\n            # parameter via the query string. If wacky parameters were given\n            # and the 'invalid=1' parameter was already in the query string,\n            # something is screwed up with the database, so display an error\n            # page.\n            if ERROR_FLAG in request.GET:\n                return SimpleTemplateResponse(\n                    \"admin/invalid_setup.html\",\n                    {\n                        \"title\": _(\"Database error\"),\n                    },\n                )\n            return HttpResponseRedirect(request.path + \"?\" + ERROR_FLAG + \"=1\")\n\n        # If the request was POSTed, this might be a bulk action or a bulk\n        # edit. Try to look up an action or confirmation first, but if this\n        # isn't an action the POST will fall through to the bulk edit check,\n        # below.\n        action_failed = False\n        selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n\n        actions = self.get_actions(request)\n        # Actions with no confirmation\n        if (\n            actions\n            and request.method == \"POST\"\n            and \"index\" in request.POST\n            and \"_save\" not in request.POST\n        ):\n            if selected:\n                response = self.response_action(\n                    request, queryset=cl.get_queryset(request)\n                )\n                if response:\n                    return response\n                else:\n                    action_failed = True\n            else:\n                msg = _(\n                    \"Items must be selected in order to perform \"\n                    \"actions on them. No items have been changed.\"\n                )\n                self.message_user(request, msg, messages.WARNING)\n                action_failed = True\n\n        # Actions with confirmation\n        if (\n            actions\n            and request.method == \"POST\"\n            and helpers.ACTION_CHECKBOX_NAME in request.POST\n            and \"index\" not in request.POST\n            and \"_save\" not in request.POST\n        ):\n            if selected:\n                response = self.response_action(\n                    request, queryset=cl.get_queryset(request)\n                )\n                if response:\n                    return response\n                else:\n                    action_failed = True\n\n        if action_failed:\n            # Redirect back to the changelist page to avoid resubmitting the\n            # form if the user refreshes the browser or uses the \"No, take\n            # me back\" button on the action confirmation page.\n            return HttpResponseRedirect(request.get_full_path())\n\n        # If we're allowing changelist editing, we need to construct a formset\n        # for the changelist given all the fields to be edited. Then we'll\n        # use the formset to validate/process POSTed data.\n        formset = cl.formset = None",
        "new_str": "    @csrf_protect_m\n    def changelist_view(self, request, extra_context=None):\n        \"\"\"\n        The 'change list' admin view for this model.\n        \"\"\"\n        from django.contrib.admin.views.main import ERROR_FLAG\n        from django.db import transaction\n\n        with transaction.atomic(using=router.db_for_write(self.model)):\n            app_label = self.opts.app_label\n            if not self.has_view_or_change_permission(request):\n                raise PermissionDenied\n\n            try:\n                cl = self.get_changelist_instance(request)\n            except IncorrectLookupParameters:\n                # Wacky lookup parameters were given, so redirect to the main\n                # changelist page, without parameters, and pass an 'invalid=1'\n                # parameter via the query string. If wacky parameters were given\n                # and the 'invalid=1' parameter was already in the query string,\n                # something is screwed up with the database, so display an error\n                # page.\n                if ERROR_FLAG in request.GET:\n                    return SimpleTemplateResponse(\n                        \"admin/invalid_setup.html\",\n                        {\n                            \"title\": _(\"Database error\"),\n                        },\n                    )\n                return HttpResponseRedirect(request.path + \"?\" + ERROR_FLAG + \"=1\")\n\n            # If the request was POSTed, this might be a bulk action or a bulk\n            # edit. Try to look up an action or confirmation first, but if this\n            # isn't an action the POST will fall through to the bulk edit check,\n            # below.\n            action_failed = False\n            selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n\n            actions = self.get_actions(request)\n            # Actions with no confirmation\n            if (\n                actions\n                and request.method == \"POST\"\n                and \"index\" in request.POST\n                and \"_save\" not in request.POST\n            ):\n                if selected:\n                    response = self.response_action(\n                        request, queryset=cl.get_queryset(request)\n                    )\n                    if response:\n                        return response\n                    else:\n                        action_failed = True\n                else:\n                    msg = _(\n                        \"Items must be selected in order to perform \"\n                        \"actions on them. No items have been changed.\"\n                    )\n                    self.message_user(request, msg, messages.WARNING)\n                    action_failed = True\n\n            # Actions with confirmation\n            if (\n                actions\n                and request.method == \"POST\"\n                and helpers.ACTION_CHECKBOX_NAME in request.POST\n                and \"index\" not in request.POST\n                and \"_save\" not in request.POST\n            ):\n                if selected:\n                    response = self.response_action(\n                        request, queryset=cl.get_queryset(request)\n                    )\n                    if response:\n                        return response\n                    else:\n                        action_failed = True\n\n            if action_failed:\n                # Redirect back to the changelist page to avoid resubmitting the\n                # form if the user refreshes the browser or uses the \"No, take\n                # me back\" button on the action confirmation page.\n                return HttpResponseRedirect(request.get_full_path())\n\n            # If we're allowing changelist editing, we need to construct a formset\n            # for the changelist given all the fields to be edited. Then we'll\n            # use the formset to validate/process POSTed data.\n            formset = cl.formset = None",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        13
      ],
      "id": "13:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.27414882299490273,
        0.26008423906750977
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        14,
        16
      ],
      "id": "14:submit"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "3:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "2:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "3:str_replace_editor\nview",
      "target": "4:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "3:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "4:str_replace_editor\nview",
      "target": "5:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "4:str_replace_editor\nview",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "5:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nview",
      "target": "7:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "7:str_replace_editor\nview",
      "target": "8:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "9",
      "type": "exec",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "8:str_replace_editor\nview",
      "target": "9:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "10",
      "type": "exec",
      "source": "9:str_replace_editor\nview",
      "target": "10:grep",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "10:grep",
      "target": "11:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "11:str_replace_editor\nview",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "type": "hier",
      "source": "11:str_replace_editor\nview",
      "target": "6:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "13:empty action",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "13:empty action",
      "target": "14:submit",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "13:empty action",
      "target": "14:submit",
      "key": 1
    },
    {
      "label": "15",
      "type": "exec",
      "source": "14:submit",
      "target": "13:empty action",
      "key": 0
    }
  ]
}