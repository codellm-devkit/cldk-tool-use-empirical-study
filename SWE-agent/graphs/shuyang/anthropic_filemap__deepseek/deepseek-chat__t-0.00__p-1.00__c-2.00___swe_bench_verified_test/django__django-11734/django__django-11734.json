{
  "directed": true,
  "multigraph": true,
  "graph": {
    "resolution_status": "unresolved",
    "instance_name": "django__django-11734",
    "difficulty": "15 min - 1 hour"
  },
  "nodes": [
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2112516239285469
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed"
      },
      "phase": "localization",
      "step_indices": [
        0
      ],
      "id": "0:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21087235189042985
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db"
      },
      "phase": "localization",
      "step_indices": [
        1
      ],
      "id": "1:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\ncreate",
      "execution_time": [
        0.19358999701216817
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "file_text": "from django.db.models import OuterRef, Exists, Q\nfrom django.db import models\n\nclass Item(models.Model):\n    tags = models.ManyToManyField('Category')\n\nclass Category(models.Model):\n    pass\n\nclass Number(models.Model):\n    pass\n\n# Test case 1: filter() works\nqs = Number.objects.annotate(\n    foo=Exists(\n        Item.objects.filter(tags__category_id=OuterRef('pk'))\n    )\n).filter(foo=True)\nprint(\"Filter case:\", qs)\n\n# Test case 2: exclude() crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.exclude(tags__category_id=OuterRef('pk'))\n        )\n    ).filter(foo=True)\n    print(\"Exclude case:\", qs)\nexcept Exception as e:\n    print(\"Exclude case error:\", e)\n\n# Test case 3: filter(~Q()) crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))\n        )\n    ).filter(foo=True)\n    print(\"Filter(~Q()) case:\", qs)\nexcept Exception as e:\n    print(\"Filter(~Q()) case error:\", e)"
      },
      "phase": "verification",
      "step_indices": [
        2
      ],
      "id": "2:str_replace_editor\ncreate"
    },
    {
      "label": "cd",
      "execution_time": [
        0.2847509895218536,
        0.22909518249798566,
        0.19648147805128247,
        0.18292738939635456,
        0.2490718854824081,
        0.2434260775335133,
        0.21458502497989684,
        0.2178298154613003,
        0.059897891944274306
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "/testbed"
      ],
      "phase": "general",
      "step_indices": [
        3,
        5,
        8,
        11,
        13,
        15,
        17,
        24,
        27
      ],
      "id": "3:cd"
    },
    {
      "label": "python",
      "execution_time": [
        0.2847509895218536,
        0.22909518249798566,
        0.19648147805128247,
        0.18292738939635456,
        0.2490718854824081,
        0.2434260775335133,
        0.21458502497989684,
        0.2178298154613003
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_error.py"
      ],
      "phase": "verification",
      "step_indices": [
        3,
        5,
        8,
        11,
        13,
        15,
        17,
        24
      ],
      "id": "4:python"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17067393381148577
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "from django.db.models import OuterRef, Exists, Q\nfrom django.db import models\n\nclass Item(models.Model):\n    tags = models.ManyToManyField('Category')\n\nclass Category(models.Model):\n    pass\n\nclass Number(models.Model):\n    pass",
        "new_str": "import os\nimport django\nfrom django.conf import settings\n\n# Minimal Django settings\nsettings.configure(\n    INSTALLED_APPS=[],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\ndjango.setup()\n\nfrom django.db.models import OuterRef, Exists, Q\nfrom django.db import models\n\nclass Item(models.Model):\n    tags = models.ManyToManyField('Category')\n\nclass Category(models.Model):\n    pass\n\nclass Number(models.Model):\n    pass",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        4
      ],
      "id": "5:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2325169260147959
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "class Item(models.Model):\n    tags = models.ManyToManyField('Category')\n\nclass Category(models.Model):\n    pass\n\nclass Number(models.Model):\n    pass",
        "new_str": "class Item(models.Model):\n    tags = models.ManyToManyField('Category')\n    class Meta:\n        app_label = 'test_app'\n\nclass Category(models.Model):\n    class Meta:\n        app_label = 'test_app'\n\nclass Number(models.Model):\n    class Meta:\n        app_label = 'test_app'",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        6
      ],
      "id": "6:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.1977914881426841
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "settings.configure(\n    INSTALLED_APPS=[],",
        "new_str": "settings.configure(\n    INSTALLED_APPS=['test_app'],",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        7
      ],
      "id": "7:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.17837418499402702
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "settings.configure(\n    INSTALLED_APPS=['test_app'],",
        "new_str": "settings.configure(\n    INSTALLED_APPS=[],",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        9
      ],
      "id": "8:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19151900196447968
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "class Item(models.Model):\n    tags = models.ManyToManyField('Category')\n    class Meta:\n        app_label = 'test_app'\n\nclass Category(models.Model):\n    class Meta:\n        app_label = 'test_app'\n\nclass Number(models.Model):\n    class Meta:\n        app_label = 'test_app'",
        "new_str": "class Item(models.Model):\n    tags = models.ManyToManyField('Category')\n    class Meta:\n        app_label = None\n\nclass Category(models.Model):\n    class Meta:\n        app_label = None\n\nclass Number(models.Model):\n    class Meta:\n        app_label = None",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        10
      ],
      "id": "9:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.2035928221885115
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "import os\nimport django\nfrom django.conf import settings\n\n# Minimal Django settings\nsettings.configure(\n    INSTALLED_APPS=[],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\ndjango.setup()\n\nfrom django.db.models import OuterRef, Exists, Q\nfrom django.db import models\n\nclass Item(models.Model):\n    tags = models.ManyToManyField('Category')\n    class Meta:\n        app_label = None\n\nclass Category(models.Model):\n    class Meta:\n        app_label = None\n\nclass Number(models.Model):\n    class Meta:\n        app_label = None",
        "new_str": "import os\nimport django\nfrom django.conf import settings\n\n# Minimal Django settings\nsettings.configure(\n    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n    DATABASES={\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n    }\n)\ndjango.setup()\n\nfrom django.db.models import OuterRef, Exists, Q\nfrom django.db import models\n\nclass Item(models.Model):\n    tags = models.ManyToManyField('Category')\n    class Meta:\n        app_label = 'test_app'\n\nclass Category(models.Model):\n    class Meta:\n        app_label = 'test_app'\n\nclass Number(models.Model):\n    class Meta:\n        app_label = 'test_app'",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        12
      ],
      "id": "10:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21464073285460472
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "# Test case 1: filter() works\nqs = Number.objects.annotate(\n    foo=Exists(\n        Item.objects.filter(tags__category_id=OuterRef('pk'))\n    )\n).filter(foo=True)\nprint(\"Filter case:\", qs)\n\n# Test case 2: exclude() crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.exclude(tags__category_id=OuterRef('pk'))\n        )\n    ).filter(foo=True)\n    print(\"Exclude case:\", qs)\nexcept Exception as e:\n    print(\"Exclude case error:\", e)\n\n# Test case 3: filter(~Q()) crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.filter(~Q(tags__category_id=OuterRef('pk')))\n        )\n    ).filter(foo=True)\n    print(\"Filter(~Q()) case:\", qs)\nexcept Exception as e:\n    print(\"Filter(~Q()) case error:\", e)",
        "new_str": "# Test case 1: filter() works\nqs = Number.objects.annotate(\n    foo=Exists(\n        Item.objects.filter(tags__id=OuterRef('pk'))\n    )\n).filter(foo=True)\nprint(\"Filter case:\", qs)\n\n# Test case 2: exclude() crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.exclude(tags__id=OuterRef('pk'))\n        )\n    ).filter(foo=True)\n    print(\"Exclude case:\", qs)\nexcept Exception as e:\n    print(\"Exclude case error:\", e)\n\n# Test case 3: filter(~Q()) crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.filter(~Q(tags__id=OuterRef('pk')))\n        )\n    ).filter(foo=True)\n    print(\"Filter(~Q()) case:\", qs)\nexcept Exception as e:\n    print(\"Filter(~Q()) case error:\", e)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        14
      ],
      "id": "11:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.19408862479031086
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/reproduce_error.py",
        "old_str": "# Test case 1: filter() works\nqs = Number.objects.annotate(\n    foo=Exists(\n        Item.objects.filter(tags__id=OuterRef('pk'))\n    )\n).filter(foo=True)\nprint(\"Filter case:\", qs)\n\n# Test case 2: exclude() crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.exclude(tags__id=OuterRef('pk'))\n        )\n    ).filter(foo=True)\n    print(\"Exclude case:\", qs)\nexcept Exception as e:\n    print(\"Exclude case error:\", e)\n\n# Test case 3: filter(~Q()) crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.filter(~Q(tags__id=OuterRef('pk')))\n        )\n    ).filter(foo=True)\n    print(\"Filter(~Q()) case:\", qs)\nexcept Exception as e:\n    print(\"Filter(~Q()) case error:\", e)",
        "new_str": "# Test case 1: filter() works\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.filter(tags__id=OuterRef('pk'))\n        )\n    ).filter(foo=True)\n    print(\"Filter case: Query constructed successfully\")\nexcept Exception as e:\n    print(\"Filter case error:\", e)\n\n# Test case 2: exclude() crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.exclude(tags__id=OuterRef('pk'))\n        )\n    ).filter(foo=True)\n    print(\"Exclude case: Query constructed successfully\")\nexcept Exception as e:\n    print(\"Exclude case error:\", e)\n\n# Test case 3: filter(~Q()) crashes\ntry:\n    qs = Number.objects.annotate(\n        foo=Exists(\n            Item.objects.filter(~Q(tags__id=OuterRef('pk')))\n        )\n    ).filter(foo=True)\n    print(\"Filter(~Q()) case: Query constructed successfully\")\nexcept Exception as e:\n    print(\"Filter(~Q()) case error:\", e)",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        16
      ],
      "id": "12:str_replace_editor\nstr_replace"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2137301960028708
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py"
      },
      "phase": "localization",
      "step_indices": [
        18
      ],
      "id": "13:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.2485725360456854
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py"
      },
      "phase": "localization",
      "step_indices": [
        19
      ],
      "id": "14:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.21338758803904057
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "view_range": [
          1199,
          1326
        ]
      },
      "phase": "localization",
      "step_indices": [
        20
      ],
      "id": "15:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.196250424021855
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/sql/query.py",
        "view_range": [
          1048,
          1072
        ]
      },
      "phase": "localization",
      "step_indices": [
        21
      ],
      "id": "16:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nview",
      "execution_time": [
        0.1962646299507469
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "view_range": [
          546,
          563
        ]
      },
      "phase": "localization",
      "step_indices": [
        22
      ],
      "id": "17:str_replace_editor\nview"
    },
    {
      "label": "str_replace_editor\nstr_replace",
      "execution_time": [
        0.21846946491859853
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {
        "path": "/testbed/django/db/models/expressions.py",
        "old_str": "class ResolvedOuterRef(F):\n    \"\"\"\n    An object that contains a reference to an outer query.\n\n    In this case, the reference to the outer query has been resolved because\n    the inner query has been used as a subquery.\n    \"\"\"\n    contains_aggregate = False\n\n    def as_sql(self, *args, **kwargs):\n        raise ValueError(\n            'This queryset contains a reference to an outer query and may '\n            'only be used in a subquery.'\n        )\n\n    def relabeled_clone(self, relabels):\n        return self",
        "new_str": "class ResolvedOuterRef(F):\n    \"\"\"\n    An object that contains a reference to an outer query.\n\n    In this case, the reference to the outer query has been resolved because\n    the inner query has been used as a subquery.\n    \"\"\"\n    contains_aggregate = False\n\n    def as_sql(self, compiler, connection, *args, **kwargs):\n        return \"%s\", [self.name]\n\n    def relabeled_clone(self, relabels):\n        return self",
        "edit_status": "success"
      },
      "phase": "patch",
      "step_indices": [
        23
      ],
      "id": "18:str_replace_editor\nstr_replace"
    },
    {
      "label": "empty action",
      "execution_time": [
        0.0
      ],
      "state": {},
      "args": {},
      "phase": "general",
      "step_indices": [
        25
      ],
      "id": "19:empty action"
    },
    {
      "label": "submit",
      "execution_time": [
        0.2664550819899887,
        0.3117990968748927
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": {},
      "phase": "submit",
      "step_indices": [
        26,
        28
      ],
      "id": "20:submit"
    },
    {
      "label": "rm",
      "execution_time": [
        0.059897891944274306
      ],
      "state": {
        "working_dir": "/testbed"
      },
      "args": [
        "reproduce_error.py"
      ],
      "phase": "general",
      "step_indices": [
        27
      ],
      "id": "21:rm"
    }
  ],
  "edges": [
    {
      "label": "1",
      "type": "exec",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "0:str_replace_editor\nview",
      "target": "1:str_replace_editor\nview",
      "key": 1
    },
    {
      "label": "2",
      "type": "exec",
      "source": "1:str_replace_editor\nview",
      "target": "2:str_replace_editor\ncreate",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "1:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "2:str_replace_editor\ncreate",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "3",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 1
    },
    {
      "label": "8",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 2
    },
    {
      "label": "11",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 3
    },
    {
      "label": "13",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 4
    },
    {
      "label": "15",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 5
    },
    {
      "label": "17",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 6
    },
    {
      "label": "24",
      "type": "exec",
      "source": "3:cd",
      "target": "4:python",
      "key": 7
    },
    {
      "label": "27",
      "type": "exec",
      "source": "3:cd",
      "target": "21:rm",
      "key": 0
    },
    {
      "label": "4",
      "type": "exec",
      "source": "4:python",
      "target": "5:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "6",
      "type": "exec",
      "source": "4:python",
      "target": "6:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "9",
      "type": "exec",
      "source": "4:python",
      "target": "8:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "12",
      "type": "exec",
      "source": "4:python",
      "target": "10:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "14",
      "type": "exec",
      "source": "4:python",
      "target": "11:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "16",
      "type": "exec",
      "source": "4:python",
      "target": "12:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "18",
      "type": "exec",
      "source": "4:python",
      "target": "13:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "25",
      "type": "exec",
      "source": "4:python",
      "target": "19:empty action",
      "key": 0
    },
    {
      "label": "5",
      "type": "exec",
      "source": "5:str_replace_editor\nstr_replace",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "7",
      "type": "exec",
      "source": "6:str_replace_editor\nstr_replace",
      "target": "7:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "8",
      "type": "exec",
      "source": "7:str_replace_editor\nstr_replace",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "10",
      "type": "exec",
      "source": "8:str_replace_editor\nstr_replace",
      "target": "9:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "11",
      "type": "exec",
      "source": "9:str_replace_editor\nstr_replace",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "13",
      "type": "exec",
      "source": "10:str_replace_editor\nstr_replace",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "15",
      "type": "exec",
      "source": "11:str_replace_editor\nstr_replace",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "17",
      "type": "exec",
      "source": "12:str_replace_editor\nstr_replace",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "19",
      "type": "exec",
      "source": "13:str_replace_editor\nview",
      "target": "14:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "13:str_replace_editor\nview",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "20",
      "type": "exec",
      "source": "14:str_replace_editor\nview",
      "target": "15:str_replace_editor\nview",
      "key": 0
    },
    {
      "type": "hier",
      "source": "14:str_replace_editor\nview",
      "target": "15:str_replace_editor\nview",
      "key": 1
    },
    {
      "type": "hier",
      "source": "14:str_replace_editor\nview",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "21",
      "type": "exec",
      "source": "15:str_replace_editor\nview",
      "target": "16:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "22",
      "type": "exec",
      "source": "16:str_replace_editor\nview",
      "target": "17:str_replace_editor\nview",
      "key": 0
    },
    {
      "label": "23",
      "type": "exec",
      "source": "17:str_replace_editor\nview",
      "target": "18:str_replace_editor\nstr_replace",
      "key": 0
    },
    {
      "label": "24",
      "type": "exec",
      "source": "18:str_replace_editor\nstr_replace",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "26",
      "type": "exec",
      "source": "19:empty action",
      "target": "20:submit",
      "key": 0
    },
    {
      "label": "27",
      "type": "exec",
      "source": "20:submit",
      "target": "3:cd",
      "key": 0
    },
    {
      "label": "28",
      "type": "exec",
      "source": "21:rm",
      "target": "20:submit",
      "key": 0
    }
  ]
}