tools:
  structural_searcher:
    signature: |
      structural_searcher <command> <target> [<file_path>]
    docstring: >
      Structure-aware code search tool for navigating Python projects.

      Available commands:
        * `search_entity`: Search the repository for a class/function/method by name or qualified name (e.g. `MyClass`, `MyClass.method`, `some_function`).
        * `find_code`: Search the repository for functions/methods that contain the given code snippet.
        * `search_entity_in_file`: Same as `search_entity`, but scoped to a specific file.
        * `find_code_in_file`: Same as `find_code`, but scoped to a specific file.

      Usage examples:
        - Find class or method across the project:
            structural_searcher search_entity DataArray.quantile

        - Find class or method in a specific file:
            structural_searcher search_entity_in_file DataArray.quantile --file_path xarray/core/dataarray.py

        - Search by code snippet across the repo:
            structural_searcher find_code "if keep_attrs:"

        - Search by code snippet in a specific file:
            structural_searcher find_code_in_file "def transpose" --file_path xarray/core/dataarray.py

    arguments:
      - name: command
        type: string
        description: "The command to execute. One of: `search_entity`, `find_code`, `search_entity_in_file`, `find_code_in_file`."
        required: true
        enum: ["search_entity", "find_code", "search_entity_in_file", "find_code_in_file"]
      - name: target
        type: string
        description: >
          For `search_entity*`: the name of the entity to search for (e.g. `MyClass`, `MyClass.method`, `some_function`).
          For `find_code*`: the code snippet to locate.
        required: true
      - name: file_path
        type: string
        description: "The path to the Python file (required for `*_in_file` commands)."
        required: false
        argument_format: "--file_path {{value}}"
state_command: "_state_anthropic"